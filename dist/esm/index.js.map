{"version":3,"sources":["../../node_modules/requires-port/index.js","../../node_modules/querystringify/index.js","../../node_modules/url-parse/index.js","../../src/ops/AdminOps.ts","../../src/api/AuthenticateApi.ts","../../src/shared/Constants.ts","../../src/utils/ForgeRockUtils.ts","../../src/api/BaseApi.ts","../../src/ext/axios-curlirize/lib/CurlHelper.ts","../../src/ext/axios-curlirize/curlirize.ts","../../src/utils/JsonUtils.ts","../../package.json","../../src/shared/Version.ts","../../src/shared/State.ts","../../src/utils/Console.ts","../../src/utils/SetupPollyForFrodoLib.ts","../../node_modules/@pollyjs/utils/src/constants/modes.js","../../node_modules/@pollyjs/utils/src/constants/actions.js","../../node_modules/@pollyjs/utils/src/constants/http-methods.js","../../node_modules/@pollyjs/utils/src/constants/http-status-codes.js","../../node_modules/@pollyjs/utils/src/constants/expiry-strategies.js","../../node_modules/@pollyjs/utils/src/utils/polly-error.js","../../node_modules/@pollyjs/utils/src/utils/assert.js","../../node_modules/core-js/library/modules/_global.js","../../node_modules/core-js/library/modules/_core.js","../../node_modules/core-js/library/modules/_a-function.js","../../node_modules/core-js/library/modules/_ctx.js","../../node_modules/core-js/library/modules/_is-object.js","../../node_modules/core-js/library/modules/_an-object.js","../../node_modules/core-js/library/modules/_fails.js","../../node_modules/core-js/library/modules/_descriptors.js","../../node_modules/core-js/library/modules/_dom-create.js","../../node_modules/core-js/library/modules/_ie8-dom-define.js","../../node_modules/core-js/library/modules/_to-primitive.js","../../node_modules/core-js/library/modules/_object-dp.js","../../node_modules/core-js/library/modules/_property-desc.js","../../node_modules/core-js/library/modules/_hide.js","../../node_modules/core-js/library/modules/_has.js","../../node_modules/core-js/library/modules/_export.js","../../node_modules/core-js/library/modules/_defined.js","../../node_modules/core-js/library/modules/_string-ws.js","../../node_modules/core-js/library/modules/_string-trim.js","../../node_modules/core-js/library/modules/_parse-int.js","../../node_modules/core-js/library/modules/es6.parse-int.js","../../node_modules/core-js/library/fn/parse-int.js","../../node_modules/@babel/runtime-corejs2/core-js/parse-int.js","../../node_modules/core-js/library/modules/_to-integer.js","../../node_modules/core-js/library/modules/_string-at.js","../../node_modules/core-js/library/modules/_library.js","../../node_modules/core-js/library/modules/_redefine.js","../../node_modules/core-js/library/modules/_iterators.js","../../node_modules/core-js/library/modules/_cof.js","../../node_modules/core-js/library/modules/_iobject.js","../../node_modules/core-js/library/modules/_to-iobject.js","../../node_modules/core-js/library/modules/_to-length.js","../../node_modules/core-js/library/modules/_to-absolute-index.js","../../node_modules/core-js/library/modules/_array-includes.js","../../node_modules/core-js/library/modules/_shared.js","../../node_modules/core-js/library/modules/_uid.js","../../node_modules/core-js/library/modules/_shared-key.js","../../node_modules/core-js/library/modules/_object-keys-internal.js","../../node_modules/core-js/library/modules/_enum-bug-keys.js","../../node_modules/core-js/library/modules/_object-keys.js","../../node_modules/core-js/library/modules/_object-dps.js","../../node_modules/core-js/library/modules/_html.js","../../node_modules/core-js/library/modules/_object-create.js","../../node_modules/core-js/library/modules/_wks.js","../../node_modules/core-js/library/modules/_set-to-string-tag.js","../../node_modules/core-js/library/modules/_iter-create.js","../../node_modules/core-js/library/modules/_to-object.js","../../node_modules/core-js/library/modules/_object-gpo.js","../../node_modules/core-js/library/modules/_iter-define.js","../../node_modules/core-js/library/modules/es6.string.iterator.js","../../node_modules/core-js/library/modules/_iter-step.js","../../node_modules/core-js/library/modules/es6.array.iterator.js","../../node_modules/core-js/library/modules/web.dom.iterable.js","../../node_modules/core-js/library/modules/_classof.js","../../node_modules/core-js/library/modules/_an-instance.js","../../node_modules/core-js/library/modules/_iter-call.js","../../node_modules/core-js/library/modules/_is-array-iter.js","../../node_modules/core-js/library/modules/core.get-iterator-method.js","../../node_modules/core-js/library/modules/_for-of.js","../../node_modules/core-js/library/modules/_species-constructor.js","../../node_modules/core-js/library/modules/_invoke.js","../../node_modules/core-js/library/modules/_task.js","../../node_modules/core-js/library/modules/_microtask.js","../../node_modules/core-js/library/modules/_new-promise-capability.js","../../node_modules/core-js/library/modules/_perform.js","../../node_modules/core-js/library/modules/_user-agent.js","../../node_modules/core-js/library/modules/_promise-resolve.js","../../node_modules/core-js/library/modules/_redefine-all.js","../../node_modules/core-js/library/modules/_set-species.js","../../node_modules/core-js/library/modules/_iter-detect.js","../../node_modules/core-js/library/modules/es6.promise.js","../../node_modules/core-js/library/modules/es7.promise.finally.js","../../node_modules/core-js/library/modules/es7.promise.try.js","../../node_modules/core-js/library/fn/promise.js","../../node_modules/@babel/runtime-corejs2/core-js/promise.js","../../node_modules/@pollyjs/utils/src/utils/timeout.js","../../node_modules/@pollyjs/utils/src/utils/timestamp.js","../../node_modules/core-js/library/modules/_object-sap.js","../../node_modules/core-js/library/modules/es6.object.keys.js","../../node_modules/core-js/library/fn/object/keys.js","../../node_modules/@babel/runtime-corejs2/core-js/object/keys.js","../../node_modules/core-js/library/modules/_meta.js","../../node_modules/core-js/library/modules/_wks-ext.js","../../node_modules/core-js/library/modules/_wks-define.js","../../node_modules/core-js/library/modules/_object-gops.js","../../node_modules/core-js/library/modules/_object-pie.js","../../node_modules/core-js/library/modules/_enum-keys.js","../../node_modules/core-js/library/modules/_is-array.js","../../node_modules/core-js/library/modules/_object-gopn.js","../../node_modules/core-js/library/modules/_object-gopn-ext.js","../../node_modules/core-js/library/modules/_object-gopd.js","../../node_modules/core-js/library/modules/es6.symbol.js","../../node_modules/core-js/library/fn/object/get-own-property-symbols.js","../../node_modules/@babel/runtime-corejs2/core-js/object/get-own-property-symbols.js","../../node_modules/core-js/library/modules/es6.object.get-own-property-descriptor.js","../../node_modules/core-js/library/fn/object/get-own-property-descriptor.js","../../node_modules/@babel/runtime-corejs2/core-js/object/get-own-property-descriptor.js","../../node_modules/core-js/library/modules/_own-keys.js","../../node_modules/core-js/library/modules/_create-property.js","../../node_modules/core-js/library/modules/es7.object.get-own-property-descriptors.js","../../node_modules/core-js/library/fn/object/get-own-property-descriptors.js","../../node_modules/@babel/runtime-corejs2/core-js/object/get-own-property-descriptors.js","../../node_modules/core-js/library/modules/es6.object.define-properties.js","../../node_modules/core-js/library/fn/object/define-properties.js","../../node_modules/@babel/runtime-corejs2/core-js/object/define-properties.js","../../node_modules/core-js/library/modules/es6.object.define-property.js","../../node_modules/core-js/library/fn/object/define-property.js","../../node_modules/@babel/runtime-corejs2/core-js/object/define-property.js","../../node_modules/@babel/runtime-corejs2/helpers/defineProperty.js","../../node_modules/core-js/library/modules/es7.symbol.async-iterator.js","../../node_modules/core-js/library/modules/es7.symbol.observable.js","../../node_modules/core-js/library/fn/symbol/index.js","../../node_modules/@babel/runtime-corejs2/core-js/symbol.js","../../node_modules/@pollyjs/utils/src/utils/url.js","../../node_modules/@pollyjs/utils/src/utils/build-url.js","../../node_modules/@pollyjs/utils/src/utils/serializers/blob.js","../../node_modules/@pollyjs/utils/src/utils/serializers/form-data.js","../../node_modules/core-js/library/modules/es6.array.is-array.js","../../node_modules/core-js/library/fn/array/is-array.js","../../node_modules/@babel/runtime-corejs2/core-js/array/is-array.js","../../node_modules/@pollyjs/utils/src/utils/serializers/buffer.js","../../node_modules/@pollyjs/utils/src/utils/serializers/index.js","../../node_modules/@pollyjs/utils/src/utils/is-buffer-utf8-representable.js","../../node_modules/@pollyjs/utils/src/utils/clone-arraybuffer.js","../../src/utils/Base64Utils.ts","../../src/api/cloud/SecretsApi.ts","../../src/api/IdmConfigApi.ts","../../src/api/OAuth2OIDCApi.ts","../../src/api/OAuth2ClientApi.ts","../../src/utils/ExportImportUtils.ts","../../src/ops/FrodoError.ts","../../src/api/OAuth2ProviderApi.ts","../../src/ops/OAuth2ProviderOps.ts","../../src/ops/ScriptOps.ts","../../src/api/ScriptApi.ts","../../src/utils/ScriptValidationUtils.ts","../../src/ops/OAuth2ClientOps.ts","../../src/ops/JoseOps.ts","../../src/ops/OAuth2OidcOps.ts","../../src/api/OAuth2TrustedJwtIssuerApi.ts","../../src/ops/OAuth2TrustedJwtIssuerOps.ts","../../src/api/ManagedObjectApi.ts","../../src/ops/OrganizationOps.ts","../../src/ops/templates/cloud/GenericExtensionAttributesTemplate.json","../../src/ops/templates/OAuth2ClientTemplate.json","../../src/ops/templates/OAuth2TrustedJwtIssuerTemplate.json","../../src/api/AgentApi.ts","../../src/ops/AgentOps.ts","../../src/api/CirclesOfTrustApi.ts","../../src/api/Saml2Api.ts","../../src/ops/Saml2Ops.ts","../../src/ops/CirclesOfTrustOps.ts","../../src/api/IdmSystemApi.ts","../../src/ops/IdmSystemOps.ts","../../src/ops/IdmConfigOps.ts","../../src/ops/MappingOps.ts","../../src/ops/ConnectorOps.ts","../../src/ops/ManagedObjectOps.ts","../../src/ops/ApplicationOps.ts","../../src/ops/AuthenticateOps.ts","../../src/api/ServerInfoApi.ts","../../src/api/cloud/FeatureApi.ts","../../src/ops/cloud/FeatureOps.ts","../../src/ops/cloud/ServiceAccountOps.ts","../../src/ops/ConnectionProfileOps.ts","../../src/utils/DataProtection.ts","../../src/api/SessionApi.ts","../../src/ops/SessionOps.ts","../../src/ops/TokenCacheOps.ts","../../src/api/AuthenticationSettingsApi.ts","../../src/ops/AuthenticationSettingsOps.ts","../../src/api/cloud/AdminFederationProvidersApi.ts","../../src/ops/cloud/AdminFederationOps.ts","../../src/api/cloud/LogApi.ts","../../src/ops/cloud/LogOps.ts","../../src/ops/cloud/SecretsOps.ts","../../src/api/cloud/StartupApi.ts","../../src/api/cloud/VariablesApi.ts","../../src/ops/cloud/VariablesOps.ts","../../src/ops/cloud/StartupOps.ts","../../src/ops/EmailTemplateOps.ts","../../src/api/SocialIdentityProvidersApi.ts","../../src/ops/IdpOps.ts","../../src/ops/JourneyOps.ts","../../src/api/NodeApi.ts","../../src/api/TreeApi.ts","../../src/ops/NodeOps.ts","../../src/ops/ThemeOps.ts","../../src/api/PoliciesApi.ts","../../src/api/ResourceTypesApi.ts","../../src/api/PolicySetApi.ts","../../src/ops/PolicySetOps.ts","../../src/ops/ResourceTypeOps.ts","../../src/ops/PolicyOps.ts","../../src/api/ServiceApi.ts","../../src/ops/ServiceOps.ts","../../src/ops/ConfigOps.ts","../../src/api/cloud/EnvInfoApi.ts","../../src/ops/InfoOps.ts","../../src/api/RealmApi.ts","../../src/ops/RealmOps.ts","../../src/api/ReconApi.ts","../../src/ops/ReconOps.ts","../../src/ops/VersionUtils.ts","../../src/lib/FrodoLib.ts"],"sourcesContent":["'use strict';\n\n/**\n * Check if we're required to add a port number.\n *\n * @see https://url.spec.whatwg.org/#default-port\n * @param {Number|String} port Port number we need to check\n * @param {String} protocol Protocol we need to check against.\n * @returns {Boolean} Is it a default port for the given protocol\n * @api private\n */\nmodule.exports = function required(port, protocol) {\n  protocol = protocol.split(':')[0];\n  port = +port;\n\n  if (!port) return false;\n\n  switch (protocol) {\n    case 'http':\n    case 'ws':\n    return port !== 80;\n\n    case 'https':\n    case 'wss':\n    return port !== 443;\n\n    case 'ftp':\n    return port !== 21;\n\n    case 'gopher':\n    return port !== 70;\n\n    case 'file':\n    return false;\n  }\n\n  return port !== 0;\n};\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , undef;\n\n/**\n * Decode a URI encoded string.\n *\n * @param {String} input The URI encoded string.\n * @returns {String|Null} The decoded string.\n * @api private\n */\nfunction decode(input) {\n  try {\n    return decodeURIComponent(input.replace(/\\+/g, ' '));\n  } catch (e) {\n    return null;\n  }\n}\n\n/**\n * Attempts to encode a given input.\n *\n * @param {String} input The string that needs to be encoded.\n * @returns {String|Null} The encoded string.\n * @api private\n */\nfunction encode(input) {\n  try {\n    return encodeURIComponent(input);\n  } catch (e) {\n    return null;\n  }\n}\n\n/**\n * Simple query string parser.\n *\n * @param {String} query The query string that needs to be parsed.\n * @returns {Object}\n * @api public\n */\nfunction querystring(query) {\n  var parser = /([^=?#&]+)=?([^&]*)/g\n    , result = {}\n    , part;\n\n  while (part = parser.exec(query)) {\n    var key = decode(part[1])\n      , value = decode(part[2]);\n\n    //\n    // Prevent overriding of existing properties. This ensures that build-in\n    // methods like `toString` or __proto__ are not overriden by malicious\n    // querystrings.\n    //\n    // In the case if failed decoding, we want to omit the key/value pairs\n    // from the result.\n    //\n    if (key === null || value === null || key in result) continue;\n    result[key] = value;\n  }\n\n  return result;\n}\n\n/**\n * Transform a query string to an object.\n *\n * @param {Object} obj Object that should be transformed.\n * @param {String} prefix Optional prefix.\n * @returns {String}\n * @api public\n */\nfunction querystringify(obj, prefix) {\n  prefix = prefix || '';\n\n  var pairs = []\n    , value\n    , key;\n\n  //\n  // Optionally prefix with a '?' if needed\n  //\n  if ('string' !== typeof prefix) prefix = '?';\n\n  for (key in obj) {\n    if (has.call(obj, key)) {\n      value = obj[key];\n\n      //\n      // Edge cases where we actually want to encode the value to an empty\n      // string instead of the stringified value.\n      //\n      if (!value && (value === null || value === undef || isNaN(value))) {\n        value = '';\n      }\n\n      key = encode(key);\n      value = encode(value);\n\n      //\n      // If we failed to encode the strings, we should bail out as we don't\n      // want to add invalid strings to the query.\n      //\n      if (key === null || value === null) continue;\n      pairs.push(key +'='+ value);\n    }\n  }\n\n  return pairs.length ? prefix + pairs.join('&') : '';\n}\n\n//\n// Expose the module.\n//\nexports.stringify = querystringify;\nexports.parse = querystring;\n","'use strict';\n\nvar required = require('requires-port')\n  , qs = require('querystringify')\n  , controlOrWhitespace = /^[\\x00-\\x20\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]+/\n  , CRHTLF = /[\\n\\r\\t]/g\n  , slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\\/\\//\n  , port = /:\\d+$/\n  , protocolre = /^([a-z][a-z0-9.+-]*:)?(\\/\\/)?([\\\\/]+)?([\\S\\s]*)/i\n  , windowsDriveLetter = /^[a-zA-Z]:/;\n\n/**\n * Remove control characters and whitespace from the beginning of a string.\n *\n * @param {Object|String} str String to trim.\n * @returns {String} A new string representing `str` stripped of control\n *     characters and whitespace from its beginning.\n * @public\n */\nfunction trimLeft(str) {\n  return (str ? str : '').toString().replace(controlOrWhitespace, '');\n}\n\n/**\n * These are the parse rules for the URL parser, it informs the parser\n * about:\n *\n * 0. The char it Needs to parse, if it's a string it should be done using\n *    indexOf, RegExp using exec and NaN means set as current value.\n * 1. The property we should set when parsing this value.\n * 2. Indication if it's backwards or forward parsing, when set as number it's\n *    the value of extra chars that should be split off.\n * 3. Inherit from location if non existing in the parser.\n * 4. `toLowerCase` the resulting value.\n */\nvar rules = [\n  ['#', 'hash'],                        // Extract from the back.\n  ['?', 'query'],                       // Extract from the back.\n  function sanitize(address, url) {     // Sanitize what is left of the address\n    return isSpecial(url.protocol) ? address.replace(/\\\\/g, '/') : address;\n  },\n  ['/', 'pathname'],                    // Extract from the back.\n  ['@', 'auth', 1],                     // Extract from the front.\n  [NaN, 'host', undefined, 1, 1],       // Set left over value.\n  [/:(\\d*)$/, 'port', undefined, 1],    // RegExp the back.\n  [NaN, 'hostname', undefined, 1, 1]    // Set left over.\n];\n\n/**\n * These properties should not be copied or inherited from. This is only needed\n * for all non blob URL's as a blob URL does not include a hash, only the\n * origin.\n *\n * @type {Object}\n * @private\n */\nvar ignore = { hash: 1, query: 1 };\n\n/**\n * The location object differs when your code is loaded through a normal page,\n * Worker or through a worker using a blob. And with the blobble begins the\n * trouble as the location object will contain the URL of the blob, not the\n * location of the page where our code is loaded in. The actual origin is\n * encoded in the `pathname` so we can thankfully generate a good \"default\"\n * location from it so we can generate proper relative URL's again.\n *\n * @param {Object|String} loc Optional default location object.\n * @returns {Object} lolcation object.\n * @public\n */\nfunction lolcation(loc) {\n  var globalVar;\n\n  if (typeof window !== 'undefined') globalVar = window;\n  else if (typeof global !== 'undefined') globalVar = global;\n  else if (typeof self !== 'undefined') globalVar = self;\n  else globalVar = {};\n\n  var location = globalVar.location || {};\n  loc = loc || location;\n\n  var finaldestination = {}\n    , type = typeof loc\n    , key;\n\n  if ('blob:' === loc.protocol) {\n    finaldestination = new Url(unescape(loc.pathname), {});\n  } else if ('string' === type) {\n    finaldestination = new Url(loc, {});\n    for (key in ignore) delete finaldestination[key];\n  } else if ('object' === type) {\n    for (key in loc) {\n      if (key in ignore) continue;\n      finaldestination[key] = loc[key];\n    }\n\n    if (finaldestination.slashes === undefined) {\n      finaldestination.slashes = slashes.test(loc.href);\n    }\n  }\n\n  return finaldestination;\n}\n\n/**\n * Check whether a protocol scheme is special.\n *\n * @param {String} The protocol scheme of the URL\n * @return {Boolean} `true` if the protocol scheme is special, else `false`\n * @private\n */\nfunction isSpecial(scheme) {\n  return (\n    scheme === 'file:' ||\n    scheme === 'ftp:' ||\n    scheme === 'http:' ||\n    scheme === 'https:' ||\n    scheme === 'ws:' ||\n    scheme === 'wss:'\n  );\n}\n\n/**\n * @typedef ProtocolExtract\n * @type Object\n * @property {String} protocol Protocol matched in the URL, in lowercase.\n * @property {Boolean} slashes `true` if protocol is followed by \"//\", else `false`.\n * @property {String} rest Rest of the URL that is not part of the protocol.\n */\n\n/**\n * Extract protocol information from a URL with/without double slash (\"//\").\n *\n * @param {String} address URL we want to extract from.\n * @param {Object} location\n * @return {ProtocolExtract} Extracted information.\n * @private\n */\nfunction extractProtocol(address, location) {\n  address = trimLeft(address);\n  address = address.replace(CRHTLF, '');\n  location = location || {};\n\n  var match = protocolre.exec(address);\n  var protocol = match[1] ? match[1].toLowerCase() : '';\n  var forwardSlashes = !!match[2];\n  var otherSlashes = !!match[3];\n  var slashesCount = 0;\n  var rest;\n\n  if (forwardSlashes) {\n    if (otherSlashes) {\n      rest = match[2] + match[3] + match[4];\n      slashesCount = match[2].length + match[3].length;\n    } else {\n      rest = match[2] + match[4];\n      slashesCount = match[2].length;\n    }\n  } else {\n    if (otherSlashes) {\n      rest = match[3] + match[4];\n      slashesCount = match[3].length;\n    } else {\n      rest = match[4]\n    }\n  }\n\n  if (protocol === 'file:') {\n    if (slashesCount >= 2) {\n      rest = rest.slice(2);\n    }\n  } else if (isSpecial(protocol)) {\n    rest = match[4];\n  } else if (protocol) {\n    if (forwardSlashes) {\n      rest = rest.slice(2);\n    }\n  } else if (slashesCount >= 2 && isSpecial(location.protocol)) {\n    rest = match[4];\n  }\n\n  return {\n    protocol: protocol,\n    slashes: forwardSlashes || isSpecial(protocol),\n    slashesCount: slashesCount,\n    rest: rest\n  };\n}\n\n/**\n * Resolve a relative URL pathname against a base URL pathname.\n *\n * @param {String} relative Pathname of the relative URL.\n * @param {String} base Pathname of the base URL.\n * @return {String} Resolved pathname.\n * @private\n */\nfunction resolve(relative, base) {\n  if (relative === '') return base;\n\n  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))\n    , i = path.length\n    , last = path[i - 1]\n    , unshift = false\n    , up = 0;\n\n  while (i--) {\n    if (path[i] === '.') {\n      path.splice(i, 1);\n    } else if (path[i] === '..') {\n      path.splice(i, 1);\n      up++;\n    } else if (up) {\n      if (i === 0) unshift = true;\n      path.splice(i, 1);\n      up--;\n    }\n  }\n\n  if (unshift) path.unshift('');\n  if (last === '.' || last === '..') path.push('');\n\n  return path.join('/');\n}\n\n/**\n * The actual URL instance. Instead of returning an object we've opted-in to\n * create an actual constructor as it's much more memory efficient and\n * faster and it pleases my OCD.\n *\n * It is worth noting that we should not use `URL` as class name to prevent\n * clashes with the global URL instance that got introduced in browsers.\n *\n * @constructor\n * @param {String} address URL we want to parse.\n * @param {Object|String} [location] Location defaults for relative paths.\n * @param {Boolean|Function} [parser] Parser for the query string.\n * @private\n */\nfunction Url(address, location, parser) {\n  address = trimLeft(address);\n  address = address.replace(CRHTLF, '');\n\n  if (!(this instanceof Url)) {\n    return new Url(address, location, parser);\n  }\n\n  var relative, extracted, parse, instruction, index, key\n    , instructions = rules.slice()\n    , type = typeof location\n    , url = this\n    , i = 0;\n\n  //\n  // The following if statements allows this module two have compatibility with\n  // 2 different API:\n  //\n  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments\n  //    where the boolean indicates that the query string should also be parsed.\n  //\n  // 2. The `URL` interface of the browser which accepts a URL, object as\n  //    arguments. The supplied object will be used as default values / fall-back\n  //    for relative paths.\n  //\n  if ('object' !== type && 'string' !== type) {\n    parser = location;\n    location = null;\n  }\n\n  if (parser && 'function' !== typeof parser) parser = qs.parse;\n\n  location = lolcation(location);\n\n  //\n  // Extract protocol information before running the instructions.\n  //\n  extracted = extractProtocol(address || '', location);\n  relative = !extracted.protocol && !extracted.slashes;\n  url.slashes = extracted.slashes || relative && location.slashes;\n  url.protocol = extracted.protocol || location.protocol || '';\n  address = extracted.rest;\n\n  //\n  // When the authority component is absent the URL starts with a path\n  // component.\n  //\n  if (\n    extracted.protocol === 'file:' && (\n      extracted.slashesCount !== 2 || windowsDriveLetter.test(address)) ||\n    (!extracted.slashes &&\n      (extracted.protocol ||\n        extracted.slashesCount < 2 ||\n        !isSpecial(url.protocol)))\n  ) {\n    instructions[3] = [/(.*)/, 'pathname'];\n  }\n\n  for (; i < instructions.length; i++) {\n    instruction = instructions[i];\n\n    if (typeof instruction === 'function') {\n      address = instruction(address, url);\n      continue;\n    }\n\n    parse = instruction[0];\n    key = instruction[1];\n\n    if (parse !== parse) {\n      url[key] = address;\n    } else if ('string' === typeof parse) {\n      index = parse === '@'\n        ? address.lastIndexOf(parse)\n        : address.indexOf(parse);\n\n      if (~index) {\n        if ('number' === typeof instruction[2]) {\n          url[key] = address.slice(0, index);\n          address = address.slice(index + instruction[2]);\n        } else {\n          url[key] = address.slice(index);\n          address = address.slice(0, index);\n        }\n      }\n    } else if ((index = parse.exec(address))) {\n      url[key] = index[1];\n      address = address.slice(0, index.index);\n    }\n\n    url[key] = url[key] || (\n      relative && instruction[3] ? location[key] || '' : ''\n    );\n\n    //\n    // Hostname, host and protocol should be lowercased so they can be used to\n    // create a proper `origin`.\n    //\n    if (instruction[4]) url[key] = url[key].toLowerCase();\n  }\n\n  //\n  // Also parse the supplied query string in to an object. If we're supplied\n  // with a custom parser as function use that instead of the default build-in\n  // parser.\n  //\n  if (parser) url.query = parser(url.query);\n\n  //\n  // If the URL is relative, resolve the pathname against the base URL.\n  //\n  if (\n      relative\n    && location.slashes\n    && url.pathname.charAt(0) !== '/'\n    && (url.pathname !== '' || location.pathname !== '')\n  ) {\n    url.pathname = resolve(url.pathname, location.pathname);\n  }\n\n  //\n  // Default to a / for pathname if none exists. This normalizes the URL\n  // to always have a /\n  //\n  if (url.pathname.charAt(0) !== '/' && isSpecial(url.protocol)) {\n    url.pathname = '/' + url.pathname;\n  }\n\n  //\n  // We should not add port numbers if they are already the default port number\n  // for a given protocol. As the host also contains the port number we're going\n  // override it with the hostname which contains no port number.\n  //\n  if (!required(url.port, url.protocol)) {\n    url.host = url.hostname;\n    url.port = '';\n  }\n\n  //\n  // Parse down the `auth` for the username and password.\n  //\n  url.username = url.password = '';\n\n  if (url.auth) {\n    index = url.auth.indexOf(':');\n\n    if (~index) {\n      url.username = url.auth.slice(0, index);\n      url.username = encodeURIComponent(decodeURIComponent(url.username));\n\n      url.password = url.auth.slice(index + 1);\n      url.password = encodeURIComponent(decodeURIComponent(url.password))\n    } else {\n      url.username = encodeURIComponent(decodeURIComponent(url.auth));\n    }\n\n    url.auth = url.password ? url.username +':'+ url.password : url.username;\n  }\n\n  url.origin = url.protocol !== 'file:' && isSpecial(url.protocol) && url.host\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  //\n  // The href is just the compiled result.\n  //\n  url.href = url.toString();\n}\n\n/**\n * This is convenience method for changing properties in the URL instance to\n * insure that they all propagate correctly.\n *\n * @param {String} part          Property we need to adjust.\n * @param {Mixed} value          The newly assigned value.\n * @param {Boolean|Function} fn  When setting the query, it will be the function\n *                               used to parse the query.\n *                               When setting the protocol, double slash will be\n *                               removed from the final url if it is true.\n * @returns {URL} URL instance for chaining.\n * @public\n */\nfunction set(part, value, fn) {\n  var url = this;\n\n  switch (part) {\n    case 'query':\n      if ('string' === typeof value && value.length) {\n        value = (fn || qs.parse)(value);\n      }\n\n      url[part] = value;\n      break;\n\n    case 'port':\n      url[part] = value;\n\n      if (!required(value, url.protocol)) {\n        url.host = url.hostname;\n        url[part] = '';\n      } else if (value) {\n        url.host = url.hostname +':'+ value;\n      }\n\n      break;\n\n    case 'hostname':\n      url[part] = value;\n\n      if (url.port) value += ':'+ url.port;\n      url.host = value;\n      break;\n\n    case 'host':\n      url[part] = value;\n\n      if (port.test(value)) {\n        value = value.split(':');\n        url.port = value.pop();\n        url.hostname = value.join(':');\n      } else {\n        url.hostname = value;\n        url.port = '';\n      }\n\n      break;\n\n    case 'protocol':\n      url.protocol = value.toLowerCase();\n      url.slashes = !fn;\n      break;\n\n    case 'pathname':\n    case 'hash':\n      if (value) {\n        var char = part === 'pathname' ? '/' : '#';\n        url[part] = value.charAt(0) !== char ? char + value : value;\n      } else {\n        url[part] = value;\n      }\n      break;\n\n    case 'username':\n    case 'password':\n      url[part] = encodeURIComponent(value);\n      break;\n\n    case 'auth':\n      var index = value.indexOf(':');\n\n      if (~index) {\n        url.username = value.slice(0, index);\n        url.username = encodeURIComponent(decodeURIComponent(url.username));\n\n        url.password = value.slice(index + 1);\n        url.password = encodeURIComponent(decodeURIComponent(url.password));\n      } else {\n        url.username = encodeURIComponent(decodeURIComponent(value));\n      }\n  }\n\n  for (var i = 0; i < rules.length; i++) {\n    var ins = rules[i];\n\n    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();\n  }\n\n  url.auth = url.password ? url.username +':'+ url.password : url.username;\n\n  url.origin = url.protocol !== 'file:' && isSpecial(url.protocol) && url.host\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  url.href = url.toString();\n\n  return url;\n}\n\n/**\n * Transform the properties back in to a valid and full URL string.\n *\n * @param {Function} stringify Optional query stringify function.\n * @returns {String} Compiled version of the URL.\n * @public\n */\nfunction toString(stringify) {\n  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;\n\n  var query\n    , url = this\n    , host = url.host\n    , protocol = url.protocol;\n\n  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';\n\n  var result =\n    protocol +\n    ((url.protocol && url.slashes) || isSpecial(url.protocol) ? '//' : '');\n\n  if (url.username) {\n    result += url.username;\n    if (url.password) result += ':'+ url.password;\n    result += '@';\n  } else if (url.password) {\n    result += ':'+ url.password;\n    result += '@';\n  } else if (\n    url.protocol !== 'file:' &&\n    isSpecial(url.protocol) &&\n    !host &&\n    url.pathname !== '/'\n  ) {\n    //\n    // Add back the empty userinfo, otherwise the original invalid URL\n    // might be transformed into a valid one with `url.pathname` as host.\n    //\n    result += '@';\n  }\n\n  //\n  // Trailing colon is removed from `url.host` when it is parsed. If it still\n  // ends with a colon, then add back the trailing colon that was removed. This\n  // prevents an invalid URL from being transformed into a valid one.\n  //\n  if (host[host.length - 1] === ':' || (port.test(url.hostname) && !url.port)) {\n    host += ':';\n  }\n\n  result += host + url.pathname;\n\n  query = 'object' === typeof url.query ? stringify(url.query) : url.query;\n  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;\n\n  if (url.hash) result += url.hash;\n\n  return result;\n}\n\nUrl.prototype = { set: set, toString: toString };\n\n//\n// Expose the URL parser and some additional properties that might be useful for\n// others or testing.\n//\nUrl.extractProtocol = extractProtocol;\nUrl.location = lolcation;\nUrl.trimLeft = trimLeft;\nUrl.qs = qs;\n\nmodule.exports = Url;\n","import fs from 'fs';\nimport path from 'path';\nimport { URL } from 'url';\nimport util from 'util';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { type Readable, Writable } from '../api/ApiTypes';\nimport { step } from '../api/AuthenticateApi';\nimport { putSecret } from '../api/cloud/SecretsApi';\nimport { getConfigEntity, putConfigEntity } from '../api/IdmConfigApi';\nimport { type OAuth2ClientSkeleton } from '../api/OAuth2ClientApi';\nimport {\n  AccessTokenResponseType,\n  clientCredentialsGrant,\n} from '../api/OAuth2OIDCApi';\nimport { OAuth2TrustedJwtIssuerSkeleton } from '../api/OAuth2TrustedJwtIssuerApi';\nimport {\n  readOAuth2Client,\n  readOAuth2Clients,\n  updateOAuth2Client,\n} from '../ops/OAuth2ClientOps';\nimport { readOAuth2Provider } from '../ops/OAuth2ProviderOps';\nimport { State } from '../shared/State';\nimport { printMessage } from '../utils/Console';\nimport {\n  getCurrentRealmManagedUser,\n  getCurrentRealmPath,\n} from '../utils/ForgeRockUtils';\nimport { cloneDeep, get, isEqualJson, stringify } from '../utils/JsonUtils';\nimport { FrodoError } from './FrodoError';\nimport {\n  createJwkRsa,\n  createJwks,\n  createSignedJwtToken,\n  getJwkRsaPublic,\n  JwkRsa,\n  JwksInterface,\n} from './JoseOps';\nimport { accessTokenRfc7523AuthZGrant } from './OAuth2OidcOps';\nimport { updateOAuth2TrustedJwtIssuer } from './OAuth2TrustedJwtIssuerOps';\nimport { getRealmManagedOrganization } from './OrganizationOps';\nimport GENERIC_EXTENSION_ATTRIBUTES from './templates/cloud/GenericExtensionAttributesTemplate.json'\nimport oauthClient from './templates/OAuth2ClientTemplate.json';\nimport oauth2Issuer from './templates/OAuth2TrustedJwtIssuerTemplate.json';\n\nconst OAUTH2_CLIENT = oauthClient as OAuth2ClientSkeleton;\nconst OAUTH2_ISSUER = oauth2Issuer as OAuth2TrustedJwtIssuerSkeleton;\n\nexport type Admin = {\n  generateRfc7523AuthZGrantArtefacts(\n    clientId: string,\n    iss: string,\n    jwk?: JwkRsa,\n    sub?: string,\n    scope?: string[],\n    options?: { save: boolean }\n  ): Promise<{\n    jwk: JwkRsa;\n    jwks: JwksInterface;\n    client: OAuth2ClientSkeleton;\n    issuer: OAuth2TrustedJwtIssuerSkeleton;\n  }>;\n  executeRfc7523AuthZGrantFlow(\n    clientId: string,\n    iss: string,\n    jwk: JwkRsa,\n    sub: string,\n    scope?: string[]\n  ): Promise<AccessTokenResponseType>;\n  generateRfc7523ClientAuthNArtefacts(\n    clientId: string,\n    aud?: string,\n    jwk?: JwkRsa,\n    options?: { save: boolean }\n  ): Promise<{\n    jwk: JwkRsa;\n    jwks: JwksInterface;\n    jwt: any;\n    client: OAuth2ClientSkeleton;\n  }>;\n  trainAA(\n    apiKey: string,\n    apiSecret: string,\n    customUsernames?: string[],\n    customUserAgents?: string[],\n    customIPs?: string[],\n    loginsPerUser?: number,\n    service?: string\n  ): Promise<void>;\n\n  // deprecated\n\n  /**\n   * @deprecated Deprecated since v2.0.0. This function may be removed in future versions. Similar functionality has been added to the frodo-cli code base.\n   * @group Deprecated\n   */\n  listOAuth2CustomClients(): Promise<string[]>;\n  /**\n   * @deprecated Deprecated since v2.0.0. This function may be removed in future versions. Similar functionality has been added to the frodo-cli code base.\n   * @group Deprecated\n   */\n  listOAuth2AdminClients(): Promise<string[]>;\n  /**\n   * @deprecated Deprecated since v2.0.0. This function may be removed in future versions. Similar functionality has been added to the frodo-cli code base.\n   * @group Deprecated\n   */\n  listNonOAuth2AdminStaticUserMappings(\n    showProtected: boolean\n  ): Promise<string[]>;\n  /**\n   * @deprecated Deprecated since v2.0.0. This function may be removed in future versions. Similar functionality has been added to the frodo-cli code base.\n   * @group Deprecated\n   */\n  addAutoIdStaticUserMapping(): Promise<void>;\n  /**\n   * @deprecated Deprecated since v2.0.0. This function may be removed in future versions. Similar functionality has been added to the frodo-cli code base.\n   * @group Deprecated\n   */\n  grantOAuth2ClientAdminPrivileges(clientId: string): Promise<void>;\n  /**\n   * @deprecated Deprecated since v2.0.0. This function may be removed in future versions. Similar functionality has been added to the frodo-cli code base.\n   * @group Deprecated\n   */\n  revokeOAuth2ClientAdminPrivileges(clientId: string): Promise<void>;\n  /**\n   * @deprecated Deprecated since v2.0.0. This function may be removed in future versions. Similar functionality has been added to the frodo-cli code base.\n   * @group Deprecated\n   */\n  createOAuth2ClientWithAdminPrivileges(\n    clientId: string,\n    clientSecret: string\n  ): Promise<void>;\n  /**\n   * @deprecated Deprecated since v2.0.0. This function may be removed in future versions. Similar functionality has been added to the frodo-cli code base.\n   * @group Deprecated\n   */\n  createLongLivedToken(\n    clientId: string,\n    clientSecret: string,\n    scope: string,\n    secret: string | boolean,\n    lifetime: number\n  ): Promise<any>;\n  /**\n   * @deprecated Deprecated since v2.0.0. This function may be removed in future versions. Similar functionality has been added to the frodo-cli code base.\n   * @group Deprecated\n   */\n  removeStaticUserMapping(subject: string): Promise<void>;\n  /**\n   * @deprecated Deprecated since v2.0.0. This function may be removed in future versions. Similar functionality has been added to the frodo-cli code base.\n   * @group Deprecated\n   */\n  hideGenericExtensionAttributes(\n    includeCustomized: boolean,\n    dryRun: boolean\n  ): Promise<void>;\n  /**\n   * @deprecated Deprecated since v2.0.0. This function may be removed in future versions. Similar functionality has been added to the frodo-cli code base.\n   * @group Deprecated\n   */\n  showGenericExtensionAttributes(\n    includeCustomized: boolean,\n    dryRun: boolean\n  ): Promise<void>;\n  /**\n   * @deprecated Deprecated since v2.0.0. This function may be removed in future versions. Similar functionality has been added to the frodo-cli code base.\n   * @group Deprecated\n   */\n  repairOrgModel(\n    excludeCustomized: boolean,\n    extendPermissions: boolean,\n    dryRun: boolean\n  ): Promise<void>;\n};\n\nexport default (state: State): Admin => {\n  return {\n    async generateRfc7523AuthZGrantArtefacts(\n      clientId: string,\n      iss: string,\n      jwk: JwkRsa,\n      sub: string,\n      scope: string[] = ['fr:am:*', 'fr:idm:*', 'openid'],\n      options = { save: false }\n    ): Promise<{\n      jwk: JwkRsa;\n      jwks: JwksInterface;\n      client: OAuth2ClientSkeleton;\n      issuer: OAuth2TrustedJwtIssuerSkeleton;\n    }> {\n      return generateRfc7523AuthZGrantArtefacts({\n        clientId,\n        iss,\n        jwk,\n        sub,\n        scope,\n        options,\n        state,\n      });\n    },\n    executeRfc7523AuthZGrantFlow(\n      clientId: string,\n      iss: string,\n      jwk: JwkRsa,\n      sub: string,\n      scope: string[] = ['fr:am:*', 'fr:idm:*', 'openid']\n    ): Promise<AccessTokenResponseType> {\n      return executeRfc7523AuthZGrantFlow({\n        clientId,\n        iss,\n        jwk,\n        sub,\n        scope,\n        state,\n      });\n    },\n    async generateRfc7523ClientAuthNArtefacts(\n      clientId: string,\n      aud?: string,\n      jwk?: JwkRsa,\n      options?: { save: boolean }\n    ): Promise<{\n      jwk: JwkRsa;\n      jwks: JwksInterface;\n      jwt: any;\n      client: OAuth2ClientSkeleton;\n    }> {\n      return generateRfc7523ClientAuthNArtefacts({\n        clientId,\n        aud,\n        jwk,\n        options,\n        state,\n      });\n    },\n    async trainAA(\n      apiKey: string,\n      apiSecret: string,\n      customUsernames?: string[],\n      customUserAgents?: string[],\n      customIPs?: string[],\n      loginsPerUser?: number,\n      service?: string\n    ): Promise<void> {\n      return trainAA({\n        apiKey,\n        apiSecret,\n        customUsernames,\n        customUserAgents,\n        customIPs,\n        loginsPerUser,\n        service,\n        state,\n      });\n    },\n\n    // deprecated\n\n    async listOAuth2CustomClients(): Promise<string[]> {\n      return listOAuth2CustomClients({ state });\n    },\n    async listOAuth2AdminClients(): Promise<string[]> {\n      return listOAuth2AdminClients({ state });\n    },\n    async listNonOAuth2AdminStaticUserMappings(\n      showProtected: boolean\n    ): Promise<string[]> {\n      return listNonOAuth2AdminStaticUserMappings({\n        showProtected,\n        state,\n      });\n    },\n    async addAutoIdStaticUserMapping() {\n      return addAutoIdStaticUserMapping({ state });\n    },\n    async grantOAuth2ClientAdminPrivileges(clientId: string) {\n      return grantOAuth2ClientAdminPrivileges({ clientId, state });\n    },\n    async revokeOAuth2ClientAdminPrivileges(clientId: string) {\n      return revokeOAuth2ClientAdminPrivileges({ clientId, state });\n    },\n    async createOAuth2ClientWithAdminPrivileges(\n      clientId: string,\n      clientSecret: string\n    ) {\n      return createOAuth2ClientWithAdminPrivileges({\n        clientId,\n        clientSecret,\n        state,\n      });\n    },\n    async createLongLivedToken(\n      clientId: string,\n      clientSecret: string,\n      scope: string,\n      secret: string | boolean,\n      lifetime: number\n    ) {\n      return createLongLivedToken({\n        clientId,\n        clientSecret,\n        scope,\n        secret,\n        lifetime,\n        state,\n      });\n    },\n    async removeStaticUserMapping(subject: string) {\n      return removeStaticUserMapping({ subject, state });\n    },\n    async hideGenericExtensionAttributes(\n      includeCustomized: boolean,\n      dryRun: boolean\n    ) {\n      return hideGenericExtensionAttributes({\n        includeCustomized,\n        dryRun,\n        state,\n      });\n    },\n    async showGenericExtensionAttributes(\n      includeCustomized: boolean,\n      dryRun: boolean\n    ) {\n      return showGenericExtensionAttributes({\n        includeCustomized,\n        dryRun,\n        state,\n      });\n    },\n    async repairOrgModel(\n      excludeCustomized: boolean,\n      extendPermissions: boolean,\n      dryRun: boolean\n    ) {\n      return repairOrgModel({\n        excludeCustomized,\n        extendPermissions,\n        dryRun,\n        state,\n      });\n    },\n  };\n};\n\nconst protectedClients = ['ui', 'idm-provisioning'];\nconst protectedSubjects = ['amadmin', 'autoid-resource-server'];\n\nconst privilegedScopes = [\n  'am-introspect-all-tokens',\n  'fr:idm:*',\n  'fr:idc:esv:*',\n];\n// const privilegedUsers = ['openidm-admin'];\nconst privilegedRoles = [\n  'internal/role/openidm-authorized',\n  'internal/role/openidm-admin',\n];\n\nconst adminScopes = ['fr:idm:*', 'fr:idc:esv:*'];\nconst adminDefaultScopes = ['fr:idm:*'];\nconst adminRoles = [\n  'internal/role/openidm-authorized',\n  'internal/role/openidm-admin',\n];\nconst autoIdRoles = [\n  'internal/role/platform-provisioning',\n  'internal/role/openidm-authorized',\n  'internal/role/openidm-admin',\n];\n\n/*\n * List all oauth2 clients, which have a corresponding staticUserMapping\n * in the IDM authentication.json:\n  {\n    \"_id\": \"authentication\",\n    \"rsFilter\": {\n      ...\n      \"staticUserMapping\": [\n        {\n          \"subject\": \"someOauth2ClientID\",\n          \"localUser\": \"internal/user/openidm-admin\",\n          \"userRoles\": \"authzRoles/*\",\n          \"roles\": [\n            \"internal/role/openidm-authorized\",\n            \"internal/role/openidm-admin\"\n          ]\n        },\n        {\n          \"subject\": \"RCSClient\",\n          \"localUser\": \"internal/user/idm-provisioning\"\n        }\n      ]\n    }\n  }\n */\nexport async function listOAuth2CustomClients({\n  state,\n}: {\n  state: State;\n}): Promise<string[]> {\n  try {\n    const clients = await readOAuth2Clients({ state });\n    const clientIds = clients\n      .map((client) => client._id)\n      .filter((client) => !protectedClients.includes(client));\n    const authentication = await getConfigEntity({\n      entityId: 'authentication',\n      state,\n    });\n    const subjects = authentication.rsFilter.staticUserMapping\n      .map((mapping) => mapping.subject)\n      .filter((subject) => !protectedSubjects.includes(subject));\n    const adminClients = subjects.filter((subject) =>\n      clientIds.includes(subject)\n    );\n    return adminClients;\n  } catch (error) {\n    throw new FrodoError(`Error listing custom OAuth2 clients`, error);\n  }\n}\n\n/*\n * List all oauth2 clients, which have the fr:idm:* scope and a \n * corresponding staticUserMapping in the IDM authentication.json\n * and are assigned admin privileges:\n  {\n    \"_id\": \"authentication\",\n    \"rsFilter\": {\n      ...\n      \"staticUserMapping\": [\n        {\n          \"subject\": \"someOauth2ClientID\",\n          \"localUser\": \"internal/user/openidm-admin\",\n          \"userRoles\": \"authzRoles/*\",\n          \"roles\": [\n            \"internal/role/openidm-authorized\",\n            \"internal/role/openidm-admin\"\n          ]\n        }\n      ]\n    }\n  }\n */\nexport async function listOAuth2AdminClients({\n  state,\n}: {\n  state: State;\n}): Promise<string[]> {\n  try {\n    const clients = await readOAuth2Clients({ state });\n    const clientIds = clients\n      .filter((client) => {\n        // printMessage({ message: client, type: 'error', state });\n        let isPrivileged = false;\n        if (client.coreOAuth2ClientConfig.scopes) {\n          (client.coreOAuth2ClientConfig.scopes as Readable<string[]>).forEach(\n            (scope) => {\n              if (privilegedScopes.includes(scope)) {\n                isPrivileged = true;\n              }\n            }\n          );\n        }\n        return isPrivileged;\n      })\n      .map((client) => client._id)\n      .filter((clientId) => !protectedClients.includes(clientId));\n    const authentication = await getConfigEntity({\n      entityId: 'authentication',\n      state,\n    });\n    const subjects = authentication.rsFilter.staticUserMapping\n      .filter((mapping) => {\n        let isPrivileged = false;\n        if (mapping.roles) {\n          mapping.roles.forEach((role) => {\n            if (privilegedRoles.includes(role)) {\n              isPrivileged = true;\n            }\n          });\n        }\n        return isPrivileged;\n      })\n      .map((mapping) => mapping.subject)\n      .filter((subject) => !protectedSubjects.includes(subject));\n    const adminClients = subjects.filter((subject) =>\n      clientIds.includes(subject)\n    );\n    return adminClients;\n  } catch (error) {\n    throw new FrodoError(`Error listing admin OAuth2 clients`, error);\n  }\n}\n\n/*\n * List all static user mappings that are not oauth2 clients in authentication.json\n * and are assigned admin privileges:\n  {\n    \"_id\": \"authentication\",\n    \"rsFilter\": {\n      ...\n        \"staticUserMapping\": [\n            {\n                \"subject\": \"amadmin\",\n                \"localUser\": \"internal/user/openidm-admin\",\n                \"userRoles\": \"authzRoles/*\",\n                \"roles\": [\n                    \"internal/role/openidm-authorized\",\n                    \"internal/role/openidm-admin\"\n                ]\n            },\n            {\n                \"subject\": \"idm-provisioning\",\n                \"localUser\": \"internal/user/idm-provisioning\",\n                \"roles\": [\n                    \"internal/role/platform-provisioning\"\n                ]\n            },\n            {\n                \"subject\": \"RCSClient\",\n                \"localUser\": \"internal/user/idm-provisioning\"\n            },\n            {\n                \"subject\": \"autoid-resource-server\",\n                \"localUser\": \"internal/user/idm-provisioning\",\n                \"roles\": [\n                    \"internal/role/platform-provisioning\",\n                    \"internal/role/openidm-authorized\",\n                    \"internal/role/openidm-admin\"\n                ]\n            }\n        ]\n    }\n  }\n */\nexport async function listNonOAuth2AdminStaticUserMappings({\n  showProtected,\n  state,\n}: {\n  showProtected: boolean;\n  state: State;\n}): Promise<string[]> {\n  try {\n    const clients = await readOAuth2Clients({ state });\n    const clientIds = clients\n      .map((client) => client._id)\n      .filter((client) => !protectedClients.includes(client));\n    const authentication = await getConfigEntity({\n      entityId: 'authentication',\n      state,\n    });\n    let subjects = authentication.rsFilter.staticUserMapping\n      .filter((mapping) => {\n        let isPrivileged = false;\n        if (mapping.roles) {\n          mapping.roles.forEach((role) => {\n            if (privilegedRoles.includes(role)) {\n              isPrivileged = true;\n            }\n          });\n        }\n        return isPrivileged;\n      })\n      .map((mapping) => mapping.subject);\n    if (!showProtected) {\n      subjects = subjects.filter(\n        (subject) => !protectedSubjects.includes(subject)\n      );\n    }\n    const adminSubjects = subjects.filter(\n      (subject) => !clientIds.includes(subject)\n    );\n    return adminSubjects;\n  } catch (error) {\n    throw new FrodoError(\n      `Error listing non-oauth2 admin static user mappings`,\n      error\n    );\n  }\n}\n\nasync function getDynamicClientRegistrationScope({ state }: { state: State }) {\n  try {\n    const provider = await readOAuth2Provider({ state });\n    return provider.clientDynamicRegistrationConfig\n      .dynamicClientRegistrationScope;\n  } catch (error) {\n    throw new FrodoError(\n      `Error getting dynamic client registration scope`,\n      error\n    );\n  }\n}\n\nasync function addAdminScopes({\n  clientId,\n  client,\n  state,\n}: {\n  clientId: string;\n  client: OAuth2ClientSkeleton;\n  state: State;\n}) {\n  try {\n    const modClient = client;\n    const allAdminScopes = adminScopes.concat([\n      await getDynamicClientRegistrationScope({ state }),\n    ]);\n    let addScopes = [];\n    if (\n      modClient.coreOAuth2ClientConfig.scopes &&\n      (modClient.coreOAuth2ClientConfig.scopes as Writable<string[]>).value\n    ) {\n      addScopes = allAdminScopes.filter((scope) => {\n        let add = false;\n        if (\n          !(\n            modClient.coreOAuth2ClientConfig.scopes as Writable<string[]>\n          ).value.includes(scope)\n        ) {\n          add = true;\n        }\n        return add;\n      });\n      (modClient.coreOAuth2ClientConfig.scopes as Writable<string[]>).value = (\n        modClient.coreOAuth2ClientConfig.scopes as Writable<string[]>\n      ).value.concat(addScopes);\n    } else {\n      (modClient.coreOAuth2ClientConfig.scopes as Writable<string[]>).value =\n        allAdminScopes;\n    }\n    let addDefaultScope = false;\n    if (\n      modClient.coreOAuth2ClientConfig.defaultScopes &&\n      modClient.coreOAuth2ClientConfig.defaultScopes.value\n    ) {\n      if (modClient.coreOAuth2ClientConfig.defaultScopes.value.length === 0) {\n        addDefaultScope = true;\n        modClient.coreOAuth2ClientConfig.defaultScopes.value =\n          adminDefaultScopes;\n      } else {\n        printMessage({\n          message: `Client \"${clientId}\" already has default scopes configured, not adding admin default scope.`,\n          state,\n        });\n      }\n    }\n    if (addScopes.length > 0 || addDefaultScope) {\n      printMessage({\n        message: `Adding admin scopes to client \"${clientId}\"...`,\n        state,\n      });\n    } else {\n      printMessage({\n        message: `Client \"${clientId}\" already has admin scopes.`,\n        state,\n      });\n    }\n    return modClient;\n  } catch (error) {\n    throw new FrodoError(\n      `Error adding admin scopes to oauth2 client ${clientId}`,\n      error\n    );\n  }\n}\n\nfunction addClientCredentialsGrantType({\n  clientId,\n  client,\n  state,\n}: {\n  clientId: string;\n  client: OAuth2ClientSkeleton;\n  state: State;\n}) {\n  try {\n    const modClient = client;\n    let modified = false;\n    if (\n      modClient.advancedOAuth2ClientConfig.grantTypes &&\n      (modClient.advancedOAuth2ClientConfig.grantTypes as Writable<string[]>)\n        .value\n    ) {\n      if (\n        !(\n          modClient.advancedOAuth2ClientConfig.grantTypes as Writable<string[]>\n        ).value.includes('client_credentials')\n      ) {\n        modified = true;\n        (\n          modClient.advancedOAuth2ClientConfig.grantTypes as Writable<string[]>\n        ).value.push('client_credentials');\n      }\n    } else {\n      (\n        modClient.advancedOAuth2ClientConfig.grantTypes as Writable<string[]>\n      ).value = ['client_credentials'];\n    }\n    (\n      modClient.advancedOAuth2ClientConfig.grantTypes as Writable<string[]>\n    ).inherited = false;\n    if (modified) {\n      printMessage({\n        message: `Adding client credentials grant type to client \"${clientId}\"...`,\n        state,\n      });\n    } else {\n      printMessage({\n        message: `Client \"${clientId}\" already has client credentials grant type.`,\n        state,\n      });\n    }\n    return modClient;\n  } catch (error) {\n    throw new FrodoError(\n      `Error client credentials grant type to oauth2 client ${clientId}`,\n      error\n    );\n  }\n}\n\nasync function addAdminStaticUserMapping({\n  name,\n  state,\n}: {\n  name: string;\n  state: State;\n}) {\n  try {\n    const authentication = await getConfigEntity({\n      entityId: 'authentication',\n      state,\n    });\n    let needsAdminMapping = true;\n    let addRoles = [];\n    const mappings = authentication['rsFilter']['staticUserMapping'].map(\n      (mapping) => {\n        // ignore mappings for other subjects\n        if (mapping.subject !== name) {\n          return mapping;\n        }\n        needsAdminMapping = false;\n        addRoles = adminRoles.filter((role) => {\n          let add = false;\n          if (!mapping.roles.includes(role)) {\n            add = true;\n          }\n          return add;\n        });\n        const newMapping = mapping;\n        newMapping.roles = newMapping.roles.concat(addRoles);\n        return newMapping;\n      }\n    );\n    if (needsAdminMapping) {\n      printMessage({\n        message: `Creating static user mapping for client \"${name}\"...`,\n        state,\n      });\n      mappings.push({\n        subject: name,\n        localUser: 'internal/user/openidm-admin',\n        userRoles: 'authzRoles/*',\n        roles: adminRoles,\n      });\n    }\n    authentication['rsFilter']['staticUserMapping'] = mappings;\n    if (addRoles.length > 0 || needsAdminMapping) {\n      printMessage({\n        message: `Adding admin roles to static user mapping for client \"${name}\"...`,\n        state,\n      });\n      await putConfigEntity({\n        entityId: 'authentication',\n        entityData: authentication,\n        state,\n      });\n    } else {\n      printMessage({\n        message: `Static user mapping for client \"${name}\" already has admin roles.`,\n        state,\n      });\n    }\n  } catch (error) {\n    throw new FrodoError(\n      `Error adding admin static user mapping to ${name}`,\n      error\n    );\n  }\n}\n\n/*\n * Add AutoId static user mapping to authentication.json to enable dashboards and other AutoId-based functionality.\n  {\n    \"_id\": \"authentication\",\n    \"rsFilter\": {\n      ...\n        \"staticUserMapping\": [\n            ...\n            {\n                \"subject\": \"autoid-resource-server\",\n                \"localUser\": \"internal/user/idm-provisioning\",\n                \"roles\": [\n                    \"internal/role/platform-provisioning\",\n                    \"internal/role/openidm-authorized\",\n                    \"internal/role/openidm-admin\"\n                ]\n            }\n        ]\n    }\n  }\n */\nexport async function addAutoIdStaticUserMapping({ state }: { state: State }) {\n  const name = 'autoid-resource-server';\n  try {\n    const authentication = await getConfigEntity({\n      entityId: 'authentication',\n      state,\n    });\n    let needsAdminMapping = true;\n    let addRoles = [];\n    const mappings = authentication.rsFilter.staticUserMapping.map(\n      (mapping) => {\n        // ignore mappings for other subjects\n        if (mapping.subject !== name) {\n          return mapping;\n        }\n        needsAdminMapping = false;\n        addRoles = autoIdRoles.filter((role) => {\n          let add = false;\n          if (!mapping.roles.includes(role)) {\n            add = true;\n          }\n          return add;\n        });\n        const newMapping = mapping;\n        newMapping.roles = newMapping.roles.concat(addRoles);\n        return newMapping;\n      }\n    );\n    if (needsAdminMapping) {\n      printMessage({\n        message: `Creating static user mapping for AutoId client \"${name}\"...`,\n        state,\n      });\n      mappings.push({\n        subject: name,\n        localUser: 'internal/user/idm-provisioning',\n        userRoles: 'authzRoles/*',\n        roles: autoIdRoles,\n      });\n    }\n    authentication.rsFilter.staticUserMapping = mappings;\n    if (addRoles.length > 0 || needsAdminMapping) {\n      printMessage({\n        message: `Adding required roles to static user mapping for AutoId client \"${name}\"...`,\n        state,\n      });\n      try {\n        await putConfigEntity({\n          entityId: 'authentication',\n          entityData: authentication,\n          state,\n        });\n      } catch (putConfigEntityError) {\n        printMessage({ message: putConfigEntityError, type: 'error', state });\n        printMessage({\n          message: `Error: ${putConfigEntityError}`,\n          type: 'error',\n          state,\n        });\n      }\n    } else {\n      printMessage({\n        message: `Static user mapping for AutoId client \"${name}\" already has all required roles.`,\n        state,\n      });\n    }\n  } catch (error) {\n    throw new FrodoError(\n      `Error adding static user mapping for AutoId oauth2 client ${name}`,\n      error\n    );\n  }\n}\n\nexport async function grantOAuth2ClientAdminPrivileges({\n  clientId,\n  state,\n}: {\n  clientId: string;\n  state: State;\n}) {\n  let client = await readOAuth2Client({ clientId, state });\n  if (\n    (client.coreOAuth2ClientConfig.clientName as Readable<string[]>).length ===\n    0\n  ) {\n    client.coreOAuth2ClientConfig.clientName = {\n      inherited: false,\n      value: [clientId],\n    };\n  }\n  if (\n    client.advancedOAuth2ClientConfig.descriptions.value.length === 0 ||\n    client.advancedOAuth2ClientConfig.descriptions.value[0].startsWith(\n      'Modified by Frodo'\n    ) ||\n    client.advancedOAuth2ClientConfig.descriptions.value[0].startsWith(\n      'Created by Frodo'\n    )\n  ) {\n    client.advancedOAuth2ClientConfig.descriptions.value = [\n      `Modified by Frodo on ${new Date().toLocaleString()}`,\n    ];\n  }\n  client = await addAdminScopes({ clientId, client, state });\n  client = addClientCredentialsGrantType({ clientId, client, state });\n  await updateOAuth2Client({ clientId, clientData: client, state });\n  await addAdminStaticUserMapping({ name: clientId, state });\n}\n\nasync function removeAdminScopes({\n  name,\n  client,\n  state,\n}: {\n  name: string;\n  client: OAuth2ClientSkeleton;\n  state: State;\n}) {\n  const modClient = client;\n  const allAdminScopes = adminScopes.concat([\n    await getDynamicClientRegistrationScope({ state }),\n  ]);\n  let finalScopes = [];\n  if (\n    modClient.coreOAuth2ClientConfig.scopes &&\n    (modClient.coreOAuth2ClientConfig.scopes as Writable<string[]>).value\n  ) {\n    finalScopes = (\n      modClient.coreOAuth2ClientConfig.scopes as Writable<string[]>\n    ).value.filter((scope) => !allAdminScopes.includes(scope));\n  }\n  if (\n    (modClient.coreOAuth2ClientConfig.scopes as Writable<string[]>).value\n      .length > finalScopes.length\n  ) {\n    printMessage({\n      message: `Removing admin scopes from client \"${name}\"...`,\n      state,\n    });\n    (modClient.coreOAuth2ClientConfig.scopes as Writable<string[]>).value =\n      finalScopes;\n  } else {\n    printMessage({ message: `Client \"${name}\" has no admin scopes.`, state });\n  }\n  let finalDefaultScopes = [];\n  if (\n    modClient.coreOAuth2ClientConfig.defaultScopes &&\n    modClient.coreOAuth2ClientConfig.defaultScopes.value\n  ) {\n    finalDefaultScopes =\n      modClient.coreOAuth2ClientConfig.defaultScopes.value.filter(\n        (scope) => !adminDefaultScopes.includes(scope)\n      );\n  }\n  if (\n    modClient.coreOAuth2ClientConfig.defaultScopes.value.length >\n    finalDefaultScopes.length\n  ) {\n    printMessage({\n      message: `Removing admin default scopes from client \"${name}\"...`,\n      state,\n    });\n    modClient.coreOAuth2ClientConfig.defaultScopes.value = finalDefaultScopes;\n  } else {\n    printMessage({\n      message: `Client \"${name}\" has no admin default scopes.`,\n      state,\n    });\n  }\n  return modClient;\n}\n\nfunction removeClientCredentialsGrantType({\n  clientId,\n  client,\n  state,\n}: {\n  clientId: string;\n  client: OAuth2ClientSkeleton;\n  state: State;\n}) {\n  const modClient = client;\n  let modified = false;\n  let finalGrantTypes = [];\n  if (\n    modClient.advancedOAuth2ClientConfig.grantTypes &&\n    (modClient.advancedOAuth2ClientConfig.grantTypes as Writable<string[]>)\n      .value\n  ) {\n    finalGrantTypes = (\n      modClient.advancedOAuth2ClientConfig.grantTypes as Writable<string[]>\n    ).value.filter((grantType) => grantType !== 'client_credentials');\n    modified =\n      (modClient.advancedOAuth2ClientConfig.grantTypes as Writable<string[]>)\n        .value.length > finalGrantTypes.length;\n  }\n  if (modified) {\n    printMessage({\n      message: `Removing client credentials grant type from client \"${clientId}\"...`,\n      state,\n    });\n    (\n      modClient.advancedOAuth2ClientConfig.grantTypes as Writable<string[]>\n    ).value = finalGrantTypes;\n  } else {\n    printMessage({\n      message: `Client \"${clientId}\" does not allow client credentials grant type.`,\n      state,\n    });\n  }\n  return modClient;\n}\n\nasync function removeAdminStaticUserMapping({\n  name,\n  state,\n}: {\n  name: string;\n  state: State;\n}) {\n  const authentication = await getConfigEntity({\n    entityId: 'authentication',\n    state,\n  });\n  let finalRoles = [];\n  let removeMapping = false;\n  let modified = false;\n  const mappings = authentication.rsFilter.staticUserMapping\n    .map((mapping) => {\n      // ignore mappings for other subjects\n      if (mapping.subject !== name) {\n        return mapping;\n      }\n      finalRoles = mapping.roles.filter((role) => !adminRoles.includes(role));\n      const newMapping = mapping;\n      removeMapping = finalRoles.length === 0; // if there are no more roles left on this mapping, flag it for removal\n      modified = mapping.roles.length > finalRoles.length; // if there were roles removed, set modified flag\n      newMapping.roles = finalRoles;\n      return newMapping;\n    })\n    .filter((mapping) => mapping.subject !== name || !removeMapping);\n  authentication.rsFilter.staticUserMapping = mappings;\n  if (modified || removeMapping) {\n    if (removeMapping) {\n      printMessage({\n        message: `Removing static user mapping for client \"${name}\"...`,\n        state,\n      });\n    } else {\n      printMessage({\n        message: `Removing admin roles from static user mapping for client \"${name}\"...`,\n        state,\n      });\n    }\n    try {\n      await putConfigEntity({\n        entityId: 'authentication',\n        entityData: authentication,\n        state,\n      });\n    } catch (putConfigEntityError) {\n      printMessage({ message: putConfigEntityError, type: 'error', state });\n      printMessage({\n        message: `Error: ${putConfigEntityError}`,\n        type: 'error',\n        state,\n      });\n    }\n  } else {\n    printMessage({\n      message: `Static user mapping for client \"${name}\" has no admin roles.`,\n      state,\n    });\n  }\n}\n\nexport async function revokeOAuth2ClientAdminPrivileges({\n  clientId,\n  state,\n}: {\n  clientId: string;\n  state: State;\n}) {\n  let client = await readOAuth2Client({ clientId, state });\n  if (\n    (client.coreOAuth2ClientConfig.clientName as Readable<string[]>).length ===\n    0\n  ) {\n    client.coreOAuth2ClientConfig.clientName = {\n      inherited: false,\n      value: [clientId],\n    };\n  }\n  if (\n    client.advancedOAuth2ClientConfig.descriptions.value.length === 0 ||\n    client.advancedOAuth2ClientConfig.descriptions.value[0].startsWith(\n      'Modified by Frodo'\n    ) ||\n    client.advancedOAuth2ClientConfig.descriptions.value[0].startsWith(\n      'Created by Frodo'\n    )\n  ) {\n    client.advancedOAuth2ClientConfig.descriptions.value = [\n      `Modified by Frodo on ${new Date().toLocaleString()}`,\n    ];\n  }\n  client = await removeAdminScopes({ name: clientId, client, state });\n  client = removeClientCredentialsGrantType({ clientId, client, state });\n  await updateOAuth2Client({ clientId, clientData: client, state });\n  await removeAdminStaticUserMapping({ name: clientId, state });\n}\n\nexport async function createOAuth2ClientWithAdminPrivileges({\n  clientId,\n  clientSecret,\n  state,\n}: {\n  clientId: string;\n  clientSecret: string;\n  state: State;\n}) {\n  let client = cloneDeep(OAUTH2_CLIENT);\n  client.coreOAuth2ClientConfig.userpassword = clientSecret;\n  client.coreOAuth2ClientConfig.clientName.value = [clientId];\n  client.advancedOAuth2ClientConfig.descriptions.value = [\n    `Created by Frodo on ${new Date().toLocaleString()}`,\n  ];\n  try {\n    client = await addAdminScopes({ clientId, client, state });\n    await updateOAuth2Client({ clientId, clientData: client, state });\n    await addAdminStaticUserMapping({ name: clientId, state });\n  } catch (error) {\n    printMessage({\n      message: `Error creating oauth2 client: ${error.message}`,\n      state,\n      type: 'error',\n    });\n  }\n}\n\nexport async function createLongLivedToken({\n  clientId,\n  clientSecret,\n  scope,\n  secret,\n  lifetime,\n  state,\n}: {\n  clientId: string;\n  clientSecret: string;\n  scope: string;\n  secret: string | boolean;\n  lifetime: number;\n  state: State;\n}) {\n  // get oauth2 client\n  const client = await readOAuth2Client({ clientId, state });\n  client.userpassword = clientSecret;\n  // remember current lifetime\n  const rememberedLifetime =\n    (client.coreOAuth2ClientConfig.accessTokenLifetime as Readable<number>) ||\n    3600;\n  // set long token lifetime\n  client.coreOAuth2ClientConfig.accessTokenLifetime = {\n    inherited: false,\n    value: lifetime,\n  };\n  await updateOAuth2Client({ clientId, clientData: client, state });\n  const response = await clientCredentialsGrant({\n    amBaseUrl: state.getHost(),\n    clientId,\n    clientSecret,\n    scope,\n    state,\n  });\n  const expires = new Date().getTime() + 1000 * response.expires_in;\n  response['expires_on'] = new Date(expires).toLocaleString();\n  // reset token lifetime\n  client.coreOAuth2ClientConfig.accessTokenLifetime = {\n    inherited: false,\n    value: rememberedLifetime,\n  };\n  await updateOAuth2Client({ clientId, clientData: client, state });\n  // create secret with token as value\n  if (secret) {\n    const description = 'Long-lived admin token';\n    try {\n      await putSecret({\n        secretId: secret as string,\n        value: response.access_token,\n        description,\n        state,\n      });\n      response['secret'] = secret;\n    } catch (error) {\n      if (\n        get(error, ['response', 'data', 'code']) === 400 &&\n        get(error, ['response', 'data', 'message']) ===\n          'Failed to create secret, the secret already exists'\n      ) {\n        const newSecret = `${secret}-${expires}`;\n        printMessage({\n          message: `esv '${secret}' already exists, using ${newSecret}`,\n          type: 'warn',\n          state,\n        });\n        await putSecret({\n          secretId: newSecret,\n          value: response.access_token,\n          description,\n          state,\n        });\n        response['secret'] = newSecret;\n      }\n    }\n    delete response.access_token;\n  }\n  return response;\n}\n\nexport async function removeStaticUserMapping({\n  subject,\n  state,\n}: {\n  subject: string;\n  state: State;\n}) {\n  const authentication = await getConfigEntity({\n    entityId: 'authentication',\n    state,\n  });\n  let removeMapping = false;\n  const mappings = authentication.rsFilter.staticUserMapping.filter(\n    (mapping) => {\n      // find the subject and flag it\n      if (mapping.subject === subject) {\n        removeMapping = true;\n      }\n      // ignore mappings for other subjects\n      return mapping.subject !== subject;\n    }\n  );\n  authentication.rsFilter.staticUserMapping = mappings;\n  if (removeMapping) {\n    printMessage({\n      message: `Removing static user mapping for subject \"${subject}\"...`,\n      state,\n    });\n    try {\n      await putConfigEntity({\n        entityId: 'authentication',\n        entityData: authentication,\n        state,\n      });\n    } catch (putConfigEntityError) {\n      printMessage({ message: putConfigEntityError, type: 'error', state });\n      printMessage({\n        message: `Error: ${putConfigEntityError}`,\n        type: 'error',\n        state,\n      });\n    }\n  } else {\n    printMessage({\n      message: `No static user mapping for subject \"${subject}\" found.`,\n      state,\n    });\n  }\n}\n\nexport async function hideGenericExtensionAttributes({\n  includeCustomized,\n  dryRun,\n  state,\n}: {\n  includeCustomized: boolean;\n  dryRun: boolean;\n  state: State;\n}) {\n  const managed = await getConfigEntity({ entityId: 'managed', state });\n  const propertyNames = Object.keys(GENERIC_EXTENSION_ATTRIBUTES);\n  const updatedObjects = managed.objects.map((object) => {\n    // ignore all other objects\n    if (object.name !== getCurrentRealmManagedUser({ state })) {\n      return object;\n    }\n    propertyNames.forEach((name) => {\n      if (\n        isEqualJson(\n          GENERIC_EXTENSION_ATTRIBUTES[name],\n          object.schema.properties[name],\n          ['viewable', 'usageDescription']\n        ) ||\n        includeCustomized\n      ) {\n        if (object.schema.properties[name].viewable) {\n          printMessage({ message: `${name}: hide`, state });\n          // eslint-disable-next-line no-param-reassign\n          object.schema.properties[name].viewable = false;\n        } else {\n          printMessage({ message: `${name}: ignore (already hidden)`, state });\n        }\n      } else {\n        printMessage({ message: `${name}: skip (customized)`, state });\n      }\n    });\n    return object;\n  });\n  managed.objects = updatedObjects;\n  if (dryRun) {\n    printMessage({ message: 'Dry-run only. Changes are not saved.', state });\n  } else {\n    try {\n      await putConfigEntity({\n        entityId: 'managed',\n        entityData: managed,\n        state,\n      });\n    } catch (putConfigEntityError) {\n      printMessage({ message: putConfigEntityError, type: 'error', state });\n      printMessage({\n        message: `Error: ${putConfigEntityError}`,\n        type: 'error',\n        state,\n      });\n    }\n  }\n}\n\nexport async function showGenericExtensionAttributes({\n  includeCustomized,\n  dryRun,\n  state,\n}: {\n  includeCustomized: boolean;\n  dryRun: boolean;\n  state: State;\n}) {\n  const managed = await getConfigEntity({ entityId: 'managed', state });\n  const propertyNames = Object.keys(GENERIC_EXTENSION_ATTRIBUTES);\n  const updatedObjects = managed.objects.map((object) => {\n    // ignore all other objects\n    if (object.name !== getCurrentRealmManagedUser({ state })) {\n      return object;\n    }\n    propertyNames.forEach((name) => {\n      if (\n        isEqualJson(\n          GENERIC_EXTENSION_ATTRIBUTES[name],\n          object.schema.properties[name],\n          ['viewable', 'usageDescription']\n        ) ||\n        includeCustomized\n      ) {\n        if (!object.schema.properties[name].viewable) {\n          printMessage({ message: `${name}: show`, state });\n          // eslint-disable-next-line no-param-reassign\n          object.schema.properties[name].viewable = true;\n        } else {\n          printMessage({ message: `${name}: ignore (already showing)`, state });\n        }\n      } else {\n        printMessage({ message: `${name}: skip (customized)`, state });\n      }\n    });\n    return object;\n  });\n  managed.objects = updatedObjects;\n  if (dryRun) {\n    printMessage({ message: 'Dry-run only. Changes are not saved.', state });\n  } else {\n    try {\n      await putConfigEntity({\n        entityId: 'managed',\n        entityData: managed,\n        state,\n      });\n    } catch (putConfigEntityError) {\n      printMessage({ message: putConfigEntityError, type: 'error', state });\n      printMessage({\n        message: `Error: ${putConfigEntityError}`,\n        type: 'error',\n        state,\n      });\n    }\n  }\n}\n\nasync function repairOrgModelUser({\n  dryRun,\n  state,\n}: {\n  dryRun: boolean;\n  state: State;\n}) {\n  const managed = await getConfigEntity({ entityId: 'managed', state });\n  const RDVPs = ['memberOfOrgIDs'];\n  let repairData = false;\n  const updatedObjects = managed.objects.map((object) => {\n    // ignore all other objects\n    if (object.name !== getCurrentRealmManagedUser({ state })) {\n      return object;\n    }\n    printMessage({ message: `${object.name}: checking...`, state });\n    RDVPs.forEach((name) => {\n      if (!object.schema.properties[name].queryConfig.flattenProperties) {\n        printMessage({\n          message: `- ${name}: repairing - needs flattening`,\n          type: 'warn',\n          state,\n        });\n        // eslint-disable-next-line no-param-reassign\n        object.schema.properties[name].queryConfig.flattenProperties = true;\n        repairData = true;\n      } else {\n        printMessage({ message: `- ${name}: OK`, state });\n      }\n    });\n    return object;\n  });\n  managed.objects = updatedObjects;\n  if (!dryRun) {\n    try {\n      await putConfigEntity({\n        entityId: 'managed',\n        entityData: managed,\n        state,\n      });\n    } catch (putConfigEntityError) {\n      printMessage({ message: putConfigEntityError, type: 'error', state });\n      printMessage({\n        message: `Error: ${putConfigEntityError}`,\n        type: 'error',\n        state,\n      });\n    }\n  }\n  return repairData;\n}\n\nasync function repairOrgModelOrg({\n  dryRun,\n  state,\n}: {\n  dryRun: boolean;\n  state: State;\n}) {\n  const managed = await getConfigEntity({ entityId: 'managed', state });\n  const RDVPs = [\n    'adminIDs',\n    'ownerIDs',\n    'parentAdminIDs',\n    'parentOwnerIDs',\n    'parentIDs',\n  ];\n  let repairData = false;\n  const updatedObjects = managed.objects.map((object) => {\n    // ignore all other objects\n    if (object.name !== getRealmManagedOrganization({ state })) {\n      return object;\n    }\n    printMessage({ message: `${object.name}: checking...`, state });\n    RDVPs.forEach((name) => {\n      if (!object.schema.properties[name].queryConfig.flattenProperties) {\n        printMessage({\n          message: `- ${name}: repairing - needs flattening`,\n          type: 'warn',\n          state,\n        });\n        // eslint-disable-next-line no-param-reassign\n        object.schema.properties[name].queryConfig.flattenProperties = true;\n        repairData = true;\n      } else {\n        printMessage({ message: `- ${name}: OK`, state });\n      }\n    });\n    return object;\n  });\n  managed.objects = updatedObjects;\n  if (!dryRun) {\n    try {\n      await putConfigEntity({\n        entityId: 'managed',\n        entityData: managed,\n        state,\n      });\n    } catch (putConfigEntityError) {\n      printMessage({ message: putConfigEntityError, type: 'error', state });\n      printMessage({\n        message: `Error: ${putConfigEntityError}`,\n        type: 'error',\n        state,\n      });\n    }\n  }\n  return repairData;\n}\n\nasync function repairOrgModelData(dryRun = false) {\n  if (!dryRun) {\n    // const rootOrgs = await findRootOrganizations();\n  }\n}\n\nasync function extendOrgModelPermissins(dryRun = false) {\n  if (!dryRun) {\n    // const rootOrgs = await findRootOrganizations();\n  }\n}\n\nexport async function repairOrgModel({\n  excludeCustomized,\n  extendPermissions,\n  dryRun,\n  state,\n}: {\n  excludeCustomized: boolean;\n  extendPermissions: boolean;\n  dryRun: boolean;\n  state: State;\n}) {\n  let repairData = false;\n  repairData = repairData || (await repairOrgModelUser({ dryRun, state }));\n  repairData = repairData || (await repairOrgModelOrg({ dryRun, state }));\n  if (excludeCustomized) {\n    //\n  }\n  if (repairData) {\n    await repairOrgModelData(dryRun);\n  }\n  if (extendPermissions) {\n    await extendOrgModelPermissins(dryRun);\n  }\n  if (dryRun) {\n    printMessage({\n      message: 'Dry-run only. Changes are not saved.',\n      type: 'warn',\n      state,\n    });\n  }\n}\n\nconst templateUsernames: string[] = JSON.parse(\n  fs.readFileSync(\n    path.resolve(__dirname, './templates/autoaccess/Usernames.json'),\n    'utf8'\n  )\n);\n\nconst templateUserAgents: string[] = JSON.parse(\n  fs.readFileSync(\n    path.resolve(__dirname, './templates/autoaccess/UserAgents.json'),\n    'utf8'\n  )\n);\n\nconst templateIpAddresses: string[] = JSON.parse(\n  fs.readFileSync(\n    path.resolve(__dirname, './templates/autoaccess/IPAddresses.json'),\n    'utf8'\n  )\n);\n\nexport function getUniqueValues(values: string[]): string[] {\n  return [...new Set(values)].filter((it) => it);\n}\n\nexport function pickRandomValue(values: string[]): string {\n  const finalValues = values.filter((it) => it);\n  return finalValues[Math.floor(Math.random() * finalValues.length)];\n}\n\nexport function pickRandomNumber(max: number): number {\n  return Math.ceil(Math.random() * max);\n}\n\nexport function pickRandomValues(values: string[], picks: number): string[] {\n  const finalValues = values.filter((it) => it);\n  const result: string[] = [];\n  for (let i = 0; i < picks; i++) {\n    result.push(finalValues[Math.floor(Math.random() * finalValues.length)]);\n  }\n  return result;\n}\n\nexport function pickRandomUsername(customUsernames: string[] = []): string {\n  const finalUsernames = getUniqueValues(\n    customUsernames.concat(templateUsernames)\n  );\n  return pickRandomValue(finalUsernames);\n}\n\nexport function pickRandomUserAgent(customUserAgents: string[] = []): string {\n  const finalUserAgents = getUniqueValues(\n    customUserAgents.concat(templateUserAgents)\n  );\n  return pickRandomValue(finalUserAgents);\n}\n\nexport function pickRandomIPAddress(customIPs: string[] = []): string {\n  const finalIPs = getUniqueValues(customIPs.concat(templateIpAddresses));\n  return pickRandomValue(finalIPs);\n}\n\nexport function sleep(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n// generate auto access sample data\nexport async function trainAA({\n  apiKey,\n  apiSecret,\n  customUsernames = [],\n  customUserAgents = [],\n  customIPs = [],\n  loginsPerUser = 100,\n  service = 'Frodo-Train-AA',\n  state,\n}: {\n  apiKey: string;\n  apiSecret: string;\n  customUsernames?: string[];\n  customUserAgents?: string[];\n  customIPs?: string[];\n  loginsPerUser?: number;\n  service?: string;\n  state: State;\n}): Promise<void> {\n  printMessage({\n    message: `loginsPerUser: ${loginsPerUser}`,\n    state,\n  });\n  const usernames = getUniqueValues(customUsernames.concat(templateUsernames));\n  for (let i = 0; i < 200; i++) {\n    const username = usernames[i];\n    const numDevices = pickRandomNumber(5);\n    const ipAddresses = pickRandomValues(\n      customIPs.concat(templateIpAddresses),\n      numDevices\n    );\n    const ipAgentMap = {};\n    for (let j = 0; j < numDevices; j++) {\n      ipAgentMap[ipAddresses[j]] = pickRandomValue(\n        customUserAgents.concat(templateUserAgents)\n      );\n    }\n    const requests = [];\n    for (let j = 0; j < loginsPerUser; j++) {\n      const ipAddress = pickRandomValue(ipAddresses);\n      const userAgent = ipAgentMap[ipAddress];\n      const config = {\n        headers: {\n          'User-Agent': userAgent,\n          'X-Forwarded-For': ipAddress,\n          'X-OpenAM-Username': username,\n          'X-API-KEY': apiKey,\n          'X-API-SECRET': apiSecret,\n        },\n      };\n      requests.push(\n        step({\n          body: {},\n          config,\n          realm: state.getRealm(),\n          service,\n          state,\n        })\n          .then((response) => {\n            printMessage({\n              message: `${username},${ipAddress},${userAgent},${\n                response.tokenId ? 'OK' : 'NOK'\n              }`,\n              state,\n            });\n          })\n          .catch((error) => {\n            printMessage({\n              message: `${username},${ipAddress},${userAgent},${error.message}`,\n              state,\n            });\n          })\n      );\n      await Promise.allSettled(requests);\n      // try {\n      //   const response = await step({\n      //     body: {},\n      //     config,\n      //     realm: state.getRealm(),\n      //     service,\n      //     state,\n      //   });\n      //   printMessage({\n      //     message: `${username},${ipAddress},${userAgent},${\n      //       response.tokenId ? 'OK' : 'NOK'\n      //     }`,\n      //     state,\n      //   });\n      // } catch (error) {\n      //   printMessage({\n      //     message: `${username},${ipAddress},${userAgent},${error.message}`,\n      //     state,\n      //   });\n      // }\n    }\n  }\n}\n\nfunction getAccessTokenUrl(state: State) {\n  const accessTokenUrlTemplate = '%s/oauth2%s/access_token';\n  const accessTokenURL = util.format(\n    accessTokenUrlTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state)\n  );\n  const url = new URL(accessTokenURL);\n  const urlWithPort = `${url.protocol}//${url.host}:${\n    url.port ? url.port : url.protocol === 'https:' ? '443' : '80'\n  }${url.pathname}`;\n  return urlWithPort;\n}\n\nexport async function generateRfc7523AuthZGrantArtefacts({\n  clientId,\n  iss,\n  jwk = null,\n  sub = null,\n  scope = ['fr:am:*', 'fr:idm:*', 'openid'],\n  options = { save: false },\n  state,\n}: {\n  clientId: string;\n  iss: string;\n  jwk?: JwkRsa;\n  sub?: string;\n  scope?: string[];\n  options?: { save: boolean };\n  state: State;\n}): Promise<{\n  jwk: JwkRsa;\n  jwks: JwksInterface;\n  client: OAuth2ClientSkeleton;\n  issuer: OAuth2TrustedJwtIssuerSkeleton;\n}> {\n  if (!jwk) {\n    jwk = await createJwkRsa();\n  }\n\n  // create header and payload\n  const jwks = createJwks(await getJwkRsaPublic(jwk));\n\n  // create oauth2 client\n  const clientData: OAuth2ClientSkeleton = cloneDeep(OAUTH2_CLIENT);\n  clientData.coreOAuth2ClientConfig.clientName = {\n    inherited: false,\n    value: [clientId],\n  };\n  clientData.coreOAuth2ClientConfig.scopes = {\n    inherited: false,\n    value: scope,\n  };\n  clientData.coreOAuth2ClientConfig.clientType = {\n    inherited: false,\n    value: 'Public',\n  };\n  clientData.advancedOAuth2ClientConfig.grantTypes = {\n    inherited: false,\n    value: ['urn:ietf:params:oauth:grant-type:jwt-bearer'],\n  };\n  clientData.advancedOAuth2ClientConfig.isConsentImplied = {\n    inherited: false,\n    value: true,\n  };\n  clientData.advancedOAuth2ClientConfig.tokenEndpointAuthMethod = {\n    inherited: false,\n    value: 'none',\n  };\n  clientData.signEncOAuth2ClientConfig.publicKeyLocation = {\n    inherited: false,\n    value: 'jwks',\n  };\n  clientData.signEncOAuth2ClientConfig.jwkSet = {\n    inherited: false,\n    value: JSON.stringify(jwks),\n  };\n  if (options.save) {\n    await updateOAuth2Client({ clientId, clientData, state });\n  }\n\n  // create trusted issuer\n  const issuerData: OAuth2TrustedJwtIssuerSkeleton = cloneDeep(OAUTH2_ISSUER);\n  issuerData._id = clientId + '-issuer';\n  issuerData.issuer = {\n    inherited: false,\n    value: iss,\n  };\n  issuerData.allowedSubjects = {\n    inherited: false,\n    value: sub ? [sub] : [],\n  };\n  issuerData.jwkSet = {\n    inherited: false,\n    value: stringify(jwks),\n  };\n  if (options.save) {\n    await updateOAuth2TrustedJwtIssuer({\n      issuerId: issuerData._id,\n      issuerData,\n      state,\n    });\n  }\n\n  return {\n    jwk,\n    jwks,\n    client: clientData,\n    issuer: issuerData,\n  };\n}\n\nexport async function executeRfc7523AuthZGrantFlow({\n  clientId,\n  iss,\n  jwk,\n  sub,\n  scope = ['fr:am:*', 'fr:idm:*', 'openid'],\n  state,\n}: {\n  clientId: string;\n  iss: string;\n  jwk: JwkRsa;\n  sub: string;\n  scope?: string[];\n  state: State;\n}): Promise<AccessTokenResponseType> {\n  // create header and payload\n  const payload = {\n    iss,\n    sub,\n    aud: getAccessTokenUrl(state),\n\n    // Cross platform way of setting JWT expiry time 3 minutes in the future, expressed as number of seconds since EPOCH\n    exp: Math.floor(new Date().getTime() / 1000 + 180),\n\n    // A unique ID for the JWT which is required when requesting the openid scope\n    jti: uuidv4(),\n  };\n\n  // create and sign JWT\n  const jwt = await createSignedJwtToken(payload, jwk);\n\n  // get access token\n  return accessTokenRfc7523AuthZGrant({ clientId, jwt, scope, state });\n}\n\nexport async function generateRfc7523ClientAuthNArtefacts({\n  clientId,\n  aud = null,\n  jwk = null,\n  options = {\n    save: false,\n  },\n  state,\n}: {\n  clientId: string;\n  aud?: string;\n  jwk?: JwkRsa;\n  options?: { save: boolean };\n  state: State;\n}): Promise<{\n  jwk: JwkRsa;\n  jwks: JwksInterface;\n  jwt: any;\n  client: OAuth2ClientSkeleton;\n}> {\n  if (!jwk) {\n    jwk = await createJwkRsa();\n  }\n\n  // create header and payload\n  const jwks = createJwks(await getJwkRsaPublic(jwk));\n  const sub = clientId;\n  const iss = clientId;\n  if (!aud) {\n    aud = getAccessTokenUrl(state);\n  }\n\n  const payload = {\n    iss,\n    sub,\n    aud,\n    exp: 60 * 5,\n  };\n\n  // create and sign JWT\n  const jwt = createSignedJwtToken(payload, jwk);\n\n  // create oauth2 client\n  const clientData: OAuth2ClientSkeleton = cloneDeep(OAUTH2_CLIENT);\n  clientData.coreOAuth2ClientConfig.clientType = {\n    inherited: false,\n    value: 'Confidential',\n  };\n  clientData.advancedOAuth2ClientConfig.grantTypes = {\n    inherited: false,\n    value: ['client_credentials'],\n  };\n  clientData.advancedOAuth2ClientConfig.isConsentImplied = {\n    inherited: false,\n    value: false,\n  };\n  clientData.advancedOAuth2ClientConfig.tokenEndpointAuthMethod = {\n    inherited: false,\n    value: 'private_key_jwt',\n  };\n  clientData.signEncOAuth2ClientConfig.publicKeyLocation = {\n    inherited: false,\n    value: 'jwks',\n  };\n  clientData.signEncOAuth2ClientConfig.jwkSet = {\n    inherited: false,\n    value: JSON.stringify(jwks),\n  };\n  if (options.save) {\n    await updateOAuth2Client({ clientId, clientData, state });\n  }\n\n  return {\n    jwk,\n    jwks,\n    jwt,\n    client: clientData,\n  };\n}\n\n// suggested by John K.\n// export async function removeRealmNameFromManagedObjectLabels() {}\n// export async function addRealmNameToManagedObjectLabels() {}\n// export async function cleanUpPostmanArtifacts() {}\n// export async function createSampleThemes() {}\n","import util from 'util';\n\nimport { State } from '../shared/State';\nimport { getRealmPath } from '../utils/ForgeRockUtils';\nimport { generateAmApi } from './BaseApi';\n\nconst authenticateUrlTemplate = '%s/json%s/authenticate';\nconst authenticateWithServiceUrlTemplate = `${authenticateUrlTemplate}?authIndexType=service&authIndexValue=%s`;\n\nconst apiVersion = 'resource=2.0, protocol=1.0';\nconst getApiConfig = () => ({\n  apiVersion,\n});\n\n/**\n * Fill callbacks from a map\n * Just a start\n * @param {object} response json response from a call to /authenticate\n * @param {{ [k: string]: string | number | boolean | string[] }} map name/value map\n * @returns filled response body so it can be used as input to another call to /authenticate\n */\nexport function fillCallbacks({\n  response,\n  map,\n}: {\n  response: object;\n  map: { [k: string]: string | number | boolean | string[] };\n}): object {\n  const body = JSON.parse(JSON.stringify(response));\n  for (const callback of body.callbacks) {\n    callback.input[0].value = map[callback.input[0].name];\n  }\n  return body;\n}\n\n/**\n *\n * @param {any} body POST request body\n * @param {any} config request config\n * @param {string} realm realm\n * @param {string} service name of authentication service/journey\n * @returns Promise resolving to the authentication service response\n */\nexport async function step({\n  body = {},\n  config = {},\n  realm = '/',\n  service = undefined,\n  state,\n}: {\n  body?: object;\n  config?: object;\n  realm?: string;\n  service?: string;\n  state: State;\n}): Promise<any> {\n  const urlString =\n    service || state.getAuthenticationService()\n      ? util.format(\n          authenticateWithServiceUrlTemplate,\n          state.getHost(),\n          getRealmPath(realm),\n          service || state.getAuthenticationService()\n        )\n      : util.format(\n          authenticateUrlTemplate,\n          state.getHost(),\n          getRealmPath(realm)\n        );\n  const { data } = await generateAmApi({\n    resource: getApiConfig(),\n    state,\n  }).post(urlString, body, config);\n  return data;\n}\n","export type Constants = {\n  DEFAULT_REALM_KEY: string;\n  CLASSIC_DEPLOYMENT_TYPE_KEY: string;\n  CLOUD_DEPLOYMENT_TYPE_KEY: string;\n  FORGEOPS_DEPLOYMENT_TYPE_KEY: string;\n  DEPLOYMENT_TYPES: string[];\n  DEPLOYMENT_TYPE_REALM_MAP: {\n    classic: string;\n    cloud: string;\n    forgeops: string;\n  };\n  FRODO_METADATA_ID: string;\n  FRODO_CONNECTION_PROFILES_PATH_KEY: string;\n  FRODO_MASTER_KEY_PATH_KEY: string;\n  FRODO_MASTER_KEY_KEY: string;\n};\nconst DEFAULT_REALM_KEY = '__default__realm__';\nconst CLASSIC_DEPLOYMENT_TYPE_KEY = 'classic';\nconst CLOUD_DEPLOYMENT_TYPE_KEY = 'cloud';\nconst FORGEOPS_DEPLOYMENT_TYPE_KEY = 'forgeops';\nconst DEPLOYMENT_TYPES = [\n  CLASSIC_DEPLOYMENT_TYPE_KEY,\n  CLOUD_DEPLOYMENT_TYPE_KEY,\n  FORGEOPS_DEPLOYMENT_TYPE_KEY,\n];\nconst DEPLOYMENT_TYPE_REALM_MAP = {\n  [CLASSIC_DEPLOYMENT_TYPE_KEY]: '/',\n  [CLOUD_DEPLOYMENT_TYPE_KEY]: 'alpha',\n  [FORGEOPS_DEPLOYMENT_TYPE_KEY]: '/',\n};\nconst FRODO_METADATA_ID = 'frodo';\nconst FRODO_CONNECTION_PROFILES_PATH_KEY = 'FRODO_CONNECTION_PROFILES_PATH';\nconst FRODO_MASTER_KEY_PATH_KEY = 'FRODO_MASTER_KEY_PATH';\nconst FRODO_MASTER_KEY_KEY = 'FRODO_MASTER_KEY';\nconst FRODO_TOKEN_CACHE_PATH_KEY = 'FRODO_TOKEN_CACHE_PATH';\n\nexport default {\n  DEFAULT_REALM_KEY,\n  CLASSIC_DEPLOYMENT_TYPE_KEY,\n  CLOUD_DEPLOYMENT_TYPE_KEY,\n  FORGEOPS_DEPLOYMENT_TYPE_KEY,\n  DEPLOYMENT_TYPES,\n  DEPLOYMENT_TYPE_REALM_MAP,\n  FRODO_METADATA_ID,\n  FRODO_CONNECTION_PROFILES_PATH_KEY,\n  FRODO_MASTER_KEY_PATH_KEY,\n  FRODO_MASTER_KEY_KEY,\n  FRODO_TOKEN_CACHE_PATH_KEY,\n};\n","import Constants from '../shared/Constants';\nimport { State } from '../shared/State';\n\nexport type FRUtils = {\n  applyNameCollisionPolicy(name: string): string;\n  getRealmPath(realm: string): string;\n  getCurrentRealmPath(): string;\n  getCurrentRealmName(): string;\n  getCurrentRealmManagedUser(): string;\n  getRealmName(realm: string): string;\n  getHostBaseUrl(url: string): string;\n};\n\nexport default (state: State): FRUtils => {\n  return {\n    applyNameCollisionPolicy(name: string): string {\n      return applyNameCollisionPolicy(name);\n    },\n\n    getRealmPath(realm: string): string {\n      return getRealmPath(realm);\n    },\n\n    getCurrentRealmPath(): string {\n      return getCurrentRealmPath(state);\n    },\n\n    getCurrentRealmName(): string {\n      return getCurrentRealmName(state);\n    },\n\n    getCurrentRealmManagedUser(): string {\n      return getCurrentRealmManagedUser({ state });\n    },\n\n    getRealmName(realm: string): string {\n      return getRealmName(realm);\n    },\n\n    getHostBaseUrl(url: string): string {\n      return getHostBaseUrl(url);\n    },\n  };\n};\n\n/**\n * Get new name when names collide\n * @param {string} name to apply policy to\n * @returns {string} new name according to policy\n */\nexport function applyNameCollisionPolicy(name: string): string {\n  const capturingRegex = /(.* - imported) \\(([0-9]+)\\)/;\n  const found = name.match(capturingRegex);\n  if (found && found.length > 0 && found.length === 3) {\n    // already renamed one or more times\n    // return the next number\n    return `${found[1]} (${parseInt(found[2], 10) + 1})`;\n  }\n  // first time\n  return `${name} - imported (1)`;\n}\n\n/**\n * Get realm path\n * @param {string} realm realm\n * @returns {string} a CREST-compliant realm path, e.g. /realms/root/realms/alpha\n */\nexport function getRealmPath(realm: string): string {\n  if (!realm) realm = '/';\n  if (realm.startsWith('/')) {\n    realm = realm.substring(1);\n  }\n  const elements = ['root'].concat(\n    realm.split('/').filter((element) => element !== '')\n  );\n  const realmPath = `/realms/${elements.join('/realms/')}`;\n  return realmPath;\n}\n\n/**\n * Get current realm path\n * @returns {string} a CREST-compliant realm path, e.g. /realms/root/realms/alpha\n */\nexport function getCurrentRealmPath(state: State): string {\n  return getRealmPath(state.getRealm());\n}\n\n/**\n * Get current realm name\n * @returns {string} name of the current realm. /alpha -> alpha\n */\nexport function getCurrentRealmName(state: State): string {\n  const realm = state.getRealm();\n  const components = realm.split('/');\n  let realmName = '/';\n  if (components.length > 0 && realmName !== realm) {\n    realmName = components[components.length - 1];\n  }\n  return realmName;\n}\n\n/**\n * Get the name of the managed user object for the current realm\n * @returns {string} the name of the managed user object for the current realm\n */\nexport function getCurrentRealmManagedUser({\n  state,\n}: {\n  state: State;\n}): string {\n  let realmManagedUser = 'user';\n  if (state.getDeploymentType() === Constants.CLOUD_DEPLOYMENT_TYPE_KEY) {\n    realmManagedUser = `${getCurrentRealmName(state)}_user`;\n  }\n  return realmManagedUser;\n}\n\n/**\n * Get current realm name\n * @param {string} realm realm\n * @returns {string} name of the realm. /alpha -> alpha\n */\nexport function getRealmName(realm: string): string {\n  const components = realm.split('/');\n  let realmName = '/';\n  if (components.length > 0 && realmName !== realm) {\n    realmName = components[components.length - 1];\n  }\n  return realmName;\n}\n\n/**\n * Get tenant base URL\n * @param {string} url tenant URL with path and query params\n * @returns {string} tenant base URL without path and query params\n */\nexport function getHostBaseUrl(url: string): string {\n  const parsedUrl = new URL(url);\n  return `${parsedUrl.protocol}//${parsedUrl.host}`;\n}\n","import Agent from 'agentkeepalive';\nimport axios, {\n  AxiosError,\n  AxiosInstance,\n  AxiosProxyConfig,\n  AxiosRequestConfig,\n} from 'axios';\nimport axiosRetry from 'axios-retry';\nimport { randomUUID } from 'crypto';\nimport HttpsProxyAgent from 'https-proxy-agent';\n\nimport _curlirize from '../ext/axios-curlirize/curlirize';\nimport StateImpl, { State } from '../shared/State';\nimport { getUserAgent } from '../shared/Version';\nimport { curlirizeMessage, printMessage } from '../utils/Console';\nimport { mergeDeep } from '../utils/JsonUtils';\nimport { setupPollyForFrodoLib } from '../utils/SetupPollyForFrodoLib';\n\nif (process.env.FRODO_MOCK) {\n  setupPollyForFrodoLib({ state: StateImpl({}) });\n}\n\naxiosRetry(axios, {\n  retries: 3,\n  shouldResetTimeout: true,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  retryCondition: (_error) => true, // retry no matter what\n});\n\n// all agents\nconst timeout = 30000;\n\n// agentkeepalive\nconst maxSockets = 100;\nconst maxFreeSockets = 10;\nconst freeSocketTimeout = 30000;\n\nconst userAgent = getUserAgent();\nconst transactionId = `frodo-${randomUUID()}`;\nlet httpAgent, httpsAgent;\n\nfunction getHttpAgent() {\n  if (httpAgent) return httpAgent;\n  httpAgent = new Agent({\n    maxSockets,\n    maxFreeSockets,\n    timeout,\n    freeSocketTimeout,\n  });\n  return httpAgent;\n}\n\n/**\n * Helper method to create properly configured httpsAgent\n * @returns {Agent.HttpsAgent} appropriate httpsAgent\n */\nfunction getHttpsAgent(allowInsecureConnection: boolean): Agent.HttpsAgent {\n  if (httpsAgent) return httpsAgent;\n  const options = {\n    rejectUnauthorized: !allowInsecureConnection,\n  };\n  const httpsProxy = process.env.HTTPS_PROXY || process.env.https_proxy;\n  if (httpsProxy) {\n    // https://github.com/axios/axios/issues/3459\n    // eslint-disable-next-line no-console\n    console.error(`Using proxy ${httpsProxy}`['yellow']);\n    const parsed = new URL(httpsProxy);\n    options['host'] = parsed.hostname;\n    options['port'] = parsed.port;\n    options['protocol'] = parsed.protocol;\n    options.rejectUnauthorized = !allowInsecureConnection;\n    httpsAgent = HttpsProxyAgent(options);\n    return httpsAgent;\n  }\n  httpsAgent = new Agent.HttpsAgent({\n    ...options,\n    maxSockets,\n    maxFreeSockets,\n    timeout,\n    freeSocketTimeout,\n  });\n  return httpsAgent;\n}\n\n/**\n * Get Proxy config\n * @returns {AxiosProxyConfig | false} axios proxy config or false\n */\nfunction getProxy(): AxiosProxyConfig | false {\n  if (process.env.HTTPS_PROXY || process.env.https_proxy) return false;\n  return null;\n}\n\n/**\n * Customize curlirize output\n * @param request axios request object\n */\nfunction curlirize(request, state: State) {\n  _curlirize(request, (result, err: Error | AxiosError) => {\n    if (err) {\n      if (axios.isAxiosError(err)) {\n        // Access to config, request, and response\n        printMessage({\n          message: `${err.response?.status}${\n            err.response?.data['reason']\n              ? ' ' + err.response?.data['reason']\n              : ''\n          }${\n            err.response?.data['message']\n              ? ' - ' + err.response?.data['message']\n              : ''\n          }`,\n          type: 'error',\n          state,\n        });\n      } else {\n        // Just a stock error\n        printMessage({ message: err, type: 'error', state });\n      }\n    } else if (result.command) {\n      curlirizeMessage({ message: result.command, state });\n    } else if (result.response) {\n      printMessage({\n        message: `${result.response.status} ${result.response.statusText}`,\n        type: 'info',\n        state,\n      });\n    }\n  });\n}\n\n/**\n * Generates an AM Axios API instance\n * @param {object} resource Takes an object takes a resource object. example:\n * @param {object} requestOverride Takes an object of AXIOS parameters that can be used to either\n * add on extra information or override default properties https://github.com/axios/axios#request-config\n *\n * @returns {AxiosInstance}\n */\nexport function generateAmApi({\n  resource,\n  requestOverride = {},\n  state,\n}: {\n  resource;\n  requestOverride?;\n  state: State;\n}) {\n  const headers = {\n    'User-Agent': userAgent,\n    'X-ForgeRock-TransactionId': transactionId,\n    'Content-Type': 'application/json',\n    // only add API version if we have it\n    ...(resource.apiVersion && { 'Accept-API-Version': resource.apiVersion }),\n    // only send session cookie if we know its name and value and we are not instructed to use the bearer token for AM APIs\n    ...(!state.getUseBearerTokenForAmApis() &&\n      state.getCookieName() &&\n      state.getCookieValue() && {\n        Cookie: `${state.getCookieName()}=${state.getCookieValue()}`,\n      }),\n    // only add authorization header if we have a bearer token and are instructed to use it for AM APIs\n    ...(state.getUseBearerTokenForAmApis() &&\n      state.getBearerToken() && {\n        Authorization: `Bearer ${state.getBearerToken()}`,\n      }),\n  };\n\n  const requestDetails = mergeDeep(\n    {\n      // baseURL: `${storage.session.getTenant()}/json`,\n      timeout,\n      headers: {\n        ...headers,\n        ...state.getAuthenticationHeaderOverrides(),\n      },\n      httpAgent: getHttpAgent(),\n      httpsAgent: getHttpsAgent(state.getAllowInsecureConnection()),\n      proxy: getProxy(),\n    },\n    requestOverride\n  );\n\n  const request = axios.create(requestDetails);\n\n  // enable curlirizer output in debug mode\n  if (state.getCurlirize()) {\n    curlirize(request, state);\n  }\n\n  return request;\n}\n\n/**\n * Generates an OAuth2 Axios API instance\n * @param {object} resource Takes a resource object. example:\n * @param {object} requestOverride Takes an object of AXIOS parameters that can be used to either\n * add on extra information or override default properties https://github.com/axios/axios#request-config\n *\n * @returns {AxiosInstance}\n */\nexport function generateOauth2Api({\n  resource,\n  requestOverride = {},\n  authenticate = true,\n  state,\n}: {\n  resource: { apiVersion: string };\n  requestOverride?: AxiosRequestConfig;\n  authenticate?: boolean;\n  state: State;\n}) {\n  let headers = {\n    'User-Agent': userAgent,\n    'X-ForgeRock-TransactionId': transactionId,\n    // only add API version if we have it\n    ...(resource.apiVersion && { 'Accept-API-Version': resource.apiVersion }),\n    // only send session cookie if we know its name and value and we are not instructed to use the bearer token for AM APIs\n    ...(authenticate &&\n      !state.getUseBearerTokenForAmApis() &&\n      state.getCookieName() &&\n      state.getCookieValue() && {\n        Cookie: `${state.getCookieName()}=${state.getCookieValue()}`,\n      }),\n    // only add authorization header if we have a bearer token and are instructed to use it for AM APIs\n    ...(authenticate &&\n      state.getUseBearerTokenForAmApis() &&\n      state.getBearerToken() && {\n        Authorization: `Bearer ${state.getBearerToken()}`,\n      }),\n  };\n  if (requestOverride['headers']) {\n    headers = {\n      ...headers,\n      ...requestOverride['headers'],\n    };\n  }\n\n  const requestDetails = {\n    // baseURL: `${storage.session.getTenant()}/json${resource.path}`,\n    timeout,\n    ...requestOverride,\n    headers: {\n      ...headers,\n      ...state.getAuthenticationHeaderOverrides(),\n    },\n    httpAgent: getHttpAgent(),\n    httpsAgent: getHttpsAgent(state.getAllowInsecureConnection()),\n    proxy: getProxy(),\n  };\n\n  const request = axios.create(requestDetails);\n\n  // enable curlirizer output in debug mode\n  if (state.getCurlirize()) {\n    curlirize(request, state);\n  }\n\n  return request;\n}\n\n/**\n * Generates an IDM Axios API instance\n * @param {object} requestOverride Takes an object of AXIOS parameters that can be used to either add\n * on extra information or override default properties https://github.com/axios/axios#request-config\n *\n * @returns {AxiosInstance}\n */\nexport function generateIdmApi({\n  requestOverride = {},\n  state,\n}: {\n  requestOverride?: any;\n  state: State;\n}) {\n  const requestDetails = mergeDeep(\n    {\n      // baseURL: getTenantURL(storage.session.getTenant()),\n      timeout,\n      headers: {\n        'User-Agent': userAgent,\n        'X-ForgeRock-TransactionId': transactionId,\n        'Content-Type': 'application/json',\n        // only add authorization header if we have a bearer token\n        ...(state.getBearerToken() && {\n          Authorization: `Bearer ${state.getBearerToken()}`,\n        }),\n      },\n      httpAgent: getHttpAgent(),\n      httpsAgent: getHttpsAgent(state.getAllowInsecureConnection()),\n      proxy: getProxy(),\n    },\n    requestOverride\n  );\n\n  // if (storage.session.getBearerToken()) {\n  //   requestDetails.headers[\n  //     'Authorization'\n  //   ] = `Bearer ${storage.session.getBearerToken()}`;\n  // }\n\n  const request = axios.create(requestDetails);\n\n  // enable curlirizer output in debug mode\n  if (state.getCurlirize()) {\n    curlirize(request, state);\n  }\n\n  return request;\n}\n\n/**\n * Generates a LogKeys API Axios instance\n * @param {object} requestOverride Takes an object of AXIOS parameters that can be used to either add\n * on extra information or override default properties https://github.com/axios/axios#request-config\n *\n * @returns {AxiosInstance}\n */\nexport function generateLogKeysApi({\n  requestOverride = {},\n  state,\n}: {\n  requestOverride?;\n  state: State;\n}) {\n  const headers = {\n    'User-Agent': userAgent,\n    'Content-Type': 'application/json',\n    // only add authorization header if we have a bearer token\n    ...(state.getBearerToken() && {\n      Authorization: `Bearer ${state.getBearerToken()}`,\n    }),\n  };\n  const requestDetails = mergeDeep(\n    {\n      timeout,\n      headers,\n      httpAgent: getHttpAgent(),\n      httpsAgent: getHttpsAgent(state.getAllowInsecureConnection()),\n      proxy: getProxy(),\n    },\n    requestOverride\n  );\n\n  const request = axios.create(requestDetails);\n\n  // enable curlirizer output in debug mode\n  if (state.getCurlirize()) {\n    curlirize(request, state);\n  }\n\n  return request;\n}\n\n/**\n * Generates a Log API Axios instance\n * @param {object} requestOverride Takes an object of AXIOS parameters that can be used to either add\n * on extra information or override default properties https://github.com/axios/axios#request-config\n *\n * @returns {AxiosInstance}\n */\nexport function generateLogApi({\n  requestOverride = {},\n  state,\n}: {\n  requestOverride?;\n  state: State;\n}) {\n  const headers = {\n    'User-Agent': userAgent,\n    'X-API-Key': state.getLogApiKey(),\n    'X-API-Secret': state.getLogApiSecret(),\n  };\n  const requestDetails = mergeDeep(\n    {\n      // baseURL: getTenantURL(storage.session.getTenant()),\n      timeout,\n      headers,\n      httpAgent: getHttpAgent(),\n      httpsAgent: getHttpsAgent(state.getAllowInsecureConnection()),\n      proxy: getProxy(),\n    },\n    requestOverride\n  );\n\n  const request = axios.create(requestDetails);\n\n  // enable curlirizer output in debug mode\n  if (state.getCurlirize()) {\n    curlirize(request, state);\n  }\n\n  return request;\n}\n\n/**\n * Generates an Axios instance for the Identity Cloud Environment API\n * @param {object} requestOverride Takes an object of AXIOS parameters that can be used to either add\n * on extra information or override default properties https://github.com/axios/axios#request-config\n *\n * @returns {AxiosInstance}\n */\nexport function generateEnvApi({\n  resource,\n  requestOverride = {},\n  state,\n}: {\n  resource: { apiVersion: string };\n  requestOverride?: object;\n  state: State;\n}): AxiosInstance {\n  const headers = {\n    'User-Agent': userAgent,\n    'Content-Type': 'application/json',\n    // only add API version if we have it\n    ...(resource.apiVersion && { 'Accept-API-Version': resource.apiVersion }),\n    // only add authorization header if we have a bearer token\n    ...(state.getBearerToken() && {\n      Authorization: `Bearer ${state.getBearerToken()}`,\n    }),\n  };\n  const requestDetails = {\n    // baseURL: getTenantURL(storage.session.getTenant()),\n    timeout,\n    headers,\n    ...requestOverride,\n    httpAgent: getHttpAgent(),\n    httpsAgent: getHttpsAgent(state.getAllowInsecureConnection()),\n    proxy: getProxy(),\n  };\n\n  const request = axios.create(requestDetails);\n\n  // enable curlirizer output in debug mode\n  if (state.getCurlirize()) {\n    curlirize(request, state);\n  }\n\n  return request;\n}\n\n/**\n * Generates a release (Github or Npm) Axios API instance\n * @param {object} requestOverride Takes an object of AXIOS parameters that can be used to either add\n * on extra information or override default properties https://github.com/axios/axios#request-config\n *\n * @returns {AxiosInstance}\n */\nexport function generateReleaseApi({\n  baseUrl,\n  requestOverride = {},\n  state,\n}: {\n  baseUrl: string;\n  requestOverride?: object;\n  state: State;\n}): AxiosInstance {\n  const requestDetails = {\n    baseURL: baseUrl,\n    timeout,\n    headers: {\n      'User-Agent': userAgent,\n      'Content-Type': 'application/json',\n    },\n    ...requestOverride,\n    httpAgent: getHttpAgent(),\n    httpsAgent: getHttpsAgent(state.getAllowInsecureConnection()),\n    proxy: getProxy(),\n  };\n\n  const request = axios.create(requestDetails);\n\n  // enable curlirizer output in debug mode\n  if (state.getCurlirize()) {\n    curlirize(request, state);\n  }\n\n  return request;\n}\n","export class CurlHelper {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  request: any;\n  constructor(config) {\n    this.request = config;\n  }\n\n  getHeaders() {\n    let headers = this.request.headers,\n      curlHeaders = '';\n\n    // get the headers concerning the appropriate method (defined in the global axios instance)\n    // eslint-disable-next-line no-prototype-builtins\n    if (headers.hasOwnProperty('common')) {\n      headers = this.request.headers[this.request.method];\n    }\n\n    // add any custom headers (defined upon calling methods like .get(), .post(), etc.)\n    for (const property in this.request.headers) {\n      if (\n        !['common', 'delete', 'get', 'head', 'patch', 'post', 'put'].includes(\n          property\n        )\n      ) {\n        headers[property] = this.request.headers[property];\n      }\n    }\n\n    for (const property in headers) {\n      const header = `${property}:${headers[property]}`;\n      curlHeaders = `${curlHeaders} -H \"${header}\"`;\n    }\n\n    return curlHeaders.trim();\n  }\n\n  getMethod() {\n    return `-X ${this.request.method.toUpperCase()}`;\n  }\n\n  getBody() {\n    if (\n      typeof this.request.data !== 'undefined' &&\n      this.request.data !== '' &&\n      this.request.data !== null &&\n      this.request.method.toUpperCase() !== 'GET'\n    ) {\n      const data =\n        typeof this.request.data === 'object' ||\n        Object.prototype.toString.call(this.request.data) === '[object Array]'\n          ? JSON.stringify(this.request.data)\n          : this.request.data;\n      return `--data '${data}'`.trim();\n    } else {\n      return '';\n    }\n  }\n\n  getUrl() {\n    if (this.request.baseURL) {\n      return this.request.baseURL + '/' + this.request.url;\n    }\n    return this.request.url;\n  }\n\n  getQueryString() {\n    let params = '',\n      i = 0;\n\n    for (const param in this.request.params) {\n      params +=\n        i !== 0\n          ? `&${param}=${this.request.params[param]}`\n          : `?${param}=${this.request.params[param]}`;\n      i++;\n    }\n\n    return params;\n  }\n\n  getBuiltURL() {\n    let url = this.getUrl();\n\n    if (this.getQueryString() !== '') {\n      url =\n        url.charAt(url.length - 1) === '/'\n          ? url.substr(0, url.length - 1)\n          : url;\n      url += this.getQueryString();\n    }\n\n    return url.trim();\n  }\n\n  generateCommand() {\n    return `curl ${this.getMethod()} ${this.getHeaders()} ${this.getBody()} \"${this.getBuiltURL()}\"`\n      .trim()\n      .replace(/\\s{2,}/g, ' ');\n  }\n}\n","/* eslint-disable no-console */\nimport { CurlHelper } from './lib/CurlHelper';\n\nfunction defaultLogCallback(curlResult, err = undefined) {\n  const { command } = curlResult;\n  if (err) {\n    console.error(err);\n  } else {\n    console.info(command);\n  }\n}\n\nexport default (instance, callback = defaultLogCallback) => {\n  instance.interceptors.request.use(\n    (req) => {\n      try {\n        const curl = new CurlHelper(req);\n        req.curlObject = curl;\n        req.curlCommand = curl.generateCommand();\n        req.clearCurl = () => {\n          delete req.curlObject;\n          delete req.curlCommand;\n          delete req.clearCurl;\n        };\n      } catch (err) {\n        // Even if the axios middleware is stopped, no error should occur outside.\n        callback(null, err);\n      } finally {\n        if (req.curlirize !== false) {\n          callback({\n            command: req.curlCommand,\n            object: req.curlObject,\n          });\n        }\n        // eslint-disable-next-line no-unsafe-finally\n        return req;\n      }\n    },\n    (error) => {\n      // Do something with request error\n      callback(null, error);\n      return Promise.reject(error);\n    }\n  );\n  instance.interceptors.response.use(\n    (response) => {\n      // Any status code that lie within the range of 2xx cause this function to trigger\n      // Do something with response data\n      callback({\n        response,\n      });\n      return response;\n    },\n    (error) => {\n      // Any status codes that falls outside the range of 2xx cause this function to trigger\n      // Do something with response error\n      callback(null, error);\n      return Promise.reject(error);\n    }\n  );\n};\n","export type Json = {\n  /**\n   * Compare two json objects\n   * @param {object} obj1 object 1\n   * @param {object} obj2 object 2\n   * @param {string[]} ignoreKeys array of keys to ignore in comparison\n   * @returns {boolean} true if the two json objects have the same length and all the properties have the same value\n   */\n  isEqualJson(obj1: object, obj2: object, ignoreKeys?: string[]): boolean;\n  /**\n   * Deep delete keys and their values from an input object. If a key in object contains substring, the key an its value is deleted.\n   * @param {Object} object input object that needs keys removed\n   * @param {String} substring substring to search for in key\n   * @returns the modified object without the matching keys and their values\n   */\n  deleteDeepByKey(object: any, substring: any): any;\n  /**\n   * Deep clone object\n   * @param {any} obj object to deep clone\n   * @returns {any} new object cloned from obj\n   */\n  cloneDeep(obj: any): any;\n  /**\n   * Deep merge two objects\n   * @param obj1 first object\n   * @param obj2 second object\n   * @returns merged first and second object\n   */\n  mergeDeep(obj1: any, obj2: any): any;\n  /**\n   * Get all paths for an object\n   * @param {any} o object\n   * @param {string} prefix prefix (path calculated up to this point). Only needed for recursion or to add a global prefix to all paths.\n   * @param {string} delim delimiter used to separate elements of the path. Default is '.'.\n   * @returns {string[]} an array of paths\n   */\n  getPaths(o: any, prefix?: string, delim?: string): string[];\n  findInArray(objs: any[], predicate: any): any;\n  get(obj: any, path: string[], defaultValue?: any): any;\n  put(obj: any, value: any, path: string[]): any;\n  /**\n   * Deterministic stringify\n   * @param {any} obj json object to stringify deterministically\n   * @returns {string} stringified json object\n   */\n  stringify(obj: any): string;\n};\n\nexport default (): Json => {\n  return {\n    isEqualJson(\n      obj1: object,\n      obj2: object,\n      ignoreKeys: string[] = []\n    ): boolean {\n      return isEqualJson(obj1, obj2, ignoreKeys);\n    },\n    deleteDeepByKey(object, substring) {\n      return deleteDeepByKey(object, substring);\n    },\n    cloneDeep(obj: any): any {\n      return JSON.parse(JSON.stringify(obj));\n    },\n    mergeDeep(obj1: any, obj2: any): any {\n      return mergeDeep(obj1, obj2);\n    },\n    getPaths(o: any, prefix = '', delim = '.'): string[] {\n      return getPaths(o, prefix, delim);\n    },\n    findInArray(objs: any[], predicate: any): any {\n      return findInArray(objs, predicate);\n    },\n    get(obj: any, path: string[], defaultValue: any = undefined): any {\n      return get(obj, path, defaultValue);\n    },\n    put(obj: any, value: any, path: string[]): any {\n      return put(obj, value, path);\n    },\n    stringify(obj: any): string {\n      return stringify(obj);\n    },\n  };\n};\n\n/**\n * Compare two json objects\n * @param {object} obj1 object 1\n * @param {object} obj2 object 2\n * @param {string[]} ignoreKeys array of keys to ignore in comparison\n * @returns {boolean} true if the two json objects have the same length and all the properties have the same value\n */\nexport function isEqualJson(\n  obj1: object,\n  obj2: object,\n  ignoreKeys: string[] = []\n): boolean {\n  const obj1Keys = Object.keys(obj1).filter((key) => !ignoreKeys.includes(key));\n  const obj2Keys = Object.keys(obj2).filter((key) => !ignoreKeys.includes(key));\n\n  if (obj1Keys.length !== obj2Keys.length) {\n    return false;\n  }\n\n  for (const objKey of obj1Keys) {\n    if (obj1[objKey] !== obj2[objKey]) {\n      if (\n        typeof obj1[objKey] === 'object' &&\n        typeof obj2[objKey] === 'object'\n      ) {\n        if (!isEqualJson(obj1[objKey], obj2[objKey], ignoreKeys)) {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n/**\n * Deep delete keys and their values from an input object. If a key in object contains or equals substring, the key an its value is deleted.\n * @param {Object} object input object that needs keys removed\n * @param {String} substring substring to search for in key\n * @returns the modified object without the matching keys and their values\n */\nexport function deleteDeepByKey(object: any, substring: string) {\n  const obj = object;\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    if (key.indexOf(substring) > -1) {\n      delete obj[key];\n    } else if (Object(obj[key]) === obj[key]) {\n      obj[key] = deleteDeepByKey(obj[key], substring);\n    }\n  }\n  return obj;\n}\n\n/**\n * Deep clone object\n * @param {any} obj object to deep clone\n * @returns {any} new object cloned from obj\n */\nexport function cloneDeep(obj: any): any {\n  return JSON.parse(JSON.stringify(obj));\n}\n\n/**\n * Deep merge two objects\n * @param obj1 first object\n * @param obj2 second object\n * @returns merged first and second object\n */\nexport function mergeDeep(obj1: any, obj2: any): any {\n  if (obj1) {\n    for (const key of Object.keys(obj2)) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (!obj1.hasOwnProperty(key) || typeof obj2[key] !== 'object')\n        obj1[key] = obj2[key];\n      else mergeDeep(obj1[key], obj2[key]);\n    }\n  }\n  return obj1;\n}\n\n/**\n * Get all paths for an object\n * @param {any} o object\n * @param {string} prefix prefix (path calculated up to this point). Only needed for recursion or to add a global prefix to all paths.\n * @param {string} delim delimiter used to separate elements of the path. Default is '.'.\n * @returns {string[]} an array of paths\n */\nexport function getPaths(o: any, prefix = '', delim = '.'): string[] {\n  const paths: string[] = [];\n  for (const k of Object.keys(o)) {\n    // value\n    if (Object(o[k]) !== o[k]) {\n      const p = prefix + k + delim + o[k];\n      paths.push(p);\n    }\n    // function\n    else if (typeof o[k] === 'function') {\n      const func: string = o[k].toString();\n      const p = prefix + func.substring(0, func.indexOf('{')).trim();\n      paths.push(p);\n    }\n    // object\n    else {\n      getPaths(o[k], prefix + k + delim, delim).forEach((p) => paths.push(p));\n    }\n  }\n  return paths;\n}\n\nexport function findInArray(objs: any[], predicate: any): any {\n  const results = objs.filter((obj) => {\n    for (const [key, value] of Object.entries(predicate)) {\n      if (obj[key] !== value) return false;\n    }\n    return true;\n  });\n  if (results.length > 0) return results[0];\n  return undefined;\n}\n\nexport function get(\n  obj: any,\n  path: string[],\n  defaultValue: any = undefined\n): any {\n  let result = obj;\n  for (const element of path) {\n    result = result[element];\n    if (!result) return defaultValue;\n  }\n  return result;\n}\n\nexport function put(obj: any, value: any, path: string[]): any {\n  let ref = obj;\n  for (const [i, element] of path.entries()) {\n    if (!ref[element] || !(ref[element] instanceof Object)) ref[element] = {};\n    i < path.length - 1 ? (ref = ref[element]) : (ref[element] = value);\n  }\n  ref = value;\n  return obj;\n}\n\n/**\n * Replacer function to create deterministic output with JSON.stringify()\n * @param _key not used\n * @param value json object to sort\n * @returns sorted object\n * @see {@link https://gist.github.com/davidfurlong/463a83a33b70a3b6618e97ec9679e490}\n * @example JSON.stringify({c: 1, a: { d: 0, c: 1, e: {a: 0, 1: 4}}}, replacer);\n */\nconst replacer = (_key: any, value: any) =>\n  value instanceof Object && !(value instanceof Array)\n    ? Object.keys(value)\n        .sort()\n        .reduce((sorted, key) => {\n          sorted[key] = value[key];\n          return sorted;\n        }, {})\n    : value;\n\n/**\n * Deterministic stringify\n * @param obj json object to stringify deterministically\n * @returns stringified json object\n */\nexport function stringify(obj: any): string {\n  return JSON.stringify(obj, replacer, 2);\n}\n","{\n  \"name\": \"@rockcarver/frodo-lib\",\n  \"version\": \"2.0.0-77\",\n  \"type\": \"commonjs\",\n  \"main\": \"./dist/cjs/index.js\",\n  \"module\": \"./dist/esm/index.js\",\n  \"types\": \"./index.d.ts\",\n  \"exports\": {\n    \".\": {\n      \"require\": \"./dist/index.js\",\n      \"default\": \"./dist/esm/index.js\",\n      \"import\": \"./dist/esm/index.js\"\n    }\n  },\n  \"scripts\": {\n    \"test\": \"npm run build && npm run test:only\",\n    \"test:only\": \"node --no-warnings --experimental-vm-modules --experimental-specifier-resolution=node node_modules/jest/bin/jest.js --silent\",\n    \"test:debug\": \"node --no-warnings --experimental-vm-modules --experimental-specifier-resolution=node node_modules/jest/bin/jest.js --verbose=true --silent=false\",\n    \"test:record\": \"FRODO_POLLY_MODE=record node --no-warnings --experimental-vm-modules --experimental-specifier-resolution=node node_modules/jest/bin/jest.js --verbose=true --silent=false --runInBand --updateSnapshot --testPathIgnorePatterns cjs --testPathPattern\",\n    \"test:record_noauth\": \"FRODO_POLLY_MODE=record_noauth node --no-warnings --experimental-vm-modules --experimental-specifier-resolution=node node_modules/jest/bin/jest.js --verbose=true --silent=false --updateSnapshot --testPathIgnorePatterns cjs --testPathPattern\",\n    \"test:update\": \"node --no-warnings --experimental-vm-modules --experimental-specifier-resolution=node node_modules/jest/bin/jest.js --verbose=true --silent=false --updateSnapshot --testPathPattern\",\n    \"lint\": \"eslint --ext .ts --ignore-path .gitignore .\",\n    \"clean-dist\": \"rimraf dist\",\n    \"build\": \"npm run clean-dist && npx tsup ./src/index.ts --legacy-output --format esm,cjs --dts\",\n    \"doc\": \"npx typedoc\"\n  },\n  \"description\": \"A library to manage ForgeRock Identity Cloud tenants, ForgeOps deployments, and classic deployments.\",\n  \"keywords\": [\n    \"forgerock\",\n    \"library\",\n    \"am\",\n    \"openam\",\n    \"idm\",\n    \"openidm\",\n    \"forgeops\",\n    \"identity cloud\",\n    \"export\",\n    \"import\",\n    \"ci/cd\",\n    \"devops\"\n  ],\n  \"engines\": {\n    \"node\": \">=16\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/rockcarver/frodo-lib.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/rockcarver/frodo-lib/issues\"\n  },\n  \"contributors\": [\n    {\n      \"name\": \"Sandeep Chaturvedi\",\n      \"email\": \"sandeep.chaturvedi@forgerock.com\"\n    },\n    {\n      \"name\": \"Adam Crockett\",\n      \"email\": \"adam.crockett@forgerock.com\"\n    },\n    {\n      \"name\": \"Mees van Dongen\",\n      \"email\": \"meesvandongen@gmail.com\"\n    },\n    {\n      \"name\": \"Ali Falahi\",\n      \"email\": \"ali@falahi.com\"\n    },\n    {\n      \"name\": \"Huston Franklin\",\n      \"email\": \"hfranklin@trivir.com\"\n    },\n    {\n      \"name\": \"Preston Hales\",\n      \"email\": \"phales@trivir.com\"\n    },\n    {\n      \"name\": \"Nick Hangartner\",\n      \"email\": \"nhangartner@gmail.com\"\n    },\n    {\n      \"name\": \"Marcel Maas\",\n      \"email\": \"maas.marcel@gmail.com\"\n    },\n    {\n      \"name\": \"Joshua Sayers\",\n      \"email\": \"joshua.sayers@forgerock.com\"\n    },\n    {\n      \"name\": \"Volker Scheuber\",\n      \"email\": \"volker.scheuber@forgerock.com\"\n    }\n  ],\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"@pollyjs/adapter-node-http\": \"^6.0.5\",\n    \"@pollyjs/core\": \"^6.0.5\",\n    \"@pollyjs/persister-fs\": \"^6.0.5\",\n    \"agentkeepalive\": \"^4.2.1\",\n    \"axios\": \"0.27.2\",\n    \"axios-mock-adapter\": \"^1.21.2\",\n    \"axios-retry\": \"^3.3.1\",\n    \"colors\": \"^1.4.0\",\n    \"esprima\": \"^4.0.1\",\n    \"fs-extra\": \"^11.1.1\",\n    \"https-proxy-agent\": \"^5.0.1\",\n    \"node-jose\": \"^2.2.0\",\n    \"properties-reader\": \"^2.2.0\",\n    \"qs\": \"^6.10.3\",\n    \"replaceall\": \"^0.1.6\",\n    \"slugify\": \"^1.6.5\",\n    \"uuid\": \"^9.0.0\"\n  },\n  \"devDependencies\": {\n    \"@babel/cli\": \"^7.24.1\",\n    \"@babel/core\": \"^7.24.3\",\n    \"@babel/eslint-parser\": \"^7.19.1\",\n    \"@babel/plugin-proposal-export-namespace-from\": \"^7.18.9\",\n    \"@babel/plugin-syntax-import-assertions\": \"^7.24.1\",\n    \"@babel/plugin-transform-modules-commonjs\": \"^7.24.1\",\n    \"@babel/preset-env\": \"^7.24.1\",\n    \"@babel/preset-typescript\": \"^7.24.1\",\n    \"@jest/globals\": \"^29.0.1\",\n    \"@types/esprima\": \"^4.0.3\",\n    \"@types/fs-extra\": \"^11.0.1\",\n    \"@types/jest\": \"^29.5.12\",\n    \"@types/lodash\": \"^4.14.189\",\n    \"@types/mock-fs\": \"^4.13.1\",\n    \"@types/node\": \"^20.5.8\",\n    \"@types/properties-reader\": \"^2.1.1\",\n    \"@types/uuid\": \"^9.0.0\",\n    \"@typescript-eslint/eslint-plugin\": \"^6.5.0\",\n    \"@typescript-eslint/parser\": \"^6.5.0\",\n    \"babel-jest\": \"^29.3.1\",\n    \"babel-plugin-add-import-extension\": \"^1.6.0\",\n    \"babel-plugin-transform-import-meta\": \"^2.1.1\",\n    \"copyfiles\": \"^2.4.1\",\n    \"del\": \"6.1.1\",\n    \"eslint\": \"^8.28.0\",\n    \"eslint-config-prettier\": \"^9.0.0\",\n    \"eslint-plugin-deprecation\": \"^2.0.0\",\n    \"eslint-plugin-import\": \"^2.28.0\",\n    \"eslint-plugin-jest\": \"^27.1.5\",\n    \"eslint-plugin-prettier\": \"^5.0.0\",\n    \"eslint-plugin-simple-import-sort\": \"^10.0.0\",\n    \"jest\": \"^29.3.1\",\n    \"jest-jasmine2\": \"^29.3.1\",\n    \"loglevel\": \"^1.8.1\",\n    \"map-stream\": \"^0.0.7\",\n    \"mock-fs\": \"^5.2.0\",\n    \"prettier\": \"^3.0.3\",\n    \"rimraf\": \"^5.0.1\",\n    \"setup-polly-jest\": \"^0.11.0\",\n    \"ts-jest\": \"^29.1.2\",\n    \"tsup\": \"^8.0.2\",\n    \"typedoc\": \"^0.25.0\",\n    \"typedoc-plugin-missing-exports\": \"^2.0.0\",\n    \"typescript\": \"^5.2.2\"\n  }\n}\n","import * as pkg from '../../package.json';\n\nexport const getUserAgent = () => `${pkg.name}/${pkg.version}`;\n\nexport const getPackageVersion = () => `v${pkg.version} [${process.version}]`;\n\nexport const getVersionFromPackage = () => pkg.version;\n","/* eslint-disable no-console */\nimport { FeatureInterface } from '../api/cloud/FeatureApi';\nimport { UserSessionMetaType } from '../ops/AuthenticateOps';\nimport { FrodoError } from '../ops/FrodoError';\nimport { JwkRsa } from '../ops/JoseOps';\nimport { AccessTokenMetaType } from '../ops/OAuth2OidcOps';\nimport {\n  ProgressIndicatorStatusType,\n  ProgressIndicatorType,\n} from '../utils/Console';\nimport { cloneDeep } from '../utils/JsonUtils';\nimport { getPackageVersion } from './Version';\n\nexport type State = {\n  /**\n   * Get a clone of the full state as an object\n   * @returns a clone of the state\n   */\n  getState(): StateInterface;\n  /**\n   * Set the AM host base URL\n   * @param host Access Management base URL, e.g.: https://cdk.iam.example.com/am. To use a connection profile, just specify a unique substring.\n   */\n  setHost(host: string): void;\n  /**\n   * Get the AM host base URL\n   * @returns the AM host base URL\n   */\n  getHost(): string;\n  setUsername(username: string): void;\n  getUsername(): string;\n  setPassword(password: string): void;\n  getPassword(): string;\n  setRealm(realm: string): void;\n  getRealm(): string;\n  setDeploymentType(type: string): void;\n  getDeploymentType(): string;\n  setAllowInsecureConnection(allowInsecureConnection: boolean): void;\n  getAllowInsecureConnection(): boolean;\n  setCookieName(name: string): void;\n  getCookieName(): string;\n  setUserSessionTokenMeta(value: UserSessionMetaType): void;\n  getCookieValue(): string;\n  getUserSessionTokenMeta(): UserSessionMetaType;\n  setFeatures(features: FeatureInterface[]): void;\n  getFeatures(): FeatureInterface[];\n  setAuthenticationHeaderOverrides(overrides: Record<string, string>): void;\n  getAuthenticationHeaderOverrides(): Record<string, string>;\n  setAuthenticationService(service: string): void;\n  getAuthenticationService(): string;\n  setServiceAccountId(uuid: string): void;\n  getServiceAccountId(): string;\n  setServiceAccountJwk(jwk: JwkRsa): void;\n  getServiceAccountJwk(): JwkRsa;\n  setServiceAccountScope(scope: string): void;\n  getServiceAccountScope(): string;\n  setUseBearerTokenForAmApis(useBearerTokenForAmApis: boolean): void;\n  getUseBearerTokenForAmApis(): boolean;\n  setBearerTokenMeta(token: AccessTokenMetaType): void;\n  getBearerToken(): string;\n  getBearerTokenMeta(): AccessTokenMetaType;\n  setLogApiKey(key: string): void;\n  getLogApiKey(): string;\n  setLogApiSecret(secret: string): void;\n  getLogApiSecret(): string;\n  setAmVersion(version: string): void;\n  getAmVersion(): string;\n  setFrodoVersion(version: string): void;\n  getFrodoVersion(): string;\n  setConnectionProfilesPath(path: string): void;\n  getConnectionProfilesPath(): string;\n  setUseTokenCache(useTokenCache: boolean): void;\n  getUseTokenCache(): boolean;\n  setTokenCachePath(path: string): void;\n  getTokenCachePath(): string;\n  setMasterKeyPath(path: string): void;\n  getMasterKeyPath(): string;\n  setOutputFile(file: string): void;\n  getOutputFile(): string;\n  setDirectory(directory: string): void;\n  getDirectory(): string;\n  setAutoRefreshTimer(timer: NodeJS.Timeout): void;\n  getAutoRefreshTimer(): NodeJS.Timeout;\n  setCurlirizeHandler(handler: (message: string) => void): void;\n  getCurlirizeHandler(): (message: string) => void;\n  setCurlirize(curlirize: boolean): void;\n  getCurlirize(): boolean;\n  setCreateProgressHandler(\n    handler: (\n      type: ProgressIndicatorType,\n      total?: number,\n      message?: string\n    ) => string\n  ): void;\n  getCreateProgressHandler(): (\n    type: ProgressIndicatorType,\n    total?: number,\n    message?: string\n  ) => string;\n  setUpdateProgressHandler(\n    handler: (id: string, message: string) => void\n  ): void;\n  getUpdateProgressHandler(): (id: string, message: string) => void;\n  setStopProgressHandler(\n    handler: (\n      id: string,\n      message: string,\n      status?: ProgressIndicatorStatusType\n    ) => void\n  ): void;\n  getStopProgressHandler(): (\n    id: string,\n    message: string,\n    status?: ProgressIndicatorStatusType\n  ) => void;\n  setPrintHandler(\n    handler: (\n      message: string | object,\n      type?: string,\n      newline?: boolean\n    ) => void\n  ): void;\n  getPrintHandler(): (\n    message: string | object,\n    type?: string,\n    newline?: boolean\n  ) => void;\n  setErrorHandler(handler: (error: Error, message?: string) => void): void;\n  getErrorHandler(): (error: Error, message?: string) => void;\n  setVerboseHandler(handler: (message: string | object) => void): void;\n  getVerboseHandler(): (message: string | object) => void;\n  setVerbose(verbose: boolean): void;\n  getVerbose(): boolean;\n  setDebugHandler(handler: (message: string | object) => void): void;\n  getDebugHandler(): (message: string | object) => void;\n  setDebug(debug: boolean): void;\n  getDebug(): boolean;\n  /**\n   * Reset the state to default values\n   */\n  reset(): void;\n\n  // Deprecated\n\n  /**\n   * @deprecated since v0.17.0 use `setHost(host: string)` instead\n   */\n  setTenant(tenant: string): void;\n  /**\n   * @deprecated since v0.17.0 use `getHost` instead\n   */\n  getTenant(): string;\n};\n\nexport default (initialState: StateInterface): State => {\n  const state: StateInterface = { ...globalState, ...initialState };\n  return {\n    getState(): StateInterface {\n      return cloneDeep(state);\n    },\n\n    setHost(host: string) {\n      state.host = host;\n    },\n    getHost() {\n      return state.host || process.env.FRODO_HOST;\n    },\n\n    setUsername(username: string) {\n      state.username = username;\n    },\n    getUsername() {\n      return state.username || process.env.FRODO_USERNAME;\n    },\n\n    setPassword(password: string) {\n      state.password = password;\n    },\n    getPassword() {\n      return state.password || process.env.FRODO_PASSWORD;\n    },\n\n    setRealm(realm: string) {\n      state.realm = realm;\n    },\n    getRealm() {\n      return state.realm || process.env.FRODO_REALM;\n    },\n\n    setDeploymentType(type: string) {\n      state.deploymentType = type;\n    },\n    getDeploymentType() {\n      return state.deploymentType;\n    },\n\n    setAllowInsecureConnection(allowInsecureConnection: boolean) {\n      state.allowInsecureConnection = allowInsecureConnection;\n    },\n    getAllowInsecureConnection() {\n      return state.allowInsecureConnection;\n    },\n\n    setCookieName(name: string) {\n      state.cookieName = name;\n    },\n    getCookieName() {\n      return state.cookieName;\n    },\n    setUserSessionTokenMeta(token: UserSessionMetaType): void {\n      state.userSessionToken = token;\n    },\n    getCookieValue() {\n      return state.userSessionToken?.tokenId;\n    },\n    getUserSessionTokenMeta(): UserSessionMetaType {\n      return state.userSessionToken;\n    },\n\n    setFeatures(features: FeatureInterface[]) {\n      state.features = features;\n    },\n    getFeatures() {\n      return state.features;\n    },\n\n    setAuthenticationHeaderOverrides(overrides: Record<string, string>) {\n      state.authenticationHeaderOverrides = overrides;\n    },\n    getAuthenticationHeaderOverrides() {\n      return state.authenticationHeaderOverrides;\n    },\n    setAuthenticationService(service: string) {\n      state.authenticationService = service;\n    },\n    getAuthenticationService() {\n      return (\n        state.authenticationService || process.env.FRODO_AUTHENTICATION_SERVICE\n      );\n    },\n\n    setServiceAccountId(uuid: string) {\n      state.serviceAccountId = uuid;\n    },\n    getServiceAccountId(): string {\n      return state.serviceAccountId || process.env.FRODO_SA_ID;\n    },\n    setServiceAccountJwk(jwk: JwkRsa) {\n      state.serviceAccountJwk = { ...jwk };\n    },\n    getServiceAccountJwk(): JwkRsa {\n      return (\n        state.serviceAccountJwk ||\n        (process.env.FRODO_SA_JWK\n          ? JSON.parse(process.env.FRODO_SA_JWK)\n          : undefined)\n      );\n    },\n    setServiceAccountScope(scope: string): void {\n      state.serviceAccountScope = scope;\n    },\n    getServiceAccountScope(): string {\n      return state.serviceAccountScope;\n    },\n\n    setUseBearerTokenForAmApis(useBearerTokenForAmApis: boolean) {\n      state.useBearerTokenForAmApis = useBearerTokenForAmApis;\n    },\n    getUseBearerTokenForAmApis() {\n      return state.useBearerTokenForAmApis;\n    },\n    setBearerTokenMeta(token: AccessTokenMetaType) {\n      state.bearerToken = token;\n    },\n    getBearerToken(): string {\n      return state.bearerToken?.access_token;\n    },\n    getBearerTokenMeta(): AccessTokenMetaType {\n      return state.bearerToken;\n    },\n\n    setLogApiKey(key: string) {\n      state.logApiKey = key;\n    },\n    getLogApiKey() {\n      return state.logApiKey || process.env.FRODO_LOG_KEY;\n    },\n    setLogApiSecret(secret: string) {\n      state.logApiSecret = secret;\n    },\n    getLogApiSecret() {\n      return state.logApiSecret || process.env.FRODO_LOG_SECRET;\n    },\n\n    setAmVersion(version: string) {\n      state.amVersion = version;\n    },\n    getAmVersion() {\n      return state.amVersion;\n    },\n\n    setFrodoVersion(version: string) {\n      state.frodoVersion = version;\n    },\n    getFrodoVersion() {\n      return state.frodoVersion || getPackageVersion();\n    },\n\n    setConnectionProfilesPath(path: string) {\n      state.connectionProfilesPath = path;\n    },\n    getConnectionProfilesPath() {\n      return state.connectionProfilesPath;\n    },\n\n    setUseTokenCache(useTokenCache: boolean) {\n      state.useTokenCache = useTokenCache;\n    },\n    getUseTokenCache() {\n      return process.env.FRODO_NO_CACHE ? false : state.useTokenCache;\n    },\n    setTokenCachePath(path: string) {\n      state.tokenCachePath = path;\n    },\n    getTokenCachePath() {\n      return state.tokenCachePath;\n    },\n\n    setMasterKeyPath(path: string) {\n      state.masterKeyPath = path;\n    },\n    getMasterKeyPath() {\n      return state.masterKeyPath;\n    },\n\n    setOutputFile(file: string) {\n      state.outputFile = file;\n    },\n    getOutputFile() {\n      return state.outputFile;\n    },\n\n    setDirectory(directory: string) {\n      state.directory = directory;\n    },\n    getDirectory() {\n      return state.directory;\n    },\n\n    setAutoRefreshTimer(timer: NodeJS.Timeout): void {\n      state.autoRefreshTimer = timer;\n    },\n    getAutoRefreshTimer(): NodeJS.Timeout {\n      return state.autoRefreshTimer;\n    },\n\n    setCurlirizeHandler(handler: (message: string) => void) {\n      state.curlirizeHandler = handler;\n    },\n    getCurlirizeHandler() {\n      return state.curlirizeHandler;\n    },\n    setCurlirize(curlirize: boolean) {\n      state.curlirize = curlirize;\n    },\n    getCurlirize(): boolean {\n      return state.curlirize;\n    },\n\n    setCreateProgressHandler(\n      handler: (\n        type: ProgressIndicatorType,\n        total?: number,\n        message?: string\n      ) => string\n    ) {\n      state.createProgressHandler = handler;\n    },\n    getCreateProgressHandler() {\n      return state.createProgressHandler;\n    },\n    setUpdateProgressHandler(handler: (id: string, message: string) => void) {\n      state.updateProgressHandler = handler;\n    },\n    getUpdateProgressHandler() {\n      return state.updateProgressHandler;\n    },\n    setStopProgressHandler(\n      handler: (message: string, status?: string) => void\n    ) {\n      state.stopProgressHandler = handler;\n    },\n    getStopProgressHandler() {\n      return state.stopProgressHandler;\n    },\n\n    // global state\n\n    setPrintHandler(\n      handler: (\n        message: string | object,\n        type?: string,\n        newline?: boolean\n      ) => void\n    ) {\n      globalState.printHandler = handler;\n    },\n    getPrintHandler() {\n      return globalState.printHandler;\n    },\n\n    setErrorHandler(handler: (error: Error, message?: string) => void) {\n      globalState.errorHandler = handler;\n    },\n    getErrorHandler() {\n      return globalState.errorHandler;\n    },\n\n    setVerboseHandler(handler: (message: string | object) => void) {\n      globalState.verboseHandler = handler;\n    },\n    getVerboseHandler() {\n      return globalState.verboseHandler;\n    },\n    setVerbose(verbose: boolean) {\n      globalState.verbose = verbose;\n    },\n    getVerbose(): boolean {\n      return globalState.verbose;\n    },\n\n    setDebugHandler(handler: (message: string | object) => void) {\n      globalState.debugHandler = handler;\n    },\n    getDebugHandler() {\n      return globalState.debugHandler;\n    },\n    setDebug(debug: boolean) {\n      globalState.debug = debug;\n    },\n    getDebug(): boolean {\n      return globalState.debug || process.env.FRODO_DEBUG !== undefined;\n    },\n    reset(): void {\n      for (const key of Object.keys(state)) {\n        state[key] = globalState[key];\n      }\n    },\n\n    // Deprecated\n\n    setTenant(tenant: string) {\n      this.setHost(tenant);\n    },\n    getTenant() {\n      return this.getHost();\n    },\n  };\n};\n\nexport interface StateInterface {\n  // connection settings\n  host?: string;\n  username?: string;\n  password?: string;\n  realm?: string;\n  deploymentType?: string;\n  allowInsecureConnection?: boolean;\n  // customize authentication\n  authenticationHeaderOverrides?: Record<string, string>;\n  authenticationService?: string;\n  // cookie name\n  cookieName?: string;\n  userSessionToken?: UserSessionMetaType;\n  // feature settings\n  features?: FeatureInterface[];\n  // service account settings\n  serviceAccountId?: string;\n  serviceAccountJwk?: JwkRsa;\n  serviceAccountScope?: string;\n  // bearer token settings\n  useBearerTokenForAmApis?: boolean;\n  bearerToken?: AccessTokenMetaType;\n  // log api settings\n  logApiKey?: string;\n  logApiSecret?: string;\n  // versions\n  amVersion?: string;\n  frodoVersion?: string;\n  // miscellaneous settings\n  connectionProfilesPath?: string;\n  useTokenCache?: boolean;\n  tokenCachePath?: string;\n  masterKeyPath?: string;\n  outputFile?: string;\n  directory?: string;\n  autoRefreshTimer?: NodeJS.Timeout;\n  // output handler settings\n  printHandler?: (\n    message: string | object,\n    type?: string,\n    newline?: boolean\n  ) => void;\n  errorHandler?: (error: Error, message: string) => void;\n  verboseHandler?: (message: string | object) => void;\n  verbose?: boolean;\n  debugHandler?: (message: string | object) => void;\n  debug?: boolean;\n  curlirizeHandler?: (message: string) => void;\n  curlirize?: boolean;\n  createProgressHandler?: (\n    type: ProgressIndicatorType,\n    total?: number,\n    message?: string\n  ) => string;\n  updateProgressHandler?: (id: string, message: string) => void;\n  stopProgressHandler?: (id: string, message: string, status?: string) => void;\n}\n\nconst globalState: StateInterface = {\n  authenticationHeaderOverrides: {},\n  printHandler: (message: string | object) => {\n    if (!message) return;\n    if (typeof message === 'object') {\n      console.dir(message, { depth: 3 });\n    } else {\n      console.log(message);\n    }\n  },\n  errorHandler: (error: Error, message?: string) => {\n    if (message) process.stderr.write('' + message['brightRed']);\n    switch (error.name) {\n      case 'FrodoError':\n        process.stderr.write(\n          '' + (error as FrodoError).getCombinedMessage()['brightRed']\n        );\n        break;\n\n      case 'AxiosError': {\n        const code = error['code'];\n        const status = error['response'] ? error['response'].status : null;\n        const message = error['response']\n          ? error['response'].data\n            ? error['response'].data.message\n            : null\n          : null;\n        const detail = error['response']\n          ? error['response'].data\n            ? error['response'].data.detail\n            : null\n          : null;\n        let errorMessage = 'Network error';\n        errorMessage += code ? `\\n  Code: ${code}` : '';\n        errorMessage += status ? `\\n  Status: ${status}` : '';\n        errorMessage += message ? `\\n  Message: ${message}` : '';\n        errorMessage += detail ? `\\n  Detail: ${detail}` : '';\n        process.stderr.write(errorMessage['brightRed']);\n        break;\n      }\n\n      default:\n        process.stderr.write(error.message['brightRed']);\n        break;\n    }\n  },\n  verboseHandler: (message: string | object) => {\n    if (!message) return;\n    if (getVerbose()) {\n      if (typeof message === 'object') {\n        console.dir(message, { depth: 3 });\n      } else {\n        console.log(message);\n      }\n    }\n  },\n  debugHandler: (message: string | object) => {\n    if (!message) return;\n    if (getDebug()) {\n      if (typeof message === 'object') {\n        console.dir(message, { depth: 6 });\n      } else {\n        console.log(message);\n      }\n    }\n  },\n  curlirizeHandler: (message: string) => {\n    if (!message) return;\n    if (getDebug()) {\n      console.log(message);\n    }\n  },\n};\n\nexport const getVerbose = (): boolean => globalState.verbose;\n\nexport const getDebug = (): boolean =>\n  globalState.debug || process.env.FRODO_DEBUG !== undefined;\n","import { v4 as uuidv4 } from 'uuid';\n\nimport { State } from '../shared/State';\n\n/**\n * Handles data / messages output. The caller decides and implements how\n * the data and messages are handled, by implementing the handler function\n * on its side. `handler` is optional, and if not included by the caller,\n * the data and messages will be lost.\n *\n * @param {string | unknown} message The string message to return\n * @param {string} [type=text] \"text\", \"info\", \"warn\", \"error\" or \"data\". All but\n * type=\"data\" will be written to stderr.\n * @param {boolean} [newline=true] Whether to add a newline at the end of message\n * messages returned\n */\nexport function printMessage({\n  message,\n  type = 'text',\n  newline = true,\n  state,\n}: {\n  message: string | object;\n  type?: string;\n  newline?: boolean;\n  state: State;\n}) {\n  const handler = state.getPrintHandler();\n  if (handler) {\n    handler(message, type, newline);\n  }\n}\n\n/**\n * Prints an error message from an error object and an optional custom message\n *\n * @param error error object\n */\nexport function printError({\n  error,\n  message,\n  state,\n}: {\n  error: Error;\n  message?: string;\n  state: State;\n}) {\n  const handler = state.getErrorHandler();\n  if (handler) {\n    handler(error, message);\n  }\n}\n\n/**\n * Handles verbose output. The caller decides and implements how\n * the messages are handled, by implementing the handler function\n * on its side. Implementing and registering a `handler` is optional.\n *\n * @param {string | unknown} message The verbose output message\n */\nexport function verboseMessage({\n  message,\n  state,\n}: {\n  message: string | object;\n  state: State;\n}) {\n  const handler = state.getVerboseHandler();\n  if (handler) {\n    handler(message);\n  }\n}\n\n/**\n * Handles debug output. The caller decides and implements how\n * the messages are handled, by implementing the handler function\n * on its side. Implementing and registering a `handler` is optional.\n *\n * @param {string | object} message The debug output message\n */\nexport function debugMessage({\n  message,\n  state,\n}: {\n  message: string | object;\n  state: State;\n}) {\n  const handler = state.getDebugHandler();\n  if (handler) {\n    handler(message);\n  }\n}\n\n/**\n * Helper function to mask password header in curl command\n * @param curlCommand curl command to mask\n * @param {State} state library state\n * @returns masked curl command\n */\nfunction maskPasswordHeader(curlCommand: string) {\n  const header = 'X-OpenAM-Password:';\n  const mask = '<suppressed>';\n  const regex = new RegExp('\"' + header + '.+?\"', 'g');\n  return curlCommand.replace(regex, '\"' + header + mask + '\"');\n}\n\n/**\n * Handles curlirize output. The caller decides and implements how\n * the messages are handled, by implementing the handler function\n * on its side. Implementing and registering a `handler` is optional.\n *\n * @param {string} message The curlirize output message\n */\nexport function curlirizeMessage({\n  message,\n  state,\n}: {\n  message: string;\n  state: State;\n}) {\n  const handler = state.getCurlirizeHandler();\n  if (handler) {\n    handler(maskPasswordHeader(message));\n  }\n}\n\nexport type ProgressIndicatorType = 'determinate' | 'indeterminate';\n\n/**\n * Calls a callback on client to create a progress indicator.\n * The actual implementation of the indicator is left to the client\n * Two types of indicators are supported:\n * - determinate: should be used when the process completion rate\n * can be detected (example: progress bar showing percentage or count)\n * - indeterminate: used when progress isn’t detectable, or if\n * it’s not necessary to indicate how long an activity will take.\n * (example: spinner showing progress, but not quantifying the progress)\n *\n * Example:\n * [========================================] 100% | 49/49 | Analyzing journey - transactional_auth\n *\n * @param {Number} total The total number of entries to track progress for\n * @param {String} message optional progress bar message\n * @param {String} type optional type of progress indicator. default is 'determinate'\n *\n */\nexport function createProgressIndicator({\n  total,\n  message = undefined,\n  type = 'determinate',\n  state,\n}: {\n  total: number;\n  message?: string;\n  type?: ProgressIndicatorType;\n  state: State;\n}): string {\n  const handler = state.getCreateProgressHandler();\n  if (handler) {\n    return handler(type, total, message);\n  }\n  return uuidv4();\n}\n\n/**\n * Updates the progress indicator with new data/updated status.\n * @param {string} message optional message to show with the indicator\n *\n */\nexport function updateProgressIndicator({\n  id,\n  message = undefined,\n  state,\n}: {\n  id: string;\n  message?: string;\n  state: State;\n}) {\n  const handler = state.getUpdateProgressHandler();\n  if (handler) {\n    handler(id, message);\n  }\n}\n\nexport type ProgressIndicatorStatusType = 'none' | 'success' | 'warn' | 'fail';\n\n/**\n * Stop and hide the progress indicator\n * @param {string} message optional message to show with the indicator\n * @param {string} status one of 'none', 'success', 'warn', 'fail'\n */\nexport function stopProgressIndicator({\n  id,\n  message = null,\n  status = 'none',\n  state,\n}: {\n  id: string;\n  message?: string;\n  status?: ProgressIndicatorStatusType;\n  state: State;\n}) {\n  const handler = state.getStopProgressHandler();\n  if (handler) {\n    handler(id, message, status);\n  }\n}\n","/* eslint-disable no-console */\nimport NodeHttpAdapter from '@pollyjs/adapter-node-http';\nimport { Polly } from '@pollyjs/core';\nimport FSPersister from '@pollyjs/persister-fs';\nimport { MODES } from '@pollyjs/utils';\nimport { LogLevelDesc } from 'loglevel';\nimport path from 'path';\n\nimport { State } from '../shared/State';\nimport { decode, encode, isBase64Encoded } from './Base64Utils';\nimport { debugMessage, printMessage } from './Console';\n\nconst FRODO_MOCK_HOSTS = process.env.FRODO_MOCK_HOSTS\n  ? process.env.FRODO_MOCK_HOSTS.split(',')\n  : [\n      'https://openam-frodo-dev.forgeblocks.com',\n      'https://openam-volker-dev.forgeblocks.com',\n      'https://openam-volker-demo.forgeblocks.com',\n      'https://nightly.gcp.forgeops.com',\n    ];\n\nlet recordIfMissing = false;\nlet mode = MODES.REPLAY;\n\nconst recordingsDir = process.env.FRODO_MOCK_DIR\n  ? process.env.FRODO_MOCK_DIR\n  : 'test/e2e/mocks';\n\nif (process.env.FRODO_MOCK) {\n  Polly.register(NodeHttpAdapter);\n  Polly.register(FSPersister);\n  if (process.env.FRODO_MOCK === 'record') {\n    mode = MODES.RECORD;\n    recordIfMissing = true;\n  }\n}\n\nfunction defaultMatchRequestsBy() {\n  return {\n    method: true,\n    headers: false, // do not match headers, because \"Authorization\" header is sent only at recording time\n    body: true,\n    order: false,\n    url: {\n      protocol: false,\n      username: false,\n      password: false,\n      hostname: false, // we will record from different envs but run tests always against `frodo-dev`\n      port: false,\n      pathname: true,\n      query: true,\n      hash: true,\n    },\n  };\n}\n\nfunction authenticationMatchRequestsBy() {\n  const matchRequestsBy = defaultMatchRequestsBy();\n  matchRequestsBy['body'] = false;\n  matchRequestsBy.order = true;\n  return matchRequestsBy;\n}\n\n// returns a delayed promise\nasync function delay(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nasync function countdown(ms) {\n  await delay(ms);\n  return --ttl;\n}\n\nconst timeout = 15;\nlet ttl = timeout;\nasync function scheduleShutdown({\n  polly,\n  state,\n}: {\n  polly: Polly;\n  state: State;\n}) {\n  ++ttl;\n  while (await countdown(1000)) {\n    if (ttl < 4)\n      console.log(\n        `Polly instance '${getFrodoCommand({ state })}' stopping in ${ttl}s...`\n      );\n  }\n  await polly.stop();\n  console.log(`Polly instance '${getFrodoCommand({ state })}' stopped.`);\n}\n\nfunction getFrodoArgsId({ start, state }: { start: number; state: State }) {\n  const result: string[] = [];\n  const args: string[] = [];\n  const params: string[] = [];\n  let expectValue = false;\n  process.argv\n    .filter((_v, i) => i >= start)\n    .map((v) => {\n      if (v.startsWith('--')) {\n        params.push(v.replace('--', ''));\n        expectValue = true;\n      } else if (v.startsWith('-')) {\n        params.push(v.replace('-', ''));\n        expectValue = true;\n      } else if (expectValue) {\n        expectValue = false;\n      } else {\n        args.push(v);\n      }\n      return v;\n    });\n  result.push(`${args.length}`);\n  const paramsId = params.join('_');\n  if (paramsId) result.push(paramsId);\n  const argsId = result.join('_');\n  if (mode !== MODES.RECORD)\n    debugMessage({\n      message: `SetupPollyForFrodoLib.getFrodoArgsId: argsId=${argsId}`,\n      state,\n    });\n  return argsId;\n}\n\n/*\nSpecial case for when cli switches are the same but their values are \ndifferent, for example when testing different encodings: generic, pem, base64hmac\n*/\nfunction getFrodoArgValue({ name }: { name: string }) {\n  let result: string = '';\n  let expectValue = false;\n  process.argv.map((v) => {\n    if (v === name) {\n      expectValue = true;\n    } else if (expectValue) {\n      result = '_' + v;\n      expectValue = false;\n    }\n  });\n  return result;\n}\n\n/*\nargv:\n[\n  '/Users/vscheuber/.nvm/versions/node/v18.7.0/bin/node',\n  '/usr/local/bin/frodo',\n  'journey',\n  'list',\n  '-l',\n  'https://openam-volker-dev.forgeblocks.com/am',\n  'alpha',\n  'volker.scheuber@forgerock.com',\n  'Sup3rS3cr3t!'\n]\nargv:\n[\n  '/Users/vscheuber/.nvm/versions/node/v18.7.0/bin/node',\n  '/Users/vscheuber/Projects/frodo-cli/esm/cli/journey/journey-list.js',\n  '-l',\n  'https://openam-volker-dev.forgeblocks.com/am',\n  'alpha',\n  'volker.scheuber@forgerock.com',\n  'Sup3rS3cr3t!'\n]\n*/\nfunction getFrodoCommand({ state }: { state: State }) {\n  let cmd = 'unknown';\n  try {\n    if (mode !== MODES.RECORD)\n      debugMessage({\n        message: `SetupPollyForFrodoLib.getFrodoCommand: process.argv=${process.argv}`,\n        state,\n      });\n    if (\n      !process.argv[1].endsWith('frodo') &&\n      !process.argv[1].endsWith('frodo.exe') &&\n      !process.argv[1].endsWith('app.js')\n    ) {\n      cmd =\n        path.parse(process.argv[1]).name.replace('-', '/') +\n        '/' +\n        getFrodoArgsId({ start: 2, state });\n    } else {\n      cmd = process.argv[2] + '/' + getFrodoArgsId({ start: 3, state });\n    }\n  } catch (error) {\n    printMessage({\n      message: `SetupPollyForFrodoLib.getFrodoCommand: ${error}`,\n      type: 'error',\n      state,\n    });\n    printMessage({ message: process.argv, type: 'error', state });\n    cmd = 'error';\n  }\n  if (mode !== MODES.RECORD)\n    debugMessage({\n      message: `SetupPollyForFrodoLib.getFrodoCommand: cmd=${cmd}`,\n      state,\n    });\n  return cmd;\n}\n\nfunction filterRecording(recording: {\n  request: {\n    headers: [{ name: string; value: string }];\n    postData: { text: any };\n  };\n  response: { content: { mimeType: string; text: any } };\n}) {\n  // request headers\n  if (recording.request?.headers) {\n    const headers: [{ name: string; value: string }] =\n      recording.request.headers;\n    headers.map((header) => {\n      if (header.name.toUpperCase() === 'AUTHORIZATION') {\n        if (isBase64Encoded(header.value)) {\n          header.value = encode('username:password');\n        } else {\n          header.value = header.value.replace(\n            /Bearer .+/,\n            'Bearer <bearer token>'\n          );\n        }\n      }\n      if (header.name.toUpperCase() === 'X-API-KEY') {\n        header.value = '<api key>';\n      }\n      if (header.name.toUpperCase() === 'X-API-SECRET') {\n        header.value = '<api secret>';\n      }\n    });\n    recording.request.headers = headers;\n  }\n\n  // request post body\n  if (recording.request?.postData?.text) {\n    let body = recording.request.postData.text;\n    body = body.replace(/assertion=.+?&/, 'assertion=<assertion jwt token>&');\n    recording.request.postData.text = body;\n  }\n\n  // response body\n  if (recording.response?.content?.text) {\n    let body = recording.response.content.text;\n    // JSON content\n    if (\n      recording.response.content.mimeType === 'application/json;charset=UTF-8'\n    ) {\n      try {\n        const json = JSON.parse(body);\n        if (json['access_token']) json['access_token'] = '<access token>';\n        if (json['id_token']) json['id_token'] = '<id token>';\n        if (json.accessKey) json.accessKey = '<access key>';\n        if (json.result) {\n          for (const obj of json.result) {\n            // check for scripts\n            if (obj.script) {\n              try {\n                let script = decode(obj.script);\n                script = script.replace(\n                  /(var .*?(?:Sid|sid|Secret|secret|PhoneNumberFrom) = (?:\"|'))(.*?)((?:\"|'))/g,\n                  '$1<secret>$3'\n                );\n                obj.script = encode(script);\n              } catch (error) {\n                //\n              }\n            }\n          }\n        }\n        body = JSON.stringify(json);\n      } catch (error) {\n        // ignore\n      }\n    }\n    // Text and XML content\n    if (recording.response.content.mimeType === 'text/xml;charset=utf-8') {\n      try {\n        body = body.replace(\n          /<ds:X509Certificate>.+?<\\/ds:X509Certificate>/gs,\n          `<ds:X509Certificate>${encode('<certificate>')}</ds:X509Certificate>`\n        );\n      } catch (error) {\n        // ignore\n      }\n    }\n    recording.response.content.text = body;\n  }\n}\n\nexport function setupPollyForFrodoLib({\n  matchRequestsBy = defaultMatchRequestsBy(),\n  state,\n}: {\n  matchRequestsBy?: any;\n  state: State;\n}): Polly {\n  const polly = new Polly('default');\n\n  polly.configure({\n    adapters: ['node-http'],\n    mode,\n    recordIfMissing,\n    flushRequestsOnStop: true,\n    logLevel: (process.env.FRODO_POLLY_LOG_LEVEL as LogLevelDesc) || 'warn',\n    recordFailedRequests: true,\n    persister: 'fs',\n    persisterOptions: {\n      fs: {\n        recordingsDir,\n      },\n    },\n    matchRequestsBy,\n  });\n\n  for (const host of FRODO_MOCK_HOSTS) {\n    if (mode === MODES.RECORD) console.log(`***** Host: ${host}`);\n    polly.server.host(host, () => {\n      polly.server\n        .any('/am/oauth2/*')\n        .recordingName(`${getFrodoCommand({ state })}/oauth2`)\n        .on('request', (req) => {\n          req.configure({ matchRequestsBy: authenticationMatchRequestsBy() });\n        });\n      polly.server\n        .any('/am/json/*')\n        .recordingName(`${getFrodoCommand({ state })}/am`);\n      polly.server\n        .any('/am/saml2/*')\n        .recordingName(`${getFrodoCommand({ state })}/saml2`);\n      polly.server\n        .any('/openidm/managed/svcacct')\n        .recordingName(`${getFrodoCommand({ state })}/openidm/managed/svcacct`)\n        .on('request', (req) => {\n          req.configure({ matchRequestsBy: authenticationMatchRequestsBy() });\n        });\n      polly.server\n        .any('/openidm/*')\n        .recordingName(`${getFrodoCommand({ state })}/openidm`);\n      polly.server.any('/environment/*').recordingName(\n        `${getFrodoCommand({\n          state,\n        })}${getFrodoArgValue({ name: '--encoding' })}/environment`\n      );\n      polly.server\n        .any('/keys')\n        .recordingName(`${getFrodoCommand({ state })}/keys`)\n        .on('request', (req) => {\n          req.configure({ matchRequestsBy: authenticationMatchRequestsBy() });\n        });\n      polly.server\n        .any('/monitoring/*')\n        .recordingName(`${getFrodoCommand({ state })}/monitoring`);\n      polly.server\n        .any('/feature')\n        .recordingName(`${getFrodoCommand({ state })}/feature`);\n      polly.server\n        .any('/dashboard/*')\n        .recordingName(`${getFrodoCommand({ state })}/dashboard`);\n    });\n  }\n  polly.server.host('https://api.github.com', () => {\n    polly.server.any('/*').recordingName(`github`);\n  });\n  polly.server.host('https://registry.npmjs.org', () => {\n    polly.server.any('/*').recordingName(`npmjs`);\n  });\n  polly.server\n    .any()\n    .on('request', () => {\n      if (ttl < timeout) {\n        // console.log(`Reset polly stop ttl (${ttl}) to ${timeout}`);\n        ttl = timeout;\n      }\n    })\n    .on('beforePersist', (_req, recording) => {\n      filterRecording(recording);\n    });\n\n  if (mode === MODES.RECORD) {\n    scheduleShutdown({ polly, state });\n  } else {\n    // only output debug messages if not recording as this polly instance is\n    // primarily used by frodo-cli e2e tests, which capture stdout in snapshots.\n    // debug messages falsify the snapshot recordings.\n    debugMessage({ message: `Polly config:`, state });\n    debugMessage({ message: polly.config, state });\n  }\n\n  return polly;\n}\n","export default {\n  RECORD: 'record',\n  REPLAY: 'replay',\n  PASSTHROUGH: 'passthrough',\n  STOPPED: 'stopped'\n};\n","export default {\n  RECORD: 'record',\n  REPLAY: 'replay',\n  INTERCEPT: 'intercept',\n  PASSTHROUGH: 'passthrough'\n};\n","export default [\n  'GET',\n  'PUT',\n  'POST',\n  'DELETE',\n  'PATCH',\n  'MERGE',\n  'HEAD',\n  'OPTIONS'\n];\n","export default {\n  100: 'Continue',\n  101: 'Switching Protocols',\n  200: 'OK',\n  201: 'Created',\n  202: 'Accepted',\n  203: 'Non-Authoritative Information',\n  204: 'No Content',\n  205: 'Reset Content',\n  206: 'Partial Content',\n  207: 'Multi-Status',\n  300: 'Multiple Choice',\n  301: 'Moved Permanently',\n  302: 'Found',\n  303: 'See Other',\n  304: 'Not Modified',\n  305: 'Use Proxy',\n  307: 'Temporary Redirect',\n  400: 'Bad Request',\n  401: 'Unauthorized',\n  402: 'Payment Required',\n  403: 'Forbidden',\n  404: 'Not Found',\n  405: 'Method Not Allowed',\n  406: 'Not Acceptable',\n  407: 'Proxy Authentication Required',\n  408: 'Request Timeout',\n  409: 'Conflict',\n  410: 'Gone',\n  411: 'Length Required',\n  412: 'Precondition Failed',\n  413: 'Request Entity Too Large',\n  414: 'Request-URI Too Long',\n  415: 'Unsupported Media Type',\n  416: 'Requested Range Not Satisfiable',\n  417: 'Expectation Failed',\n  422: 'Unprocessable Entity',\n  500: 'Internal Server Error',\n  501: 'Not Implemented',\n  502: 'Bad Gateway',\n  503: 'Service Unavailable',\n  504: 'Gateway Timeout',\n  505: 'HTTP Version Not Supported'\n};\n","export default {\n  RECORD: 'record',\n  WARN: 'warn',\n  ERROR: 'error'\n};\n","export default class PollyError extends Error {\n  constructor(message, ...args) {\n    super(`[Polly] ${message}`, ...args);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, PollyError);\n    }\n\n    this.name = 'PollyError';\n  }\n}\n","import PollyError from './polly-error';\n\nexport default function (msg, condition) {\n  if (!condition) {\n    throw new PollyError(msg);\n  }\n}\n","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n","var core = module.exports = { version: '2.6.9' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n","module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n","var isObject = require('./_is-object');\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n","var isObject = require('./_is-object');\nvar document = require('./_global').document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n","module.exports = !require('./_descriptors') && !require('./_fails')(function () {\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","var anObject = require('./_an-object');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar toPrimitive = require('./_to-primitive');\nvar dP = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","var dP = require('./_object-dp');\nvar createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n","var global = require('./_global');\nvar core = require('./_core');\nvar ctx = require('./_ctx');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var IS_WRAP = type & $export.W;\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE];\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];\n  var key, own, out;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if (own && has(exports, key)) continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function (C) {\n      var F = function (a, b, c) {\n        if (this instanceof C) {\n          switch (arguments.length) {\n            case 0: return new C();\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if (IS_PROTO) {\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n","module.exports = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' +\n  '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n","var $export = require('./_export');\nvar defined = require('./_defined');\nvar fails = require('./_fails');\nvar spaces = require('./_string-ws');\nvar space = '[' + spaces + ']';\nvar non = '\\u200b\\u0085';\nvar ltrim = RegExp('^' + space + space + '*');\nvar rtrim = RegExp(space + space + '*$');\n\nvar exporter = function (KEY, exec, ALIAS) {\n  var exp = {};\n  var FORCE = fails(function () {\n    return !!spaces[KEY]() || non[KEY]() != non;\n  });\n  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];\n  if (ALIAS) exp[ALIAS] = fn;\n  $export($export.P + $export.F * FORCE, 'String', exp);\n};\n\n// 1 -> String#trimLeft\n// 2 -> String#trimRight\n// 3 -> String#trim\nvar trim = exporter.trim = function (string, TYPE) {\n  string = String(defined(string));\n  if (TYPE & 1) string = string.replace(ltrim, '');\n  if (TYPE & 2) string = string.replace(rtrim, '');\n  return string;\n};\n\nmodule.exports = exporter;\n","var $parseInt = require('./_global').parseInt;\nvar $trim = require('./_string-trim').trim;\nvar ws = require('./_string-ws');\nvar hex = /^[-+]?0[xX]/;\n\nmodule.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {\n  var string = $trim(String(str), 3);\n  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));\n} : $parseInt;\n","var $export = require('./_export');\nvar $parseInt = require('./_parse-int');\n// 18.2.5 parseInt(string, radix)\n$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });\n","require('../modules/es6.parse-int');\nmodule.exports = require('../modules/_core').parseInt;\n","module.exports = require(\"core-js/library/fn/parse-int\");","// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n","var toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n","module.exports = true;\n","module.exports = require('./_hide');\n","module.exports = {};\n","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n","// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject');\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n","// 7.1.15 ToLength\nvar toInteger = require('./_to-integer');\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n","var toInteger = require('./_to-integer');\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n","// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n","var core = require('./_core');\nvar global = require('./_global');\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: core.version,\n  mode: require('./_library') ? 'pure' : 'global',\n  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'\n});\n","var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n","var shared = require('./_shared')('keys');\nvar uid = require('./_uid');\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n","var has = require('./_has');\nvar toIObject = require('./_to-iobject');\nvar arrayIndexOf = require('./_array-includes')(false);\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n","// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n","// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = require('./_object-keys-internal');\nvar enumBugKeys = require('./_enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n","var dP = require('./_object-dp');\nvar anObject = require('./_an-object');\nvar getKeys = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n","var document = require('./_global').document;\nmodule.exports = document && document.documentElement;\n","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = require('./_an-object');\nvar dPs = require('./_object-dps');\nvar enumBugKeys = require('./_enum-bug-keys');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n","var store = require('./_shared')('wks');\nvar uid = require('./_uid');\nvar Symbol = require('./_global').Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n","var def = require('./_object-dp').f;\nvar has = require('./_has');\nvar TAG = require('./_wks')('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n","'use strict';\nvar create = require('./_object-create');\nvar descriptor = require('./_property-desc');\nvar setToStringTag = require('./_set-to-string-tag');\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n","// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n","// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = require('./_has');\nvar toObject = require('./_to-object');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n","'use strict';\nvar LIBRARY = require('./_library');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar $iterCreate = require('./_iter-create');\nvar setToStringTag = require('./_set-to-string-tag');\nvar getPrototypeOf = require('./_object-gpo');\nvar ITERATOR = require('./_wks')('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n","'use strict';\nvar $at = require('./_string-at')(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\nrequire('./_iter-define')(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n","module.exports = function (done, value) {\n  return { value: value, done: !!done };\n};\n","'use strict';\nvar addToUnscopables = require('./_add-to-unscopables');\nvar step = require('./_iter-step');\nvar Iterators = require('./_iterators');\nvar toIObject = require('./_to-iobject');\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') return step(0, index);\n  if (kind == 'values') return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n","require('./es6.array.iterator');\nvar global = require('./_global');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar TO_STRING_TAG = require('./_wks')('toStringTag');\n\nvar DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +\n  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +\n  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +\n  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +\n  'TextTrackList,TouchList').split(',');\n\nfor (var i = 0; i < DOMIterables.length; i++) {\n  var NAME = DOMIterables[i];\n  var Collection = global[NAME];\n  var proto = Collection && Collection.prototype;\n  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n  Iterators[NAME] = Iterators.Array;\n}\n","// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = require('./_cof');\nvar TAG = require('./_wks')('toStringTag');\n// ES3 wrong here\nvar ARG = cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nmodule.exports = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n","module.exports = function (it, Constructor, name, forbiddenField) {\n  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {\n    throw TypeError(name + ': incorrect invocation!');\n  } return it;\n};\n","// call something on iterator step with safe closing on error\nvar anObject = require('./_an-object');\nmodule.exports = function (iterator, fn, value, entries) {\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch (e) {\n    var ret = iterator['return'];\n    if (ret !== undefined) anObject(ret.call(iterator));\n    throw e;\n  }\n};\n","// check on default Array iterator\nvar Iterators = require('./_iterators');\nvar ITERATOR = require('./_wks')('iterator');\nvar ArrayProto = Array.prototype;\n\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};\n","var classof = require('./_classof');\nvar ITERATOR = require('./_wks')('iterator');\nvar Iterators = require('./_iterators');\nmodule.exports = require('./_core').getIteratorMethod = function (it) {\n  if (it != undefined) return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n","var ctx = require('./_ctx');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar anObject = require('./_an-object');\nvar toLength = require('./_to-length');\nvar getIterFn = require('./core.get-iterator-method');\nvar BREAK = {};\nvar RETURN = {};\nvar exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {\n  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);\n  var f = ctx(fn, that, entries ? 2 : 1);\n  var index = 0;\n  var length, step, iterator, result;\n  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if (result === BREAK || result === RETURN) return result;\n  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {\n    result = call(iterator, f, step.value, entries);\n    if (result === BREAK || result === RETURN) return result;\n  }\n};\nexports.BREAK = BREAK;\nexports.RETURN = RETURN;\n","// 7.3.20 SpeciesConstructor(O, defaultConstructor)\nvar anObject = require('./_an-object');\nvar aFunction = require('./_a-function');\nvar SPECIES = require('./_wks')('species');\nmodule.exports = function (O, D) {\n  var C = anObject(O).constructor;\n  var S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);\n};\n","// fast apply, http://jsperf.lnkit.com/fast-apply/5\nmodule.exports = function (fn, args, that) {\n  var un = that === undefined;\n  switch (args.length) {\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return fn.apply(that, args);\n};\n","var ctx = require('./_ctx');\nvar invoke = require('./_invoke');\nvar html = require('./_html');\nvar cel = require('./_dom-create');\nvar global = require('./_global');\nvar process = global.process;\nvar setTask = global.setImmediate;\nvar clearTask = global.clearImmediate;\nvar MessageChannel = global.MessageChannel;\nvar Dispatch = global.Dispatch;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar defer, channel, port;\nvar run = function () {\n  var id = +this;\n  // eslint-disable-next-line no-prototype-builtins\n  if (queue.hasOwnProperty(id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listener = function (event) {\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!setTask || !clearTask) {\n  setTask = function setImmediate(fn) {\n    var args = [];\n    var i = 1;\n    while (arguments.length > i) args.push(arguments[i++]);\n    queue[++counter] = function () {\n      // eslint-disable-next-line no-new-func\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (require('./_cof')(process) == 'process') {\n    defer = function (id) {\n      process.nextTick(ctx(run, id, 1));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(ctx(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if (MessageChannel) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = ctx(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {\n    defer = function (id) {\n      global.postMessage(id + '', '*');\n    };\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in cel('script')) {\n    defer = function (id) {\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(ctx(run, id, 1), 0);\n    };\n  }\n}\nmodule.exports = {\n  set: setTask,\n  clear: clearTask\n};\n","var global = require('./_global');\nvar macrotask = require('./_task').set;\nvar Observer = global.MutationObserver || global.WebKitMutationObserver;\nvar process = global.process;\nvar Promise = global.Promise;\nvar isNode = require('./_cof')(process) == 'process';\n\nmodule.exports = function () {\n  var head, last, notify;\n\n  var flush = function () {\n    var parent, fn;\n    if (isNode && (parent = process.domain)) parent.exit();\n    while (head) {\n      fn = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch (e) {\n        if (head) notify();\n        else last = undefined;\n        throw e;\n      }\n    } last = undefined;\n    if (parent) parent.enter();\n  };\n\n  // Node.js\n  if (isNode) {\n    notify = function () {\n      process.nextTick(flush);\n    };\n  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339\n  } else if (Observer && !(global.navigator && global.navigator.standalone)) {\n    var toggle = true;\n    var node = document.createTextNode('');\n    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new\n    notify = function () {\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if (Promise && Promise.resolve) {\n    // Promise.resolve without an argument throws an error in LG WebOS 2\n    var promise = Promise.resolve(undefined);\n    notify = function () {\n      promise.then(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    notify = function () {\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(global, flush);\n    };\n  }\n\n  return function (fn) {\n    var task = { fn: fn, next: undefined };\n    if (last) last.next = task;\n    if (!head) {\n      head = task;\n      notify();\n    } last = task;\n  };\n};\n","'use strict';\n// 25.4.1.5 NewPromiseCapability(C)\nvar aFunction = require('./_a-function');\n\nfunction PromiseCapability(C) {\n  var resolve, reject;\n  this.promise = new C(function ($$resolve, $$reject) {\n    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject = $$reject;\n  });\n  this.resolve = aFunction(resolve);\n  this.reject = aFunction(reject);\n}\n\nmodule.exports.f = function (C) {\n  return new PromiseCapability(C);\n};\n","module.exports = function (exec) {\n  try {\n    return { e: false, v: exec() };\n  } catch (e) {\n    return { e: true, v: e };\n  }\n};\n","var global = require('./_global');\nvar navigator = global.navigator;\n\nmodule.exports = navigator && navigator.userAgent || '';\n","var anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar newPromiseCapability = require('./_new-promise-capability');\n\nmodule.exports = function (C, x) {\n  anObject(C);\n  if (isObject(x) && x.constructor === C) return x;\n  var promiseCapability = newPromiseCapability.f(C);\n  var resolve = promiseCapability.resolve;\n  resolve(x);\n  return promiseCapability.promise;\n};\n","var hide = require('./_hide');\nmodule.exports = function (target, src, safe) {\n  for (var key in src) {\n    if (safe && target[key]) target[key] = src[key];\n    else hide(target, key, src[key]);\n  } return target;\n};\n","'use strict';\nvar global = require('./_global');\nvar core = require('./_core');\nvar dP = require('./_object-dp');\nvar DESCRIPTORS = require('./_descriptors');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (KEY) {\n  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];\n  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {\n    configurable: true,\n    get: function () { return this; }\n  });\n};\n","var ITERATOR = require('./_wks')('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function () { SAFE_CLOSING = true; };\n  // eslint-disable-next-line no-throw-literal\n  Array.from(riter, function () { throw 2; });\n} catch (e) { /* empty */ }\n\nmodule.exports = function (exec, skipClosing) {\n  if (!skipClosing && !SAFE_CLOSING) return false;\n  var safe = false;\n  try {\n    var arr = [7];\n    var iter = arr[ITERATOR]();\n    iter.next = function () { return { done: safe = true }; };\n    arr[ITERATOR] = function () { return iter; };\n    exec(arr);\n  } catch (e) { /* empty */ }\n  return safe;\n};\n","'use strict';\nvar LIBRARY = require('./_library');\nvar global = require('./_global');\nvar ctx = require('./_ctx');\nvar classof = require('./_classof');\nvar $export = require('./_export');\nvar isObject = require('./_is-object');\nvar aFunction = require('./_a-function');\nvar anInstance = require('./_an-instance');\nvar forOf = require('./_for-of');\nvar speciesConstructor = require('./_species-constructor');\nvar task = require('./_task').set;\nvar microtask = require('./_microtask')();\nvar newPromiseCapabilityModule = require('./_new-promise-capability');\nvar perform = require('./_perform');\nvar userAgent = require('./_user-agent');\nvar promiseResolve = require('./_promise-resolve');\nvar PROMISE = 'Promise';\nvar TypeError = global.TypeError;\nvar process = global.process;\nvar versions = process && process.versions;\nvar v8 = versions && versions.v8 || '';\nvar $Promise = global[PROMISE];\nvar isNode = classof(process) == 'process';\nvar empty = function () { /* empty */ };\nvar Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;\nvar newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;\n\nvar USE_NATIVE = !!function () {\n  try {\n    // correct subclassing with @@species support\n    var promise = $Promise.resolve(1);\n    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {\n      exec(empty, empty);\n    };\n    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    return (isNode || typeof PromiseRejectionEvent == 'function')\n      && promise.then(empty) instanceof FakePromise\n      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565\n      // we can't detect it synchronously, so just check versions\n      && v8.indexOf('6.6') !== 0\n      && userAgent.indexOf('Chrome/66') === -1;\n  } catch (e) { /* empty */ }\n}();\n\n// helpers\nvar isThenable = function (it) {\n  var then;\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\nvar notify = function (promise, isReject) {\n  if (promise._n) return;\n  promise._n = true;\n  var chain = promise._c;\n  microtask(function () {\n    var value = promise._v;\n    var ok = promise._s == 1;\n    var i = 0;\n    var run = function (reaction) {\n      var handler = ok ? reaction.ok : reaction.fail;\n      var resolve = reaction.resolve;\n      var reject = reaction.reject;\n      var domain = reaction.domain;\n      var result, then, exited;\n      try {\n        if (handler) {\n          if (!ok) {\n            if (promise._h == 2) onHandleUnhandled(promise);\n            promise._h = 1;\n          }\n          if (handler === true) result = value;\n          else {\n            if (domain) domain.enter();\n            result = handler(value); // may throw\n            if (domain) {\n              domain.exit();\n              exited = true;\n            }\n          }\n          if (result === reaction.promise) {\n            reject(TypeError('Promise-chain cycle'));\n          } else if (then = isThenable(result)) {\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch (e) {\n        if (domain && !exited) domain.exit();\n        reject(e);\n      }\n    };\n    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach\n    promise._c = [];\n    promise._n = false;\n    if (isReject && !promise._h) onUnhandled(promise);\n  });\n};\nvar onUnhandled = function (promise) {\n  task.call(global, function () {\n    var value = promise._v;\n    var unhandled = isUnhandled(promise);\n    var result, handler, console;\n    if (unhandled) {\n      result = perform(function () {\n        if (isNode) {\n          process.emit('unhandledRejection', value, promise);\n        } else if (handler = global.onunhandledrejection) {\n          handler({ promise: promise, reason: value });\n        } else if ((console = global.console) && console.error) {\n          console.error('Unhandled promise rejection', value);\n        }\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      promise._h = isNode || isUnhandled(promise) ? 2 : 1;\n    } promise._a = undefined;\n    if (unhandled && result.e) throw result.v;\n  });\n};\nvar isUnhandled = function (promise) {\n  return promise._h !== 1 && (promise._a || promise._c).length === 0;\n};\nvar onHandleUnhandled = function (promise) {\n  task.call(global, function () {\n    var handler;\n    if (isNode) {\n      process.emit('rejectionHandled', promise);\n    } else if (handler = global.onrejectionhandled) {\n      handler({ promise: promise, reason: promise._v });\n    }\n  });\n};\nvar $reject = function (value) {\n  var promise = this;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  promise._v = value;\n  promise._s = 2;\n  if (!promise._a) promise._a = promise._c.slice();\n  notify(promise, true);\n};\nvar $resolve = function (value) {\n  var promise = this;\n  var then;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  try {\n    if (promise === value) throw TypeError(\"Promise can't be resolved itself\");\n    if (then = isThenable(value)) {\n      microtask(function () {\n        var wrapper = { _w: promise, _d: false }; // wrap\n        try {\n          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));\n        } catch (e) {\n          $reject.call(wrapper, e);\n        }\n      });\n    } else {\n      promise._v = value;\n      promise._s = 1;\n      notify(promise, false);\n    }\n  } catch (e) {\n    $reject.call({ _w: promise, _d: false }, e); // wrap\n  }\n};\n\n// constructor polyfill\nif (!USE_NATIVE) {\n  // 25.4.3.1 Promise(executor)\n  $Promise = function Promise(executor) {\n    anInstance(this, $Promise, PROMISE, '_h');\n    aFunction(executor);\n    Internal.call(this);\n    try {\n      executor(ctx($resolve, this, 1), ctx($reject, this, 1));\n    } catch (err) {\n      $reject.call(this, err);\n    }\n  };\n  // eslint-disable-next-line no-unused-vars\n  Internal = function Promise(executor) {\n    this._c = [];             // <- awaiting reactions\n    this._a = undefined;      // <- checked in isUnhandled reactions\n    this._s = 0;              // <- state\n    this._d = false;          // <- done\n    this._v = undefined;      // <- value\n    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\n    this._n = false;          // <- notify\n  };\n  Internal.prototype = require('./_redefine-all')($Promise.prototype, {\n    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n    then: function then(onFulfilled, onRejected) {\n      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));\n      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail = typeof onRejected == 'function' && onRejected;\n      reaction.domain = isNode ? process.domain : undefined;\n      this._c.push(reaction);\n      if (this._a) this._a.push(reaction);\n      if (this._s) notify(this, false);\n      return reaction.promise;\n    },\n    // 25.4.5.1 Promise.prototype.catch(onRejected)\n    'catch': function (onRejected) {\n      return this.then(undefined, onRejected);\n    }\n  });\n  OwnPromiseCapability = function () {\n    var promise = new Internal();\n    this.promise = promise;\n    this.resolve = ctx($resolve, promise, 1);\n    this.reject = ctx($reject, promise, 1);\n  };\n  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {\n    return C === $Promise || C === Wrapper\n      ? new OwnPromiseCapability(C)\n      : newGenericPromiseCapability(C);\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });\nrequire('./_set-to-string-tag')($Promise, PROMISE);\nrequire('./_set-species')(PROMISE);\nWrapper = require('./_core')[PROMISE];\n\n// statics\n$export($export.S + $export.F * !USE_NATIVE, PROMISE, {\n  // 25.4.4.5 Promise.reject(r)\n  reject: function reject(r) {\n    var capability = newPromiseCapability(this);\n    var $$reject = capability.reject;\n    $$reject(r);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {\n  // 25.4.4.6 Promise.resolve(x)\n  resolve: function resolve(x) {\n    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);\n  }\n});\n$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {\n  $Promise.all(iter)['catch'](empty);\n})), PROMISE, {\n  // 25.4.4.1 Promise.all(iterable)\n  all: function all(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var values = [];\n      var index = 0;\n      var remaining = 1;\n      forOf(iterable, false, function (promise) {\n        var $index = index++;\n        var alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        C.resolve(promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[$index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  },\n  // 25.4.4.4 Promise.race(iterable)\n  race: function race(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var reject = capability.reject;\n    var result = perform(function () {\n      forOf(iterable, false, function (promise) {\n        C.resolve(promise).then(capability.resolve, reject);\n      });\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  }\n});\n","// https://github.com/tc39/proposal-promise-finally\n'use strict';\nvar $export = require('./_export');\nvar core = require('./_core');\nvar global = require('./_global');\nvar speciesConstructor = require('./_species-constructor');\nvar promiseResolve = require('./_promise-resolve');\n\n$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {\n  var C = speciesConstructor(this, core.Promise || global.Promise);\n  var isFunction = typeof onFinally == 'function';\n  return this.then(\n    isFunction ? function (x) {\n      return promiseResolve(C, onFinally()).then(function () { return x; });\n    } : onFinally,\n    isFunction ? function (e) {\n      return promiseResolve(C, onFinally()).then(function () { throw e; });\n    } : onFinally\n  );\n} });\n","'use strict';\n// https://github.com/tc39/proposal-promise-try\nvar $export = require('./_export');\nvar newPromiseCapability = require('./_new-promise-capability');\nvar perform = require('./_perform');\n\n$export($export.S, 'Promise', { 'try': function (callbackfn) {\n  var promiseCapability = newPromiseCapability.f(this);\n  var result = perform(callbackfn);\n  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);\n  return promiseCapability.promise;\n} });\n","require('../modules/es6.object.to-string');\nrequire('../modules/es6.string.iterator');\nrequire('../modules/web.dom.iterable');\nrequire('../modules/es6.promise');\nrequire('../modules/es7.promise.finally');\nrequire('../modules/es7.promise.try');\nmodule.exports = require('../modules/_core').Promise;\n","module.exports = require(\"core-js/library/fn/promise\");","export default function timeout(time) {\n  const ms = parseInt(time, 10);\n\n  return new Promise((resolve) =>\n    ms > 0 ? setTimeout(resolve, ms) : resolve()\n  );\n}\n","export default function timestamp() {\n  return new Date().toISOString();\n}\n","// most Object methods by ES6 should accept primitives\nvar $export = require('./_export');\nvar core = require('./_core');\nvar fails = require('./_fails');\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n","// 19.1.2.14 Object.keys(O)\nvar toObject = require('./_to-object');\nvar $keys = require('./_object-keys');\n\nrequire('./_object-sap')('keys', function () {\n  return function keys(it) {\n    return $keys(toObject(it));\n  };\n});\n","require('../../modules/es6.object.keys');\nmodule.exports = require('../../modules/_core').Object.keys;\n","module.exports = require(\"core-js/library/fn/object/keys\");","var META = require('./_uid')('meta');\nvar isObject = require('./_is-object');\nvar has = require('./_has');\nvar setDesc = require('./_object-dp').f;\nvar id = 0;\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\nvar FREEZE = !require('./_fails')(function () {\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function (it) {\n  setDesc(it, META, { value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  } });\n};\nvar fastKey = function (it, create) {\n  // return primitive with prefix\n  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function (it, create) {\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY: META,\n  NEED: false,\n  fastKey: fastKey,\n  getWeak: getWeak,\n  onFreeze: onFreeze\n};\n","exports.f = require('./_wks');\n","var global = require('./_global');\nvar core = require('./_core');\nvar LIBRARY = require('./_library');\nvar wksExt = require('./_wks-ext');\nvar defineProperty = require('./_object-dp').f;\nmodule.exports = function (name) {\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });\n};\n","exports.f = Object.getOwnPropertySymbols;\n","exports.f = {}.propertyIsEnumerable;\n","// all enumerable object keys, includes symbols\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nmodule.exports = function (it) {\n  var result = getKeys(it);\n  var getSymbols = gOPS.f;\n  if (getSymbols) {\n    var symbols = getSymbols(it);\n    var isEnum = pIE.f;\n    var i = 0;\n    var key;\n    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);\n  } return result;\n};\n","// 7.2.2 IsArray(argument)\nvar cof = require('./_cof');\nmodule.exports = Array.isArray || function isArray(arg) {\n  return cof(arg) == 'Array';\n};\n","// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys = require('./_object-keys-internal');\nvar hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return $keys(O, hiddenKeys);\n};\n","// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIObject = require('./_to-iobject');\nvar gOPN = require('./_object-gopn').f;\nvar toString = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return gOPN(it);\n  } catch (e) {\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it) {\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n};\n","var pIE = require('./_object-pie');\nvar createDesc = require('./_property-desc');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar has = require('./_has');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nexports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\n};\n","'use strict';\n// ECMAScript 6 symbols shim\nvar global = require('./_global');\nvar has = require('./_has');\nvar DESCRIPTORS = require('./_descriptors');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar META = require('./_meta').KEY;\nvar $fails = require('./_fails');\nvar shared = require('./_shared');\nvar setToStringTag = require('./_set-to-string-tag');\nvar uid = require('./_uid');\nvar wks = require('./_wks');\nvar wksExt = require('./_wks-ext');\nvar wksDefine = require('./_wks-define');\nvar enumKeys = require('./_enum-keys');\nvar isArray = require('./_is-array');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar toObject = require('./_to-object');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar createDesc = require('./_property-desc');\nvar _create = require('./_object-create');\nvar gOPNExt = require('./_object-gopn-ext');\nvar $GOPD = require('./_object-gopd');\nvar $GOPS = require('./_object-gops');\nvar $DP = require('./_object-dp');\nvar $keys = require('./_object-keys');\nvar gOPD = $GOPD.f;\nvar dP = $DP.f;\nvar gOPN = gOPNExt.f;\nvar $Symbol = global.Symbol;\nvar $JSON = global.JSON;\nvar _stringify = $JSON && $JSON.stringify;\nvar PROTOTYPE = 'prototype';\nvar HIDDEN = wks('_hidden');\nvar TO_PRIMITIVE = wks('toPrimitive');\nvar isEnum = {}.propertyIsEnumerable;\nvar SymbolRegistry = shared('symbol-registry');\nvar AllSymbols = shared('symbols');\nvar OPSymbols = shared('op-symbols');\nvar ObjectProto = Object[PROTOTYPE];\nvar USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;\nvar QObject = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = DESCRIPTORS && $fails(function () {\n  return _create(dP({}, 'a', {\n    get: function () { return dP(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (it, key, D) {\n  var protoDesc = gOPD(ObjectProto, key);\n  if (protoDesc) delete ObjectProto[key];\n  dP(it, key, D);\n  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);\n} : dP;\n\nvar wrap = function (tag) {\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D) {\n  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if (has(AllSymbols, key)) {\n    if (!D.enumerable) {\n      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n      D = _create(D, { enumerable: createDesc(0, false) });\n    } return setSymbolDesc(it, key, D);\n  } return dP(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P) {\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P));\n  var i = 0;\n  var l = keys.length;\n  var key;\n  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P) {\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n  var E = isEnum.call(this, key = toPrimitive(key, true));\n  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n  it = toIObject(it);\n  key = toPrimitive(key, true);\n  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;\n  var D = gOPD(it, key);\n  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n  var names = gOPN(toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n  var IS_OP = it === ObjectProto;\n  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif (!USE_NATIVE) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function (value) {\n      if (this === ObjectProto) $set.call(OPSymbols, value);\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    };\n    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });\n    return wrap(tag);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\n    return this._k;\n  });\n\n  $GOPD.f = $getOwnPropertyDescriptor;\n  $DP.f = $defineProperty;\n  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;\n  require('./_object-pie').f = $propertyIsEnumerable;\n  $GOPS.f = $getOwnPropertySymbols;\n\n  if (DESCRIPTORS && !require('./_library')) {\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  wksExt.f = function (name) {\n    return wrap(wks(name));\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });\n\nfor (var es6Symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);\n\nfor (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);\n\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function (key) {\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\n  },\n  useSetter: function () { setter = true; },\n  useSimple: function () { setter = false; }\n});\n\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives\n// https://bugs.chromium.org/p/v8/issues/detail?id=3443\nvar FAILS_ON_PRIMITIVES = $fails(function () { $GOPS.f(1); });\n\n$export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {\n  getOwnPropertySymbols: function getOwnPropertySymbols(it) {\n    return $GOPS.f(toObject(it));\n  }\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it) {\n    var args = [it];\n    var i = 1;\n    var replacer, $replacer;\n    while (arguments.length > i) args.push(arguments[i++]);\n    $replacer = replacer = args[1];\n    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n    if (!isArray(replacer)) replacer = function (key, value) {\n      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\n      if (!isSymbol(value)) return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nsetToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\nsetToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\nsetToStringTag(global.JSON, 'JSON', true);\n","require('../../modules/es6.symbol');\nmodule.exports = require('../../modules/_core').Object.getOwnPropertySymbols;\n","module.exports = require(\"core-js/library/fn/object/get-own-property-symbols\");","// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\nvar toIObject = require('./_to-iobject');\nvar $getOwnPropertyDescriptor = require('./_object-gopd').f;\n\nrequire('./_object-sap')('getOwnPropertyDescriptor', function () {\n  return function getOwnPropertyDescriptor(it, key) {\n    return $getOwnPropertyDescriptor(toIObject(it), key);\n  };\n});\n","require('../../modules/es6.object.get-own-property-descriptor');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function getOwnPropertyDescriptor(it, key) {\n  return $Object.getOwnPropertyDescriptor(it, key);\n};\n","module.exports = require(\"core-js/library/fn/object/get-own-property-descriptor\");","// all object keys, includes non-enumerable and symbols\nvar gOPN = require('./_object-gopn');\nvar gOPS = require('./_object-gops');\nvar anObject = require('./_an-object');\nvar Reflect = require('./_global').Reflect;\nmodule.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {\n  var keys = gOPN.f(anObject(it));\n  var getSymbols = gOPS.f;\n  return getSymbols ? keys.concat(getSymbols(it)) : keys;\n};\n","'use strict';\nvar $defineProperty = require('./_object-dp');\nvar createDesc = require('./_property-desc');\n\nmodule.exports = function (object, index, value) {\n  if (index in object) $defineProperty.f(object, index, createDesc(0, value));\n  else object[index] = value;\n};\n","// https://github.com/tc39/proposal-object-getownpropertydescriptors\nvar $export = require('./_export');\nvar ownKeys = require('./_own-keys');\nvar toIObject = require('./_to-iobject');\nvar gOPD = require('./_object-gopd');\nvar createProperty = require('./_create-property');\n\n$export($export.S, 'Object', {\n  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {\n    var O = toIObject(object);\n    var getDesc = gOPD.f;\n    var keys = ownKeys(O);\n    var result = {};\n    var i = 0;\n    var key, desc;\n    while (keys.length > i) {\n      desc = getDesc(O, key = keys[i++]);\n      if (desc !== undefined) createProperty(result, key, desc);\n    }\n    return result;\n  }\n});\n","require('../../modules/es7.object.get-own-property-descriptors');\nmodule.exports = require('../../modules/_core').Object.getOwnPropertyDescriptors;\n","module.exports = require(\"core-js/library/fn/object/get-own-property-descriptors\");","var $export = require('./_export');\n// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperties: require('./_object-dps') });\n","require('../../modules/es6.object.define-properties');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function defineProperties(T, D) {\n  return $Object.defineProperties(T, D);\n};\n","module.exports = require(\"core-js/library/fn/object/define-properties\");","var $export = require('./_export');\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });\n","require('../../modules/es6.object.define-property');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function defineProperty(it, key, desc) {\n  return $Object.defineProperty(it, key, desc);\n};\n","module.exports = require(\"core-js/library/fn/object/define-property\");","var _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    _Object$defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","require('./_wks-define')('asyncIterator');\n","require('./_wks-define')('observable');\n","require('../../modules/es6.symbol');\nrequire('../../modules/es6.object.to-string');\nrequire('../../modules/es7.symbol.async-iterator');\nrequire('../../modules/es7.symbol.observable');\nmodule.exports = require('../../modules/_core').Symbol;\n","module.exports = require(\"core-js/library/fn/symbol\");","import URLParse from 'url-parse';\nimport qs from 'qs';\n\nconst ARRAY_FORMAT = Symbol();\nconst INDICES_REGEX = /\\[\\d+\\]$/;\nconst BRACKETS_REGEX = /\\[\\]$/;\n\nfunction parseQuery(query, options) {\n  return qs.parse(query, {\n    plainObjects: true,\n    ignoreQueryPrefix: true,\n    strictNullHandling: true,\n    ...options\n  });\n}\n\nfunction stringifyQuery(obj, options = {}) {\n  return qs.stringify(obj, {\n    addQueryPrefix: true,\n    strictNullHandling: true,\n    ...options\n  });\n}\n\n/**\n * Given a query string, determine the array format used. Returns `undefined`\n * if one cannot be determined.\n *\n * @param {String} query\n * @returns {String | undefined}\n */\nfunction arrayFormat(query) {\n  const keys = (query || '')\n    .replace('?', '')\n    .split('&')\n    .map((str) => decodeURIComponent(str.split('=')[0]));\n\n  for (const key of keys) {\n    if (INDICES_REGEX.test(key)) {\n      // a[0]=b&a[1]=c\n      return 'indices';\n    } else if (BRACKETS_REGEX.test(key)) {\n      // a[]=b&a[]=c\n      return 'brackets';\n    }\n  }\n\n  // Look to see if any key has a duplicate\n  const hasDuplicate = keys.some((key, index) => keys.indexOf(key) !== index);\n\n  if (hasDuplicate) {\n    // 'a=b&a=c'\n    return 'repeat';\n  }\n}\n\n/**\n * An extended url-parse class that uses `qs` instead of the default\n * `querystringify` to support array and nested object query param strings.\n */\nexport default class URL extends URLParse {\n  constructor(url, parse) {\n    // Construct the url with an un-parsed querystring\n    super(url);\n\n    if (parse) {\n      // If we want the querystring to be parsed, use this.set('query', query)\n      // as it will always parse the string. If there is no initial querystring\n      // pass an object which will act as the parsed query.\n      this.set('query', this.query || {});\n    }\n  }\n\n  /**\n   * Override set for `query` so we can pass it our custom parser.\n   * https://github.com/unshiftio/url-parse/blob/1.4.4/index.js#L314-L316\n   *\n   * @override\n   */\n  set(part, value, fn) {\n    if (part === 'query') {\n      if (value && typeof value === 'string') {\n        // Save the array format used so when we stringify it,\n        // we can use the correct format.\n        this[ARRAY_FORMAT] = arrayFormat(value) || this[ARRAY_FORMAT];\n      }\n\n      return super.set(part, value, parseQuery);\n    }\n\n    return super.set(part, value, fn);\n  }\n\n  /**\n   * Override toString so we can pass it our custom query stringify method.\n   * https://github.com/unshiftio/url-parse/blob/1.4.4/index.js#L414\n   *\n   * @override\n   */\n  toString() {\n    return super.toString((obj) =>\n      stringifyQuery(obj, { arrayFormat: this[ARRAY_FORMAT] })\n    );\n  }\n}\n","import URL from './url';\n\nexport default function buildUrl(...paths) {\n  const url = new URL(\n    paths\n      .map((p) => p && (p + '').trim()) // Trim each string\n      .filter(Boolean) // Remove empty strings or other falsy paths\n      .join('/')\n  );\n\n  // Replace 2+ consecutive slashes with 1. (e.g. `///` --> `/`)\n  url.set('pathname', url.pathname.replace(/\\/{2,}/g, '/'));\n\n  return url.href;\n}\n","export const supportsBlob = (() => {\n  try {\n    return !!new Blob();\n  } catch (e) {\n    return false;\n  }\n})();\n\nexport function readBlob(blob) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onend = reject;\n    reader.onabort = reject;\n    reader.onload = () => resolve(reader.result);\n    reader.readAsDataURL(new Blob([blob], { type: blob.type }));\n  });\n}\n\nexport async function serialize(body) {\n  if (supportsBlob && body instanceof Blob) {\n    return await readBlob(body);\n  }\n\n  return body;\n}\n","import { supportsBlob, readBlob } from './blob';\n\nexport const supportsFormData = typeof FormData !== 'undefined';\n\nexport async function serialize(body) {\n  if (supportsFormData && body instanceof FormData) {\n    const data = [];\n\n    for (const [key, value] of body.entries()) {\n      if (supportsBlob && value instanceof Blob) {\n        const blobContent = await readBlob(value);\n\n        data.push(`${key}=${blobContent}`);\n      } else {\n        data.push(`${key}=${value}`);\n      }\n    }\n\n    return data.join('\\r\\n');\n  }\n\n  return body;\n}\n","// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)\nvar $export = require('./_export');\n\n$export($export.S, 'Array', { isArray: require('./_is-array') });\n","require('../../modules/es6.array.is-array');\nmodule.exports = require('../../modules/_core').Array.isArray;\n","module.exports = require(\"core-js/library/fn/array/is-array\");","/* eslint-env node */\n\nexport const supportsBuffer = typeof Buffer !== 'undefined';\nexport const supportsArrayBuffer = typeof ArrayBuffer !== 'undefined';\n\nexport function serialize(body) {\n  if (supportsBuffer && body) {\n    let buffer;\n\n    if (Buffer.isBuffer(body)) {\n      buffer = body;\n    } else if (Array.isArray(body) && body.some((c) => Buffer.isBuffer(c))) {\n      // Body is a chunked array\n      const chunks = body.map((c) => Buffer.from(c));\n\n      buffer = Buffer.concat(chunks);\n    } else if (`${body}` === '[object ArrayBuffer]') {\n      buffer = Buffer.from(body);\n    } else if (supportsArrayBuffer && ArrayBuffer.isView(body)) {\n      buffer = Buffer.from(body.buffer, body.byteOffset, body.byteLength);\n    }\n\n    if (Buffer.isBuffer(buffer)) {\n      return buffer.toString('base64');\n    }\n  }\n\n  return body;\n}\n","import { serialize as blob } from './blob';\nimport { serialize as formData } from './form-data';\nimport { serialize as buffer } from './buffer';\n\nexport default { blob, formData, buffer };\n","import { Buffer } from 'buffer';\n\n/**\n * Determine if the given buffer is utf8.\n * @param {Buffer} buffer\n */\nexport default function isBufferUtf8Representable(buffer) {\n  const utfEncodedBuffer = buffer.toString('utf8');\n  const reconstructedBuffer = Buffer.from(utfEncodedBuffer, 'utf8');\n\n  return reconstructedBuffer.equals(buffer);\n}\n","/**\n * Clone an array buffer\n *\n * @param {ArrayBuffer} arrayBuffer\n */\nexport default function cloneArrayBuffer(arrayBuffer) {\n  const clonedArrayBuffer = new ArrayBuffer(arrayBuffer.byteLength);\n\n  new Uint8Array(clonedArrayBuffer).set(new Uint8Array(arrayBuffer));\n\n  return clonedArrayBuffer;\n}\n","export type Base64 = {\n  isBase64Encoded(input: any): boolean;\n  encodeBase64(input: string, padding?: boolean): string;\n  decodeBase64(input: string): string;\n  decodeBase64Url(input: string): string;\n  encodeBase64Url(input: string): string;\n};\n\nexport default (): Base64 => {\n  return {\n    isBase64Encoded(input) {\n      return isBase64Encoded(input);\n    },\n\n    encodeBase64(input: string, padding = true): string {\n      return encode(input, padding);\n    },\n\n    decodeBase64(input: string): string {\n      return decode(input);\n    },\n\n    decodeBase64Url(input: string): string {\n      return decodeBase64Url(input);\n    },\n\n    encodeBase64Url(input: string): string {\n      return encodeBase64Url(input);\n    },\n  };\n};\n\n/**\n * Regex to determine if a string is Base64-encoded\n */\nconst base64regex =\n  /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n\n/**\n * Is input Base64-encoded\n * @param {String} input\n * @returns {boolean} true if input is Base64-encoded, false otherwise\n */\nexport function isBase64Encoded(input) {\n  return base64regex.test(input);\n}\n\n/**\n * Base64-encode a string\n * @param {string} input String to base64-encode\n * @param {boolean} padding add padding\n * @returns {string} Base64-encoded input string\n */\nexport function encode(input: string, padding = true): string {\n  if (padding) {\n    return Buffer.from(input).toString('base64');\n  }\n  return Buffer.from(input).toString('base64').replace(/=/g, '');\n}\n\n/**\n * Base64-decode a string\n * @param {string} input\n * @returns {string} Base64-decoded input string\n */\nexport function decode(input: string): string {\n  // eslint-disable-next-line no-param-reassign\n  if (input.length % 4 !== 0) input += '='.repeat(4 - (input.length % 4));\n  return Buffer.from(input, 'base64').toString();\n}\n\nlet enc;\nif (Buffer.isEncoding('base64url')) {\n  enc = (input, encoding: BufferEncoding = 'utf8') =>\n    Buffer.from(input, encoding).toString('base64url');\n} else {\n  const fromBase64 = (base64) =>\n    base64.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n  enc = (input, encoding: BufferEncoding = 'utf8') =>\n    fromBase64(Buffer.from(input, encoding).toString('base64'));\n}\n\n/**\n * Decode Base64URL\n * @param {*} input the string to decode\n * @returns {String} the decoded string.\n */\nexport const decodeBase64Url = (input) => `${Buffer.from(input, 'base64')}`;\n\n/**\n * Encode Base65URL\n * @param {*} input the string to encode\n * @returns {String} the encoded string.\n */\nexport const encodeBase64Url = enc;\n","import util from 'util';\n\nimport { State } from '../../shared/State';\nimport { getHostBaseUrl } from '../../utils/ForgeRockUtils';\nimport { IdObjectSkeletonInterface, PagedResult } from '../ApiTypes';\nimport { generateEnvApi } from '../BaseApi';\n\nconst secretsListURLTemplate = '%s/environment/secrets';\nconst secretListVersionsURLTemplate = '%s/environment/secrets/%s/versions';\nconst secretCreateNewVersionURLTemplate = `${secretListVersionsURLTemplate}?_action=create`;\nconst secretGetVersionURLTemplate = `${secretListVersionsURLTemplate}/%s`;\nconst secretVersionStatusURLTemplate = `${secretGetVersionURLTemplate}?_action=changestatus`;\nconst secretURLTemplate = '%s/environment/secrets/%s';\nconst secretSetDescriptionURLTemplate = `${secretURLTemplate}?_action=setDescription`;\n\nconst apiVersion = 'protocol=1.0,resource=1.0';\nconst getApiConfig = () => ({\n  path: `/environment/secrets`,\n  apiVersion,\n});\n\n/**\n * Secret encoding\n *\n * @summary\n * You can use the encoding parameter to set an encoding format when you create an ESV secret.\n * You can only choose an encoding format using the API. The UI currently creates secrets only\n * with the generic encoding format.\n *\n * @see\n * {@link https://backstage.forgerock.com/docs/idcloud/latest/tenants/esvs.html#encoding_format | ForgeRock Documentation}\n */\nexport type SecretEncodingType = 'generic' | 'pem' | 'base64hmac';\n\n/**\n * Secret object skeleton\n */\nexport type SecretSkeleton = IdObjectSkeletonInterface & {\n  description: string;\n  encoding: SecretEncodingType;\n  lastChangedBy?: string;\n  lastChangeDate?: string;\n  useInPlaceholders: boolean;\n  loaded?: boolean;\n  loadedVersion?: string;\n  activeVersion?: string;\n};\n\nexport type VersionOfSecretStatus = 'DISABLED' | 'ENABLED' | 'DESTROYED';\n\n/**\n * Secret version skeleton\n */\nexport type VersionOfSecretSkeleton = IdObjectSkeletonInterface & {\n  /**\n   * Base64-encoded value. Only used when creating a new version of a secret\n   */\n  valueBase64?: string;\n  /**\n   * Version string. Returned when reading a version of a secret\n   */\n  version?: string;\n  /**\n   * Date string. Returned when reading a version of a secret\n   */\n  createDate?: string;\n  /**\n   * True if loaded, false otherwise. Returned when reading a version of a secret\n   */\n  loaded?: boolean;\n  /**\n   * Status string. Returned when reading a version of a secret\n   */\n  status?: VersionOfSecretStatus;\n};\n\n/**\n * Get all secrets\n * @returns {Promise<PagedResult<SecretSkeleton>>} a promise that resolves to an array of secrets\n */\nexport async function getSecrets({\n  state,\n}: {\n  state: State;\n}): Promise<PagedResult<SecretSkeleton>> {\n  const urlString = util.format(\n    secretsListURLTemplate,\n    getHostBaseUrl(state.getHost())\n  );\n  const { data } = await generateEnvApi({\n    resource: getApiConfig(),\n    state,\n  }).get(urlString, {\n    withCredentials: true,\n  });\n  return data;\n}\n\n/**\n * Get secret\n * @param secretId secret id/name\n * @returns {Promise<SecretSkeleton>} a promise that resolves to a secret\n */\nexport async function getSecret({\n  secretId,\n  state,\n}: {\n  secretId: string;\n  state: State;\n}): Promise<SecretSkeleton> {\n  const urlString = util.format(\n    secretURLTemplate,\n    getHostBaseUrl(state.getHost()),\n    secretId\n  );\n  const { data } = await generateEnvApi({\n    resource: getApiConfig(),\n    state,\n  }).get(urlString, {\n    withCredentials: true,\n  });\n  return data;\n}\n\n/**\n * Create secret\n * @param {string} secretId secret id/name\n * @param {string} value secret value\n * @param {string} description secret description\n * @param {string} encoding secret encoding (only `generic` is supported)\n * @param {boolean} useInPlaceholders flag indicating if the secret can be used in placeholders\n * @returns {Promise<SecretSkeleton>} a promise that resolves to a secret\n */\nexport async function putSecret({\n  secretId,\n  value,\n  description,\n  encoding = 'generic',\n  useInPlaceholders = true,\n  state,\n}: {\n  secretId: string;\n  value: string;\n  description: string;\n  encoding?: string;\n  useInPlaceholders?: boolean;\n  state: State;\n}): Promise<SecretSkeleton> {\n  const secretData = {\n    valueBase64: value,\n    description,\n    encoding,\n    useInPlaceholders,\n  };\n  const urlString = util.format(\n    secretURLTemplate,\n    getHostBaseUrl(state.getHost()),\n    secretId\n  );\n  const { data } = await generateEnvApi({\n    resource: getApiConfig(),\n    state,\n  }).put(urlString, secretData, {\n    withCredentials: true,\n  });\n  return data;\n}\n\n/**\n * Set secret description\n * @param {string} secretId secret id/name\n * @param {string} description secret description\n * @returns {Promise<any>} a promise that resolves to an empty string\n */\nexport async function setSecretDescription({\n  secretId,\n  description,\n  state,\n}: {\n  secretId: string;\n  description: string;\n  state: State;\n}): Promise<any> {\n  const urlString = util.format(\n    secretSetDescriptionURLTemplate,\n    getHostBaseUrl(state.getHost()),\n    secretId\n  );\n  const { data } = await generateEnvApi({\n    resource: getApiConfig(),\n    state,\n  }).post(urlString, { description }, { withCredentials: true });\n  return data;\n}\n\n/**\n * Delete secret\n * @param {string} secretId secret id/name\n * @returns {Promise<unknown>} a promise that resolves to a secret object\n */\nexport async function deleteSecret({\n  secretId,\n  state,\n}: {\n  secretId: string;\n  state: State;\n}) {\n  const urlString = util.format(\n    secretURLTemplate,\n    getHostBaseUrl(state.getHost()),\n    secretId\n  );\n  const { data } = await generateEnvApi({\n    resource: getApiConfig(),\n    state,\n  }).delete(urlString, {\n    withCredentials: true,\n  });\n  return data;\n}\n\n/**\n * Get secret versions\n * @param {string} secretId secret id/name\n * @returns {Promise<VersionOfSecretSkeleton[]>} a promise that resolves to an array of secret versions\n */\nexport async function getSecretVersions({\n  secretId,\n  state,\n}: {\n  secretId: string;\n  state: State;\n}): Promise<VersionOfSecretSkeleton[]> {\n  const urlString = util.format(\n    secretListVersionsURLTemplate,\n    getHostBaseUrl(state.getHost()),\n    secretId\n  );\n  const { data } = await generateEnvApi({\n    resource: getApiConfig(),\n    state,\n  }).get(urlString, {\n    withCredentials: true,\n  });\n  return data;\n}\n\n/**\n * Create new secret version\n * @param {string} secretId secret id/name\n * @param {string} value secret value\n * @returns {Promise<VersionOfSecretSkeleton>} a promise that resolves to a version object\n */\nexport async function createNewVersionOfSecret({\n  secretId,\n  value,\n  state,\n}: {\n  secretId: string;\n  value: string;\n  state: State;\n}): Promise<VersionOfSecretSkeleton> {\n  const urlString = util.format(\n    secretCreateNewVersionURLTemplate,\n    getHostBaseUrl(state.getHost()),\n    secretId\n  );\n  const { data } = await generateEnvApi({\n    resource: getApiConfig(),\n    state,\n  }).post(urlString, { valueBase64: value }, { withCredentials: true });\n  return data;\n}\n\n/**\n * Get version of secret\n * @param {string} secretId secret id/name\n * @param {string} version secret version\n * @returns {Promise<VersionOfSecretSkeleton>} a promise that resolves to a version object\n */\nexport async function getVersionOfSecret({\n  secretId,\n  version,\n  state,\n}: {\n  secretId: string;\n  version: string;\n  state: State;\n}): Promise<VersionOfSecretSkeleton> {\n  const urlString = util.format(\n    secretGetVersionURLTemplate,\n    getHostBaseUrl(state.getHost()),\n    secretId,\n    version\n  );\n  const { data } = await generateEnvApi({\n    resource: getApiConfig(),\n    state,\n  }).get(urlString, {\n    withCredentials: true,\n  });\n  return data;\n}\n\n/**\n * Update the status of a version of a secret\n * @param {string} secretId secret id/name\n * @param {string} version secret version\n * @param {VersionOfSecretStatus} status status\n * @returns {Promise<VersionOfSecretSkeleton>} a promise that resolves to a status object\n */\nexport async function setStatusOfVersionOfSecret({\n  secretId,\n  version,\n  status,\n  state,\n}: {\n  secretId: string;\n  version: string;\n  status: VersionOfSecretStatus;\n  state: State;\n}): Promise<VersionOfSecretSkeleton> {\n  const urlString = util.format(\n    secretVersionStatusURLTemplate,\n    getHostBaseUrl(state.getHost()),\n    secretId,\n    version\n  );\n  const { data } = await generateEnvApi({\n    resource: getApiConfig(),\n    state,\n  }).post(urlString, { status }, { withCredentials: true });\n  return data;\n}\n\n/**\n * Delete version of secret\n * @param {string} secretId secret id/name\n * @param {string} version secret version\n * @returns {Promise<VersionOfSecretSkeleton>} a promise that resolves to a version object\n */\nexport async function deleteVersionOfSecret({\n  secretId,\n  version,\n  state,\n}: {\n  secretId: string;\n  version: string;\n  state: State;\n}): Promise<VersionOfSecretSkeleton> {\n  const urlString = util.format(\n    secretGetVersionURLTemplate,\n    getHostBaseUrl(state.getHost()),\n    secretId,\n    version\n  );\n  const { data } = await generateEnvApi({\n    resource: getApiConfig(),\n    state,\n  }).delete(urlString, {\n    withCredentials: true,\n  });\n  return data;\n}\n","import util from 'util';\n\nimport { State } from '../shared/State';\nimport { getHostBaseUrl } from '../utils/ForgeRockUtils';\nimport {\n  IdObjectSkeletonInterface,\n  NoIdObjectSkeletonInterface,\n  PagedResult,\n} from './ApiTypes';\nimport { generateIdmApi } from './BaseApi';\n\nconst idmAllConfigURLTemplate = '%s/openidm/config';\nconst idmConfigURLTemplate = '%s/openidm/config/%s';\nconst idmConfigEntityQueryTemplate = '%s/openidm/config?_queryFilter=%s';\n\nexport type IdmConfigStub = IdObjectSkeletonInterface & {\n  _id: string;\n  pid: string;\n  factoryPid: string | null;\n};\n\nexport type IdmConfigStubs = IdObjectSkeletonInterface & {\n  _id: '';\n  configurations: IdmConfigStub[];\n};\n\n/**\n * Get all IDM configuration stubs\n * @returns {Promise} a promise that resolves to all IDM configuration stubs\n */\nexport async function getConfigStubs({\n  state,\n}: {\n  state: State;\n}): Promise<IdmConfigStubs> {\n  const urlString = util.format(\n    idmAllConfigURLTemplate,\n    getHostBaseUrl(state.getHost())\n  );\n  const { data } = await generateIdmApi({ state }).get(urlString);\n  return data;\n}\n\n/**\n * Get all IDM config entities\n * @returns {Promise} a promise that resolves to all IDM config entities\n */\nexport async function getConfigEntities({\n  state,\n}: {\n  state: State;\n}): Promise<PagedResult<IdObjectSkeletonInterface>> {\n  const urlString = util.format(\n    idmConfigEntityQueryTemplate,\n    getHostBaseUrl(state.getHost()),\n    'true'\n  );\n  const { data } = await generateIdmApi({ state }).get(urlString);\n  return data;\n}\n\n/**\n * Get IDM config entities by type\n * @param {string} type the desired type of config entity\n * @returns {Promise} a promise that resolves to an object containing all IDM config entities of the desired type\n */\nexport async function getConfigEntitiesByType({\n  type,\n  state,\n}: {\n  type: string;\n  state: State;\n}): Promise<PagedResult<NoIdObjectSkeletonInterface>> {\n  const urlString = util.format(\n    idmConfigEntityQueryTemplate,\n    getHostBaseUrl(state.getHost()),\n    encodeURIComponent(`_id sw '${type}'`)\n  );\n  const { data } = await generateIdmApi({ state }).get(urlString);\n  return data;\n}\n\n/**\n * Get an IDM config entity\n * @param {string} entityId the desired config entity\n * @returns {Promise<unknown>} a promise that resolves to an IDM config entity\n */\nexport async function getConfigEntity({\n  entityId,\n  state,\n}: {\n  entityId: string;\n  state: State;\n}) {\n  const urlString = util.format(\n    idmConfigURLTemplate,\n    getHostBaseUrl(state.getHost()),\n    entityId\n  );\n  const { data } = await generateIdmApi({ state }).get(urlString);\n  return data;\n}\n\n/**\n * Put IDM config entity\n * @param {string} entityId config entity id\n * @param {string} entityData config entity object\n * @param {boolean} failIfExists fail if exists\n * @returns {Promise<unknown>} a promise that resolves to an IDM config entity\n */\nexport async function putConfigEntity({\n  entityId,\n  entityData,\n  state,\n}: {\n  entityId: string;\n  entityData: string | IdObjectSkeletonInterface;\n  state: State;\n}) {\n  const urlString = util.format(\n    idmConfigURLTemplate,\n    getHostBaseUrl(state.getHost()),\n    entityId\n  );\n  const { data } = await generateIdmApi({ state }).put(urlString, entityData);\n  return data;\n}\n\n/**\n * Delete IDM config entity\n * @param {string} entityId config entity id\n * @returns {Promise<unknown>} a promise that resolves to an IDM config entity\n */\nexport async function deleteConfigEntity({\n  entityId,\n  state,\n}: {\n  entityId: string;\n  state: State;\n}) {\n  const urlString = util.format(\n    idmConfigURLTemplate,\n    getHostBaseUrl(state.getHost()),\n    entityId\n  );\n  const { data } = await generateIdmApi({ state }).delete(urlString, {\n    withCredentials: true,\n  });\n  return data;\n}\n","import { AxiosRequestConfig, AxiosResponse } from 'axios';\nimport qs from 'qs';\nimport util from 'util';\n\nimport { State } from '../shared/State';\nimport { encode } from '../utils/Base64Utils';\nimport { getCurrentRealmPath } from '../utils/ForgeRockUtils';\nimport { generateOauth2Api } from './BaseApi';\n\nconst authorizeUrlTemplate = '%s/oauth2%s/authorize';\nconst accessTokenUrlTemplate = '%s/oauth2%s/access_token';\nconst tokenInfoUrlTemplate = '%s/oauth2%s/tokeninfo';\nconst apiVersion = 'protocol=2.1,resource=1.0';\nconst getApiConfig = () => ({\n  apiVersion,\n});\n\nexport type AccessTokenResponseType = {\n  access_token: string;\n  id_token?: string;\n  scope: string;\n  token_type: string;\n  expires_in: number;\n};\n\nexport type TokenInfoResponseType = {\n  sub: string;\n  cts: string;\n  auditTrackingId: string;\n  subname: string;\n  iss: string;\n  tokenName: string;\n  token_type: string;\n  authGrantId: string;\n  access_token: string;\n  aud: string;\n  nbf: number;\n  grant_type: string;\n  scope: string[];\n  auth_time: number;\n  sessionToken?: string;\n  realm: string;\n  exp: number;\n  iat: number;\n  expires_in: number;\n  jti: string;\n  [k: string]: string | number | string[];\n};\n\n/**\n * Perform the authorization step of the authorization code grant flow\n * @param {string} amBaseUrl access management base URL\n * @param {string} data body form data\n * @param {AxiosRequestConfig} config axios request config object\n * @param {State} state library state\n * @returns {Promise} a promise resolving to an object containing the authorization server response object\n */\nexport async function authorize({\n  amBaseUrl,\n  data,\n  config,\n  state,\n}: {\n  amBaseUrl: string;\n  data: string;\n  config: AxiosRequestConfig;\n  state: State;\n}): Promise<AxiosResponse<any, any>> {\n  const authorizeURL = util.format(authorizeUrlTemplate, amBaseUrl, '');\n  return generateOauth2Api({\n    resource: getApiConfig(),\n    requestOverride: {},\n    state,\n  }).post(authorizeURL, data, config);\n}\n\n/**\n * Perform access token request step of the authorization code grant flow\n * @param {string} amBaseUrl access management base URL\n * @param {string} data body form data\n * @param {AxiosRequestConfig} config config axios request config object\n * @param {State} state library state\n * @returns {Promise<AccessTokenResponseType>} a promise resolving to an object containing the authorization server response object containing the access token\n */\nexport async function accessToken({\n  amBaseUrl,\n  postData,\n  config,\n  realm = false,\n  state,\n}: {\n  amBaseUrl: string;\n  postData: any;\n  config: AxiosRequestConfig;\n  realm?: boolean;\n  state: State;\n}): Promise<AccessTokenResponseType> {\n  const accessTokenURL = util.format(\n    accessTokenUrlTemplate,\n    amBaseUrl,\n    realm ? getCurrentRealmPath(state) : ''\n  );\n  const { data } = await generateOauth2Api({\n    resource: getApiConfig(),\n    requestOverride: {},\n    authenticate: false,\n    state,\n  }).post(accessTokenURL, postData, config);\n  return data;\n}\n\n/**\n * Get token info\n * @param {string} amBaseUrl access management base URL\n * @param {AxiosRequestConfig} config config axios request config object\n * @param {State} state library state\n * @returns\n */\nexport async function getTokenInfo({\n  amBaseUrl,\n  config,\n  state,\n}: {\n  amBaseUrl: string;\n  config: AxiosRequestConfig;\n  state: State;\n}): Promise<TokenInfoResponseType> {\n  const accessTokenURL = util.format(tokenInfoUrlTemplate, amBaseUrl, '');\n  const { data } = await generateOauth2Api({\n    resource: getApiConfig(),\n    requestOverride: {},\n    state,\n  }).get(accessTokenURL, config);\n  return data;\n}\n\n/**\n * Perform client credentials grant flow\n * @param {string} amBaseUrl access management base URL\n * @param {string} clientId client id\n * @param {string} clientSecret client secret\n * @param {string} scope space-delimited scope list\n * @param {State} state library state\n * @returns {Promise} a promise resolving to an object containing the authorization server response object\n */\nexport async function clientCredentialsGrant({\n  amBaseUrl,\n  clientId,\n  clientSecret,\n  scope,\n  state,\n}: {\n  amBaseUrl: string;\n  clientId: string;\n  clientSecret: string;\n  scope: string;\n  state: State;\n}): Promise<AccessTokenResponseType> {\n  const urlString = util.format(\n    accessTokenUrlTemplate,\n    amBaseUrl,\n    getCurrentRealmPath(state)\n  );\n  const requestOverride = {\n    headers: {\n      Authorization: `Basic ${encode(`${clientId}:${clientSecret}`)}`,\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n  };\n  const requestBody = {\n    grant_type: 'client_credentials',\n    scope,\n  };\n  const { data } = await generateOauth2Api({\n    resource: getApiConfig(),\n    requestOverride,\n    state,\n  }).post(urlString, qs.stringify(requestBody), { withCredentials: true });\n  return data;\n}\n","import util from 'util';\n\nimport { State } from '../shared/State';\nimport { getCurrentRealmPath } from '../utils/ForgeRockUtils';\nimport { deleteDeepByKey } from '../utils/JsonUtils';\nimport {\n  type IdObjectSkeletonInterface,\n  type NoIdObjectSkeletonInterface,\n  type PagedResult,\n  type Readable,\n  type Writable,\n} from './ApiTypes';\nimport { generateAmApi } from './BaseApi';\nimport { AmServiceType } from './ServiceApi';\n\nconst oauth2ClientURLTemplate = '%s/json%s/realm-config/agents/OAuth2Client/%s';\nconst oauth2ClientListURLTemplate =\n  '%s/json%s/realm-config/agents/OAuth2Client?_queryFilter=true';\nconst apiVersion = 'protocol=2.1,resource=1.0';\nconst getApiConfig = () => {\n  return {\n    apiVersion,\n  };\n};\n\nexport type OAuth2ClientSkeleton = IdObjectSkeletonInterface & {\n  overrideOAuth2ClientConfig?: {\n    [k: string]: string | number | boolean | string[] | object | undefined;\n  };\n  advancedOAuth2ClientConfig?: {\n    descriptions: {\n      inherited: boolean;\n      value: string[];\n    };\n    grantTypes?: Readable<string[]> | Writable<string[]>;\n    isConsentImplied?: Readable<boolean> | Writable<boolean>;\n    tokenEndpointAuthMethod?: Readable<string> | Writable<string>;\n    responseTypes?: Readable<string[]> | Writable<string[]>;\n    [k: string]: string | number | boolean | string[] | object | undefined;\n  };\n  signEncOAuth2ClientConfig?: {\n    jwkSet?: Readable<string> | Writable<string>;\n    publicKeyLocation?: Readable<string> | Writable<string>;\n    [k: string]: string | number | boolean | string[] | object | undefined;\n  };\n  coreOpenIDClientConfig?: {\n    [k: string]: string | number | boolean | string[] | object | undefined;\n  };\n  coreOAuth2ClientConfig?: {\n    userpassword?: string;\n    clientName?: Readable<string[]> | Writable<string[]>;\n    clientType?: Readable<string> | Writable<string>;\n    accessTokenLifetime?: Readable<number> | Writable<number>;\n    scopes?: Readable<string[]> | Writable<string[]>;\n    defaultScopes?: {\n      value: string[];\n      [k: string]: string | number | boolean | string[] | object | undefined;\n    };\n    [k: string]: string | number | boolean | string[] | object | undefined;\n  };\n  coreUmaClientConfig?: {\n    [k: string]: string | number | boolean | string[] | object | undefined;\n  };\n  _type: AmServiceType;\n};\n\n/**\n * Get OAuth2 Clients\n * @returns {Promise<PagedResult>} a promise that resolves to a PagedResults object containing an array of oauth2client objects\n */\nexport async function getOAuth2Clients({\n  state,\n}: {\n  state: State;\n}): Promise<PagedResult<OAuth2ClientSkeleton>> {\n  const urlString = util.format(\n    oauth2ClientListURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state)\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get(\n    urlString,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Get OAuth2 Client\n * @param {string} id client id\n * @returns {Promise<OAuth2ClientSkeleton>} a promise that resolves to an oauth2 client object\n */\nexport async function getOAuth2Client({\n  id,\n  state,\n}: {\n  id: string;\n  state: State;\n}): Promise<OAuth2ClientSkeleton> {\n  const urlString = util.format(\n    oauth2ClientURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    id\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get(\n    urlString,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Put OAuth2 Client\n * @param {string} id client id\n * @param {OAuth2ClientSkeleton} clientData oauth2client object\n * @returns {Promise<OAuth2ClientSkeleton>} a promise that resolves to an oauth2 client object\n */\nexport async function putOAuth2Client({\n  id,\n  clientData,\n  state,\n}: {\n  id: string;\n  clientData: OAuth2ClientSkeleton | NoIdObjectSkeletonInterface;\n  state: State;\n}): Promise<OAuth2ClientSkeleton> {\n  // until we figure out a way to use transport keys in Frodo,\n  // we'll have to drop those encrypted attributes.\n  const client = deleteDeepByKey(clientData, '-encrypted');\n  delete client._provider;\n  delete client._rev;\n  const urlString = util.format(\n    oauth2ClientURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    id\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).put(\n    urlString,\n    client,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Delete OAuth2 Client\n * @param {string} id OAuth2 Client\n * @returns {Promise<OAuth2ClientSkeleton>} a promise that resolves to an oauth2client object\n */\nexport async function deleteOAuth2Client({\n  id,\n  state,\n}: {\n  id: string;\n  state: State;\n}): Promise<OAuth2ClientSkeleton> {\n  const urlString = util.format(\n    oauth2ClientURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    id\n  );\n  const { data } = await generateAmApi({\n    resource: getApiConfig(),\n    state,\n  }).delete(urlString, {\n    withCredentials: true,\n  });\n  return data;\n}\n","import fs from 'fs';\nimport { lstat, readdir, readFile } from 'fs/promises';\nimport { join } from 'path';\nimport { Reader } from 'properties-reader';\nimport replaceall from 'replaceall';\nimport slugify from 'slugify';\n\nimport { ExportMetaData } from '../ops/OpsTypes';\nimport Constants from '../shared/Constants';\nimport { State } from '../shared/State';\nimport {\n  decode,\n  decodeBase64Url,\n  encode,\n  encodeBase64Url,\n} from './Base64Utils';\nimport { debugMessage, printMessage } from './Console';\nimport { deleteDeepByKey, stringify } from './JsonUtils';\n\nexport type ExportImport = {\n  getMetadata(): ExportMetaData;\n  titleCase(input: string): string;\n  getRealmString(): string;\n  convertBase64TextToArray(b64text: string): any[];\n  convertBase64UrlTextToArray(b64UTF8Text: string): any[];\n  convertTextArrayToBase64(textArray: string[]): string;\n  convertTextArrayToBase64Url(textArray: string[]): any;\n  validateImport(metadata: any): boolean;\n  getTypedFilename(name: string, type: string, suffix?: string): string;\n  getWorkingDirectory(mkdirs?: boolean): string;\n  getFilePath(fileName: string, mkdirs?: boolean): string;\n  saveToFile(\n    type: string,\n    data: object,\n    identifier: string,\n    filename: string,\n    includeMeta?: boolean\n  ): void;\n  /**\n   * Save JSON object to file\n   * @param {Object} data data object\n   * @param {String} filename file name\n   * @param {boolean} includeMeta true to include metadata, false otherwise. Default: true\n   * @return {boolean} true if successful, false otherwise\n   */\n  saveJsonToFile(\n    data: object,\n    filename: string,\n    includeMeta?: boolean\n  ): boolean;\n  /**\n   * Save text data to file\n   * @param data text data\n   * @param filename file name\n   * @return true if successful, false otherwise\n   */\n  saveTextToFile(data: string, filename: string): boolean;\n  /**\n   * Append text data to file\n   * @param {String} data text data\n   * @param {String} filename file name\n   */\n  appendTextToFile(data: string, filename: string): void;\n  /**\n   * Find files by name\n   * @param {string} fileName file name to search for\n   * @param {boolean} fast return first result and stop search\n   * @param {string} path path to directory where to start the search\n   * @returns {string[]} array of found file paths relative to starting directory\n   */\n  findFilesByName(fileName: string, fast?: boolean, path?: string): string[];\n  /**\n   * find all (nested) files in a directory\n   *\n   * @param directory directory to search\n   * @returns list of files\n   */\n  readFiles(directory: string): Promise<\n    {\n      path: string;\n      content: string;\n    }[]\n  >;\n\n  substituteEnvParams(input: string, reader: Reader): string;\n\n  unSubstituteEnvParams(input: string, reader: Reader): string;\n  /*\n   * Parse a URL into its components and make them easily accessible by name\n   *\n   * Use in a Scripte Decision Node Script as follows:\n   * var referer = parseUrl(requestHeaders.get(\"referer\").get(0));\n   * var origin = referer.origin;\n   *\n   * e.g.: https://openam-volker-dev.forgeblocks.com/am/XUI/?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim#/\n   * {\n   *     hash: '#/',\n   *     host: 'openam-volker-dev.forgeblocks.com',\n   *     hostname: 'openam-volker-dev.forgeblocks.com',\n   *     href: 'https://openam-volker-dev.forgeblocks.com/am/XUI/?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim#/',\n   *     origin: 'https://openam-volker-dev.forgeblocks.com',\n   *     pathname: '/am/XUI/',\n   *     port: '',\n   *     protocol: 'https',\n   *     search: '?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim',\n   *     username: '',\n   *     password: '',\n   *     searchParam: {\n   *         realm: '/bravo',\n   *         authIndexType: 'service',\n   *         authIndexValue: 'InitiateOwnerClaim'\n   *     }\n   * }\n   */\n  parseUrl(href: string): any;\n  /**\n   * Check if a string is a valid URL\n   * @param {string} urlString input string to be evaluated\n   * @returns {boolean} true if a valid URL, false otherwise\n   */\n  isValidUrl(urlString: string): boolean;\n};\n\nexport default (state: State): ExportImport => {\n  return {\n    getMetadata(): ExportMetaData {\n      return getMetadata({ state });\n    },\n    titleCase(input: string) {\n      return titleCase(input);\n    },\n    getRealmString() {\n      return getRealmString({ state });\n    },\n    convertBase64TextToArray(b64text: string) {\n      return convertBase64TextToArray(b64text);\n    },\n    convertBase64UrlTextToArray(b64UTF8Text: string) {\n      return convertBase64UrlTextToArray(b64UTF8Text);\n    },\n    convertTextArrayToBase64(textArray: string[]) {\n      return convertTextArrayToBase64(textArray);\n    },\n    convertTextArrayToBase64Url(textArray: string[]) {\n      return convertTextArrayToBase64Url(textArray);\n    },\n    validateImport(metadata): boolean {\n      return validateImport(metadata);\n    },\n    getTypedFilename(name: string, type: string, suffix = 'json'): string {\n      return getTypedFilename(name, type, suffix);\n    },\n    getWorkingDirectory(mkdirs = false) {\n      return getWorkingDirectory({ mkdirs, state });\n    },\n    getFilePath(fileName: string, mkdirs = false): string {\n      return getFilePath({ fileName, mkdirs, state });\n    },\n    saveToFile(\n      type: string,\n      data: object,\n      identifier: string,\n      filename: string,\n      includeMeta = true\n    ): void {\n      return saveToFile({\n        type,\n        data,\n        identifier,\n        filename,\n        includeMeta,\n        state,\n      });\n    },\n    saveJsonToFile(\n      data: object,\n      filename: string,\n      includeMeta = true\n    ): boolean {\n      return saveJsonToFile({ data, filename, includeMeta, state });\n    },\n    saveTextToFile(data: string, filename: string): boolean {\n      return saveTextToFile({ data, filename, state });\n    },\n    appendTextToFile(data: string, filename: string) {\n      return appendTextToFile(data, filename);\n    },\n    findFilesByName(fileName: string, fast = true, path = './'): string[] {\n      return findFilesByName(fileName, fast, path);\n    },\n    async readFiles(directory: string): Promise<\n      {\n        path: string;\n        content: string;\n      }[]\n    > {\n      return readFiles(directory);\n    },\n    substituteEnvParams(input: string, reader: Reader): string {\n      return substituteEnvParams(input, reader);\n    },\n    unSubstituteEnvParams(input: string, reader: Reader): string {\n      return unSubstituteEnvParams(input, reader);\n    },\n    parseUrl(href: string): any {\n      return parseUrl(href);\n    },\n    isValidUrl(urlString: string): boolean {\n      return isValidUrl(urlString);\n    },\n  };\n};\n\nexport function getMetadata({ state }: { state: State }): ExportMetaData {\n  const metadata: ExportMetaData = {\n    origin: state.getHost(),\n    originAmVersion: state.getAmVersion(),\n    exportedBy: state.getUsername(),\n    exportDate: new Date().toISOString(),\n    exportTool: Constants.FRODO_METADATA_ID,\n    exportToolVersion: state.getFrodoVersion(),\n  };\n  return metadata;\n}\n\n/*\n * Output str in title case\n *\n * e.g.: 'ALL UPPERCASE AND all lowercase' = 'All Uppercase And All Lowercase'\n */\nexport function titleCase(input: string) {\n  const str = input.toString();\n  const splitStr = str.toLowerCase().split(' ');\n  for (let i = 0; i < splitStr.length; i += 1) {\n    splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].slice(1);\n  }\n  return splitStr.join(' ');\n}\n\nexport function getRealmString({ state }: { state: State }) {\n  const realm = state.getRealm();\n  return realm\n    .split('/')\n    .reduce((result, item) => `${result}${titleCase(item)}`, '');\n}\n\nexport function convertBase64TextToArray(b64text: string) {\n  let arrayOut = [];\n  let plainText = decode(b64text);\n  plainText = plainText.replace(/\\t/g, '    ');\n  arrayOut = plainText.split('\\n');\n  return arrayOut;\n}\n\nexport function convertBase64UrlTextToArray(b64UTF8Text: string) {\n  let arrayOut = [];\n  let plainText = decodeBase64Url(b64UTF8Text);\n  plainText = plainText.replace(/\\t/g, '    ');\n  arrayOut = plainText.split('\\n');\n  return arrayOut;\n}\n\nexport function convertTextArrayToBase64(textArray: string[]) {\n  const joinedText = textArray.join('\\n');\n  const b64encodedScript = encode(joinedText);\n  return b64encodedScript;\n}\n\nexport function convertTextArrayToBase64Url(textArray: string[]) {\n  const joinedText = textArray.join('\\n');\n  const b64encodedScript = encodeBase64Url(joinedText);\n  return b64encodedScript;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function validateImport(metadata): boolean {\n  return metadata || true;\n}\n\nexport function getTypedFilename(\n  name: string,\n  type: string,\n  suffix = 'json'\n): string {\n  const slug = slugify(name.replace(/^http(s?):\\/\\//, ''), {\n    remove: /[^\\w\\s$*_+~.()'\"!\\-@]+/g,\n  });\n  return `${slug}.${type}.${suffix}`;\n}\n\nexport function getWorkingDirectory({\n  mkdirs = false,\n  state,\n}: {\n  mkdirs: boolean;\n  state: State;\n}) {\n  let wd = '.';\n  if (state.getDirectory()) {\n    wd = state.getDirectory().replace(/\\/$/, '');\n    // create directory if it doesn't exist\n    if (mkdirs && !fs.existsSync(wd)) {\n      debugMessage({\n        message: `ExportImportUtils.getWorkingDirectory: creating directory '${wd}'`,\n        state,\n      });\n      fs.mkdirSync(wd, { recursive: true });\n    }\n  }\n  return wd;\n}\n\n/**\n * Get the file path to a file in the working directory. If working directory does not exist, it will return the fileName as the file path.\n * @param fileName The file name\n * @param mkdirs If directories to working directory don't exist, makes the directories if true, and if false does not make the directories. Default: false\n * @return The file path to the file in the working directory\n */\nexport function getFilePath({\n  fileName,\n  mkdirs = false,\n  state,\n}: {\n  fileName: string;\n  mkdirs: boolean;\n  state: State;\n}): string {\n  return state.getDirectory()\n    ? `${getWorkingDirectory({ mkdirs, state })}/${fileName}`\n    : fileName;\n}\n\n/**\n * Save to file\n * @param {any} data data object\n * @param {string} filename file name\n */\nexport function saveToFile({\n  type,\n  data,\n  identifier,\n  filename,\n  includeMeta,\n  state,\n}: {\n  type: string;\n  data: object;\n  identifier: string;\n  filename: string;\n  includeMeta: boolean;\n  state: State;\n}): void {\n  const exportData = {};\n  exportData[type] = {};\n\n  if (Array.isArray(data)) {\n    data.forEach((element) => {\n      exportData[type][element[identifier]] = element;\n    });\n  } else {\n    exportData[type][data[identifier]] = data;\n  }\n  saveJsonToFile({\n    data: exportData,\n    includeMeta,\n    filename,\n    state,\n  });\n}\n\n/**\n * Save JSON object to file\n * @param {object} data data object\n * @param {string} filename file name\n * @param {boolean} includeMeta true to include metadata, false otherwise. Default: true\n * @return {boolean} true if successful, false otherwise\n */\nexport function saveJsonToFile({\n  data,\n  filename,\n  includeMeta = true,\n  state,\n}: {\n  data: object;\n  filename: string;\n  includeMeta?: boolean;\n  state: State;\n}): boolean {\n  const exportData = data;\n  if (includeMeta && !exportData['meta'])\n    exportData['meta'] = getMetadata({ state });\n  if (!includeMeta && exportData['meta']) delete exportData['meta'];\n  deleteDeepByKey(exportData, '_rev');\n  return saveTextToFile({\n    data: stringify(exportData),\n    filename,\n    state,\n  });\n}\n\n/**\n * Save text data to file\n * @param data text data\n * @param filename file name\n * @return true if successful, false otherwise\n */\nexport function saveTextToFile({\n  data,\n  filename,\n  state,\n}: {\n  data: string;\n  filename: string;\n  state: State;\n}): boolean {\n  try {\n    fs.writeFileSync(filename, data);\n    return true;\n  } catch (err) {\n    printMessage({\n      message: `ERROR - can't save ${filename}`,\n      type: 'error',\n      state,\n    });\n    return false;\n  }\n}\n\n/**\n * Append text data to file\n * @param {string} data text data\n * @param {string} filename file name\n */\nexport function appendTextToFile(data: string, filename: string) {\n  fs.appendFileSync(filename, data);\n}\n\n/**\n * Find files by name\n * @param {string} fileName file name to search for\n * @param {boolean} fast return first result and stop search\n * @param {string} path path to directory where to start the search\n * @returns {string[]} array of found file paths relative to starting directory\n */\nexport function findFilesByName(\n  fileName: string,\n  fast = true,\n  path = './'\n): string[] {\n  const entries = fs.readdirSync(path, {\n    encoding: 'utf8',\n    withFileTypes: true,\n  });\n\n  // Get files within the current directory and add a path key to the file objects\n  const files: string[] = entries\n    .filter((entry) => !entry.isDirectory())\n    .filter((file) => file.name === fileName)\n    // .map((file) => ({ ...file, path: path + file.name }));\n    .map((file) => path + file.name);\n\n  if (fast && files.length > 0) return files;\n\n  // search sub-folders\n  const folders = entries.filter((entry) => entry.isDirectory());\n  for (const folder of folders)\n    files.push(...findFilesByName(fileName, fast, `${path}${folder.name}/`));\n\n  return files;\n}\n\n/**\n * find all (nested) files in a directory\n *\n * @param directory directory to search\n * @returns list of files\n */\nexport async function readFiles(directory: string): Promise<\n  {\n    path: string;\n    content: string;\n  }[]\n> {\n  const items = await readdir(directory);\n\n  const filePathsNested = await Promise.all(\n    items.map(async (entity) => {\n      const path = join(directory, entity);\n      const isDirectory = (await lstat(path)).isDirectory();\n\n      if (isDirectory) {\n        return readFiles(path);\n      }\n      return {\n        path,\n        content: await readFile(path, 'utf8'),\n      };\n    })\n  );\n\n  return filePathsNested.flat();\n}\n\nexport function substituteEnvParams(input: string, reader: Reader): string {\n  reader.each((key, value) => {\n    input = replaceall(value, `\\${${key}}`, input);\n  });\n  return input;\n}\n\nexport function unSubstituteEnvParams(input: string, reader: Reader): string {\n  reader.each((key, value) => {\n    input = replaceall(`\\${${key}}`, value, input);\n  });\n  return input;\n}\n\n/*\n * Parse a URL into its components and make them easily accessible by name\n *\n * Use in a Scripte Decision Node Script as follows:\n * var referer = parseUrl(requestHeaders.get(\"referer\").get(0));\n * var origin = referer.origin;\n *\n * e.g.: https://openam-volker-dev.forgeblocks.com/am/XUI/?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim#/\n * {\n *     hash: '#/',\n *     host: 'openam-volker-dev.forgeblocks.com',\n *     hostname: 'openam-volker-dev.forgeblocks.com',\n *     href: 'https://openam-volker-dev.forgeblocks.com/am/XUI/?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim#/',\n *     origin: 'https://openam-volker-dev.forgeblocks.com',\n *     pathname: '/am/XUI/',\n *     port: '',\n *     protocol: 'https',\n *     search: '?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim',\n *     username: '',\n *     password: '',\n *     searchParam: {\n *         realm: '/bravo',\n *         authIndexType: 'service',\n *         authIndexValue: 'InitiateOwnerClaim'\n *     }\n * }\n */\nexport function parseUrl(href: string): any {\n  const m = href.match(\n      /^(([^:/?#]+):?(?:\\/\\/((?:([^/?#:]*):([^/?#:]*)@)?([^/?#:]*)(?::([^/?#:]*))?)))?([^?#]*)(\\?[^#]*)?(#.*)?$/\n    ),\n    r = {\n      hash: m[10] || '',\n      host: m[3] || '',\n      hostname: m[6] || '',\n      href: m[0] || '',\n      origin: m[1] || '',\n      pathname: m[8] || (m[1] ? '/' : ''),\n      port: m[7] || '',\n      protocol: m[2] || '',\n      search: m[9] || '',\n      username: m[4] || '',\n      password: m[5] || '',\n      searchParam: {}, // { realm: '/bravo',\n      //   authIndexType: 'service',\n      //   authIndexValue: 'InitiateOwnerClaim' }\n    };\n  if (r.protocol.length == 2) {\n    r.protocol = 'file:///' + r.protocol.toUpperCase();\n    r.origin = r.protocol + '//' + r.host;\n  }\n  if (r.search.length > 2) {\n    const query = r.search.indexOf('?') === 0 ? r.search.substr(1) : r.search;\n    const vars = query.split('&');\n    for (let i = 0; i < vars.length; i++) {\n      const pair = vars[i].split('=');\n      r.searchParam[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n    }\n  }\n  r.href = r.origin + r.pathname + r.search + r.hash;\n  return r;\n}\n\n/**\n * Check if a string is a valid URL\n * @param {string} urlString input string to be evaluated\n * @returns {boolean} true if a valid URL, false otherwise\n */\nexport function isValidUrl(urlString: string): boolean {\n  try {\n    return Boolean(new URL(urlString));\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Performs an export or import given a function with its parameters with custom error handling that will just print the error if one is thrown and return null.\n * @param func The export or import function.\n * @param parameters The parameters to call the export or import function with. By default, it is { state }.\n * @returns {Promise<R | null>} Returns the result of the export or import function, or null if an error is thrown\n */\nexport async function exportOrImportWithErrorHandling<\n  P extends { state: State },\n  R,\n>(\n  func: (params: P) => Promise<R>,\n  parameters: P,\n  errors: Error[]\n): Promise<R | null> {\n  try {\n    return await func(parameters);\n  } catch (error) {\n    if (errors && Array.isArray(errors)) {\n      errors.push(error);\n    }\n    return null;\n  }\n}\n","export class FrodoError extends Error {\n  originalErrors: Error[] = [];\n  isHttpError: boolean = false;\n  httpCode: string;\n  httpStatus: number;\n  httpMessage: string;\n  httpDetail: string;\n  httpErrorText: string;\n  httpErrorReason: string;\n  httpDescription: string;\n\n  constructor(message: string, originalErrors: Error | Error[] = null) {\n    super(message);\n    this.name = this.constructor.name;\n\n    if (typeof Error.captureStackTrace === 'function') {\n      Error.captureStackTrace(this, this.constructor);\n    } else {\n      this.stack = new Error(message).stack;\n    }\n\n    if (originalErrors && Array.isArray(originalErrors)) {\n      this.originalErrors = originalErrors;\n    } else if (originalErrors) {\n      this.originalErrors = [originalErrors as Error];\n    }\n\n    // determine if http error and set http error fields\n    if (originalErrors) {\n      const error = this.originalErrors[0];\n      this.isHttpError = error.name === 'AxiosError';\n      this.httpCode = error['code'];\n      this.httpStatus = error['response'] ? error['response'].status : null;\n      this.httpMessage = error['response']\n        ? error['response'].data\n          ? error['response'].data.message\n          : null\n        : null;\n      this.httpDetail = error['response']\n        ? error['response'].data\n          ? error['response'].data.detail\n          : null\n        : null;\n      this.httpErrorText = error['response']\n        ? error['response'].data\n          ? error['response'].data.error\n          : null\n        : null;\n      this.httpErrorReason = error['response']\n        ? error['response'].data\n          ? error['response'].data.reason\n          : null\n        : null;\n      this.httpDescription = error['response']\n        ? error['response'].data\n          ? error['response'].data.error_description\n          : null\n        : null;\n    }\n  }\n\n  getOriginalErrors(): Error[] {\n    return this.originalErrors;\n  }\n\n  getCombinedMessage(): string {\n    let combinedMessage = this.message || '';\n    this.originalErrors.forEach((error) => {\n      switch (error.name) {\n        case 'FrodoError':\n          combinedMessage +=\n            '\\n  ' + (error as FrodoError).getCombinedMessage();\n          break;\n\n        case 'AxiosError':\n          {\n            combinedMessage += '\\n  HTTP client error';\n            combinedMessage += this.httpCode\n              ? `\\n    Code: ${this.httpCode}`\n              : '';\n            combinedMessage += this.httpStatus\n              ? `\\n    Status: ${this.httpStatus}`\n              : '';\n            combinedMessage += this.httpErrorText\n              ? `\\n    Error: ${this.httpErrorText}`\n              : '';\n            combinedMessage += this.httpErrorReason\n              ? `\\n    Reason: ${this.httpErrorReason}`\n              : '';\n            combinedMessage += this.httpMessage\n              ? `\\n    Message: ${this.httpMessage}`\n              : '';\n            combinedMessage += this.httpDetail\n              ? `\\n    Detail: ${this.httpDetail}`\n              : '';\n            combinedMessage += this.httpDescription\n              ? `\\n    Description: ${this.httpDescription}`\n              : '';\n          }\n          break;\n\n        default:\n          combinedMessage += '\\n  ' + error.message;\n          break;\n      }\n    });\n    // if (this.originalErrors.slice(-1))\n    //   combinedMessage += '\\n  ' + this.originalErrors.slice(-1)[0].stack;\n    return combinedMessage;\n  }\n\n  toString() {\n    this.getCombinedMessage();\n  }\n}\n","import util from 'util';\n\nimport { State } from '../shared/State';\nimport { getCurrentRealmPath } from '../utils/ForgeRockUtils';\nimport { cloneDeep } from '../utils/JsonUtils';\nimport { type IdObjectSkeletonInterface } from './ApiTypes';\nimport { generateAmApi } from './BaseApi';\nimport { type AmServiceType } from './ServiceApi';\n\nconst oAuth2ProviderServiceURLTemplate =\n  '%s/json%s/realm-config/services/oauth-oidc';\n\nconst createOAuth2ProviderServiceURLTemplate =\n  '%s/json%s/realm-config/services/oauth-oidc?_action=create';\n\nconst apiVersion = 'protocol=2.1,resource=1.0';\nconst getApiConfig = () => {\n  return {\n    apiVersion,\n  };\n};\n\nexport type OAuth2ProviderSkeleton = IdObjectSkeletonInterface & {\n  advancedOIDCConfig: {\n    supportedRequestParameterEncryptionEnc?: string[];\n    authorisedOpenIdConnectSSOClients?: string[];\n    supportedUserInfoEncryptionAlgorithms?: string[];\n    supportedAuthorizationResponseEncryptionEnc?: string[];\n    supportedTokenIntrospectionResponseEncryptionAlgorithms?: string[];\n    useForceAuthnForPromptLogin?: boolean;\n    useForceAuthnForMaxAge?: boolean;\n    alwaysAddClaimsToToken?: boolean;\n    supportedTokenIntrospectionResponseSigningAlgorithms?: string[];\n    supportedTokenEndpointAuthenticationSigningAlgorithms?: string[];\n    supportedRequestParameterSigningAlgorithms?: string[];\n    includeAllKtyAlgCombinationsInJwksUri?: boolean;\n    amrMappings?: any;\n    loaMapping?: any;\n    authorisedIdmDelegationClients?: string[];\n    idTokenInfoClientAuthenticationEnabled?: boolean;\n    storeOpsTokens?: boolean;\n    supportedUserInfoSigningAlgorithms?: string[];\n    supportedAuthorizationResponseSigningAlgorithms?: string[];\n    supportedUserInfoEncryptionEnc?: string[];\n    claimsParameterSupported?: boolean;\n    supportedTokenIntrospectionResponseEncryptionEnc?: string[];\n    supportedAuthorizationResponseEncryptionAlgorithms?: string[];\n    supportedRequestParameterEncryptionAlgorithms?: string[];\n    defaultACR?: string[];\n    [k: string]: string | number | boolean | string[] | object | undefined;\n  };\n  advancedOAuth2Config?: {\n    passwordGrantAuthService?: string;\n    tokenCompressionEnabled?: boolean;\n    tokenEncryptionEnabled?: boolean;\n    requirePushedAuthorizationRequests?: boolean;\n    tlsCertificateBoundAccessTokensEnabled?: boolean;\n    defaultScopes?: string[];\n    moduleMessageEnabledInPasswordGrant?: boolean;\n    allowClientCredentialsInTokenRequestQueryParameters?: boolean;\n    supportedSubjectTypes?: string[];\n    refreshTokenGracePeriod?: number;\n    tlsClientCertificateHeaderFormat?: string;\n    hashSalt?: string;\n    macaroonTokenFormat?: string;\n    maxAgeOfRequestObjectNbfClaim?: number;\n    tlsCertificateRevocationCheckingEnabled?: boolean;\n    nbfClaimRequiredInRequestObject?: boolean;\n    requestObjectProcessing?: string;\n    maxDifferenceBetweenRequestObjectNbfAndExp?: number;\n    responseTypeClasses?: string[];\n    expClaimRequiredInRequestObject?: boolean;\n    tokenValidatorClasses?: string[];\n    tokenSigningAlgorithm?: string;\n    codeVerifierEnforced?: string;\n    displayNameAttribute?: string;\n    tokenExchangeClasses?: string[];\n    parRequestUriLifetime?: number;\n    allowedAudienceValues?: string[];\n    persistentClaims?: string[];\n    supportedScopes?: string[];\n    authenticationAttributes?: string[];\n    grantTypes?: string[];\n    [k: string]: string | number | boolean | string[] | object | undefined;\n  };\n  clientDynamicRegistrationConfig?: {\n    dynamicClientRegistrationScope: string;\n    allowDynamicRegistration: boolean;\n    requiredSoftwareStatementAttestedAttributes: string[];\n    dynamicClientRegistrationSoftwareStatementRequired: boolean;\n    generateRegistrationAccessTokens: boolean;\n    [k: string]: string | number | boolean | string[] | object | undefined;\n  };\n  coreOIDCConfig?: {\n    overrideableOIDCClaims: string[];\n    oidcDiscoveryEndpointEnabled: boolean;\n    supportedIDTokenEncryptionMethods: string[];\n    supportedClaims: string[];\n    supportedIDTokenSigningAlgorithms: string[];\n    supportedIDTokenEncryptionAlgorithms: string[];\n    jwtTokenLifetime: number;\n    [k: string]: string | number | boolean | string[] | object | undefined;\n  };\n  coreOAuth2Config?: {\n    refreshTokenLifetime: number;\n    scopesPolicySet: string;\n    accessTokenMayActScript: '[Empty]' | string;\n    accessTokenLifetime: number;\n    macaroonTokensEnabled: boolean;\n    codeLifetime: number;\n    statelessTokensEnabled: boolean;\n    usePolicyEngineForScope: boolean;\n    issueRefreshToken: boolean;\n    oidcMayActScript: '[Empty]' | string;\n    issueRefreshTokenOnRefreshedToken: boolean;\n    [k: string]: string | number | boolean | string[] | object | undefined;\n  };\n  consent?: {\n    supportedRcsRequestSigningAlgorithms: string[];\n    supportedRcsResponseEncryptionAlgorithms: string[];\n    supportedRcsRequestEncryptionMethods: string[];\n    enableRemoteConsent: boolean;\n    supportedRcsRequestEncryptionAlgorithms: string[];\n    clientsCanSkipConsent: boolean;\n    supportedRcsResponseSigningAlgorithms: string[];\n    supportedRcsResponseEncryptionMethods: string[];\n    [k: string]: string | number | boolean | string[] | object | undefined;\n  };\n  deviceCodeConfig?: {\n    deviceUserCodeLength: number;\n    deviceCodeLifetime: number;\n    deviceUserCodeCharacterSet: string;\n    devicePollInterval: number;\n    [k: string]: string | number | boolean | string[] | object | undefined;\n  };\n  pluginsConfig?: {\n    evaluateScopeClass?: string;\n    validateScopeScript?: '[Empty]' | string;\n    accessTokenEnricherClass?: string;\n    oidcClaimsPluginType?: string;\n    authorizeEndpointDataProviderClass?: string;\n    authorizeEndpointDataProviderPluginType?: 'JAVA' | 'SCRIPTED';\n    userCodeGeneratorClass?: string;\n    evaluateScopeScript?: '[Empty]' | string;\n    oidcClaimsClass?: string;\n    evaluateScopePluginType?: 'JAVA' | 'SCRIPTED';\n    authorizeEndpointDataProviderScript?: '[Empty]' | string;\n    accessTokenModifierClass?: string;\n    accessTokenModificationScript?: '[Empty]' | string;\n    validateScopePluginType?: 'JAVA' | 'SCRIPTED';\n    accessTokenModificationPluginType?: 'JAVA' | 'SCRIPTED';\n    oidcClaimsScript?: '[Empty]' | string;\n    validateScopeClass?: string;\n    [k: string]: string | number | boolean | string[] | object | undefined;\n  };\n  cibaConfig?: {\n    cibaMinimumPollingInterval: number;\n    supportedCibaSigningAlgorithms: string[];\n    cibaAuthReqIdLifetime: number;\n    [k: string]: string | number | boolean | string[] | object | undefined;\n  };\n  _type?: AmServiceType;\n  [k: string]: string | number | boolean | string[] | object | undefined;\n};\n\n/**\n * Get OAuth2 Provider\n * @returns {Promise<OAuth2ProviderSkeleton>} a promise that resolves to an OAuth2Provider object\n */\nexport async function getOAuth2Provider({\n  state,\n}: {\n  state: State;\n}): Promise<OAuth2ProviderSkeleton> {\n  const urlString = util.format(\n    oAuth2ProviderServiceURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state)\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get(\n    urlString,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\nconst providerTemplate: OAuth2ProviderSkeleton = {\n  advancedOAuth2Config: {\n    supportedScopes: [] as string[],\n    persistentClaims: [] as string[],\n    passwordGrantAuthService: '[Empty]',\n  },\n  advancedOIDCConfig: { authorisedOpenIdConnectSSOClients: [] as string[] },\n  pluginsConfig: { oidcClaimsClass: '', accessTokenModifierClass: '' },\n};\n\n/**\n * Create OAuth2 provider\n * @param {OAuth2ProviderSkeleton} providerData (optional) oauth2 provider object\n * @returns {Promise<OAuth2ProviderSkeleton>} a promise that resolves to an oauth2 provider object\n */\nexport async function createOAuth2Provider({\n  providerData = providerTemplate,\n  state,\n}: {\n  providerData?: OAuth2ProviderSkeleton;\n  state: State;\n}): Promise<OAuth2ProviderSkeleton> {\n  const urlString = util.format(\n    createOAuth2ProviderServiceURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state)\n  );\n  const { data } = await generateAmApi({\n    resource: getApiConfig(),\n    state,\n  }).post(urlString, providerData, {\n    withCredentials: true,\n  });\n  return data;\n}\n\n/**\n * Put OAuth2 provider\n * @param {OAuth2ProviderSkeleton} providerData oauth2 provider object\n * @returns {Promise<OAuth2ProviderSkeleton>} a promise that resolves to an oauth2 provider object\n */\nexport async function putOAuth2Provider({\n  providerData: providerData,\n  state,\n}: {\n  providerData: OAuth2ProviderSkeleton;\n  state: State;\n}): Promise<OAuth2ProviderSkeleton> {\n  const provider = cloneDeep(providerData);\n  delete provider._rev;\n  const urlString = util.format(\n    oAuth2ProviderServiceURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state)\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).put(\n    urlString,\n    provider,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Delete OAuth2 Provider\n * @returns {Promise<OAuth2ProviderSkeleton>} a promise that resolves to an oauth2 provider object\n */\nexport async function deleteOAuth2Provider({\n  state,\n}: {\n  state: State;\n}): Promise<OAuth2ProviderSkeleton> {\n  const urlString = util.format(\n    oAuth2ProviderServiceURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state)\n  );\n  const { data } = await generateAmApi({\n    resource: getApiConfig(),\n    state,\n  }).delete(urlString, {\n    withCredentials: true,\n  });\n  return data;\n}\n","import {\n  createOAuth2Provider as _createOAuth2Provider,\n  deleteOAuth2Provider as _deleteOAuth2Provider,\n  getOAuth2Provider as _getOAuth2Provider,\n  OAuth2ProviderSkeleton,\n  putOAuth2Provider as _putOAuth2Provider,\n} from '../api/OAuth2ProviderApi';\nimport { State } from '../shared/State';\nimport { FrodoError } from './FrodoError';\n\nexport type OAuth2Provider = {\n  /**\n   * Read oauth2 provider\n   * @returns {Promise<OAuth2ProviderSkeleton>} a promise resolving to an oauth2 provider object\n   */\n  readOAuth2Provider(): Promise<OAuth2ProviderSkeleton>;\n  /**\n   * Create oauth2 provider\n   * @param {OAuth2ProviderSkeleton} providerData oauth2 provider data\n   * @returns {Promise<OAuth2ProviderSkeleton>} a promise resolving to an oauth2 provider object\n   */\n  createOAuth2Provider(\n    providerData?: OAuth2ProviderSkeleton\n  ): Promise<OAuth2ProviderSkeleton>;\n  /**\n   * Update or create oauth2 provider\n   * @param {OAuth2ProviderSkeleton} providerData oauth2 provider data\n   * @returns {Promise<OAuth2ProviderSkeleton>} a promise resolving to an oauth2 provider object\n   */\n  updateOAuth2Provider(\n    providerData: OAuth2ProviderSkeleton\n  ): Promise<OAuth2ProviderSkeleton>;\n  /**\n   * Delete oauth2 provider\n   * @returns {Promise<OAuth2ProviderSkeleton>} a promise resolving to an oauth2 provider object\n   */\n  deleteOAuth2Provider(): Promise<OAuth2ProviderSkeleton>;\n\n  // Deprecated\n\n  /**\n   * Get oauth2 provider\n   * @returns {Promise<OAuth2ProviderSkeleton>} a promise resolving to an oauth2 provider object\n   * @deprecated since v2.0.0 use {@link OAuth2Provider.readOAuth2Provider | readOAuth2Provider} instead\n   * ```javascript\n   * importFirstSocialIdentityProvider(importData: SocialProviderExportInterface): Promise<SocialIdpSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  getOAuth2Provider(): Promise<OAuth2ProviderSkeleton>;\n};\n\nexport default (state: State): OAuth2Provider => {\n  return {\n    async readOAuth2Provider(): Promise<OAuth2ProviderSkeleton> {\n      return readOAuth2Provider({ state });\n    },\n    async createOAuth2Provider(\n      providerData?: OAuth2ProviderSkeleton\n    ): Promise<OAuth2ProviderSkeleton> {\n      return createOAuth2Provider({ providerData, state });\n    },\n    async updateOAuth2Provider(\n      providerData: OAuth2ProviderSkeleton\n    ): Promise<OAuth2ProviderSkeleton> {\n      return updateOAuth2Provider({ providerData, state });\n    },\n    async deleteOAuth2Provider(): Promise<OAuth2ProviderSkeleton> {\n      return deleteOAuth2Provider({ state });\n    },\n\n    // Deprecated\n\n    async getOAuth2Provider(): Promise<OAuth2ProviderSkeleton> {\n      return readOAuth2Provider({ state });\n    },\n  };\n};\n\nexport async function readOAuth2Provider({\n  state,\n}: {\n  state: State;\n}): Promise<OAuth2ProviderSkeleton> {\n  try {\n    return _getOAuth2Provider({ state });\n  } catch (error) {\n    throw new FrodoError(`Error reading oauth2 provider`, error);\n  }\n}\n\n/**\n * Create OAuth2 provider\n * @param {OAuth2ProviderSkeleton} providerData oauth2 provider object\n * @returns {Promise<OAuth2ProviderSkeleton>} a promise that resolves to an oauth2 provider object\n */\nexport async function createOAuth2Provider({\n  providerData: providerData,\n  state,\n}: {\n  providerData: OAuth2ProviderSkeleton;\n  state: State;\n}): Promise<OAuth2ProviderSkeleton> {\n  try {\n    return _createOAuth2Provider({ providerData, state });\n  } catch (error) {\n    throw new FrodoError(`Error creating oauth2 provider`, error);\n  }\n}\n\n/**\n * Update or create OAuth2 provider\n * @param {OAuth2ProviderSkeleton} providerData oauth2 provider object\n * @returns {Promise<OAuth2ProviderSkeleton>} a promise that resolves to an oauth2 provider object\n */\nexport async function updateOAuth2Provider({\n  providerData: providerData,\n  state,\n}: {\n  providerData: OAuth2ProviderSkeleton;\n  state: State;\n}): Promise<OAuth2ProviderSkeleton> {\n  try {\n    return _putOAuth2Provider({ providerData, state });\n  } catch (error) {\n    throw new FrodoError(`Error updating oauth2 provider`, error);\n  }\n}\n\n/**\n * Delete OAuth2 Provider\n * @returns {Promise<OAuth2ProviderSkeleton>} a promise that resolves to an oauth2 provider object\n */\nexport async function deleteOAuth2Provider({\n  state,\n}: {\n  state: State;\n}): Promise<OAuth2ProviderSkeleton> {\n  try {\n    return _deleteOAuth2Provider({ state });\n  } catch (error) {\n    throw new FrodoError(`Error deleting oauth2 provider`, error);\n  }\n}\n","import { v4 as uuidv4 } from 'uuid';\n\nimport {\n  deleteScript as _deleteScript,\n  deleteScriptByName as _deleteScriptByName,\n  deleteScripts as _deleteScripts,\n  getScript as _getScript,\n  getScriptByName as _getScriptByName,\n  getScripts as _getScripts,\n  putScript as _putScript,\n  type ScriptSkeleton,\n} from '../api/ScriptApi';\nimport { type ExportMetaData } from '../ops/OpsTypes';\nimport { State } from '../shared/State';\nimport {\n  createProgressIndicator,\n  debugMessage,\n  stopProgressIndicator,\n  updateProgressIndicator,\n  verboseMessage,\n} from '../utils/Console';\nimport {\n  convertBase64TextToArray,\n  convertTextArrayToBase64,\n  getMetadata,\n} from '../utils/ExportImportUtils';\nimport { applyNameCollisionPolicy } from '../utils/ForgeRockUtils';\nimport { isScriptValid } from '../utils/ScriptValidationUtils';\nimport { FrodoError } from './FrodoError';\n\nexport type Script = {\n  /**\n   * Create an empty script export template\n   * @returns {ScriptExportInterface} an empty script export template\n   */\n  createScriptExportTemplate(): ScriptExportInterface;\n  /**\n   * Read all scripts\n   * @returns {Promise<ScriptSkeleton[]>} a promise that resolves to an array of script objects\n   */\n  readScripts(): Promise<ScriptSkeleton[]>;\n  /**\n   * Read script\n   * @param {string} scriptId script id\n   * @returns {Promise<ScriptSkeleton>} promise that resolves to a script object\n   */\n  readScript(scriptId: string): Promise<ScriptSkeleton>;\n  /**\n   * Read script by name\n   * @param {string} scriptName name of the script\n   * @returns {Promise<ScriptSkeleton>} promise that resolves to a script object\n   */\n  readScriptByName(scriptName: string): Promise<ScriptSkeleton>;\n  /**\n   * Create script\n   * @param {string} scriptId script id\n   * @param {string} scriptName name of the script\n   * @param {ScriptSkeleton} scriptData script object\n   * @returns {Promise<ScriptSkeleton>} a status object\n   */\n  createScript(\n    scriptId: string,\n    scriptName: string,\n    scriptData: ScriptSkeleton\n  ): Promise<ScriptSkeleton>;\n  /**\n   * Create or update script\n   * @param {string} scriptId script id\n   * @param {ScriptSkeleton} scriptData script object\n   * @returns {Promise<ScriptSkeleton>} a status object\n   */\n  updateScript(\n    scriptId: string,\n    scriptData: ScriptSkeleton\n  ): Promise<ScriptSkeleton>;\n  /**\n   * Delete script\n   * @param {string} scriptId script id\n   * @returns {Promise<ScriptSkeleton>} promise that resolves to a script object\n   */\n  deleteScript(scriptId: string): Promise<ScriptSkeleton>;\n  /**\n   * Delete script by name\n   * @param {String} scriptId script name\n   * @returns {Promise<ScriptSkeleton>} a promise that resolves to a script object\n   */\n  deleteScriptByName(scriptName: string): Promise<ScriptSkeleton>;\n  /**\n   * Delete all non-default scripts\n   * @returns {Promise<ScriptSkeleton[]>>} a promise that resolves to an array of script objects\n   */\n  deleteScripts(): Promise<ScriptSkeleton[]>;\n  /**\n   * Export all scripts\n   * @param includeDefault true to include default scripts in export, false otherwise. Default: false\n   * @returns {Promise<ScriptExportInterface>} a promise that resolved to a ScriptExportInterface object\n   */\n  exportScripts(includeDefault: boolean): Promise<ScriptExportInterface>;\n  /**\n   * Export script by id\n   * @param {string} scriptId script uuid\n   * @returns {Promise<ScriptExportInterface>} a promise that resolved to a ScriptExportInterface object\n   */\n  exportScript(scriptId: string): Promise<ScriptExportInterface>;\n  /**\n   * Export script by name\n   * @param {string} scriptName script name\n   * @returns {Promise<ScriptExportInterface>} a promise that resolved to a ScriptExportInterface object\n   */\n  exportScriptByName(scriptName: string): Promise<ScriptExportInterface>;\n  /**\n   * Import scripts\n   * @param {string} scriptName Optional name of script. If supplied, only the script of that name is imported\n   * @param {ScriptExportInterface} importData Script import data\n   * @param {ScriptImportOptions} options Script import options\n   * @param {boolean} validate If true, validates Javascript scripts to ensure no errors exist in them. Default: false\n   * @returns {Promise<ScriptSkeleton[]>} true if no errors occurred during import, false otherwise\n   */\n  importScripts(\n    scriptName: string,\n    importData: ScriptExportInterface,\n    options?: ScriptImportOptions,\n    validate?: boolean\n  ): Promise<ScriptSkeleton[]>;\n\n  // Deprecated\n\n  /**\n   * Get all scripts\n   * @returns {Promise<ScriptSkeleton[]>} a promise that resolves to an array of script objects\n   * @deprecated since v2.0.0 use {@link Script.readScripts | readScripts} instead\n   * ```javascript\n   * readScripts(): Promise<ScriptSkeleton[]>\n   * ```\n   * @group Deprecated\n   */\n  getScripts(): Promise<ScriptSkeleton[]>;\n  /**\n   * Get script\n   * @param {string} scriptId script id\n   * @returns {Promise<ScriptSkeleton>} promise that resolves to a script object\n   * @deprecated since v2.0.0 use {@link Script.readScript | readScript} instead\n   * ```javascript\n   * readScript(scriptName: string): Promise<ScriptSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  getScript(scriptId: string): Promise<ScriptSkeleton>;\n  /**\n   * Get script by name\n   * @param {string} scriptName name of the script\n   * @returns {Promise<ScriptSkeleton>} promise that resolves to a script object\n   * @deprecated since v2.0.0 use {@link Script.readScriptByName | readScriptByName} instead\n   * ```javascript\n   * readScriptByName(scriptName: string): Promise<ScriptSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  getScriptByName(scriptName: string): Promise<ScriptSkeleton>;\n  /**\n   * Create or update script\n   * @param {string} scriptId script uuid\n   * @param {ScriptSkeleton} scriptData script object\n   * @returns {Promise<ScriptSkeleton>} a status object\n   * @deprecated since v2.0.0 use {@link Script.updateScript | updateScript} or {@link Script.createScript | createScript} instead\n   * ```javascript\n   * updateScript(scriptId: string, scriptData: ScriptSkeleton): Promise<ScriptSkeleton>\n   * createScript(scriptId: string, scriptName: string, scriptData: ScriptSkeleton): Promise<ScriptSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  putScript(\n    scriptId: string,\n    scriptData: ScriptSkeleton\n  ): Promise<ScriptSkeleton>;\n};\n\nexport default (state: State): Script => {\n  return {\n    createScriptExportTemplate(): ScriptExportInterface {\n      return createScriptExportTemplate({ state });\n    },\n    async readScripts(): Promise<ScriptSkeleton[]> {\n      return readScripts({ state });\n    },\n    async readScript(scriptId: string): Promise<ScriptSkeleton> {\n      return readScript({ scriptId, state });\n    },\n    async readScriptByName(scriptName: string): Promise<ScriptSkeleton> {\n      return readScriptByName({ scriptName, state });\n    },\n    async createScript(\n      scriptId: string,\n      scriptName: string,\n      scriptData: ScriptSkeleton\n    ): Promise<ScriptSkeleton> {\n      return createScript({ scriptId, scriptName, scriptData, state });\n    },\n    async updateScript(\n      scriptId: string,\n      scriptData: ScriptSkeleton\n    ): Promise<ScriptSkeleton> {\n      return updateScript({ scriptId, scriptData, state });\n    },\n    async deleteScript(scriptId: string): Promise<ScriptSkeleton> {\n      return deleteScript({ scriptId, state });\n    },\n    async deleteScriptByName(scriptName: string): Promise<ScriptSkeleton> {\n      return deleteScriptByName({ scriptName, state });\n    },\n    async deleteScripts(): Promise<ScriptSkeleton[]> {\n      return deleteScripts({ state });\n    },\n    async exportScript(scriptId: string): Promise<ScriptExportInterface> {\n      return exportScript({ scriptId, state });\n    },\n    async exportScriptByName(\n      scriptName: string\n    ): Promise<ScriptExportInterface> {\n      return exportScriptByName({ scriptName, state });\n    },\n    async exportScripts(\n      includeDefault = false\n    ): Promise<ScriptExportInterface> {\n      return exportScripts({ includeDefault, state });\n    },\n    async importScripts(\n      scriptName: string,\n      importData: ScriptExportInterface,\n      options = {\n        reUuid: false,\n        includeDefault: false,\n      },\n      validate = false\n    ): Promise<ScriptSkeleton[]> {\n      return importScripts({\n        scriptName,\n        importData,\n        options,\n        validate,\n        state,\n      });\n    },\n\n    // Deprecated\n\n    async getScripts(): Promise<ScriptSkeleton[]> {\n      return readScripts({ state });\n    },\n    async getScript(scriptId: string): Promise<ScriptSkeleton> {\n      return readScript({ scriptId, state });\n    },\n    async getScriptByName(scriptName: string): Promise<ScriptSkeleton> {\n      return readScriptByName({ scriptName, state });\n    },\n    async putScript(\n      scriptId: string,\n      scriptData: ScriptSkeleton\n    ): Promise<ScriptSkeleton> {\n      return updateScript({ scriptId, scriptData, state });\n    },\n  };\n};\n\nexport interface ScriptExportInterface {\n  meta?: ExportMetaData;\n  script: Record<string, ScriptSkeleton>;\n}\n\n/**\n * Script import options\n */\nexport interface ScriptImportOptions {\n  /**\n   * Generate new UUIDs for all scripts during import.\n   */\n  reUuid: boolean;\n  /**\n   * Include default scripts in import if true\n   */\n  includeDefault: boolean;\n}\n\n/**\n * Create an empty script export template\n * @returns {ScriptExportInterface} an empty script export template\n */\nexport function createScriptExportTemplate({\n  state,\n}: {\n  state: State;\n}): ScriptExportInterface {\n  return {\n    meta: getMetadata({ state }),\n    script: {},\n  } as ScriptExportInterface;\n}\n\n/**\n * Get all scripts\n * @returns {Promise<ScriptSkeleton[]>} a promise that resolves to an array of script objects\n */\nexport async function readScripts({\n  state,\n}: {\n  state: State;\n}): Promise<ScriptSkeleton[]> {\n  try {\n    const { result } = await _getScripts({ state });\n    return result;\n  } catch (error) {\n    throw new FrodoError(`Error reading scripts`, error);\n  }\n}\n\n/**\n * Get script\n * @returns {Promise<ScriptSkeleto]>} a promise that resolves to an array of script objects\n */\nexport async function readScript({\n  scriptId,\n  state,\n}: {\n  scriptId: string;\n  state: State;\n}): Promise<ScriptSkeleton> {\n  try {\n    return _getScript({ scriptId, state });\n  } catch (error) {\n    throw new FrodoError(`Error reading script ${scriptId}`, error);\n  }\n}\n\n/**\n * Get script by name\n * @param {string} scriptName name of the script\n * @returns {Promise<ScriptSkeleton>} promise that resolves to a script object\n */\nexport async function readScriptByName({\n  scriptName,\n  state,\n}: {\n  scriptName: string;\n  state: State;\n}): Promise<ScriptSkeleton> {\n  try {\n    const { result } = await _getScriptByName({ scriptName, state });\n    switch (result.length) {\n      case 1:\n        return result[0];\n      case 0:\n        throw new FrodoError(`Script '${scriptName}' not found`);\n      default:\n        throw new FrodoError(`${result.length} scripts '${scriptName}' found`);\n    }\n  } catch (error) {\n    throw new FrodoError(`Error reading script ${scriptName}`, error);\n  }\n}\n\n/**\n * Create script\n * @param {ScriptSkeleton} scriptData script object\n * @returns {Promise<ScriptSkeleton>} a promise resolving to a script object\n */\nexport async function createScript({\n  scriptId,\n  scriptName,\n  scriptData,\n  state,\n}: {\n  scriptId: string;\n  scriptName: string;\n  scriptData: ScriptSkeleton;\n  state: State;\n}): Promise<ScriptSkeleton> {\n  debugMessage({ message: `ScriptOps.createOAuth2Client: start`, state });\n  scriptData._id = scriptId;\n  scriptData.name = scriptName;\n  try {\n    await _getScript({ scriptId, state });\n  } catch (error) {\n    try {\n      const result = await updateScript({\n        scriptId,\n        scriptData,\n        state,\n      });\n      debugMessage({ message: `ScriptOps.createOAuth2Client: end`, state });\n      return result;\n    } catch (error) {\n      throw new FrodoError(`Error creating script`, error);\n    }\n  }\n  throw new FrodoError(`Script ${scriptData._id} already exists!`);\n}\n\n/**\n * Create or update script\n * @param {string} scriptId script uuid\n * @param {ScriptSkeleton} scriptData script object\n * @returns {Promise<ScriptSkeleton>} a status object\n */\nexport async function updateScript({\n  scriptId,\n  scriptData,\n  state,\n}: {\n  scriptId: string;\n  scriptData: ScriptSkeleton;\n  state: State;\n}): Promise<ScriptSkeleton> {\n  let result = null;\n  try {\n    if (Array.isArray(scriptData.script)) {\n      scriptData.script = convertTextArrayToBase64(scriptData.script);\n    }\n    result = await _putScript({ scriptId, scriptData, state });\n  } catch (error) {\n    if (error.response?.status === 409) {\n      verboseMessage({\n        message: `createOrUpdateScript WARNING: script with name ${scriptData.name} already exists, using renaming policy... <name> => <name - imported (n)>`,\n        state,\n      });\n      const newName = applyNameCollisionPolicy(scriptData.name);\n      scriptData.name = newName;\n      result = await updateScript({ scriptId, scriptData, state });\n      verboseMessage({\n        message: `Saved script as ${newName}`,\n        state,\n      });\n    } else throw new FrodoError(`Error updating script`, error);\n  }\n  return result;\n}\n\n/**\n * Delete script\n * @param {string} scriptId script uuid\n * @returns {Promise<ScriptSkeleton>} a promise resolving to a script object\n */\nexport async function deleteScript({\n  scriptId,\n  state,\n}: {\n  scriptId: string;\n  state: State;\n}): Promise<ScriptSkeleton> {\n  try {\n    return _deleteScript({ scriptId, state });\n  } catch (error) {\n    throw new FrodoError(`Error deleting script ${scriptId}`, error);\n  }\n}\n\n/**\n * Delete script by name\n * @param {String} scriptId script name\n * @returns {Promise<ScriptSkeleton>} a promise that resolves to a script object\n */\nexport async function deleteScriptByName({\n  scriptName,\n  state,\n}: {\n  scriptName: string;\n  state: State;\n}): Promise<ScriptSkeleton> {\n  try {\n    return _deleteScriptByName({ scriptName, state });\n  } catch (error) {\n    throw new FrodoError(`Error deleting script ${scriptName}`, error);\n  }\n}\n\n/**\n * Delete all non-default scripts\n * @returns {Promise<ScriptSkeleton[]>>} a promise that resolves to an array of script objects\n */\nexport async function deleteScripts({\n  state,\n}: {\n  state: State;\n}): Promise<ScriptSkeleton[]> {\n  try {\n    return _deleteScripts({ state });\n  } catch (error) {\n    throw new FrodoError(`Error deleting scripts`, error);\n  }\n}\n\n/**\n * Export script by id\n * @param {string} scriptId script uuid\n * @returns {Promise<ScriptExportInterface>} a promise that resolved to a ScriptExportInterface object\n */\nexport async function exportScript({\n  scriptId,\n  state,\n}: {\n  scriptId: string;\n  state: State;\n}): Promise<ScriptExportInterface> {\n  try {\n    debugMessage({ message: `ScriptOps.exportScriptById: start`, state });\n    const scriptData = await _getScript({ scriptId, state });\n    scriptData.script = convertBase64TextToArray(scriptData.script);\n    const exportData = createScriptExportTemplate({ state });\n    exportData.script[scriptData._id] = scriptData;\n    debugMessage({ message: `ScriptOps.exportScriptById: end`, state });\n    return exportData;\n  } catch (error) {\n    throw new FrodoError(`Error exporting script ${scriptId}`, error);\n  }\n}\n\n/**\n * Export script by name\n * @param {string} scriptName script name\n * @returns {Promise<ScriptExportInterface>} a promise that resolved to a ScriptExportInterface object\n */\nexport async function exportScriptByName({\n  scriptName,\n  state,\n}: {\n  scriptName: string;\n  state: State;\n}): Promise<ScriptExportInterface> {\n  try {\n    debugMessage({ message: `ScriptOps.exportScriptByName: start`, state });\n    const scriptData = await readScriptByName({ scriptName, state });\n    scriptData.script = convertBase64TextToArray(scriptData.script as string);\n    const exportData = createScriptExportTemplate({ state });\n    exportData.script[scriptData._id] = scriptData;\n    debugMessage({ message: `ScriptOps.exportScriptByName: end`, state });\n    return exportData;\n  } catch (error) {\n    throw new FrodoError(`Error exporting script ${scriptName}`, error);\n  }\n}\n\n/**\n * Export all scripts\n @param includeDefault true to include default scripts in export, false otherwise. Default: false\n * @returns {Promise<ScriptExportInterface>} a promise that resolved to a ScriptExportInterface object\n */\nexport async function exportScripts({\n  includeDefault = false,\n  state,\n}: {\n  includeDefault: boolean;\n  state: State;\n}): Promise<ScriptExportInterface> {\n  const errors: Error[] = [];\n  let indicatorId: string;\n  try {\n    let scriptList = await readScripts({ state });\n    if (!includeDefault)\n      scriptList = scriptList.filter((script) => !script.default);\n    const exportData = createScriptExportTemplate({ state });\n    indicatorId = createProgressIndicator({\n      total: scriptList.length,\n      message: `Exporting ${scriptList.length} scripts...`,\n      state,\n    });\n    for (const script of scriptList) {\n      try {\n        updateProgressIndicator({\n          id: indicatorId,\n          message: `Reading script ${script.name}`,\n          state,\n        });\n        const scriptData = await readScriptByName({\n          scriptName: script.name,\n          state,\n        });\n        scriptData.script = convertBase64TextToArray(\n          scriptData.script as string\n        );\n        exportData.script[scriptData._id] = scriptData;\n      } catch (error) {\n        errors.push(error);\n      }\n    }\n    if (errors.length > 0) {\n      throw new FrodoError(``, errors);\n    }\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Exported ${scriptList.length} scripts.`,\n      state,\n    });\n    return exportData;\n  } catch (error) {\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Error exporting scripts`,\n      status: 'fail',\n      state,\n    });\n    // re-throw previously caught error\n    if (errors.length > 0) {\n      throw error;\n    }\n    throw new FrodoError(`Error exporting scripts`, error);\n  }\n}\n\n/**\n * Import scripts\n * @param {string} scriptName Optional name of script. If supplied, only the script of that name is imported\n * @param {ScriptExportInterface} importData Script import data\n * @param {ScriptImportOptions} options Script import options\n * @param {boolean} validate If true, validates Javascript scripts to ensure no errors exist in them. Default: false\n * @returns {Promise<ScriptSkeleton[]>} true if no errors occurred during import, false otherwise\n */\nexport async function importScripts({\n  scriptName,\n  importData,\n  options = {\n    reUuid: false,\n    includeDefault: false,\n  },\n  validate = false,\n  state,\n}: {\n  scriptName: string;\n  importData: ScriptExportInterface;\n  options?: ScriptImportOptions;\n  validate?: boolean;\n  state: State;\n}): Promise<ScriptSkeleton[]> {\n  const errors = [];\n  try {\n    debugMessage({ message: `ScriptOps.importScripts: start`, state });\n    const response = [];\n    for (const existingId of Object.keys(importData.script)) {\n      try {\n        const scriptData = importData.script[existingId];\n        if (!options.includeDefault && scriptData.default) continue;\n        let newId = existingId;\n        if (options.reUuid) {\n          newId = uuidv4();\n          debugMessage({\n            message: `ScriptOps.importScripts: Re-uuid-ing script ${scriptData.name} ${existingId} => ${newId}...`,\n            state,\n          });\n          scriptData._id = newId;\n        }\n        if (scriptName) {\n          debugMessage({\n            message: `ScriptOps.importScripts: Renaming script ${scriptData.name} => ${scriptName}...`,\n            state,\n          });\n          scriptData.name = scriptName;\n        }\n        if (validate) {\n          if (!isScriptValid({ scriptData, state })) {\n            errors.push(\n              new FrodoError(\n                `Error importing script '${scriptData.name}': Script is not valid`\n              )\n            );\n          }\n        }\n        const result = await updateScript({\n          scriptId: newId,\n          scriptData,\n          state,\n        });\n        response.push(result);\n      } catch (error) {\n        errors.push(error);\n      }\n    }\n    if (errors.length > 0) {\n      throw new FrodoError(`Error importing scripts`, errors);\n    }\n    debugMessage({ message: `ScriptOps.importScripts: end`, state });\n    return response;\n  } catch (error) {\n    // re-throw previously caught errors\n    if (errors.length > 0) {\n      throw error;\n    }\n    throw new FrodoError(`Error importing scripts`, error);\n  }\n}\n","import util from 'util';\n\nimport { State } from '../shared/State';\nimport { getCurrentRealmPath } from '../utils/ForgeRockUtils';\nimport { type IdObjectSkeletonInterface, type PagedResult } from './ApiTypes';\nimport { generateAmApi } from './BaseApi';\n\nconst scriptURLTemplate = '%s/json%s/scripts/%s';\nconst scriptListURLTemplate = '%s/json%s/scripts?_queryFilter=true';\nconst scriptQueryURLTemplate =\n  '%s/json%s/scripts?_queryFilter=name+eq+%%22%s%%22';\nconst apiVersion = 'protocol=2.0,resource=1.0';\nconst getApiConfig = () => {\n  return {\n    apiVersion,\n  };\n};\n\nexport type ScriptLanguage = 'GROOVY' | 'JAVASCRIPT';\n\nexport type ScriptContext =\n  | 'OAUTH2_ACCESS_TOKEN_MODIFICATION'\n  | 'AUTHENTICATION_CLIENT_SIDE'\n  | 'AUTHENTICATION_TREE_DECISION_NODE'\n  | 'AUTHENTICATION_SERVER_SIDE'\n  | 'SOCIAL_IDP_PROFILE_TRANSFORMATION'\n  | 'OAUTH2_VALIDATE_SCOPE'\n  | 'CONFIG_PROVIDER_NODE'\n  | 'OAUTH2_AUTHORIZE_ENDPOINT_DATA_PROVIDER'\n  | 'OAUTH2_EVALUATE_SCOPE'\n  | 'POLICY_CONDITION'\n  | 'OIDC_CLAIMS'\n  | 'SAML2_IDP_ADAPTER'\n  | 'SAML2_IDP_ATTRIBUTE_MAPPER'\n  | 'OAUTH2_MAY_ACT';\n\nexport type ScriptSkeleton = IdObjectSkeletonInterface & {\n  name: string;\n  description: string;\n  default: boolean;\n  script: string | string[];\n  language: ScriptLanguage;\n  context: ScriptContext;\n  createdBy: string;\n  creationDate: number;\n  lastModifiedBy: string;\n  lastModifiedDate: number;\n};\n\n/**\n * Get all scripts\n * @returns {Promise} a promise that resolves to an object containing an array of script objects\n */\nexport async function getScripts({\n  state,\n}: {\n  state: State;\n}): Promise<PagedResult<ScriptSkeleton>> {\n  const urlString = util.format(\n    scriptListURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state)\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get<\n    PagedResult<ScriptSkeleton>\n  >(urlString, {\n    withCredentials: true,\n  });\n  return data;\n}\n\n/**\n * Get script by name\n * @param {String} scriptName script name\n * @returns {Promise} a promise that resolves to an object containing a script object\n */\nexport async function getScriptByName({\n  scriptName,\n  state,\n}: {\n  scriptName: string;\n  state: State;\n}): Promise<PagedResult<ScriptSkeleton>> {\n  const urlString = util.format(\n    scriptQueryURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    encodeURIComponent(scriptName)\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get<\n    PagedResult<ScriptSkeleton>\n  >(urlString, {\n    withCredentials: true,\n  });\n  return data;\n}\n\n/**\n * Get script by id\n * @param {String} scriptId script uuid/name\n * @returns {Promise} a promise that resolves to a script object\n */\nexport async function getScript({\n  scriptId,\n  state,\n}: {\n  scriptId: string;\n  state: State;\n}) {\n  const urlString = util.format(\n    scriptURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    scriptId\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get(\n    urlString,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Put script\n * @param {string} scriptId script uuid\n * @param {Object} scriptData script object\n * @returns {Promise} a promise that resolves to an object containing a script object\n */\nexport async function putScript({\n  scriptId,\n  scriptData,\n  state,\n}: {\n  scriptId: string;\n  scriptData: ScriptSkeleton;\n  state: State;\n}) {\n  const urlString = util.format(\n    scriptURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    scriptId\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).put(\n    urlString,\n    scriptData,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Delete script by id\n * @param {String} scriptId script uuid\n * @returns {Promise<ScriptSkeleton>>} a promise that resolves to a script object\n */\nexport async function deleteScript({\n  scriptId,\n  state,\n}: {\n  scriptId: string;\n  state: State;\n}): Promise<ScriptSkeleton> {\n  const urlString = util.format(\n    scriptURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    scriptId\n  );\n  const { data } = await generateAmApi({\n    resource: getApiConfig(),\n    state,\n  }).delete(urlString, {\n    withCredentials: true,\n  });\n  return data;\n}\n\n/**\n * Delete script by name\n * @param {String} scriptId script name\n * @returns {Promise<ScriptSkeleton>} a promise that resolves to a script object\n */\nexport async function deleteScriptByName({\n  scriptName,\n  state,\n}: {\n  scriptName: string;\n  state: State;\n}): Promise<ScriptSkeleton> {\n  const { result } = await getScriptByName({ scriptName, state });\n  if (!result[0]) {\n    throw new Error(`Script with name ${scriptName} does not exist.`);\n  }\n  const scriptId = result[0]._id;\n  return deleteScript({\n    scriptId,\n    state,\n  });\n}\n\n/**\n * Delete all non-default scripts\n * @returns {Promise<ScriptSkeleton[]>>} a promise that resolves to an array of script objects\n */\nexport async function deleteScripts({\n  state,\n}: {\n  state: State;\n}): Promise<ScriptSkeleton[]> {\n  const { result } = await getScripts({ state });\n  //Unable to delete default scripts, so filter them out\n  const scripts = result.filter((s) => !s.default);\n  const deletedScripts = [];\n  const errors = [];\n  for (const script of scripts) {\n    try {\n      deletedScripts.push(\n        await deleteScript({\n          scriptId: script._id,\n          state,\n        })\n      );\n    } catch (error) {\n      errors.push(error);\n    }\n  }\n  if (errors.length) {\n    const errorMessages = errors.map((error) => error.message).join('\\n');\n    throw new Error(`Delete error:\\n${errorMessages}`);\n  }\n  return deletedScripts;\n}\n","import { parseScript } from 'esprima';\n\nimport { type ScriptSkeleton } from '../api/ScriptApi';\nimport { State } from '../shared/State';\nimport { decode } from './Base64Utils';\nimport { printMessage } from './Console';\n\nexport type ScriptValidation = {\n  validateScriptHooks(jsonData: object): void;\n  validateScript(scriptData: ScriptSkeleton): void;\n  validateJs(javascriptSource: string): void;\n  areScriptHooksValid(jsonData: object): boolean;\n  isScriptValid(scriptData: ScriptSkeleton): boolean;\n  isValidJs(javascriptSource: string): boolean;\n};\n\nexport default (state: State): ScriptValidation => {\n  return {\n    validateScriptHooks(jsonData: object): void {\n      validateScriptHooks({ jsonData });\n    },\n    validateScript(scriptData: ScriptSkeleton): void {\n      validateScript({ scriptData });\n    },\n    validateJs(javascriptSource: string): void {\n      validateJs({ javascriptSource });\n    },\n    areScriptHooksValid(jsonData: object): boolean {\n      return areScriptHooksValid({ jsonData, state });\n    },\n    isScriptValid(scriptData: ScriptSkeleton): boolean {\n      return isScriptValid({ scriptData, state });\n    },\n    isValidJs(javascriptSource: string): boolean {\n      return isValidJs({ javascriptSource, state });\n    },\n  };\n};\n\nexport interface ScriptHook {\n  type: 'text/javascript';\n  source?: string;\n}\n\nfunction findAllScriptHooks(\n  jsonData: any,\n  scriptHooksArray: ScriptHook[] = []\n): ScriptHook[] {\n  if (typeof jsonData !== 'object' || jsonData === null) {\n    return scriptHooksArray;\n  }\n\n  for (const key in jsonData) {\n    const item = jsonData[key];\n    if (typeof item !== 'object' || item === null) {\n      continue;\n    }\n\n    if ('type' in item && item.type === 'text/javascript') {\n      scriptHooksArray.push(item);\n    } else {\n      findAllScriptHooks(item, scriptHooksArray);\n    }\n  }\n\n  return scriptHooksArray;\n}\n\nexport function validateScriptHooks({ jsonData }: { jsonData: object }): void {\n  const scriptHooks = findAllScriptHooks(jsonData);\n\n  for (const scriptHook of scriptHooks) {\n    if (!('source' in scriptHook)) {\n      continue;\n    }\n\n    validateJs({ javascriptSource: scriptHook.source });\n  }\n}\n\nexport function validateScript({\n  scriptData,\n}: {\n  scriptData: ScriptSkeleton;\n}): void {\n  if (scriptData.language === 'JAVASCRIPT') {\n    const script = Array.isArray(scriptData.script)\n      ? scriptData.script.join('\\n')\n      : decode(scriptData.script as string);\n    validateJs({ javascriptSource: script });\n  }\n}\n\nexport function validateJs({ javascriptSource }: { javascriptSource: string }) {\n  parseScript(javascriptSource);\n  return true;\n}\n\nexport function areScriptHooksValid({\n  jsonData,\n  state,\n}: {\n  jsonData: object;\n  state: State;\n}): boolean {\n  const scriptHooks = findAllScriptHooks(jsonData);\n\n  for (const scriptHook of scriptHooks) {\n    if (!('source' in scriptHook)) {\n      continue;\n    }\n\n    if (!isValidJs({ javascriptSource: scriptHook.source, state })) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function isScriptValid({\n  scriptData,\n  state,\n}: {\n  scriptData: ScriptSkeleton;\n  state: State;\n}): boolean {\n  if (scriptData.language === 'JAVASCRIPT') {\n    const script = Array.isArray(scriptData.script)\n      ? scriptData.script.join('\\n')\n      : decode(scriptData.script as string);\n    return isValidJs({ javascriptSource: script, state });\n  }\n  return true;\n}\n\nexport function isValidJs({\n  javascriptSource,\n  state,\n}: {\n  javascriptSource: string;\n  state: State;\n}) {\n  try {\n    parseScript(javascriptSource);\n    return true;\n  } catch (e) {\n    printMessage({\n      message: `Invalid JavaScript: ${e.message}`,\n      type: 'error',\n      state,\n    });\n\n    return false;\n  }\n}\n","import { type NoIdObjectSkeletonInterface } from '../api/ApiTypes';\nimport {\n  deleteOAuth2Client as _deleteOAuth2Client,\n  getOAuth2Client as _getOAuth2Client,\n  getOAuth2Clients as _getOAuth2Clients,\n  type OAuth2ClientSkeleton,\n  putOAuth2Client as _putOAuth2Client,\n} from '../api/OAuth2ClientApi';\nimport { type ScriptSkeleton } from '../api/ScriptApi';\nimport { State } from '../shared/State';\nimport {\n  createProgressIndicator,\n  debugMessage,\n  printMessage,\n  stopProgressIndicator,\n  updateProgressIndicator,\n} from '../utils/Console';\nimport {\n  convertBase64TextToArray,\n  getMetadata,\n} from '../utils/ExportImportUtils';\nimport { FrodoError } from './FrodoError';\nimport { readOAuth2Provider } from './OAuth2ProviderOps';\nimport { ExportMetaData } from './OpsTypes';\nimport { readScript, updateScript } from './ScriptOps';\n\nexport type OAuth2Client = {\n  /**\n   * Create an empty OAuth2 client export template\n   * @returns {OAuth2ClientExportInterface} an empty OAuth2 client export template\n   */\n  createOAuth2ClientExportTemplate(): OAuth2ClientExportInterface;\n  /**\n   * Read all OAuth2 clients\n   * @returns {Promise<OAuth2ClientSkeleton[]>} a promise that resolves to an array of oauth2client objects\n   */\n  readOAuth2Clients(): Promise<OAuth2ClientSkeleton[]>;\n  /**\n   * Read OAuth2 client\n   * @param {string} clientId client id\n   * @returns {Promise<OAuth2ClientSkeleton>} a promise that resolves to an oauth2client object\n   */\n  readOAuth2Client(clientId: string): Promise<OAuth2ClientSkeleton>;\n  /**\n   * Create OAuth2 client\n   * @param {string} clientId client id\n   * @param {any} clientData oauth2client object\n   * @returns {Promise<OAuth2ClientSkeleton>} a promise that resolves to an oauth2client object\n   */\n  createOAuth2Client(\n    clientId: string,\n    clientData: OAuth2ClientSkeleton\n  ): Promise<OAuth2ClientSkeleton>;\n  /**\n   * Update or create OAuth2 client\n   * @param {string} clientId client id\n   * @param {any} clientData oauth2client object\n   * @returns {Promise<any>} a promise that resolves to an oauth2client object\n   */\n  updateOAuth2Client(\n    clientId: string,\n    clientData: OAuth2ClientSkeleton\n  ): Promise<OAuth2ClientSkeleton>;\n  /**\n   * Delete all OAuth2 clients\n   * @returns {Promise<OAuth2ClientSkeleton[]>} a promise that resolves to an array of oauth2client objects\n   */\n  deleteOAuth2Clients(): Promise<OAuth2ClientSkeleton[]>;\n  /**\n   * Delete OAuth2 client\n   * @param {string} clientId client id\n   * @returns {Promise<OAuth2ClientSkeleton>} a promise that resolves to an oauth2client object\n   */\n  deleteOAuth2Client(clientId: string): Promise<OAuth2ClientSkeleton>;\n  /**\n   * Export all OAuth2 clients\n   * @param {OAuth2ClientExportOptions} options export options\n   * @returns {OAuth2ClientExportInterface} export data\n   */\n  exportOAuth2Clients(\n    options?: OAuth2ClientExportOptions\n  ): Promise<OAuth2ClientExportInterface>;\n  /**\n   * Export OAuth2 client by ID\n   * @param {string} clientId oauth2 client id\n   * @param {OAuth2ClientExportOptions} options export options\n   * @returns {OAuth2ClientExportInterface} export data\n   */\n  exportOAuth2Client(\n    clientId: string,\n    options?: OAuth2ClientExportOptions\n  ): Promise<OAuth2ClientExportInterface>;\n  /**\n   * Import OAuth2 Client by ID\n   * @param {string} clientId client id\n   * @param {OAuth2ClientExportInterface} importData import data\n   * @param {OAuth2ClientImportOptions} options import options\n   * @returns {Promise<OAuth2ClientSkeleton>} a promise resolving to an oauth2 client\n   */\n  importOAuth2Client(\n    clientId: string,\n    importData: OAuth2ClientExportInterface,\n    options?: OAuth2ClientImportOptions\n  ): Promise<OAuth2ClientSkeleton>;\n  /**\n   * Import first OAuth2 Client\n   * @param {OAuth2ClientExportInterface} importData import data\n   * @param {OAuth2ClientImportOptions} options import options\n   * @returns {Promise<OAuth2ClientSkeleton>} a promise resolving to an oauth2 client\n   */\n  importFirstOAuth2Client(\n    importData: OAuth2ClientExportInterface,\n    options?: OAuth2ClientImportOptions\n  ): Promise<OAuth2ClientSkeleton>;\n  /**\n   * Import OAuth2 Clients\n   * @param {OAuth2ClientExportInterface} importData import data\n   * @param {OAuth2ClientImportOptions} options import options\n   * @returns {Promise<OAuth2ClientSkeleton[]>} a promise resolving to an array of oauth2 clients\n   */\n  importOAuth2Clients(\n    importData: OAuth2ClientExportInterface,\n    options?: OAuth2ClientImportOptions\n  ): Promise<OAuth2ClientSkeleton[]>;\n\n  // Deprecated\n\n  /**\n   * Get all OAuth2 clients\n   * @returns {Promise<OAuth2ClientSkeleton[]>} a promise that resolves to an array of oauth2client objects\n   * @deprecated since v2.0.0 use {@link OAuth2Client.readOAuth2Clients | readOAuth2Clients} instead\n   * ```javascript\n   * readOAuth2Clients(): Promise<OAuth2ClientSkeleton[]>\n   * ```\n   * @group Deprecated\n   */\n  getOAuth2Clients(): Promise<OAuth2ClientSkeleton[]>;\n  /**\n   * Get OAuth2 client\n   * @param {string} clientId client id\n   * @returns {Promise<OAuth2ClientSkeleton>} a promise that resolves to an oauth2client object\n   * @deprecated since v2.0.0 use {@link OAuth2Client.readOAuth2Client | readOAuth2Client} instead\n   * ```javascript\n   * readOAuth2Client(clientId: string): Promise<OAuth2ClientSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  getOAuth2Client(clientId: string): Promise<OAuth2ClientSkeleton>;\n  /**\n   * Put OAuth2 client\n   * @param {string} clientId client id\n   * @param {OAuth2ClientSkeleton} clientData oauth2client object\n   * @returns {Promise<any>} a promise that resolves to an oauth2client object\n   * @deprecated since v2.0.0 use {@link OAuth2Client.updateOAuth2Client | updateOAuth2Client} or {@link OAuth2Client.createOAuth2Client | createOAuth2Client} instead\n   * ```javascript\n   * updateOAuth2Client(clientId: string, clientData: OAuth2ClientSkeleton): Promise<OAuth2ClientSkeleton>\n   * createOAuth2Client(clientId: string, clientData: OAuth2ClientSkeleton): Promise<OAuth2ClientSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  putOAuth2Client(\n    clientId: string,\n    clientData: OAuth2ClientSkeleton\n  ): Promise<OAuth2ClientSkeleton>;\n};\n\nexport default (state: State): OAuth2Client => {\n  return {\n    createOAuth2ClientExportTemplate(): OAuth2ClientExportInterface {\n      return createOAuth2ClientExportTemplate({ state });\n    },\n    async readOAuth2Clients(): Promise<OAuth2ClientSkeleton[]> {\n      return readOAuth2Clients({ state });\n    },\n    async readOAuth2Client(clientId: string): Promise<OAuth2ClientSkeleton> {\n      return readOAuth2Client({ clientId, state });\n    },\n    async createOAuth2Client(\n      clientId: string,\n      clientData: OAuth2ClientSkeleton\n    ): Promise<OAuth2ClientSkeleton> {\n      return createOAuth2Client({ clientId, clientData, state });\n    },\n    async updateOAuth2Client(\n      clientId: string,\n      clientData: OAuth2ClientSkeleton\n    ): Promise<OAuth2ClientSkeleton> {\n      return updateOAuth2Client({ clientId, clientData, state });\n    },\n    async deleteOAuth2Clients(): Promise<OAuth2ClientSkeleton[]> {\n      return deleteOAuth2Clients({ state });\n    },\n    async deleteOAuth2Client(clientId: string): Promise<OAuth2ClientSkeleton> {\n      return deleteOAuth2Client({ clientId, state });\n    },\n    async exportOAuth2Clients(\n      options: OAuth2ClientExportOptions = { useStringArrays: true, deps: true }\n    ): Promise<OAuth2ClientExportInterface> {\n      return exportOAuth2Clients({ options, state });\n    },\n    async exportOAuth2Client(\n      clientId: string,\n      options: OAuth2ClientExportOptions = { useStringArrays: true, deps: true }\n    ): Promise<OAuth2ClientExportInterface> {\n      return exportOAuth2Client({ clientId, options, state });\n    },\n    async importOAuth2Client(\n      clientId: string,\n      importData: OAuth2ClientExportInterface,\n      options: OAuth2ClientImportOptions = { deps: true }\n    ) {\n      return importOAuth2Client({\n        clientId,\n        importData,\n        options,\n        state,\n      });\n    },\n    async importFirstOAuth2Client(\n      importData: OAuth2ClientExportInterface,\n      options: OAuth2ClientImportOptions = { deps: true }\n    ) {\n      return importFirstOAuth2Client({ importData, options, state });\n    },\n    async importOAuth2Clients(\n      importData: OAuth2ClientExportInterface,\n      options: OAuth2ClientImportOptions = { deps: true }\n    ): Promise<OAuth2ClientSkeleton[]> {\n      return importOAuth2Clients({ importData, options, state });\n    },\n\n    // Deprecated\n\n    async getOAuth2Clients(): Promise<OAuth2ClientSkeleton[]> {\n      return readOAuth2Clients({ state });\n    },\n    async getOAuth2Client(clientId: string): Promise<OAuth2ClientSkeleton> {\n      return readOAuth2Client({ clientId, state });\n    },\n    async putOAuth2Client(\n      clientId: string,\n      clientData: OAuth2ClientSkeleton\n    ): Promise<OAuth2ClientSkeleton> {\n      return updateOAuth2Client({ clientId, clientData, state });\n    },\n  };\n};\n\n/**\n * OAuth2 client export options\n */\nexport interface OAuth2ClientExportOptions {\n  /**\n   * Use string arrays to store multi-line text in scripts.\n   */\n  useStringArrays: boolean;\n  /**\n   * Include any dependencies (scripts).\n   */\n  deps: boolean;\n}\n\n/**\n * OAuth2 client import options\n */\nexport interface OAuth2ClientImportOptions {\n  /**\n   * Include any dependencies (scripts).\n   */\n  deps: boolean;\n}\n\nexport interface OAuth2ClientExportInterface {\n  meta?: ExportMetaData;\n  script?: Record<string, ScriptSkeleton>;\n  application: Record<string, OAuth2ClientSkeleton>;\n}\n\n/**\n * Create an empty OAuth2 client export template\n * @returns {OAuth2ClientExportInterface} an empty OAuth2 client export template\n */\nexport function createOAuth2ClientExportTemplate({\n  state,\n}: {\n  state: State;\n}): OAuth2ClientExportInterface {\n  return {\n    meta: getMetadata({ state }),\n    script: {},\n    application: {},\n  } as OAuth2ClientExportInterface;\n}\n\n/**\n * Get all OAuth2 clients\n * @returns {Promise<OAuth2ClientSkeleton[]>} a promise that resolves to an array of oauth2client objects\n */\nexport async function readOAuth2Clients({\n  state,\n}: {\n  state: State;\n}): Promise<OAuth2ClientSkeleton[]> {\n  try {\n    const clients = (await _getOAuth2Clients({ state })).result;\n    return clients;\n  } catch (error) {\n    throw new FrodoError(`Error reading oauth2 clients`, error);\n  }\n}\n\n/**\n * Get OAuth2 client\n * @param {string} clientId client id\n * @returns {Promise<any>} a promise that resolves to an oauth2client object\n */\nexport async function readOAuth2Client({\n  clientId,\n  state,\n}: {\n  clientId: string;\n  state: State;\n}): Promise<OAuth2ClientSkeleton> {\n  try {\n    return _getOAuth2Client({ id: clientId, state });\n  } catch (error) {\n    throw new FrodoError(`Error reading oauth2 client ${clientId}`, error);\n  }\n}\n\n/**\n * Create OAuth2 client\n * @param {string} clientId client id\n * @param {any} clientData oauth2client object\n * @returns {Promise<OAuth2ClientSkeleton>} a promise that resolves to an oauth2client object\n */\nexport async function createOAuth2Client({\n  clientId,\n  clientData,\n  state,\n}: {\n  clientId: string;\n  clientData: OAuth2ClientSkeleton | NoIdObjectSkeletonInterface;\n  state: State;\n}): Promise<OAuth2ClientSkeleton> {\n  debugMessage({ message: `OAuth2ClientOps.createOAuth2Client: start`, state });\n  try {\n    await readOAuth2Client({ clientId, state });\n  } catch (error) {\n    try {\n      const result = await updateOAuth2Client({\n        clientId,\n        clientData,\n        state,\n      });\n      debugMessage({\n        message: `OAuth2ClientOps.createOAuth2Client: end`,\n        state,\n      });\n      return result;\n    } catch (error) {\n      throw new FrodoError(`Error creating oauth2 client ${clientId}`, error);\n    }\n  }\n  throw new FrodoError(`OAuth2 client ${clientId} already exists!`);\n}\n\n/**\n * Update or create OAuth2 client\n * @param {string} clientId client id\n * @param {any} clientData oauth2client object\n * @returns {Promise<OAuth2ClientSkeleton>} a promise that resolves to an oauth2client object\n */\nexport async function updateOAuth2Client({\n  clientId,\n  clientData,\n  state,\n}: {\n  clientId: string;\n  clientData: OAuth2ClientSkeleton | NoIdObjectSkeletonInterface;\n  state: State;\n}): Promise<OAuth2ClientSkeleton> {\n  debugMessage({ message: `OAuth2ClientOps.putOAuth2Client: start`, state });\n  try {\n    const response = await _putOAuth2Client({\n      id: clientId,\n      clientData,\n      state,\n    });\n    debugMessage({ message: `OAuth2ClientOps.putOAuth2Client: end`, state });\n    return response;\n  } catch (error) {\n    if (\n      error.response?.status === 400 &&\n      error.response?.data?.message === 'Invalid attribute specified.'\n    ) {\n      try {\n        const { validAttributes } = error.response.data.detail;\n        validAttributes.push('_id');\n        for (const key of Object.keys(clientData)) {\n          if (typeof clientData[key] === 'object') {\n            for (const attribute of Object.keys(clientData[key])) {\n              if (!validAttributes.includes(attribute)) {\n                if (state.getVerbose() || state.getDebug())\n                  printMessage({\n                    message: `\\n- Removing invalid attribute: ${key}.${attribute}`,\n                    type: 'warn',\n                    state,\n                  });\n                delete clientData[key][attribute];\n              }\n            }\n          }\n        }\n        const response = await _putOAuth2Client({\n          id: clientId,\n          clientData,\n          state,\n        });\n        debugMessage({\n          message: `OAuth2ClientOps.putOAuth2Client: end`,\n          state,\n        });\n        return response;\n      } catch (error) {\n        throw new FrodoError(`Error updating oauth2 client ${clientId}`, error);\n      }\n    } else {\n      throw new FrodoError(`Error updating oauth2 client ${clientId}`, error);\n    }\n  }\n}\n\n/**\n * Delete all OAuth2 clients\n * @param {string} clientId client id\n * @returns {Promise<OAuth2ClientSkeleton[]>} a promise that resolves to an oauth2client object\n */\nexport async function deleteOAuth2Clients({\n  state,\n}: {\n  state: State;\n}): Promise<OAuth2ClientSkeleton[]> {\n  debugMessage({\n    message: `OAuth2ClientOps.deleteOAuth2Clients: start`,\n    state,\n  });\n  const result: OAuth2ClientSkeleton[] = [];\n  const errors = [];\n  try {\n    const clients = await readOAuth2Clients({ state });\n    for (const client of clients) {\n      try {\n        debugMessage({\n          message: `OAuth2ClientOps.deleteOAuth2Clients: '${client._id}'`,\n          state,\n        });\n        result.push(\n          await deleteOAuth2Client({\n            clientId: client._id,\n            state,\n          })\n        );\n      } catch (error) {\n        errors.push(error);\n      }\n    }\n  } catch (error) {\n    errors.push(error);\n  }\n  if (errors.length) {\n    throw new FrodoError(`Error deleting oauth2 clients`, errors);\n  }\n  debugMessage({\n    message: `OAuth2ClientOps.deleteOAuth2Clients: end`,\n    state,\n  });\n  return result;\n}\n\n/**\n * Delete OAuth2 client\n * @param {string} clientId client id\n * @returns {Promise<OAuth2ClientSkeleton>} a promise that resolves to an oauth2client object\n */\nexport async function deleteOAuth2Client({\n  clientId,\n  state,\n}: {\n  clientId: string;\n  state: State;\n}): Promise<OAuth2ClientSkeleton> {\n  try {\n    return _deleteOAuth2Client({ id: clientId, state });\n  } catch (error) {\n    throw new FrodoError(`Error deleting oauth2 client ${clientId}`, error);\n  }\n}\n\n/**\n * Helper function to export dependencies of an OAuth2 Client\n * @param {unknown} clientData oauth2 client data\n * @param {OAuth2ClientExportOptions} options export options\n * @param {OAuth2ClientExportInterface} exportData export data\n */\nasync function exportOAuth2ClientDependencies(\n  clientData: unknown,\n  options: OAuth2ClientExportOptions,\n  exportData: OAuth2ClientExportInterface,\n  state: State\n) {\n  debugMessage({\n    message: `OAuth2ClientOps.exportOAuth2ClientDependencies: start [client=${clientData['_id']}]`,\n    state,\n  });\n  if (clientData['overrideOAuth2ClientConfig']) {\n    for (const key of Object.keys(clientData['overrideOAuth2ClientConfig'])) {\n      if (key.endsWith('Script')) {\n        const scriptId = clientData['overrideOAuth2ClientConfig'][key];\n        if (scriptId !== '[Empty]' && !exportData.script[scriptId]) {\n          try {\n            debugMessage({\n              message: `- ${scriptId} referenced by ${clientData['_id']}`,\n              state,\n            });\n            const scriptData = await readScript({ scriptId, state });\n            if (options.useStringArrays)\n              scriptData.script = convertBase64TextToArray(\n                scriptData.script as string\n              );\n            exportData.script[scriptId] = scriptData;\n          } catch (error) {\n            if (\n              !(\n                error.response?.status === 403 &&\n                error.response?.data?.message ===\n                  'This operation is not available in ForgeRock Identity Cloud.'\n              )\n            ) {\n              throw new FrodoError(\n                `Error retrieving script ${scriptId} referenced by ${key} key in client ${clientData['_id']}`,\n                error\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n  debugMessage({\n    message: `OAuth2ClientOps.exportOAuth2ClientDependencies: end`,\n    state,\n  });\n}\n\n/**\n * Export all OAuth2 clients\n * @param {OAuth2ClientExportOptions} options export options\n * @returns {Promise<OAuth2ClientExportInterface>} export data\n */\nexport async function exportOAuth2Clients({\n  options = { useStringArrays: true, deps: true },\n  state,\n}: {\n  options?: OAuth2ClientExportOptions;\n  state: State;\n}): Promise<OAuth2ClientExportInterface> {\n  debugMessage({\n    message: `OAuth2ClientOps.exportOAuth2Clients: start`,\n    state,\n  });\n  const exportData = createOAuth2ClientExportTemplate({ state });\n  const errors = [];\n  let indicatorId: string;\n  try {\n    const provider = await readOAuth2Provider({ state });\n    const clients = await readOAuth2Clients({ state });\n    indicatorId = createProgressIndicator({\n      total: clients.length,\n      message: 'Exporting OAuth2 clients...',\n      state,\n    });\n    for (const client of clients) {\n      updateProgressIndicator({\n        id: indicatorId,\n        message: `Exporting OAuth2 client ${client._id}`,\n        state,\n      });\n      try {\n        client._provider = provider;\n        exportData.application[client._id] = client;\n        if (options.deps) {\n          await exportOAuth2ClientDependencies(\n            client,\n            options,\n            exportData,\n            state\n          );\n        }\n      } catch (error) {\n        errors.push(error);\n      }\n    }\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Exported ${clients.length} OAuth2 clients.`,\n      state,\n    });\n  } catch (error) {\n    errors.push(error);\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(`Error exporting oauth2 clients`, errors);\n  }\n  debugMessage({ message: `OAuth2ClientOps.exportOAuth2Clients: end`, state });\n  return exportData;\n}\n\n/**\n * Export OAuth2 client by ID\n * @param {string} clientId oauth2 client id\n * @param {OAuth2ClientExportOptions} options export options\n * @returns {Promise<OAuth2ClientExportInterface>} export data\n */\nexport async function exportOAuth2Client({\n  clientId,\n  options = { useStringArrays: true, deps: true },\n  state,\n}: {\n  clientId: string;\n  options?: OAuth2ClientExportOptions;\n  state: State;\n}): Promise<OAuth2ClientExportInterface> {\n  debugMessage({ message: `OAuth2ClientOps.exportOAuth2Client: start`, state });\n  const exportData = createOAuth2ClientExportTemplate({ state });\n  const errors = [];\n  try {\n    const clientData = await readOAuth2Client({ clientId, state });\n    clientData._provider = await readOAuth2Provider({ state });\n    exportData.application[clientData._id] = clientData;\n    if (options.deps) {\n      await exportOAuth2ClientDependencies(\n        clientData,\n        options,\n        exportData,\n        state\n      );\n    }\n  } catch (error) {\n    errors.push(error);\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(`Error exporting oauth2 client ${clientId}`, errors);\n  }\n  debugMessage({ message: `OAuth2ClientOps.exportOAuth2Client: end`, state });\n  return exportData;\n}\n\n/**\n * Helper function to export dependencies of an OAuth2 Client\n * @param {unknown} clientData oauth2 client data\n * @param {OAuth2ClientExportInterface} importData import data\n */\nasync function importOAuth2ClientDependencies(\n  clientData: unknown,\n  importData: OAuth2ClientExportInterface,\n  state: State\n) {\n  if (clientData['overrideOAuth2ClientConfig']) {\n    for (const key of Object.keys(clientData['overrideOAuth2ClientConfig'])) {\n      if (key.endsWith('Script')) {\n        const scriptId = clientData['overrideOAuth2ClientConfig'][key];\n        if (scriptId !== '[Empty]' && importData.script[scriptId]) {\n          try {\n            const scriptData: ScriptSkeleton = importData.script[scriptId];\n            await updateScript({ scriptId, scriptData, state });\n          } catch (error) {\n            throw new FrodoError(\n              `Error importing script dependency ${scriptId}`,\n              error\n            );\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * Import OAuth2 Client by ID\n * @param {string} clientId client id\n * @param {OAuth2ClientExportInterface} importData import data\n * @param {OAuth2ClientImportOptions} options import options\n * @returns {Promise<OAuth2ClientSkeleton>} a promise resolving to an oauth2 client\n */\nexport async function importOAuth2Client({\n  clientId,\n  importData,\n  options = { deps: true },\n  state,\n}: {\n  clientId: string;\n  importData: OAuth2ClientExportInterface;\n  options?: OAuth2ClientImportOptions;\n  state: State;\n}): Promise<OAuth2ClientSkeleton> {\n  let response = null;\n  const errors = [];\n  const imported = [];\n  for (const id of Object.keys(importData.application)) {\n    if (id === clientId) {\n      try {\n        const clientData = importData.application[id];\n        delete clientData._provider;\n        delete clientData._rev;\n        if (options.deps) {\n          await importOAuth2ClientDependencies(clientData, importData, state);\n        }\n        response = await updateOAuth2Client({\n          clientId: id,\n          clientData,\n          state,\n        });\n        imported.push(id);\n      } catch (error) {\n        errors.push(error);\n      }\n    }\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(`Error importing oauth2 client ${clientId}`, errors);\n  }\n  if (0 === imported.length) {\n    throw new FrodoError(`Oauth2 client ${clientId} not found in import data!`);\n  }\n  return response;\n}\n\n/**\n * Import first OAuth2 Client\n * @param {OAuth2ClientExportInterface} importData import data\n * @param {OAuth2ClientImportOptions} options import options\n * @returns {Promise<OAuth2ClientSkeleton>} a promise resolving to an oauth2 client\n */\nexport async function importFirstOAuth2Client({\n  importData,\n  options = { deps: true },\n  state,\n}: {\n  importData: OAuth2ClientExportInterface;\n  options?: OAuth2ClientImportOptions;\n  state: State;\n}): Promise<OAuth2ClientSkeleton> {\n  let response = null;\n  const errors = [];\n  const imported = [];\n  for (const id of Object.keys(importData.application)) {\n    try {\n      const clientData = importData.application[id];\n      delete clientData._provider;\n      delete clientData._rev;\n      if (options.deps) {\n        await importOAuth2ClientDependencies(clientData, importData, state);\n      }\n      response = await updateOAuth2Client({ clientId: id, clientData, state });\n      imported.push(id);\n    } catch (error) {\n      errors.push(error);\n    }\n    break;\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(`Error importing first oauth2 client`, errors);\n  }\n  if (0 === imported.length) {\n    throw new FrodoError(`No oauth2 clients found in import data!`);\n  }\n  return response;\n}\n\n/**\n * Import OAuth2 Clients\n * @param {OAuth2ClientExportInterface} importData import data\n * @param {OAuth2ClientImportOptions} options import options\n * @returns {Promise<OAuth2ClientSkeleton[]>} a promise resolving to an array of oauth2 clients\n */\nexport async function importOAuth2Clients({\n  importData,\n  options = { deps: true },\n  state,\n}: {\n  importData: OAuth2ClientExportInterface;\n  options?: OAuth2ClientImportOptions;\n  state: State;\n}): Promise<OAuth2ClientSkeleton[]> {\n  const response = [];\n  const errors = [];\n  for (const id of Object.keys(importData.application)) {\n    try {\n      const clientData = importData.application[id];\n      delete clientData._provider;\n      delete clientData._rev;\n      if (options.deps) {\n        await importOAuth2ClientDependencies(clientData, importData, state);\n      }\n      response.push(\n        await updateOAuth2Client({ clientId: id, clientData, state })\n      );\n    } catch (error) {\n      errors.push(error);\n    }\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(`Error importing oauth2 clients`, errors);\n  }\n  return response;\n}\n","import jose from 'node-jose';\n\nimport { State } from '../shared/State';\n\nexport type Jose = {\n  createJwkRsa(): Promise<JwkRsa>;\n  getJwkRsaPublic(jwkJson: JwkRsa): Promise<JwkRsaPublic>;\n  createJwks(...keys: JwkInterface[]): JwksInterface;\n  createSignedJwtToken(payload: string | object, jwkJson: JwkRsa): Promise<any>;\n  verifySignedJwtToken(jwt: string, jwkJson: JwkRsaPublic): Promise<any>;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport default (_state: State) => {\n  return {\n    async createJwkRsa(): Promise<JwkRsa> {\n      return createJwkRsa();\n    },\n\n    async getJwkRsaPublic(jwkJson: JwkRsa): Promise<JwkRsaPublic> {\n      return getJwkRsaPublic(jwkJson);\n    },\n\n    createJwks(...keys: JwkInterface[]): JwksInterface {\n      return createJwks(...keys);\n    },\n\n    async createSignedJwtToken(payload: string | object, jwkJson: JwkRsa) {\n      return createSignedJwtToken(payload, jwkJson);\n    },\n\n    async verifySignedJwtToken(jwt: string, jwkJson: JwkRsaPublic) {\n      return verifySignedJwtToken(jwt, jwkJson);\n    },\n  };\n};\n\nexport interface JwkInterface {\n  kty: string;\n  use?: string;\n  key_ops?: string[];\n  alg: string;\n  kid?: string;\n  x5u?: string;\n  x5c?: string;\n  x5t?: string;\n  'x5t#S256'?: string;\n}\n\nexport type JwkRsa = JwkInterface & {\n  d: string;\n  dp: string;\n  dq: string;\n  e: string;\n  n: string;\n  p: string;\n  q: string;\n  qi: string;\n};\n\nexport type JwkRsaPublic = JwkInterface & {\n  e: string;\n  n: string;\n};\n\nexport interface JwksInterface {\n  keys: JwkInterface[];\n}\n\nexport async function createJwkRsa(): Promise<JwkRsa> {\n  const jwk = await jose.JWK.createKey('RSA', 4096, { alg: 'RS256' });\n  // include the private key\n  return jwk.toJSON(true) as JwkRsa;\n}\n\nexport async function getJwkRsaPublic(jwkJson: JwkRsa): Promise<JwkRsaPublic> {\n  const jwk = await jose.JWK.asKey(jwkJson);\n  // do not include the private key\n  return jwk.toJSON(false) as JwkRsaPublic;\n}\n\nexport function createJwks(...keys: JwkInterface[]): JwksInterface {\n  return {\n    keys,\n  };\n}\n\nexport async function createSignedJwtToken(\n  payload: string | object,\n  jwkJson: JwkRsa\n) {\n  const key = await jose.JWK.asKey(jwkJson);\n  if (typeof payload === 'object') {\n    payload = JSON.stringify(payload);\n  }\n  const jwt = await jose.JWS.createSign(\n    { alg: 'RS256', compact: true, fields: {} },\n    // https://github.com/cisco/node-jose/issues/253\n    { key, reference: false }\n  )\n    .update(payload)\n    .final();\n  return jwt;\n}\n\nexport async function verifySignedJwtToken(jwt: string, jwkJson: JwkRsaPublic) {\n  const jwk = await jose.JWK.asKey(jwkJson);\n  const verifyResult = await jose.JWS.createVerify(jwk).verify(jwt);\n  return verifyResult;\n}\n","import { AxiosRequestConfig, AxiosResponse } from 'axios';\n\nimport {\n  accessToken as _accessToken,\n  type AccessTokenResponseType,\n  authorize as _authorize,\n  clientCredentialsGrant as _clientCredentialsGrant,\n  getTokenInfo as _getTokenInfo,\n} from '../api/OAuth2OIDCApi';\nimport { TokenInfoResponseType } from '../api/OAuth2OIDCApi';\nimport { State } from '../shared/State';\nimport { mergeDeep } from '../utils/JsonUtils';\nimport { FrodoError } from './FrodoError';\n\nexport type AccessTokenMetaType = AccessTokenResponseType & {\n  expires: number;\n  from_cache?: boolean;\n};\n\nexport type OAuth2Oidc = {\n  authorize(\n    amBaseUrl: string,\n    data: string,\n    config: AxiosRequestConfig\n  ): Promise<AxiosResponse<any, any>>;\n  accessToken(\n    amBaseUrl: string,\n    data: any,\n    config: AxiosRequestConfig\n  ): Promise<AccessTokenMetaType>;\n  accessTokenRfc7523AuthZGrant(\n    clientId: string,\n    jwt: string,\n    scope: string[],\n    config?: AxiosRequestConfig\n  ): Promise<AccessTokenMetaType>;\n  getTokenInfo(\n    amBaseUrl: string,\n    config: AxiosRequestConfig\n  ): Promise<TokenInfoResponseType>;\n  clientCredentialsGrant(\n    amBaseUrl: string,\n    clientId: string,\n    clientSecret: string,\n    scope: string\n  ): Promise<AccessTokenMetaType>;\n};\n\nexport default (state: State): OAuth2Oidc => {\n  return {\n    async authorize(\n      amBaseUrl: string,\n      data: string,\n      config: AxiosRequestConfig\n    ) {\n      return authorize({\n        amBaseUrl,\n        data,\n        config,\n        state,\n      });\n    },\n    async accessToken(\n      amBaseUrl: string,\n      data: any,\n      config: AxiosRequestConfig\n    ): Promise<AccessTokenMetaType> {\n      return accessToken({ amBaseUrl, config, data, state });\n    },\n    async accessTokenRfc7523AuthZGrant(\n      clientId: string,\n      jwt: string,\n      scope: string[],\n      config?: AxiosRequestConfig\n    ): Promise<AccessTokenMetaType> {\n      return accessTokenRfc7523AuthZGrant({\n        clientId,\n        jwt,\n        scope,\n        config,\n        state,\n      });\n    },\n    async getTokenInfo(\n      amBaseUrl: string,\n      config: AxiosRequestConfig\n    ): Promise<TokenInfoResponseType> {\n      return getTokenInfo({\n        amBaseUrl,\n        config,\n        state,\n      });\n    },\n    async clientCredentialsGrant(\n      amBaseUrl: string,\n      clientId: string,\n      clientSecret: string,\n      scope: string\n    ) {\n      return clientCredentialsGrant({\n        amBaseUrl,\n        clientId,\n        clientSecret,\n        scope,\n        state,\n      });\n    },\n  };\n};\n\nexport async function authorize({\n  amBaseUrl,\n  data,\n  config,\n  state,\n}: {\n  amBaseUrl: string;\n  data: string;\n  config: AxiosRequestConfig;\n  state: State;\n}): Promise<AxiosResponse<any, any>> {\n  try {\n    return _authorize({ amBaseUrl, data, config, state });\n  } catch (error) {\n    throw new FrodoError(`Error authorizing oauth2 client`, error);\n  }\n}\n\nexport async function accessToken({\n  amBaseUrl,\n  data,\n  config,\n  realm = false,\n  state,\n}: {\n  amBaseUrl: string;\n  data: any;\n  config: AxiosRequestConfig;\n  realm?: boolean;\n  state: State;\n}): Promise<AccessTokenMetaType> {\n  try {\n    const response = await _accessToken({\n      amBaseUrl,\n      config,\n      postData: data,\n      realm,\n      state,\n    });\n    response['expires'] = Date.now() + response.expires_in * 1000;\n    return response as AccessTokenMetaType;\n  } catch (error) {\n    throw new FrodoError(`Error getting oauth2 access token`, error);\n  }\n}\n\nexport async function accessTokenRfc7523AuthZGrant({\n  clientId,\n  jwt,\n  scope,\n  config = {},\n  state,\n}: {\n  clientId: string;\n  jwt: string;\n  scope: string[];\n  config?: AxiosRequestConfig;\n  state: State;\n}): Promise<AccessTokenMetaType> {\n  try {\n    config = mergeDeep(config, {\n      headers: {\n        'content-type': 'application/x-www-form-urlencoded',\n      },\n    });\n    const data = new URLSearchParams({\n      grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n      assertion: jwt,\n      scope: scope.join(' '),\n      client_id: clientId,\n    }).toString();\n    return accessToken({\n      amBaseUrl: state.getHost(),\n      config,\n      data,\n      realm: true,\n      state,\n    });\n  } catch (error) {\n    throw new FrodoError(\n      `Error getting oauth2 access token (RFC7523 AuthZ Grant)`,\n      error\n    );\n  }\n}\n\nexport async function getTokenInfo({\n  amBaseUrl,\n  config,\n  state,\n}: {\n  amBaseUrl: string;\n  config: AxiosRequestConfig;\n  state: State;\n}): Promise<TokenInfoResponseType> {\n  try {\n    return _getTokenInfo({ amBaseUrl, config, state });\n  } catch (error) {\n    throw new FrodoError(`Error getting oauth2 token info`, error);\n  }\n}\n\nexport async function clientCredentialsGrant({\n  amBaseUrl,\n  clientId,\n  clientSecret,\n  scope,\n  state,\n}: {\n  amBaseUrl: string;\n  clientId: string;\n  clientSecret: string;\n  scope: string;\n  state: State;\n}): Promise<AccessTokenMetaType> {\n  try {\n    const response = await _clientCredentialsGrant({\n      amBaseUrl,\n      clientId,\n      clientSecret,\n      scope,\n      state,\n    });\n    response['expires'] = new Date().getTime() + response.expires_in;\n    return response as AccessTokenMetaType;\n  } catch (error) {\n    throw new FrodoError(\n      `Error getting access token using client credentials grant`,\n      error\n    );\n  }\n}\n","import util from 'util';\n\nimport { State } from '../shared/State';\nimport { getCurrentRealmPath } from '../utils/ForgeRockUtils';\nimport { deleteDeepByKey } from '../utils/JsonUtils';\nimport {\n  type IdObjectSkeletonInterface,\n  type NoIdObjectSkeletonInterface,\n  type PagedResult,\n  type Readable,\n  type Writable,\n} from './ApiTypes';\nimport { generateAmApi } from './BaseApi';\n\nconst oauth2TrustedJwtIssuerURLTemplate =\n  '%s/json%s/realm-config/agents/TrustedJwtIssuer/%s';\nconst oauth2TrustedJwtIssuerListURLTemplate =\n  '%s/json%s/realm-config/agents/OAuth2Client?_queryFilter=true';\nconst apiVersion = 'protocol=2.0,resource=1.0';\nconst getApiConfig = () => {\n  return {\n    apiVersion,\n  };\n};\n\nexport type OAuth2TrustedJwtIssuerSkeleton = IdObjectSkeletonInterface & {\n  allowedSubjects?: Readable<string[]> | Writable<string[]>;\n  jwksCacheTimeout?: Readable<number> | Writable<number>;\n  jwkSet?: Readable<string> | Writable<string>;\n  consentedScopesClaim?: Readable<string> | Writable<string>;\n  issuer: Readable<string> | Writable<string>;\n  jwkStoreCacheMissCacheTime?: Readable<number> | Writable<number>;\n  resourceOwnerIdentityClaim?: Readable<string> | Writable<string>;\n  jwksUri?: Readable<string> | Writable<string>;\n  _type: {\n    _id: 'TrustedJwtIssuer';\n    name: 'OAuth2 Trusted JWT Issuer';\n    collection: true;\n  };\n};\n\n/**\n * Get OAuth2 Trusted JWT Issuers\n * @returns {Promise<PagedResult>} a promise that resolves to a PagedResults object containing an array of oauth2client objects\n */\nexport async function getOAuth2TrustedJwtIssuers({\n  state,\n}: {\n  state: State;\n}): Promise<PagedResult<OAuth2TrustedJwtIssuerSkeleton>> {\n  const urlString = util.format(\n    oauth2TrustedJwtIssuerListURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state)\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get(\n    urlString,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Get OAuth2 Trusted JWT Issuer\n * @param {string} id client id\n * @returns {Promise<OAuth2TrustedJwtIssuerSkeleton>} a promise that resolves to an oauth2 client object\n */\nexport async function getOAuth2TrustedJwtIssuer({\n  id,\n  state,\n}: {\n  id: string;\n  state: State;\n}): Promise<OAuth2TrustedJwtIssuerSkeleton> {\n  const urlString = util.format(\n    oauth2TrustedJwtIssuerURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    id\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get(\n    urlString,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Put OAuth2 Trusted JWT Issuer\n * @param {string} id issuer id\n * @param {OAuth2TrustedJwtIssuerSkeleton} issuerData TrustedJwtIssuer object\n * @returns {Promise<OAuth2TrustedJwtIssuerSkeleton>} a promise that resolves to an oauth2 client object\n */\nexport async function putOAuth2TrustedJwtIssuer({\n  id,\n  issuerData,\n  state,\n}: {\n  id: string;\n  issuerData: OAuth2TrustedJwtIssuerSkeleton | NoIdObjectSkeletonInterface;\n  state: State;\n}): Promise<OAuth2TrustedJwtIssuerSkeleton> {\n  // until we figure out a way to use transport keys in Frodo,\n  // we'll have to drop those encrypted attributes.\n  const client = deleteDeepByKey(issuerData, '-encrypted');\n  delete client._provider;\n  delete client._rev;\n  const urlString = util.format(\n    oauth2TrustedJwtIssuerURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    id\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).put(\n    urlString,\n    client,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Delete OAuth2 Trusted JWT Issuer\n * @param {string} id OAuth2 issuer id\n * @returns {Promise<OAuth2TrustedJwtIssuerSkeleton>} a promise that resolves to a trusted jwt issuer object\n */\nexport async function deleteOAuth2TrustedJwtIssuer({\n  id,\n  state,\n}: {\n  id: string;\n  state: State;\n}): Promise<OAuth2TrustedJwtIssuerSkeleton> {\n  const urlString = util.format(\n    oauth2TrustedJwtIssuerURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    id\n  );\n  const { data } = await generateAmApi({\n    resource: getApiConfig(),\n    state,\n  }).delete(urlString, {\n    withCredentials: true,\n  });\n  return data;\n}\n","import { type NoIdObjectSkeletonInterface } from '../api/ApiTypes';\nimport {\n  deleteOAuth2TrustedJwtIssuer as _deleteOAuth2TrustedJwtIssuer,\n  getOAuth2TrustedJwtIssuer as _getOAuth2TrustedJwtIssuer,\n  getOAuth2TrustedJwtIssuers as _getOAuth2TrustedJwtIssuers,\n  type OAuth2TrustedJwtIssuerSkeleton,\n  putOAuth2TrustedJwtIssuer as _putOAuth2TrustedJwtIssuer,\n} from '../api/OAuth2TrustedJwtIssuerApi';\nimport { State } from '../shared/State';\nimport { debugMessage, printMessage } from '../utils/Console';\nimport { getMetadata } from '../utils/ExportImportUtils';\nimport { FrodoError } from './FrodoError';\nimport { ExportMetaData } from './OpsTypes';\n\nexport type OAuth2TrustedJwtIssuer = {\n  /**\n   * Create an empty OAuth2 trusted jwt issuer export template\n   * @returns {OAuth2TrustedJwtIssuerExportInterface} an empty OAuth2 trusted jwt issuer export template\n   */\n  createOAuth2TrustedJwtIssuerExportTemplate(): OAuth2TrustedJwtIssuerExportInterface;\n  /**\n   * Read all OAuth2 trusted jwt issuers\n   * @returns {Promise<OAuth2TrustedJwtIssuerSkeleton[]>} a promise that resolves to an array of trusted jwt issuer objects\n   */\n  readOAuth2TrustedJwtIssuers(): Promise<OAuth2TrustedJwtIssuerSkeleton[]>;\n  /**\n   * Read OAuth2 trusted jwt issuer\n   * @param {string} issuerId trusted jwt issuer id\n   * @returns {Promise<OAuth2TrustedJwtIssuerSkeleton>} a promise that resolves to an trusted jwt issuer object\n   */\n  readOAuth2TrustedJwtIssuer(\n    issuerId: string\n  ): Promise<OAuth2TrustedJwtIssuerSkeleton>;\n  /**\n   * Create OAuth2 trusted jwt issuer\n   * @param {string} issuerId trusted jwt issuer id\n   * @param {any} issuerData trusted jwt issuer object\n   * @returns {Promise<OAuth2TrustedJwtIssuerSkeleton>} a promise that resolves to an trusted jwt issuer object\n   */\n  createOAuth2TrustedJwtIssuer(\n    issuerId: string,\n    issuerData: OAuth2TrustedJwtIssuerSkeleton\n  ): Promise<OAuth2TrustedJwtIssuerSkeleton>;\n  /**\n   * Update or create OAuth2 trusted jwt issuer\n   * @param {string} issuerId trusted jwt issuer id\n   * @param {any} issuerData trusted jwt issuer object\n   * @returns {Promise<any>} a promise that resolves to an trusted jwt issuer object\n   */\n  updateOAuth2TrustedJwtIssuer(\n    issuerId: string,\n    issuerData: OAuth2TrustedJwtIssuerSkeleton\n  ): Promise<OAuth2TrustedJwtIssuerSkeleton>;\n  /**\n   * Delete all OAuth2 trusted jwt issuers\n   * @returns {Promise<OAuth2TrustedJwtIssuerSkeleton[]>} a promise that resolves to an array of trusted jwt issuer objects\n   */\n  deleteOAuth2TrustedJwtIssuers(): Promise<OAuth2TrustedJwtIssuerSkeleton[]>;\n  /**\n   * Delete OAuth2 trusted jwt issuer\n   * @param {string} issuerId trusted jwt issuer id\n   * @returns {Promise<OAuth2TrustedJwtIssuerSkeleton>} a promise that resolves to an trusted jwt issuer object\n   */\n  deleteOAuth2TrustedJwtIssuer(\n    issuerId: string\n  ): Promise<OAuth2TrustedJwtIssuerSkeleton>;\n  /**\n   * Export all OAuth2 trusted jwt issuers\n   * @param {OAuth2TrustedJwtIssuerExportOptions} options export options\n   * @returns {OAuth2TrustedJwtIssuerExportInterface} export data\n   */\n  exportOAuth2TrustedJwtIssuers(\n    options?: OAuth2TrustedJwtIssuerExportOptions\n  ): Promise<OAuth2TrustedJwtIssuerExportInterface>;\n  /**\n   * Export OAuth2 trusted jwt issuer by ID\n   * @param {string} issuerId oauth2 trusted jwt issuer id\n   * @param {OAuth2TrustedJwtIssuerExportOptions} options export options\n   * @returns {OAuth2TrustedJwtIssuerExportInterface} export data\n   */\n  exportOAuth2TrustedJwtIssuer(\n    issuerId: string,\n    options?: OAuth2TrustedJwtIssuerExportOptions\n  ): Promise<OAuth2TrustedJwtIssuerExportInterface>;\n  /**\n   * Import OAuth2 Client by ID\n   * @param {string} issuerId trusted jwt issuer id\n   * @param {OAuth2TrustedJwtIssuerExportInterface} importData import data\n   * @param {OAuth2TrustedJwtIssuerImportOptions} options import options\n   * @returns {Promise<OAuth2TrustedJwtIssuerSkeleton>} a promise resolving to an oauth2 trusted jwt issuer\n   */\n  importOAuth2TrustedJwtIssuer(\n    issuerId: string,\n    importData: OAuth2TrustedJwtIssuerExportInterface,\n    options?: OAuth2TrustedJwtIssuerImportOptions\n  ): Promise<OAuth2TrustedJwtIssuerSkeleton>;\n  /**\n   * Import first OAuth2 Client\n   * @param {OAuth2TrustedJwtIssuerExportInterface} importData import data\n   * @param {OAuth2TrustedJwtIssuerImportOptions} options import options\n   * @returns {Promise<OAuth2TrustedJwtIssuerSkeleton>} a promise resolving to an oauth2 trusted jwt issuer\n   */\n  importFirstOAuth2TrustedJwtIssuer(\n    importData: OAuth2TrustedJwtIssuerExportInterface,\n    options?: OAuth2TrustedJwtIssuerImportOptions\n  ): Promise<OAuth2TrustedJwtIssuerSkeleton>;\n  /**\n   * Import OAuth2 Clients\n   * @param {OAuth2TrustedJwtIssuerExportInterface} importData import data\n   * @param {OAuth2TrustedJwtIssuerImportOptions} options import options\n   * @returns {Promise<OAuth2TrustedJwtIssuerSkeleton[]>} a promise resolving to an array of oauth2 trusted jwt issuers\n   */\n  importOAuth2TrustedJwtIssuers(\n    importData: OAuth2TrustedJwtIssuerExportInterface,\n    options?: OAuth2TrustedJwtIssuerImportOptions\n  ): Promise<OAuth2TrustedJwtIssuerSkeleton[]>;\n\n  // Deprecated\n\n  /**\n   * Get all OAuth2 trusted jwt issuers\n   * @returns {Promise<OAuth2TrustedJwtIssuerSkeleton[]>} a promise that resolves to an array of trusted jwt issuer objects\n   * @deprecated since v2.0.0 use {@link OAuth2TrustedJwtIssuer.readOAuth2TrustedJwtIssuers | readOAuth2TrustedJwtIssuers} instead\n   * ```javascript\n   * readOAuth2TrustedJwtIssuers(): Promise<OAuth2TrustedJwtIssuerSkeleton[]>\n   * ```\n   * @group Deprecated\n   */\n  getOAuth2TrustedJwtIssuers(): Promise<OAuth2TrustedJwtIssuerSkeleton[]>;\n  /**\n   * Get OAuth2 trusted jwt issuer\n   * @param {string} issuerId trusted jwt issuer id\n   * @returns {Promise<OAuth2TrustedJwtIssuerSkeleton>} a promise that resolves to an trusted jwt issuer object\n   * @deprecated since v2.0.0 use {@link OAuth2TrustedJwtIssuer.readOAuth2TrustedJwtIssuer | readOAuth2TrustedJwtIssuer} instead\n   * ```javascript\n   * readOAuth2TrustedJwtIssuer(issuerId: string): Promise<OAuth2TrustedJwtIssuerSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  getOAuth2TrustedJwtIssuer(\n    issuerId: string\n  ): Promise<OAuth2TrustedJwtIssuerSkeleton>;\n  /**\n   * Put OAuth2 trusted jwt issuer\n   * @param {string} issuerId trusted jwt issuer id\n   * @param {OAuth2TrustedJwtIssuerSkeleton} issuerData trusted jwt issuer object\n   * @returns {Promise<any>} a promise that resolves to an trusted jwt issuer object\n   * @deprecated since v2.0.0 use {@link OAuth2TrustedJwtIssuer.updateOAuth2TrustedJwtIssuer | updateOAuth2TrustedJwtIssuer} or {@link OAuth2TrustedJwtIssuer.createOAuth2TrustedJwtIssuer | createOAuth2TrustedJwtIssuer} instead\n   * ```javascript\n   * updateOAuth2TrustedJwtIssuer(issuerId: string, issuerData: OAuth2TrustedJwtIssuerSkeleton): Promise<OAuth2TrustedJwtIssuerSkeleton>\n   * createOAuth2TrustedJwtIssuer(issuerId: string, issuerData: OAuth2TrustedJwtIssuerSkeleton): Promise<OAuth2TrustedJwtIssuerSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  putOAuth2TrustedJwtIssuer(\n    issuerId: string,\n    issuerData: OAuth2TrustedJwtIssuerSkeleton\n  ): Promise<OAuth2TrustedJwtIssuerSkeleton>;\n};\n\nexport default (state: State): OAuth2TrustedJwtIssuer => {\n  return {\n    createOAuth2TrustedJwtIssuerExportTemplate(): OAuth2TrustedJwtIssuerExportInterface {\n      return createOAuth2TrustedJwtIssuerExportTemplate({ state });\n    },\n    async readOAuth2TrustedJwtIssuers(): Promise<\n      OAuth2TrustedJwtIssuerSkeleton[]\n    > {\n      return readOAuth2TrustedJwtIssuers({ state });\n    },\n    async readOAuth2TrustedJwtIssuer(\n      issuerId: string\n    ): Promise<OAuth2TrustedJwtIssuerSkeleton> {\n      return readOAuth2TrustedJwtIssuer({ issuerId, state });\n    },\n    async createOAuth2TrustedJwtIssuer(\n      issuerId: string,\n      issuerData: OAuth2TrustedJwtIssuerSkeleton\n    ): Promise<OAuth2TrustedJwtIssuerSkeleton> {\n      return createOAuth2TrustedJwtIssuer({ issuerId, issuerData, state });\n    },\n    async updateOAuth2TrustedJwtIssuer(\n      issuerId: string,\n      issuerData: OAuth2TrustedJwtIssuerSkeleton\n    ): Promise<OAuth2TrustedJwtIssuerSkeleton> {\n      return updateOAuth2TrustedJwtIssuer({ issuerId, issuerData, state });\n    },\n    async deleteOAuth2TrustedJwtIssuers(): Promise<\n      OAuth2TrustedJwtIssuerSkeleton[]\n    > {\n      return deleteOAuth2TrustedJwtIssuers({ state });\n    },\n    async deleteOAuth2TrustedJwtIssuer(\n      issuerId: string\n    ): Promise<OAuth2TrustedJwtIssuerSkeleton> {\n      return deleteOAuth2TrustedJwtIssuer({ issuerId, state });\n    },\n    async exportOAuth2TrustedJwtIssuers(\n      options: OAuth2TrustedJwtIssuerExportOptions = {\n        useStringArrays: true,\n        deps: true,\n      }\n    ): Promise<OAuth2TrustedJwtIssuerExportInterface> {\n      return exportOAuth2TrustedJwtIssuers({ options, state });\n    },\n    async exportOAuth2TrustedJwtIssuer(\n      issuerId: string\n    ): Promise<OAuth2TrustedJwtIssuerExportInterface> {\n      return exportOAuth2TrustedJwtIssuer({ issuerId, state });\n    },\n    async importOAuth2TrustedJwtIssuer(\n      issuerId: string,\n      importData: OAuth2TrustedJwtIssuerExportInterface\n    ) {\n      return importOAuth2TrustedJwtIssuer({\n        issuerId,\n        importData,\n        state,\n      });\n    },\n    async importFirstOAuth2TrustedJwtIssuer(\n      importData: OAuth2TrustedJwtIssuerExportInterface\n    ) {\n      return importFirstOAuth2TrustedJwtIssuer({ importData, state });\n    },\n    async importOAuth2TrustedJwtIssuers(\n      importData: OAuth2TrustedJwtIssuerExportInterface\n    ): Promise<OAuth2TrustedJwtIssuerSkeleton[]> {\n      return importOAuth2TrustedJwtIssuers({ importData, state });\n    },\n\n    // Deprecated\n\n    async getOAuth2TrustedJwtIssuers(): Promise<\n      OAuth2TrustedJwtIssuerSkeleton[]\n    > {\n      return readOAuth2TrustedJwtIssuers({ state });\n    },\n    async getOAuth2TrustedJwtIssuer(\n      issuerId: string\n    ): Promise<OAuth2TrustedJwtIssuerSkeleton> {\n      return readOAuth2TrustedJwtIssuer({ issuerId, state });\n    },\n    async putOAuth2TrustedJwtIssuer(\n      issuerId: string,\n      issuerData: OAuth2TrustedJwtIssuerSkeleton\n    ): Promise<OAuth2TrustedJwtIssuerSkeleton> {\n      return updateOAuth2TrustedJwtIssuer({ issuerId, issuerData, state });\n    },\n  };\n};\n\n/**\n * OAuth2 trusted jwt issuer export options\n */\nexport interface OAuth2TrustedJwtIssuerExportOptions {\n  /**\n   * Use string arrays to store multi-line text in scripts.\n   */\n  useStringArrays: boolean;\n  /**\n   * Include any dependencies (scripts).\n   */\n  deps: boolean;\n}\n\n/**\n * OAuth2 trusted jwt issuer import options\n */\nexport interface OAuth2TrustedJwtIssuerImportOptions {\n  /**\n   * Include any dependencies (scripts).\n   */\n  deps: boolean;\n}\n\nexport interface OAuth2TrustedJwtIssuerExportInterface {\n  meta?: ExportMetaData;\n  trustedJwtIssuer: Record<string, OAuth2TrustedJwtIssuerSkeleton>;\n}\n\n/**\n * Create an empty OAuth2 trusted jwt issuer export template\n * @returns {OAuth2TrustedJwtIssuerExportInterface} an empty OAuth2 trusted jwt issuer export template\n */\nexport function createOAuth2TrustedJwtIssuerExportTemplate({\n  state,\n}: {\n  state: State;\n}): OAuth2TrustedJwtIssuerExportInterface {\n  return {\n    meta: getMetadata({ state }),\n    trustedJwtIssuer: {},\n  } as OAuth2TrustedJwtIssuerExportInterface;\n}\n\n/**\n * Get all OAuth2 trusted jwt issuers\n * @returns {Promise<OAuth2TrustedJwtIssuerSkeleton[]>} a promise that resolves to an array of trusted jwt issuer objects\n */\nexport async function readOAuth2TrustedJwtIssuers({\n  state,\n}: {\n  state: State;\n}): Promise<OAuth2TrustedJwtIssuerSkeleton[]> {\n  try {\n    const issuers = (await _getOAuth2TrustedJwtIssuers({ state })).result;\n    return issuers;\n  } catch (error) {\n    throw new FrodoError(`Error reading trusted issuers`, error);\n  }\n}\n\n/**\n * Get OAuth2 trusted jwt issuer\n * @param {string} issuerId trusted jwt issuer id\n * @returns {Promise<any>} a promise that resolves to an trusted jwt issuer object\n */\nexport async function readOAuth2TrustedJwtIssuer({\n  issuerId,\n  state,\n}: {\n  issuerId: string;\n  state: State;\n}): Promise<OAuth2TrustedJwtIssuerSkeleton> {\n  try {\n    return _getOAuth2TrustedJwtIssuer({ id: issuerId, state });\n  } catch (error) {\n    throw new FrodoError(`Error reading trusted issuer ${issuerId}`, error);\n  }\n}\n\n/**\n * Create OAuth2 trusted jwt issuer\n * @param {string} issuerId trusted jwt issuer id\n * @param {OAuth2TrustedJwtIssuerSkeleton | NoIdObjectSkeletonInterface} issuerData trusted jwt issuer object\n * @returns {Promise<OAuth2TrustedJwtIssuerSkeleton>} a promise that resolves to an trusted jwt issuer object\n */\nexport async function createOAuth2TrustedJwtIssuer({\n  issuerId,\n  issuerData,\n  state,\n}: {\n  issuerId: string;\n  issuerData: OAuth2TrustedJwtIssuerSkeleton | NoIdObjectSkeletonInterface;\n  state: State;\n}): Promise<OAuth2TrustedJwtIssuerSkeleton> {\n  debugMessage({\n    message: `OAuth2TrustedJwtIssuerOps.createOAuth2TrustedJwtIssuer: start`,\n    state,\n  });\n  try {\n    await readOAuth2TrustedJwtIssuer({ issuerId, state });\n  } catch (error) {\n    try {\n      const result = await updateOAuth2TrustedJwtIssuer({\n        issuerId,\n        issuerData,\n        state,\n      });\n      debugMessage({\n        message: `OAuth2TrustedJwtIssuerOps.createOAuth2TrustedJwtIssuer: end`,\n        state,\n      });\n      return result;\n    } catch (error) {\n      throw new FrodoError(`Error creating trusted issuer ${issuerId}`, error);\n    }\n  }\n  throw new FrodoError(`Trusted issuer ${issuerId} already exists!`);\n}\n\n/**\n * Update or create OAuth2 trusted jwt issuer\n * @param {string} issuerId trusted jwt issuer id\n * @param {any} issuerData trusted jwt issuer object\n * @returns {Promise<OAuth2TrustedJwtIssuerSkeleton>} a promise that resolves to an trusted jwt issuer object\n */\nexport async function updateOAuth2TrustedJwtIssuer({\n  issuerId,\n  issuerData,\n  state,\n}: {\n  issuerId: string;\n  issuerData: OAuth2TrustedJwtIssuerSkeleton | NoIdObjectSkeletonInterface;\n  state: State;\n}): Promise<OAuth2TrustedJwtIssuerSkeleton> {\n  debugMessage({\n    message: `OAuth2TrustedJwtIssuerOps.putOAuth2TrustedJwtIssuer: start`,\n    state,\n  });\n  try {\n    const response = await _putOAuth2TrustedJwtIssuer({\n      id: issuerId,\n      issuerData,\n      state,\n    });\n    debugMessage({\n      message: `OAuth2TrustedJwtIssuerOps.putOAuth2TrustedJwtIssuer: end`,\n      state,\n    });\n    return response;\n  } catch (error) {\n    if (\n      error.response?.status === 400 &&\n      error.response?.data?.message === 'Invalid attribute specified.'\n    ) {\n      try {\n        const { validAttributes } = error.response.data.detail;\n        validAttributes.push('_id');\n        for (const key of Object.keys(issuerData)) {\n          if (typeof issuerData[key] === 'object') {\n            for (const attribute of Object.keys(issuerData[key])) {\n              if (!validAttributes.includes(attribute)) {\n                if (state.getVerbose() || state.getDebug())\n                  printMessage({\n                    message: `\\n- Removing invalid attribute: ${key}.${attribute}`,\n                    type: 'warn',\n                    state,\n                  });\n                delete issuerData[key][attribute];\n              }\n            }\n          }\n        }\n        const response = await _putOAuth2TrustedJwtIssuer({\n          id: issuerId,\n          issuerData,\n          state,\n        });\n        debugMessage({\n          message: `OAuth2TrustedJwtIssuerOps.putOAuth2TrustedJwtIssuer: end`,\n          state,\n        });\n        return response;\n      } catch (error) {\n        throw new FrodoError(\n          `Error updating trusted issuer ${issuerId}`,\n          error\n        );\n      }\n    } else {\n      throw new FrodoError(`Error updating trusted issuer ${issuerId}`, error);\n    }\n  }\n}\n\n/**\n * Delete all OAuth2 trusted jwt issuers\n * @param {string} issuerId trusted jwt issuer id\n * @returns {Promise<OAuth2TrustedJwtIssuerSkeleton[]>} a promise that resolves to an trusted jwt issuer object\n */\nexport async function deleteOAuth2TrustedJwtIssuers({\n  state,\n}: {\n  state: State;\n}): Promise<OAuth2TrustedJwtIssuerSkeleton[]> {\n  const errors = [];\n  try {\n    debugMessage({\n      message: `OAuth2TrustedJwtIssuerOps.deleteOAuth2TrustedJwtIssuers: start`,\n      state,\n    });\n    const result: OAuth2TrustedJwtIssuerSkeleton[] = [];\n    const issuers = await readOAuth2TrustedJwtIssuers({ state });\n    for (const issuer of issuers) {\n      try {\n        debugMessage({\n          message: `OAuth2TrustedJwtIssuerOps.deleteOAuth2TrustedJwtIssuers: '${issuer._id}'`,\n          state,\n        });\n        result.push(\n          await deleteOAuth2TrustedJwtIssuer({\n            issuerId: issuer._id,\n            state,\n          })\n        );\n      } catch (error) {\n        errors.push(error);\n      }\n    }\n    if (errors.length > 0) {\n      throw new FrodoError(`Error deleting trusted issuers`, errors);\n    }\n    debugMessage({\n      message: `OAuth2TrustedJwtIssuerOps.deleteOAuth2TrustedJwtIssuers: end`,\n      state,\n    });\n    return result;\n  } catch (error) {\n    // re-throw previously caught errors\n    if (errors.length > 0) {\n      throw error;\n    }\n    throw new FrodoError(`Error deleting trusted issuers`, error);\n  }\n}\n\n/**\n * Delete OAuth2 trusted jwt issuer\n * @param {string} issuerId trusted jwt issuer id\n * @returns {Promise<OAuth2TrustedJwtIssuerSkeleton>} a promise that resolves to an trusted jwt issuer object\n */\nexport async function deleteOAuth2TrustedJwtIssuer({\n  issuerId,\n  state,\n}: {\n  issuerId: string;\n  state: State;\n}): Promise<OAuth2TrustedJwtIssuerSkeleton> {\n  try {\n    return _deleteOAuth2TrustedJwtIssuer({ id: issuerId, state });\n  } catch (error) {\n    throw new FrodoError(`Error deleting trusted issuer ${issuerId}`, error);\n  }\n}\n\n/**\n * Export all OAuth2 trusted jwt issuers\n * @returns {Promise<OAuth2TrustedJwtIssuerExportInterface>} export data\n */\nexport async function exportOAuth2TrustedJwtIssuers({\n  state,\n}: {\n  options?: OAuth2TrustedJwtIssuerExportOptions;\n  state: State;\n}): Promise<OAuth2TrustedJwtIssuerExportInterface> {\n  const errors = [];\n  try {\n    debugMessage({\n      message: `OAuth2TrustedJwtIssuerOps.exportOAuth2TrustedJwtIssuers: start`,\n      state,\n    });\n    const exportData = createOAuth2TrustedJwtIssuerExportTemplate({ state });\n    const issuers = await readOAuth2TrustedJwtIssuers({ state });\n    for (const issuer of issuers) {\n      try {\n        exportData.trustedJwtIssuer[issuer._id] = issuer;\n      } catch (error) {\n        errors.push(error);\n      }\n    }\n    if (errors.length > 0) {\n      throw new FrodoError(`Error exporting trusted issuers`, errors);\n    }\n    debugMessage({\n      message: `OAuth2TrustedJwtIssuerOps.exportOAuth2TrustedJwtIssuers: end`,\n      state,\n    });\n    return exportData;\n  } catch (error) {\n    // re-throw previously caught errors\n    if (errors.length > 0) {\n      throw error;\n    }\n    throw new FrodoError(`Error exporting trusted issuers`, error);\n  }\n}\n\n/**\n * Export OAuth2 trusted jwt issuer by ID\n * @param {string} issuerId oauth2 trusted jwt issuer id\n * @param {OAuth2TrustedJwtIssuerExportOptions} options export options\n * @returns {Promise<OAuth2TrustedJwtIssuerExportInterface>} export data\n */\nexport async function exportOAuth2TrustedJwtIssuer({\n  issuerId,\n  state,\n}: {\n  issuerId: string;\n  state: State;\n}): Promise<OAuth2TrustedJwtIssuerExportInterface> {\n  try {\n    debugMessage({\n      message: `OAuth2TrustedJwtIssuerOps.exportOAuth2TrustedJwtIssuer: start`,\n      state,\n    });\n    const exportData = createOAuth2TrustedJwtIssuerExportTemplate({ state });\n    const issuerData = await readOAuth2TrustedJwtIssuer({ issuerId, state });\n    exportData.trustedJwtIssuer[issuerData._id] = issuerData;\n    debugMessage({\n      message: `OAuth2TrustedJwtIssuerOps.exportOAuth2TrustedJwtIssuer: end`,\n      state,\n    });\n    return exportData;\n  } catch (error) {\n    throw new FrodoError(`Error exporting trusted issuer ${issuerId}`, error);\n  }\n}\n\n/**\n * Import OAuth2 Client by ID\n * @param {string} issuerId trusted jwt issuer id\n * @param {OAuth2TrustedJwtIssuerExportInterface} importData import data\n * @param {OAuth2TrustedJwtIssuerImportOptions} options import options\n * @returns {Promise<OAuth2TrustedJwtIssuerSkeleton>} a promise resolving to an oauth2 trusted jwt issuer\n */\nexport async function importOAuth2TrustedJwtIssuer({\n  issuerId,\n  importData,\n  state,\n}: {\n  issuerId: string;\n  importData: OAuth2TrustedJwtIssuerExportInterface;\n  state: State;\n}): Promise<OAuth2TrustedJwtIssuerSkeleton> {\n  let response = null;\n  const errors = [];\n  const imported = [];\n  for (const id of Object.keys(importData.trustedJwtIssuer)) {\n    if (id === issuerId) {\n      try {\n        const issuerData = importData.trustedJwtIssuer[id];\n        delete issuerData._provider;\n        delete issuerData._rev;\n        response = await updateOAuth2TrustedJwtIssuer({\n          issuerId: id,\n          issuerData,\n          state,\n        });\n        imported.push(id);\n      } catch (error) {\n        errors.push(error);\n      }\n    }\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(`Error importing trusted issuer ${issuerId}`, errors);\n  }\n  if (0 === imported.length) {\n    throw new FrodoError(\n      `Trusted issuer ${issuerId} not found in import data!`\n    );\n  }\n  return response;\n}\n\n/**\n * Import first OAuth2 Client\n * @param {OAuth2TrustedJwtIssuerExportInterface} importData import data\n * @param {OAuth2TrustedJwtIssuerImportOptions} options import options\n * @returns {Promise<OAuth2TrustedJwtIssuerSkeleton>} a promise resolving to an oauth2 trusted jwt issuer\n */\nexport async function importFirstOAuth2TrustedJwtIssuer({\n  importData,\n  state,\n}: {\n  importData: OAuth2TrustedJwtIssuerExportInterface;\n  state: State;\n}): Promise<OAuth2TrustedJwtIssuerSkeleton> {\n  let response = null;\n  const errors = [];\n  const imported = [];\n  for (const id of Object.keys(importData.trustedJwtIssuer)) {\n    try {\n      const issuerData = importData.trustedJwtIssuer[id];\n      delete issuerData._provider;\n      delete issuerData._rev;\n      response = await updateOAuth2TrustedJwtIssuer({\n        issuerId: id,\n        issuerData,\n        state,\n      });\n      imported.push(id);\n    } catch (error) {\n      errors.push(error);\n    }\n    break;\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(`Error importing first trusted issuer`, errors);\n  }\n  if (0 === imported.length) {\n    throw new FrodoError(`No trusted issuers found in import data!`);\n  }\n  return response;\n}\n\n/**\n * Import OAuth2 Clients\n * @param {OAuth2TrustedJwtIssuerExportInterface} importData import data\n * @param {OAuth2TrustedJwtIssuerImportOptions} options import options\n * @returns {Promise<OAuth2TrustedJwtIssuerSkeleton[]>} a promise resolving to an array of oauth2 trusted jwt issuers\n */\nexport async function importOAuth2TrustedJwtIssuers({\n  importData,\n  state,\n}: {\n  importData: OAuth2TrustedJwtIssuerExportInterface;\n  state: State;\n}): Promise<OAuth2TrustedJwtIssuerSkeleton[]> {\n  const response = [];\n  const errors = [];\n  for (const id of Object.keys(importData.trustedJwtIssuer)) {\n    try {\n      const issuerData = importData.trustedJwtIssuer[id];\n      delete issuerData._provider;\n      delete issuerData._rev;\n      response.push(\n        await updateOAuth2TrustedJwtIssuer({ issuerId: id, issuerData, state })\n      );\n    } catch (error) {\n      errors.push(error);\n    }\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(`Error importing trusted issuers`, errors);\n  }\n  return response;\n}\n","import util from 'util';\n\nimport { State } from '../shared/State';\nimport { getHostBaseUrl } from '../utils/ForgeRockUtils';\nimport { IdObjectSkeletonInterface, PagedResult } from './ApiTypes';\nimport { generateIdmApi } from './BaseApi';\n\nconst createManagedObjectURLTemplate = '%s/openidm/managed/%s?_action=create';\nconst managedObjectByIdURLTemplate = '%s/openidm/managed/%s/%s';\nconst queryAllManagedObjectURLTemplate = `%s/openidm/managed/%s?_queryFilter=true&_pageSize=%s`;\nconst queryManagedObjectURLTemplate = `%s/openidm/managed/%s?_queryFilter=%s&_pageSize=%s`;\n\nexport const DEFAULT_PAGE_SIZE: number = 1000;\n\n/**\n * See {@link https://backstage.forgerock.com/docs/idm/7/rest-api-reference/sec-about-crest.html#about-crest-patch}.\n */\nexport interface ManagedObjectPatchOperationInterface {\n  operation:\n    | 'add'\n    | 'copy'\n    | 'increment'\n    | 'move'\n    | 'remove'\n    | 'replace'\n    | 'transform';\n  field: string;\n  value?: any;\n  from?: string;\n}\n\n/**\n * Get managed object\n * @param {string} type managed object type, e.g. alpha_user or user\n * @param {string} id managed object id\n * @param {string[]} id array of fields to include\n * @param {State} state library state\n * @returns {Promise<IdObjectSkeletonInterface>} a promise that resolves to an ObjectSkeletonInterface\n */\nexport async function getManagedObject({\n  type,\n  id,\n  fields = ['*'],\n  state,\n}: {\n  type: string;\n  id: string;\n  fields: string[];\n  state: State;\n}): Promise<IdObjectSkeletonInterface> {\n  const fieldsParam = `_fields=${fields.join(',')}`;\n  const urlString = util.format(\n    `${managedObjectByIdURLTemplate}?${fieldsParam}`,\n    getHostBaseUrl(state.getHost()),\n    type,\n    id\n  );\n  const { data } = await generateIdmApi({ requestOverride: {}, state }).get(\n    urlString\n  );\n  return data as IdObjectSkeletonInterface;\n}\n\n/**\n * Create managed object with server-generated id\n * @param {string} moType managed object type\n * @param {IdObjectSkeletonInterface} moData managed object data\n * @param {State} state library state\n * @returns {Promise<IdObjectSkeletonInterface>} a promise that resolves to an object containing a managed object\n */\nexport async function createManagedObject({\n  moType,\n  moData,\n  state,\n}: {\n  moType: string;\n  moData: IdObjectSkeletonInterface;\n  state: State;\n}): Promise<IdObjectSkeletonInterface> {\n  const urlString = util.format(\n    createManagedObjectURLTemplate,\n    getHostBaseUrl(state.getHost()),\n    moType\n  );\n  const { data } = await generateIdmApi({ requestOverride: {}, state }).post(\n    urlString,\n    moData\n  );\n  return data;\n}\n\n/**\n * Create or update managed object\n * @param {string} id managed object id\n * @param {IdObjectSkeletonInterface} moData managed object\n * @param {boolean} failIfExists fail if exists\n * @param {State} state library state\n * @returns {Promise<IdObjectSkeletonInterface>} a promise that resolves to an object containing a managed object\n */\nexport async function putManagedObject({\n  type,\n  id,\n  moData,\n  failIfExists = false,\n  state,\n}: {\n  type: string;\n  id: string;\n  moData: IdObjectSkeletonInterface;\n  failIfExists?: boolean;\n  state: State;\n}): Promise<IdObjectSkeletonInterface> {\n  const urlString = util.format(\n    managedObjectByIdURLTemplate,\n    getHostBaseUrl(state.getHost()),\n    type,\n    id\n  );\n  const requestOverride = failIfExists\n    ? { headers: { 'If-None-Match': '*' } }\n    : {};\n  const { data } = await generateIdmApi({ requestOverride, state }).put(\n    urlString,\n    moData\n  );\n  return data;\n}\n\n/**\n * Partially update a managed object, with an array of operations.\n * @param {string} type managed object type\n * @param {string} id managed object id\n * @param {ManagedObjectPatchOperationInterface[]} operations array of operations\n * @param {string} rev revision\n * @param {State} state library state\n * @returns {Promise<IdObjectSkeletonInterface>} a promise that resolves to an object containing a managed object\n */\nexport async function patchManagedObject({\n  type,\n  id,\n  operations: operations,\n  rev = null,\n  state,\n}: {\n  type: string;\n  id: string;\n  operations: ManagedObjectPatchOperationInterface[];\n  rev?: string;\n  state: State;\n}): Promise<IdObjectSkeletonInterface> {\n  const urlString = util.format(\n    managedObjectByIdURLTemplate,\n    getHostBaseUrl(state.getHost()),\n    type,\n    id\n  );\n  const requestOverride = rev ? { headers: { 'If-Match': rev } } : {};\n  const { data } = await generateIdmApi({ requestOverride, state }).patch(\n    urlString,\n    operations\n  );\n  return data;\n}\n\n/**\n * Query managed object\n * @param {string} type managed object type, e.g. alpha_user or user\n * @param {string} filter CREST search filter\n * @param {string[]} id array of fields to include\n * @param {string} pageCookie paged results cookie\n * @param {State} state library state\n * @returns {Promise<IdObjectSkeletonInterface[]>} a promise that resolves to an ObjectSkeletonInterface\n */\nexport async function queryManagedObjects({\n  type,\n  filter,\n  fields = ['*'],\n  pageSize = DEFAULT_PAGE_SIZE,\n  pageCookie,\n  state,\n}: {\n  type: string;\n  filter: string;\n  fields?: string[];\n  pageSize?: number;\n  pageCookie?: string;\n  state: State;\n}): Promise<PagedResult<IdObjectSkeletonInterface>> {\n  const fieldsParam = `_fields=${fields.join(',')}`;\n  const urlString = util.format(\n    pageCookie\n      ? `${queryManagedObjectURLTemplate}&${fieldsParam}&_pagedResultsCookie=${encodeURIComponent(\n          pageCookie\n        )}`\n      : `${queryManagedObjectURLTemplate}&${fieldsParam}`,\n    getHostBaseUrl(state.getHost()),\n    type,\n    encodeURIComponent(filter),\n    pageSize\n  );\n  const { data } = await generateIdmApi({ requestOverride: {}, state }).get(\n    urlString\n  );\n  return data as PagedResult<IdObjectSkeletonInterface>;\n}\n\n/**\n * Query managed objects\n * @param {string} type managed object type\n * @param {string[]} fields fields to retrieve\n * @param {string} pageCookie paged results cookie\n * @returns {Promise<{result: any[]; resultCount: number; pagedResultsCookie: any; totalPagedResultsPolicy: string; totalPagedResults: number; remainingPagedResults: number;}>} a promise that resolves to managed objects of the desired type\n */\nexport async function queryAllManagedObjectsByType({\n  type,\n  fields = [],\n  pageSize = DEFAULT_PAGE_SIZE,\n  pageCookie = undefined,\n  state,\n}: {\n  type: string;\n  fields?: string[];\n  pageSize?: number;\n  pageCookie?: string;\n  state: State;\n}): Promise<PagedResult<IdObjectSkeletonInterface>> {\n  const fieldsParam =\n    fields.length > 0 ? `&_fields=${fields.join(',')}` : '&_fields=_id';\n  const urlTemplate = pageCookie\n    ? `${queryAllManagedObjectURLTemplate}${fieldsParam}&_pagedResultsCookie=${encodeURIComponent(\n        pageCookie\n      )}`\n    : `${queryAllManagedObjectURLTemplate}${fieldsParam}`;\n  const urlString = util.format(\n    urlTemplate,\n    getHostBaseUrl(state.getHost()),\n    type,\n    pageSize\n  );\n  const { data } = await generateIdmApi({ state }).get(urlString);\n  return data;\n}\n\n/**\n * Delete managed object\n * @param {string} id managed object id\n * @param {State} state library state\n * @returns {Promise<IdObjectSkeletonInterface>} a promise that resolves to an object containing a managed object\n */\nexport async function deleteManagedObject({\n  type,\n  id,\n  state,\n}: {\n  type: string;\n  id: string;\n  state: State;\n}): Promise<IdObjectSkeletonInterface> {\n  const urlString = util.format(\n    managedObjectByIdURLTemplate,\n    getHostBaseUrl(state.getHost()),\n    type,\n    id\n  );\n  const { data } = await generateIdmApi({ requestOverride: {}, state }).delete(\n    urlString\n  );\n  return data;\n}\n","import { IdObjectSkeletonInterface } from '../api/ApiTypes';\nimport { queryAllManagedObjectsByType } from '../api/ManagedObjectApi';\nimport Constants from '../shared/Constants';\nimport { State } from '../shared/State';\nimport { FrodoError } from './FrodoError';\n\nexport type Organization = {\n  /**\n   * Get organization managed object type\n   * @returns {string} organization managed object type in this realm\n   */\n  getRealmManagedOrganization(): string;\n  /**\n   * Read all organizations\n   * @returns {Promise<IdObjectSkeletonInterface[]>} promise resolving to an array of organization objects\n   */\n  readOrganizations(): Promise<IdObjectSkeletonInterface[]>;\n\n  // Deprecated\n\n  /**\n   * Get organizations\n   * @returns {Promise<IdObjectSkeletonInterface[]>} promise resolving to an array of organization objects\n   * @deprecated since v2.0.0 use {@link Organization.readOrganizations | readOrganizations} instead\n   * ```javascript\n   * readOrganizations(): Promise<IdObjectSkeletonInterface[]>\n   * ```\n   * @group Deprecated\n   */\n  getOrganizations(): Promise<IdObjectSkeletonInterface[]>;\n};\n\nexport default (state: State): Organization => {\n  return {\n    getRealmManagedOrganization(): string {\n      return getRealmManagedOrganization({ state });\n    },\n    async readOrganizations(): Promise<IdObjectSkeletonInterface[]> {\n      return readOrganizations({ state });\n    },\n\n    // Deprecated\n\n    async getOrganizations(): Promise<IdObjectSkeletonInterface[]> {\n      return readOrganizations({ state });\n    },\n  };\n};\n\n/**\n * Get organization managed object type\n * @returns {String} organization managed object type in this realm\n */\nexport function getRealmManagedOrganization({ state }: { state: State }) {\n  let realmManagedOrg = 'organization';\n  if (state.getDeploymentType() === Constants.CLOUD_DEPLOYMENT_TYPE_KEY) {\n    realmManagedOrg = `${state.getRealm()}_organization`;\n  }\n  return realmManagedOrg;\n}\n\n/**\n * Read all organizations\n * @returns {Promise<IdObjectSkeletonInterface[]>} promise resolving to an object containing an array of organization objects\n */\nexport async function readOrganizations({\n  state,\n}: {\n  state: State;\n}): Promise<IdObjectSkeletonInterface[]> {\n  let orgs = [];\n  const errors = [];\n  let result = {\n    result: [],\n    resultCount: 0,\n    pagedResultsCookie: null,\n    totalPagedResultsPolicy: 'NONE',\n    totalPagedResults: -1,\n    remainingPagedResults: -1,\n  };\n  do {\n    try {\n      result = await queryAllManagedObjectsByType({\n        type: getRealmManagedOrganization({ state }),\n        fields: ['name', 'parent/*/name', 'children/*/name', '*'],\n        pageCookie: result.pagedResultsCookie,\n        state,\n      });\n      orgs = orgs.concat(result.result);\n    } catch (error) {\n      errors.push(error);\n    }\n  } while (result.pagedResultsCookie);\n  if (errors.length > 0) {\n    throw new FrodoError(`Error reading organizations`, errors);\n  }\n  return orgs;\n}\n\n// unfinished work\nexport async function listOrganizationsTopDown({ state }: { state: State }) {\n  try {\n    const orgs = [];\n    let result = {\n      result: [],\n      resultCount: 0,\n      pagedResultsCookie: null,\n      totalPagedResultsPolicy: 'NONE',\n      totalPagedResults: -1,\n      remainingPagedResults: -1,\n    };\n    do {\n      result = await queryAllManagedObjectsByType({\n        type: getRealmManagedOrganization({ state }),\n        fields: ['name', 'parent/*/name', 'children/*/name'],\n        pageCookie: result.pagedResultsCookie,\n        state,\n      });\n      orgs.concat(result.result);\n    } while (result.pagedResultsCookie);\n    return orgs;\n  } catch (error) {\n    throw new FrodoError(`Error querying organizations`, error);\n  }\n}\n","{\n  \"frIndexedDate1\": {\n    \"description\": \"Generic Indexed Date 1\",\n    \"isPersonal\": false,\n    \"title\": \"Generic Indexed Date 1\",\n    \"type\": \"string\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frIndexedDate2\": {\n    \"description\": \"Generic Indexed Date 2\",\n    \"isPersonal\": false,\n    \"title\": \"Generic Indexed Date 2\",\n    \"type\": \"string\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frIndexedDate3\": {\n    \"description\": \"Generic Indexed Date 3\",\n    \"isPersonal\": false,\n    \"title\": \"Generic Indexed Date 3\",\n    \"type\": \"string\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frIndexedDate4\": {\n    \"description\": \"Generic Indexed Date 4\",\n    \"isPersonal\": false,\n    \"title\": \"Generic Indexed Date 4\",\n    \"type\": \"string\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frIndexedDate5\": {\n    \"description\": \"Generic Indexed Date 5\",\n    \"isPersonal\": false,\n    \"title\": \"Generic Indexed Date 5\",\n    \"type\": \"string\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frIndexedInteger1\": {\n    \"description\": \"Generic Indexed Integer 1\",\n    \"isPersonal\": false,\n    \"title\": \"Generic Indexed Integer 1\",\n    \"type\": \"number\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frIndexedInteger2\": {\n    \"description\": \"Generic Indexed Integer 2\",\n    \"isPersonal\": false,\n    \"title\": \"Generic Indexed Integer 2\",\n    \"type\": \"number\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frIndexedInteger3\": {\n    \"description\": \"Generic Indexed Integer 3\",\n    \"isPersonal\": false,\n    \"title\": \"Generic Indexed Integer 3\",\n    \"type\": \"number\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frIndexedInteger4\": {\n    \"description\": \"Generic Indexed Integer 4\",\n    \"isPersonal\": false,\n    \"title\": \"Generic Indexed Integer 4\",\n    \"type\": \"number\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frIndexedInteger5\": {\n    \"description\": \"Generic Indexed Integer 5\",\n    \"isPersonal\": false,\n    \"title\": \"Generic Indexed Integer 5\",\n    \"type\": \"number\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frIndexedMultivalued1\": {\n    \"description\": \"Generic Indexed Multivalue 1\",\n    \"isPersonal\": false,\n    \"items\": {\n      \"type\": \"string\"\n    },\n    \"title\": \"Generic Indexed Multivalue 1\",\n    \"type\": \"array\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frIndexedMultivalued2\": {\n    \"description\": \"Generic Indexed Multivalue 2\",\n    \"isPersonal\": false,\n    \"items\": {\n      \"type\": \"string\"\n    },\n    \"title\": \"Generic Indexed Multivalue 2\",\n    \"type\": \"array\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frIndexedMultivalued3\": {\n    \"description\": \"Generic Indexed Multivalue 3\",\n    \"isPersonal\": false,\n    \"items\": {\n      \"type\": \"string\"\n    },\n    \"title\": \"Generic Indexed Multivalue 3\",\n    \"type\": \"array\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frIndexedMultivalued4\": {\n    \"description\": \"Generic Indexed Multivalue 4\",\n    \"isPersonal\": false,\n    \"items\": {\n      \"type\": \"string\"\n    },\n    \"title\": \"Generic Indexed Multivalue 4\",\n    \"type\": \"array\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frIndexedMultivalued5\": {\n    \"description\": \"Generic Indexed Multivalue 5\",\n    \"isPersonal\": false,\n    \"items\": {\n      \"type\": \"string\"\n    },\n    \"title\": \"Generic Indexed Multivalue 5\",\n    \"type\": \"array\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frIndexedString1\": {\n    \"description\": \"Generic Indexed String 1\",\n    \"isPersonal\": false,\n    \"title\": \"Generic Indexed String 1\",\n    \"type\": \"string\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frIndexedString2\": {\n    \"description\": \"Generic Indexed String 2\",\n    \"isPersonal\": false,\n    \"title\": \"Generic Indexed String 2\",\n    \"type\": \"string\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frIndexedString3\": {\n    \"description\": \"Generic Indexed String 3\",\n    \"isPersonal\": false,\n    \"title\": \"Generic Indexed String 3\",\n    \"type\": \"string\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frIndexedString4\": {\n    \"description\": \"Generic Indexed String 4\",\n    \"isPersonal\": false,\n    \"title\": \"Generic Indexed String 4\",\n    \"type\": \"string\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frIndexedString5\": {\n    \"description\": \"Generic Indexed String 5\",\n    \"isPersonal\": false,\n    \"title\": \"Generic Indexed String 5\",\n    \"type\": \"string\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frUnindexedDate1\": {\n    \"description\": \"Generic Unindexed Date 1\",\n    \"isPersonal\": false,\n    \"title\": \"Generic Unindexed Date 1\",\n    \"type\": \"string\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frUnindexedDate2\": {\n    \"description\": \"Generic Unindexed Date 2\",\n    \"isPersonal\": false,\n    \"title\": \"Generic Unindexed Date 2\",\n    \"type\": \"string\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frUnindexedDate3\": {\n    \"description\": \"Generic Unindexed Date 3\",\n    \"isPersonal\": false,\n    \"title\": \"Generic Unindexed Date 3\",\n    \"type\": \"string\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frUnindexedDate4\": {\n    \"description\": \"Generic Unindexed Date 4\",\n    \"isPersonal\": false,\n    \"title\": \"Generic Unindexed Date 4\",\n    \"type\": \"string\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frUnindexedDate5\": {\n    \"description\": \"Generic Unindexed Date 5\",\n    \"isPersonal\": false,\n    \"title\": \"Generic Unindexed Date 5\",\n    \"type\": \"string\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frUnindexedInteger1\": {\n    \"description\": \"Generic Unindexed Integer 1\",\n    \"isPersonal\": false,\n    \"title\": \"Generic Unindexed Integer 1\",\n    \"type\": \"number\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frUnindexedInteger2\": {\n    \"description\": \"Generic Unindexed Integer 2\",\n    \"isPersonal\": false,\n    \"title\": \"Generic Unindexed Integer 2\",\n    \"type\": \"number\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frUnindexedInteger3\": {\n    \"description\": \"Generic Unindexed Integer 3\",\n    \"isPersonal\": false,\n    \"title\": \"Generic Unindexed Integer 3\",\n    \"type\": \"number\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frUnindexedInteger4\": {\n    \"description\": \"Generic Unindexed Integer 4\",\n    \"isPersonal\": false,\n    \"title\": \"Generic Unindexed Integer 4\",\n    \"type\": \"number\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frUnindexedInteger5\": {\n    \"description\": \"Generic Unindexed Integer 5\",\n    \"isPersonal\": false,\n    \"title\": \"Generic Unindexed Integer 5\",\n    \"type\": \"number\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frUnindexedMultivalued1\": {\n    \"description\": \"Generic Unindexed Multivalue 1\",\n    \"isPersonal\": false,\n    \"items\": {\n      \"type\": \"string\"\n    },\n    \"title\": \"Generic Unindexed Multivalue 1\",\n    \"type\": \"array\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frUnindexedMultivalued2\": {\n    \"description\": \"Generic Unindexed Multivalue 2\",\n    \"isPersonal\": false,\n    \"items\": {\n      \"type\": \"string\"\n    },\n    \"title\": \"Generic Unindexed Multivalue 2\",\n    \"type\": \"array\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frUnindexedMultivalued3\": {\n    \"description\": \"Generic Unindexed Multivalue 3\",\n    \"isPersonal\": false,\n    \"items\": {\n      \"type\": \"string\"\n    },\n    \"title\": \"Generic Unindexed Multivalue 3\",\n    \"type\": \"array\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frUnindexedMultivalued4\": {\n    \"description\": \"Generic Unindexed Multivalue 4\",\n    \"isPersonal\": false,\n    \"items\": {\n      \"type\": \"string\"\n    },\n    \"title\": \"Generic Unindexed Multivalue 4\",\n    \"type\": \"array\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frUnindexedMultivalued5\": {\n    \"description\": \"Generic Unindexed Multivalue 5\",\n    \"isPersonal\": false,\n    \"items\": {\n      \"type\": \"string\"\n    },\n    \"title\": \"Generic Unindexed Multivalue 5\",\n    \"type\": \"array\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frUnindexedString1\": {\n    \"description\": \"Generic Unindexed String 1\",\n    \"isPersonal\": false,\n    \"title\": \"Generic Unindexed String 1\",\n    \"type\": \"string\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frUnindexedString2\": {\n    \"description\": \"Generic Unindexed String 2\",\n    \"isPersonal\": false,\n    \"title\": \"Generic Unindexed String 2\",\n    \"type\": \"string\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frUnindexedString3\": {\n    \"description\": \"Generic Unindexed String 3\",\n    \"isPersonal\": false,\n    \"title\": \"Generic Unindexed String 3\",\n    \"type\": \"string\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frUnindexedString4\": {\n    \"description\": \"Generic Unindexed String 4\",\n    \"isPersonal\": false,\n    \"title\": \"Generic Unindexed String 4\",\n    \"type\": \"string\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  },\n  \"frUnindexedString5\": {\n    \"description\": \"Generic Unindexed String 5\",\n    \"isPersonal\": false,\n    \"title\": \"Generic Unindexed String 5\",\n    \"type\": \"string\",\n    \"usageDescription\": \"\",\n    \"userEditable\": true,\n    \"viewable\": true\n  }\n}\n","{\n  \"coreOAuth2ClientConfig\": {\n    \"userpassword\": null,\n    \"loopbackInterfaceRedirection\": {\n      \"inherited\": false,\n      \"value\": false\n    },\n    \"defaultScopes\": {\n      \"inherited\": false,\n      \"value\": []\n    },\n    \"refreshTokenLifetime\": {\n      \"inherited\": false,\n      \"value\": 604800\n    },\n    \"scopes\": {\n      \"inherited\": false,\n      \"value\": []\n    },\n    \"status\": {\n      \"inherited\": false,\n      \"value\": \"Active\"\n    },\n    \"accessTokenLifetime\": {\n      \"inherited\": false,\n      \"value\": 3600\n    },\n    \"redirectionUris\": {\n      \"inherited\": false,\n      \"value\": []\n    },\n    \"clientName\": {\n      \"inherited\": false,\n      \"value\": []\n    },\n    \"clientType\": {\n      \"inherited\": false,\n      \"value\": \"Confidential\"\n    },\n    \"authorizationCodeLifetime\": {\n      \"inherited\": false,\n      \"value\": 120\n    }\n  },\n  \"advancedOAuth2ClientConfig\": {\n    \"descriptions\": {\n      \"inherited\": false,\n      \"value\": []\n    },\n    \"requestUris\": {\n      \"inherited\": false,\n      \"value\": []\n    },\n    \"logoUri\": {\n      \"inherited\": false,\n      \"value\": []\n    },\n    \"subjectType\": {\n      \"inherited\": false,\n      \"value\": \"Public\"\n    },\n    \"clientUri\": {\n      \"inherited\": false,\n      \"value\": []\n    },\n    \"tokenExchangeAuthLevel\": {\n      \"inherited\": false,\n      \"value\": 0\n    },\n    \"name\": {\n      \"inherited\": false,\n      \"value\": []\n    },\n    \"contacts\": {\n      \"inherited\": false,\n      \"value\": []\n    },\n    \"responseTypes\": {\n      \"inherited\": false,\n      \"value\": [\"token\"]\n    },\n    \"updateAccessToken\": {\n      \"inherited\": false\n    },\n    \"mixUpMitigation\": {\n      \"inherited\": false,\n      \"value\": false\n    },\n    \"customProperties\": {\n      \"inherited\": false,\n      \"value\": []\n    },\n    \"javascriptOrigins\": {\n      \"inherited\": false,\n      \"value\": []\n    },\n    \"policyUri\": {\n      \"inherited\": false,\n      \"value\": []\n    },\n    \"softwareVersion\": {\n      \"inherited\": false\n    },\n    \"tosURI\": {\n      \"inherited\": false,\n      \"value\": []\n    },\n    \"sectorIdentifierUri\": {\n      \"inherited\": false\n    },\n    \"tokenEndpointAuthMethod\": {\n      \"inherited\": false,\n      \"value\": \"client_secret_basic\"\n    },\n    \"isConsentImplied\": {\n      \"inherited\": false,\n      \"value\": true\n    },\n    \"softwareIdentity\": {\n      \"inherited\": false\n    },\n    \"grantTypes\": {\n      \"inherited\": false,\n      \"value\": [\"client_credentials\"]\n    }\n  },\n  \"signEncOAuth2ClientConfig\": {\n    \"tokenEndpointAuthSigningAlgorithm\": {\n      \"inherited\": false,\n      \"value\": \"RS256\"\n    },\n    \"idTokenEncryptionEnabled\": {\n      \"inherited\": false,\n      \"value\": false\n    },\n    \"tokenIntrospectionEncryptedResponseEncryptionAlgorithm\": {\n      \"inherited\": false,\n      \"value\": \"A128CBC-HS256\"\n    },\n    \"requestParameterSignedAlg\": {\n      \"inherited\": false\n    },\n    \"clientJwtPublicKey\": {\n      \"inherited\": false\n    },\n    \"idTokenPublicEncryptionKey\": {\n      \"inherited\": false\n    },\n    \"mTLSSubjectDN\": {\n      \"inherited\": false\n    },\n    \"userinfoResponseFormat\": {\n      \"inherited\": false,\n      \"value\": \"JSON\"\n    },\n    \"mTLSCertificateBoundAccessTokens\": {\n      \"inherited\": false,\n      \"value\": false\n    },\n    \"publicKeyLocation\": {\n      \"inherited\": false,\n      \"value\": \"jwks_uri\"\n    },\n    \"tokenIntrospectionResponseFormat\": {\n      \"inherited\": false,\n      \"value\": \"JSON\"\n    },\n    \"jwkStoreCacheMissCacheTime\": {\n      \"inherited\": false,\n      \"value\": 60000\n    },\n    \"requestParameterEncryptedEncryptionAlgorithm\": {\n      \"inherited\": false,\n      \"value\": \"A128CBC-HS256\"\n    },\n    \"userinfoSignedResponseAlg\": {\n      \"inherited\": false\n    },\n    \"idTokenEncryptionAlgorithm\": {\n      \"inherited\": false,\n      \"value\": \"RSA-OAEP-256\"\n    },\n    \"requestParameterEncryptedAlg\": {\n      \"inherited\": false\n    },\n    \"mTLSTrustedCert\": {\n      \"inherited\": false\n    },\n    \"jwkSet\": {\n      \"inherited\": false\n    },\n    \"idTokenEncryptionMethod\": {\n      \"inherited\": false,\n      \"value\": \"A128CBC-HS256\"\n    },\n    \"jwksCacheTimeout\": {\n      \"inherited\": false,\n      \"value\": 3600000\n    },\n    \"userinfoEncryptedResponseAlg\": {\n      \"inherited\": false\n    },\n    \"idTokenSignedResponseAlg\": {\n      \"inherited\": false,\n      \"value\": \"RS256\"\n    },\n    \"jwksUri\": {\n      \"inherited\": false\n    },\n    \"tokenIntrospectionSignedResponseAlg\": {\n      \"inherited\": false,\n      \"value\": \"RS256\"\n    },\n    \"userinfoEncryptedResponseEncryptionAlgorithm\": {\n      \"inherited\": false,\n      \"value\": \"A128CBC-HS256\"\n    },\n    \"tokenIntrospectionEncryptedResponseAlg\": {\n      \"inherited\": false,\n      \"value\": \"RSA-OAEP-256\"\n    }\n  },\n  \"coreOpenIDClientConfig\": {\n    \"claims\": {\n      \"inherited\": false,\n      \"value\": []\n    },\n    \"clientSessionUri\": {\n      \"inherited\": false\n    },\n    \"backchannel_logout_uri\": {\n      \"inherited\": false\n    },\n    \"defaultAcrValues\": {\n      \"inherited\": false,\n      \"value\": []\n    },\n    \"jwtTokenLifetime\": {\n      \"inherited\": false,\n      \"value\": 3600\n    },\n    \"defaultMaxAgeEnabled\": {\n      \"inherited\": false,\n      \"value\": false\n    },\n    \"defaultMaxAge\": {\n      \"inherited\": false,\n      \"value\": 600\n    },\n    \"postLogoutRedirectUri\": {\n      \"inherited\": false,\n      \"value\": []\n    },\n    \"backchannel_logout_session_required\": {\n      \"inherited\": false,\n      \"value\": false\n    }\n  },\n  \"coreUmaClientConfig\": {\n    \"claimsRedirectionUris\": {\n      \"inherited\": false,\n      \"value\": []\n    }\n  },\n  \"_type\": {\n    \"_id\": \"OAuth2Client\",\n    \"name\": \"OAuth2 Clients\",\n    \"collection\": true\n  }\n}\n","{\n  \"allowedSubjects\": {\n    \"inherited\": false,\n    \"value\": []\n  },\n  \"jwksCacheTimeout\": {\n    \"inherited\": false,\n    \"value\": 3600000\n  },\n  \"jwkSet\": {\n    \"inherited\": false,\n    \"value\": \"\"\n  },\n  \"consentedScopesClaim\": {\n    \"inherited\": false,\n    \"value\": \"scope\"\n  },\n  \"issuer\": {\n    \"inherited\": false,\n    \"value\": \"\"\n  },\n  \"jwkStoreCacheMissCacheTime\": {\n    \"inherited\": false,\n    \"value\": 60000\n  },\n  \"resourceOwnerIdentityClaim\": {\n    \"inherited\": false,\n    \"value\": \"sub\"\n  },\n  \"jwksUri\": {\n    \"inherited\": false\n  },\n  \"_type\": {\n    \"_id\": \"TrustedJwtIssuer\",\n    \"name\": \"OAuth2 Trusted JWT Issuer\",\n    \"collection\": true\n  }\n}\n","import util from 'util';\n\nimport { State } from '../shared/State';\nimport { debugMessage } from '../utils/Console';\nimport { getCurrentRealmPath } from '../utils/ForgeRockUtils';\nimport { deleteDeepByKey } from '../utils/JsonUtils';\nimport { type IdObjectSkeletonInterface } from './ApiTypes';\nimport { generateAmApi } from './BaseApi';\nimport { type AmServiceType } from './ServiceApi';\n\nconst getAgentTypesURLTemplate =\n  '%s/json%s/realm-config/agents?_action=getAllTypes';\nconst getAllAgentsURLTemplate =\n  '%s/json%s/realm-config/agents?_action=nextdescendents';\nconst queryAgentURLTemplate =\n  \"%s/json%s/realm-config/agents?_queryFilter=_id+eq+'%s'\";\nconst queryAgentByTypeURLTemplate =\n  \"%s/json%s/realm-config/agents/%s?_queryFilter=_id+eq+'%s'\";\nconst agentURLTemplate = '%s/json%s/realm-config/agents/%s/%s';\nconst agentListURLTemplate =\n  '%s/json%s/realm-config/agents/%s?_queryFilter=true';\nconst apiVersion = 'protocol=2.1,resource=1.0';\nconst getApiConfig = () => {\n  return {\n    apiVersion,\n  };\n};\n\nexport type GatewayAgentType = 'IdentityGatewayAgent';\nexport type JavaAgentType = 'J2EEAgent';\nexport type WebAgentType = 'WebAgent';\nexport type AgentType = GatewayAgentType | JavaAgentType | WebAgentType;\n\nexport type AgentSkeleton = IdObjectSkeletonInterface & {\n  _type: AmServiceType;\n};\n\n/**\n * Get agent types\n * @returns {Promise} a promise that resolves to an object containing an array of agent types\n */\nexport async function getAgentTypes({ state }: { state: State }) {\n  debugMessage({ message: `AgentApi.getAgentTypes: start`, state });\n  const urlString = util.format(\n    getAgentTypesURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state)\n  );\n  const { data } = await generateAmApi({\n    resource: getApiConfig(),\n    state,\n  }).post(\n    urlString,\n    {},\n    {\n      withCredentials: true,\n    }\n  );\n  debugMessage({ message: `AgentApi.getAgentTypes: end`, state });\n  return data;\n}\n\n/**\n * Get agents\n * @param {string} agentType agent type (IdentityGatewayAgent, J2EEAgent, WebAgent)\n * @returns {Promise} a promise that resolves to an object containing an array of agent objects of the specified type\n */\nexport async function getAgentsByType({\n  agentType,\n  state,\n}: {\n  agentType: AgentType;\n  state: State;\n}) {\n  debugMessage({ message: `AgentApi.getAgentsByType: start`, state });\n  const urlString = util.format(\n    agentListURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    agentType\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get(\n    urlString,\n    {\n      withCredentials: true,\n    }\n  );\n  debugMessage({ message: `AgentApi.getAgentsByType: end`, state });\n  return data;\n}\n\n/**\n * Get all agents\n * @returns {Promise} a promise that resolves to an object containing an array of agent objects\n */\nexport async function getAgents({ state }: { state: State }) {\n  debugMessage({ message: `AgentApi.getAgents: start`, state });\n  const urlString = util.format(\n    getAllAgentsURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state)\n  );\n  const { data } = await generateAmApi({\n    resource: getApiConfig(),\n    state,\n  }).post(\n    urlString,\n    {},\n    {\n      withCredentials: true,\n    }\n  );\n  debugMessage({ message: `AgentApi.getAgents: end`, state });\n  return data;\n}\n\n/**\n * Find agent by id\n * @param {string} agentId agent id\n * @returns {Promise} a promise that resolves to an array with one or zero agent objects\n */\nexport async function findAgentById({\n  agentId,\n  state,\n}: {\n  agentId: string;\n  state: State;\n}) {\n  debugMessage({ message: `AgentApi.findAgentById: start`, state });\n  const urlString = util.format(\n    queryAgentURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    agentId\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get(\n    urlString,\n    {\n      withCredentials: true,\n    }\n  );\n  debugMessage({ message: `AgentApi.findAgentById: end`, state });\n  return data.result;\n}\n\n/**\n * Find agent by id\n * @param {string} agentType agent type (IdentityGatewayAgent, J2EEAgent, WebAgent)\n * @param {string} agentId agent id\n * @returns {Promise} a promise that resolves to an array with one or zero agent objects\n */\nexport async function findAgentByTypeAndId({\n  agentType,\n  agentId,\n  state,\n}: {\n  agentType: AgentType;\n  agentId: string;\n  state: State;\n}) {\n  debugMessage({ message: `AgentApi.findAgentById: start`, state });\n  const urlString = util.format(\n    queryAgentByTypeURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    agentType,\n    agentId\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get(\n    urlString,\n    {\n      withCredentials: true,\n    }\n  );\n  debugMessage({ message: `AgentApi.findAgentById: end`, state });\n  return data.result;\n}\n\n/**\n * Get agent\n * @param {string} agentType agent type (IdentityGatewayAgent, J2EEAgent, WebAgent)\n * @param {string} agentId agent id\n * @returns {Promise} a promise that resolves to an object containing an agent object of the specified type\n */\nexport async function getAgentByTypeAndId({\n  agentType,\n  agentId,\n  state,\n}: {\n  agentType: AgentType;\n  agentId: string;\n  state: State;\n}) {\n  debugMessage({ message: `AgentApi.getAgentByTypeAndId: start`, state });\n  const urlString = util.format(\n    agentURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    agentType,\n    agentId\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get(\n    urlString,\n    {\n      withCredentials: true,\n    }\n  );\n  debugMessage({ message: `AgentApi.getAgentByTypeAndId: end`, state });\n  return data;\n}\n\n/**\n * Put agent\n * @param {string} agentType agent type (IdentityGatewayAgent, J2EEAgent, WebAgent)\n * @param {string} agentId agent id\n * @param {Object} agentData agent object\n * @returns {Promise} a promise that resolves to an object containing an agent object\n */\nexport async function putAgentByTypeAndId({\n  agentType,\n  agentId,\n  agentData,\n  state,\n}: {\n  agentType: AgentType;\n  agentId: string;\n  agentData: AgentSkeleton;\n  state: State;\n}) {\n  debugMessage({ message: `AgentApi.putAgentByTypeAndId: start`, state });\n  // until we figure out a way to use transport keys in Frodo,\n  // we'll have to drop those encrypted attributes.\n  const agent = deleteDeepByKey(agentData, '-encrypted');\n  delete agent._provider;\n  delete agent._rev;\n  const urlString = util.format(\n    agentURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    agentType,\n    agentId\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).put(\n    urlString,\n    agent,\n    {\n      withCredentials: true,\n    }\n  );\n  debugMessage({ message: `AgentApi.putAgentByTypeAndId: end`, state });\n  return data;\n}\n\n/**\n * Delete agent\n * @param agentType agent type (IdentityGatewayAgent, J2EEAgent, WebAgent)\n * @param agentId agent id\n * @returns a promise that resolves to an object containing an agent object\n */\nexport async function deleteAgentByTypeAndId({\n  agentType,\n  agentId,\n  state,\n}: {\n  agentType: AgentType;\n  agentId: string;\n  state: State;\n}) {\n  debugMessage({ message: `AgentApi.deleteAgentByTypeAndId: start`, state });\n  const urlString = util.format(\n    agentURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    agentType,\n    agentId\n  );\n  const { data } = await generateAmApi({\n    resource: getApiConfig(),\n    state,\n  }).delete(urlString, {\n    withCredentials: true,\n  });\n  debugMessage({ message: `AgentApi.deleteAgentByTypeAndId: end`, state });\n  return data;\n}\n","import {\n  type AgentSkeleton,\n  type AgentType,\n  deleteAgentByTypeAndId,\n  findAgentById,\n  findAgentByTypeAndId,\n  getAgentByTypeAndId as _getAgentByTypeAndId,\n  getAgentsByType,\n  putAgentByTypeAndId,\n} from '../api/AgentApi';\nimport { State } from '../shared/State';\nimport {\n  createProgressIndicator,\n  debugMessage,\n  stopProgressIndicator,\n  updateProgressIndicator,\n} from '../utils/Console';\nimport { getMetadata } from '../utils/ExportImportUtils';\nimport { FrodoError } from './FrodoError';\nimport { type ExportMetaData } from './OpsTypes';\n\nexport type Agent = {\n  /**\n   * Create an empty agent export template\n   * @returns {AgentExportInterface} an empty agent export template\n   */\n  createAgentExportTemplate(): AgentExportInterface;\n  /**\n   * Read all agents.\n   * @returns {Promise<TreeSkeleton[]>} a promise that resolves to an array of agent objects\n   */\n  readAgents(): Promise<AgentSkeleton[]>;\n  /**\n   * Read agent\n   * @param {string} agentId agent id/name\n   * @returns {Promise<AgentSkeleton>} a promise that resolves to an agent object\n   */\n  readAgent(agentId: string): Promise<AgentSkeleton>;\n  /**\n   * Read agent by type and id\n   * @param {string} agentType agent type (IdentityGatewayAgent, J2EEAgent, WebAgent)\n   * @param {string} agentId agent id/name\n   * @returns {Promise<AgentSkeleton>} a promise that resolves to an agent object\n   */\n  readAgentByTypeAndId(\n    agentType: AgentType,\n    agentId: string\n  ): Promise<AgentSkeleton>;\n  /**\n   * Read identity gateway agents\n   * @returns {Promise<AgentSkeleton[]>} a promise that resolves to an array of IdentityGatewayAgent objects\n   */\n  readIdentityGatewayAgents(): Promise<AgentSkeleton[]>;\n  /**\n   * Read identity gateway agent\n   * @param {string} gatewayId gateway id\n   * @returns {Promise<AgentSkeleton>} a promise that resolves to an object containing an IdentityGatewayAgent object\n   */\n  readIdentityGatewayAgent(gatewayId: string): Promise<AgentSkeleton>;\n  /**\n   * Create identity gateway agent\n   * @param {string} gatewayId gateway id\n   * @param {AgentSkeleton} gatewayData IdentityGatewayAgent object\n   * @returns {Promise<AgentSkeleton>} a promise that resolves to an object containing an IdentityGatewayAgent object\n   */\n  createIdentityGatewayAgent(\n    gatewayId: string,\n    gatewayData: AgentSkeleton\n  ): Promise<AgentSkeleton>;\n  /**\n   * Update or create identity gateway agent\n   * @param {string} gatewayId gateway id\n   * @param {AgentSkeleton} gatewayData IdentityGatewayAgent object\n   * @returns {Promise<AgentSkeleton>} a promise that resolves to an object containing an IdentityGatewayAgent object\n   */\n  updateIdentityGatewayAgent(\n    gatewayId: string,\n    gatewayData: AgentSkeleton\n  ): Promise<AgentSkeleton>;\n  /**\n   * Read java agents\n   * @returns {Promise<AgentSkeleton[]>} a promise that resolves to an array of J2EEAgent objects\n   */\n  readJavaAgents(): Promise<AgentSkeleton[]>;\n  /**\n   * Read java agent\n   * @param {string} agentId java agent id\n   * @returns {Promise<AgentSkeleton>} a promise that resolves to an object containing an J2EEAgent object\n   */\n  readJavaAgent(agentId: string): Promise<AgentSkeleton>;\n  /**\n   * Put java agent\n   * @param {string} agentId java agent id\n   * @param {AgentSkeleton} agentData java agent object\n   * @returns {Promise<AgentSkeleton>} a promise that resolves to an object containing an java agent object\n   */\n  createJavaAgent(\n    agentId: string,\n    agentData: AgentSkeleton\n  ): Promise<AgentSkeleton>;\n  /**\n   * Put java agent\n   * @param {string} agentId java agent id\n   * @param {AgentSkeleton} agentData java agent object\n   * @returns {Promise<AgentSkeleton>} a promise that resolves to an object containing an java agent object\n   */\n  updateJavaAgent(\n    agentId: string,\n    agentData: AgentSkeleton\n  ): Promise<AgentSkeleton>;\n  /**\n   * Read web agents\n   * @returns {Promise<AgentSkeleton[]>} a promise that resolves to an array of WebAgent objects\n   */\n  readWebAgents(): Promise<AgentSkeleton[]>;\n  /**\n   * Read web agent\n   * @param {string} agentId web agent id\n   * @returns {Promise<AgentSkeleton>} a promise that resolves to an object containing an WebAgent object\n   */\n  readWebAgent(agentId: string): Promise<AgentSkeleton>;\n  /**\n   * Create web agent\n   * @param {string} agentId web agent id\n   * @param {AgentSkeleton} agentData WebAgent object\n   * @returns {Promise<AgentSkeleton>} a promise that resolves to an object containing an WebAgent object\n   */\n  createWebAgent(\n    agentId: string,\n    agentData: AgentSkeleton\n  ): Promise<AgentSkeleton>;\n  /**\n   * Update or create web agent\n   * @param {string} agentId web agent id\n   * @param {AgentSkeleton} agentData WebAgent object\n   * @returns {Promise<AgentSkeleton>} a promise that resolves to an object containing an WebAgent object\n   */\n  updateWebAgent(\n    agentId: string,\n    agentData: AgentSkeleton\n  ): Promise<AgentSkeleton>;\n  /**\n   * Export all agents. The response can be saved to file as is.\n   * @returns {Promise<AgentExportInterface>} Promise resolving to an AgentExportInterface object.\n   */\n  exportAgents(): Promise<AgentExportInterface>;\n  /**\n   * Export all identity gateway agents. The response can be saved to file as is.\n   * @returns {Promise<AgentExportInterface} Promise resolving to an AgentExportInterface object.\n   */\n  exportIdentityGatewayAgents(): Promise<AgentExportInterface>;\n  /**\n   * Export all java agents. The response can be saved to file as is.\n   * @returns {Promise<AgentExportInterface} Promise resolving to an AgentExportInterface object.\n   */\n  exportJavaAgents(): Promise<AgentExportInterface>;\n  /**\n   * Export all web agents. The response can be saved to file as is.\n   * @returns {Promise<AgentExportInterface} Promise resolving to an AgentExportInterface object.\n   */\n  exportWebAgents(): Promise<AgentExportInterface>;\n  /**\n   * Export agent. The response can be saved to file as is.\n   * @param agentId agent id/name\n   * @returns {Promise<AgentExportInterface} Promise resolving to an AgentExportInterface object.\n   */\n  exportAgent(agentId: string): Promise<AgentExportInterface>;\n  /**\n   * Export identity gateway agent. The response can be saved to file as is.\n   * @param agentId agent id/name\n   * @returns {Promise<AgentExportInterface} Promise resolving to an AgentExportInterface object.\n   */\n  exportIdentityGatewayAgent(agentId: string): Promise<AgentExportInterface>;\n  /**\n   * Export java agent. The response can be saved to file as is.\n   * @param agentId agent id/name\n   * @returns {Promise<AgentExportInterface} Promise resolving to an AgentExportInterface object.\n   */\n  exportJavaAgent(agentId: string): Promise<AgentExportInterface>;\n  /**\n   * Export web agent. The response can be saved to file as is.\n   * @param agentId agent id/name\n   * @returns {Promise<AgentExportInterface} Promise resolving to an AgentExportInterface object.\n   */\n  exportWebAgent(agentId: string): Promise<AgentExportInterface>;\n  /**\n   * Import agents. The import data is usually read from an agent export file.\n   * @param {AgentExportInterface} importData agent import data.\n   */\n  importAgents(importData: AgentExportInterface): Promise<void>;\n  /**\n   * Import identity gateway agents. The import data is usually read from an agent export file.\n   * @param {AgentExportInterface} importData agent import data.\n   */\n  importIdentityGatewayAgents(importData: AgentExportInterface): Promise<void>;\n  /**\n   * Import java agents. The import data is usually read from an agent export file.\n   * @param {AgentExportInterface} importData agent import data.\n   */\n  importJavaAgents(importData: AgentExportInterface): Promise<void>;\n  /**\n   * Import web agents. The import data is usually read from an agent export file.\n   * @param {AgentExportInterface} importData agent import data.\n   */\n  importWebAgents(importData: AgentExportInterface): Promise<void>;\n  /**\n   * Import agent. The import data is usually read from an agent export file.\n   * @param {string} agentId agent id/name\n   * @param {AgentExportInterface} importData agent import data.\n   * @returns {Promise} Promise resolving to an agent object.\n   */\n  importAgent(agentId: string, importData: AgentExportInterface): Promise<any>;\n  /**\n   * Import identity gateway agent. The import data is usually read from an agent export file.\n   * @param {string} agentId agent id/name\n   * @param {AgentExportInterface} importData agent import data.\n   * @returns {Promise} Promise resolving to an agent object.\n   */\n  importIdentityGatewayAgent(\n    agentId: string,\n    importData: AgentExportInterface\n  ): Promise<any>;\n  /**\n   * Import java agent. The import data is usually read from an agent export file.\n   * @param {string} agentId agent id/name\n   * @param {AgentExportInterface} importData agent import data.\n   * @returns {Promise} Promise resolving to an agent object.\n   */\n  importJavaAgent(\n    agentId: string,\n    importData: AgentExportInterface\n  ): Promise<any>;\n  /**\n   * Import java agent. The import data is usually read from an agent export file.\n   * @param {string} agentId agent id/name\n   * @param {AgentExportInterface} importData agent import data.\n   * @returns {Promise} Promise resolving to an agent object.\n   */\n  importWebAgent(\n    agentId: string,\n    importData: AgentExportInterface\n  ): Promise<any>;\n  /**\n   * Delete all agents\n   */\n  deleteAgents(): Promise<void>;\n  /**\n   * Delete agent\n   * @param agentId agent id/name\n   */\n  deleteAgent(agentId: string): Promise<void>;\n  /**\n   * Delete all identity gateway agents\n   */\n  deleteIdentityGatewayAgents(): Promise<void>;\n  /**\n   * Delete identity gateway agent\n   * @param agentId agent id/name\n   */\n  deleteIdentityGatewayAgent(agentId: string): Promise<void>;\n  /**\n   * Delete all java agents\n   */\n  deleteJavaAgents(): Promise<void>;\n  /**\n   * Delete java agent\n   * @param agentId agent id/name\n   */\n  deleteJavaAgent(agentId: string): Promise<void>;\n  /**\n   * Delete all web agents\n   */\n  deleteWebAgents(): Promise<void>;\n  /**\n   * Delete web agent\n   * @param agentId agent id/name\n   */\n  deleteWebAgent(agentId: string): Promise<void>;\n\n  // Deprecated\n\n  /**\n   * Get all agents.\n   * @returns {Promise<TreeSkeleton[]>} a promise that resolves to an array of agent objects\n   * @deprecated since v2.0.0 use {@link Agent.readAgents | readAgents} instead\n   * ```javascript\n   * readAgents(): Promise<AgentSkeleton[]>\n   * ```\n   * @group Deprecated\n   */\n  getAgents(): Promise<AgentSkeleton[]>;\n  /**\n   * Get agent\n   * @param {string} agentId agent id/name\n   * @returns {Promise<AgentSkeleton>} a promise that resolves to an agent object\n   * @deprecated since v2.0.0 use {@link Agent.readAgent | readAgent} instead\n   * ```javascript\n   * readAgent(agentId: string): Promise<AgentSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  getAgent(agentId: string): Promise<AgentSkeleton>;\n  /**\n   * Get agent by type and id\n   * @param {string} agentType agent type (IdentityGatewayAgent, J2EEAgent, WebAgent)\n   * @param {string} agentId agent id/name\n   * @returns {Promise<AgentSkeleton>} a promise that resolves to an agent object\n   * @deprecated since v2.0.0 use {@link Agent.readAgentByTypeAndId | readAgentByTypeAndId} instead\n   * ```javascript\n   * readAgentByTypeAndId(agentType: AgentType, agentId: string): Promise<AgentSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  getAgentByTypeAndId(\n    agentType: AgentType,\n    agentId: string\n  ): Promise<AgentSkeleton>;\n  /**\n   * Get identity gateway agents\n   * @returns {Promise<AgentSkeleton[]>} a promise that resolves to an array of IdentityGatewayAgent objects\n   * @deprecated since v2.0.0 use {@link Agent.readIdentityGatewayAgents | readIdentityGatewayAgents} instead\n   * ```javascript\n   * readIdentityGatewayAgents(): Promise<AgentSkeleton[]>\n   * ```\n   * @group Deprecated\n   */\n  getIdentityGatewayAgents(): Promise<AgentSkeleton[]>;\n  /**\n   * Get identity gateway agent\n   * @param {string} gatewayId gateway id\n   * @returns {Promise<AgentSkeleton>} a promise that resolves to an object containing an IdentityGatewayAgent object\n   * @deprecated since v2.0.0 use {@link Agent.readIdentityGatewayAgent | readIdentityGatewayAgent} instead\n   * ```javascript\n   * readIdentityGatewayAgent(gatewayId: string): Promise<AgentSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  getIdentityGatewayAgent(gatewayId: string): Promise<AgentSkeleton>;\n  /**\n   * Update or create identity gateway agent\n   * @param {string} gatewayId gateway id\n   * @param {AgentSkeleton} gatewayData IdentityGatewayAgent object\n   * @returns {Promise<AgentSkeleton>} a promise that resolves to an object containing an IdentityGatewayAgent object\n   * @deprecated since v2.0.0 use {@link Agent.updateIdentityGatewayAgent | updateIdentityGatewayAgent} or {@link Agent.createIdentityGatewayAgent | createIdentityGatewayAgent} instead\n   * ```javascript\n   * updateIdentityGatewayAgent(gatewayId: string, gatewayData: AgentSkeleton): Promise<AgentSkeleton>\n   * createIdentityGatewayAgent(gatewayId: string, gatewayData: AgentSkeleton): Promise<AgentSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  putIdentityGatewayAgent(\n    gatewayId: string,\n    gatewayData: AgentSkeleton\n  ): Promise<AgentSkeleton>;\n  /**\n   * Get java agents\n   * @returns {romise<AgentSkeleton[]>} a promise that resolves to an array of J2EEAgent objects\n   * @deprecated since v2.0.0 use {@link Agent.readJavaAgents | readJavaAgents} instead\n   * ```javascript\n   * readJavaAgents(): Promise<AgentSkeleton[]>\n   * ```\n   * @group Deprecated\n   */\n  getJavaAgents(): Promise<AgentSkeleton[]>;\n  /**\n   * Get java agent\n   * @param {string} agentId java agent id\n   * @returns {Promise<AgentSkeleton>} a promise that resolves to an object containing an J2EEAgent object\n   * @deprecated since v2.0.0 use {@link Agent.readJavaAgent | readJavaAgent} instead\n   * ```javascript\n   * readJavaAgent(agentId: string): Promise<AgentSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  getJavaAgent(agentId: string): Promise<AgentSkeleton>;\n  /**\n   * Update or create java agent\n   * @param {string} agentId java agent id\n   * @param {AgentSkeleton} agentData java agent object\n   * @returns {Promise<AgentSkeleton>} a promise that resolves to an object containing an java agent object\n   * @deprecated since v2.0.0 use {@link Agent.updateJavaAgent | updateJavaAgent} or {@link Agent.createJavaAgent | createJavaAgent} instead\n   * ```javascript\n   * updateJavaAgent(agentId: string, agentData: AgentSkeleton): Promise<AgentSkeleton>\n   * createJavaAgent(agentId: string, agentData: AgentSkeleton): Promise<AgentSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  putJavaAgent(\n    agentId: string,\n    agentData: AgentSkeleton\n  ): Promise<AgentSkeleton>;\n  /**\n   * Get web agents\n   * @returns {Promise<AgentSkeleton[]>} a promise that resolves to an array of WebAgent objects\n   * @deprecated since v2.0.0 use {@link Agent.readWebAgents | readWebAgents} instead\n   * ```javascript\n   * readWebAgents(): Promise<AgentSkeleton[]>\n   * ```\n   * @group Deprecated\n   */\n  getWebAgents(): Promise<AgentSkeleton[]>;\n  /**\n   * Get web agent\n   * @param {string} agentId web agent id\n   * @returns {Promise<AgentSkeleton>} a promise that resolves to an object containing an WebAgent object\n   * @deprecated since v2.0.0 use {@link Agent.readWebAgent | readWebAgent} instead\n   * ```javascript\n   * readWebAgent(agentId: string): Promise<AgentSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  getWebAgent(agentId: string): Promise<AgentSkeleton>;\n  /**\n   * Update or create web agent\n   * @param {string} agentId web agent id\n   * @param {AgentSkeleton} agentData WebAgent object\n   * @returns {Promise<AgentSkeleton>} a promise that resolves to an object containing an WebAgent object\n   * @deprecated since v2.0.0 use {@link Agent.updateWebAgent | updateWebAgent} or {@link Agent.createWebAgent | createWebAgent} instead\n   * ```javascript\n   * updateWebAgent(agentId: string, agentData: AgentSkeleton): Promise<AgentSkeleton>\n   * createWebAgent(agentId: string, agentData: AgentSkeleton): Promise<AgentSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  putWebAgent(\n    agentId: string,\n    agentData: AgentSkeleton\n  ): Promise<AgentSkeleton>;\n};\n\nexport default (state: State): Agent => {\n  return {\n    createAgentExportTemplate(): AgentExportInterface {\n      return createAgentExportTemplate({ state });\n    },\n    async readAgents(): Promise<AgentSkeleton[]> {\n      return readAgents({ state });\n    },\n    async readAgent(agentId: string): Promise<AgentSkeleton> {\n      return readAgent({ agentId, state });\n    },\n    async readAgentByTypeAndId(\n      agentType: AgentType,\n      agentId: string\n    ): Promise<AgentSkeleton> {\n      return readAgentByTypeAndId({ agentType, agentId, state });\n    },\n    async readIdentityGatewayAgents(): Promise<AgentSkeleton[]> {\n      return readIdentityGatewayAgents({ state });\n    },\n    async readIdentityGatewayAgent(gatewayId: string): Promise<AgentSkeleton> {\n      return readIdentityGatewayAgent({ gatewayId, state });\n    },\n    async createIdentityGatewayAgent(\n      gatewayId: string,\n      gatewayData: AgentSkeleton\n    ): Promise<AgentSkeleton> {\n      return createIdentityGatewayAgent({\n        gatewayId,\n        gatewayData,\n        state,\n      });\n    },\n    async updateIdentityGatewayAgent(\n      gatewayId: string,\n      gatewayData: AgentSkeleton\n    ): Promise<AgentSkeleton> {\n      return updateIdentityGatewayAgent({\n        gatewayId,\n        gatewayData,\n        state,\n      });\n    },\n    async readJavaAgents(): Promise<AgentSkeleton[]> {\n      return readJavaAgents({ state });\n    },\n    async readJavaAgent(agentId: string): Promise<AgentSkeleton> {\n      return readJavaAgent({ agentId, state });\n    },\n    async createJavaAgent(\n      agentId: string,\n      agentData: AgentSkeleton\n    ): Promise<AgentSkeleton> {\n      return createJavaAgent({ agentId, agentData, state });\n    },\n    async updateJavaAgent(\n      agentId: string,\n      agentData: AgentSkeleton\n    ): Promise<AgentSkeleton> {\n      return updateJavaAgent({ agentId, agentData, state });\n    },\n    async readWebAgents(): Promise<AgentSkeleton[]> {\n      return readWebAgents({ state });\n    },\n    async readWebAgent(agentId: string): Promise<AgentSkeleton> {\n      return readWebAgent({ agentId, state });\n    },\n    async createWebAgent(\n      agentId: string,\n      agentData: AgentSkeleton\n    ): Promise<AgentSkeleton> {\n      return createWebAgent({ agentId, agentData, state });\n    },\n    async updateWebAgent(\n      agentId: string,\n      agentData: AgentSkeleton\n    ): Promise<AgentSkeleton> {\n      return updateWebAgent({ agentId, agentData, state });\n    },\n    async exportAgents(): Promise<AgentExportInterface> {\n      return exportAgents({ state });\n    },\n    async exportIdentityGatewayAgents(): Promise<AgentExportInterface> {\n      return exportIdentityGatewayAgents({ state });\n    },\n    async exportJavaAgents(): Promise<AgentExportInterface> {\n      return exportJavaAgents({ state });\n    },\n    async exportWebAgents(): Promise<AgentExportInterface> {\n      return exportWebAgents({ state });\n    },\n    async exportAgent(agentId: string): Promise<AgentExportInterface> {\n      return exportAgent({ agentId, state });\n    },\n    async exportIdentityGatewayAgent(\n      agentId: string\n    ): Promise<AgentExportInterface> {\n      return exportIdentityGatewayAgent({ agentId, state });\n    },\n    async exportJavaAgent(agentId: string): Promise<AgentExportInterface> {\n      return exportJavaAgent({ agentId, state });\n    },\n    async exportWebAgent(agentId: string): Promise<AgentExportInterface> {\n      return exportWebAgent({ agentId, state });\n    },\n    async importAgents(importData: AgentExportInterface): Promise<void> {\n      return importAgents({ importData, state });\n    },\n    async importIdentityGatewayAgents(\n      importData: AgentExportInterface\n    ): Promise<void> {\n      return importIdentityGatewayAgents({ importData, state });\n    },\n    async importJavaAgents(importData: AgentExportInterface): Promise<void> {\n      return importJavaAgents({ importData, state });\n    },\n    async importWebAgents(importData: AgentExportInterface): Promise<void> {\n      return importWebAgents({ importData, state });\n    },\n    async importAgent(agentId: string, importData: AgentExportInterface) {\n      return importAgent({ agentId, importData, state });\n    },\n    async importIdentityGatewayAgent(\n      agentId: string,\n      importData: AgentExportInterface\n    ) {\n      return importIdentityGatewayAgent({\n        agentId,\n        importData,\n        state,\n      });\n    },\n    async importJavaAgent(agentId: string, importData: AgentExportInterface) {\n      return importJavaAgent({ agentId, importData, state });\n    },\n    async importWebAgent(agentId: string, importData: AgentExportInterface) {\n      return importWebAgent({ agentId, importData, state });\n    },\n    async deleteAgents() {\n      return deleteAgents({ state });\n    },\n    async deleteAgent(agentId: string) {\n      return deleteAgent({ agentId, state });\n    },\n    async deleteIdentityGatewayAgents() {\n      return deleteIdentityGatewayAgents({ state });\n    },\n    async deleteIdentityGatewayAgent(agentId: string) {\n      return deleteIdentityGatewayAgent({ agentId, state });\n    },\n    async deleteJavaAgents() {\n      return deleteJavaAgents({ state });\n    },\n    async deleteJavaAgent(agentId: string) {\n      return deleteJavaAgent({ agentId, state });\n    },\n    async deleteWebAgents() {\n      return deleteWebAgents({ state });\n    },\n    async deleteWebAgent(agentId: string) {\n      return deleteWebAgent({ agentId, state });\n    },\n\n    // Deprecated\n\n    async getAgents(): Promise<AgentSkeleton[]> {\n      return readAgents({ state });\n    },\n    async getAgent(agentId: string) {\n      return readAgent({ agentId, state });\n    },\n    async getAgentByTypeAndId(agentType: AgentType, agentId: string) {\n      return readAgentByTypeAndId({ agentType, agentId, state });\n    },\n    async getIdentityGatewayAgents() {\n      return readIdentityGatewayAgents({ state });\n    },\n    async getIdentityGatewayAgent(gatewayId: string) {\n      return readIdentityGatewayAgent({ gatewayId, state });\n    },\n    async putIdentityGatewayAgent(\n      gatewayId: string,\n      gatewayData: AgentSkeleton\n    ) {\n      return updateIdentityGatewayAgent({\n        gatewayId,\n        gatewayData,\n        state,\n      });\n    },\n    async getJavaAgents() {\n      return readJavaAgents({ state });\n    },\n    async getJavaAgent(agentId: string) {\n      return readJavaAgent({ agentId, state });\n    },\n    async putJavaAgent(\n      agentId: string,\n      agentData: AgentSkeleton\n    ): Promise<AgentSkeleton> {\n      return updateJavaAgent({ agentId, agentData, state });\n    },\n    async getWebAgents(): Promise<AgentSkeleton[]> {\n      return readWebAgents({ state });\n    },\n    async getWebAgent(agentId: string): Promise<AgentSkeleton> {\n      return readWebAgent({ agentId, state });\n    },\n    async putWebAgent(\n      agentId: string,\n      agentData: AgentSkeleton\n    ): Promise<AgentSkeleton> {\n      return updateWebAgent({ agentId, agentData, state });\n    },\n  };\n};\n\nexport interface AgentExportInterface {\n  meta?: ExportMetaData;\n  agents: Record<string, AgentSkeleton>;\n}\n\n/**\n * Create an empty agent export template\n * @returns {AgentExportInterface} an empty agent export template\n */\nexport function createAgentExportTemplate({\n  state,\n}: {\n  state: State;\n}): AgentExportInterface {\n  return {\n    meta: getMetadata({ state }),\n    agents: {},\n  } as AgentExportInterface;\n}\n\n/**\n * Get all agents. Results are sorted aphabetically.\n * @returns {Promise<TreeSkeleton[]>} a promise that resolves to an array of agent objects\n */\nexport async function readAgents({\n  state,\n}: {\n  state: State;\n}): Promise<AgentSkeleton[]> {\n  try {\n    debugMessage({ message: `AgentOps.readAgents: start`, state });\n    let agents = [];\n    const resolved = await Promise.all([\n      getAgentsByType({ agentType: 'IdentityGatewayAgent', state }),\n      getAgentsByType({ agentType: 'J2EEAgent', state }),\n      getAgentsByType({ agentType: 'WebAgent', state }),\n    ]);\n    agents = agents.concat(resolved[0].result);\n    agents = agents.concat(resolved[1].result);\n    agents = agents.concat(resolved[2].result);\n    agents.sort((a, b) => a._id.localeCompare(b._id));\n    debugMessage({ message: `AgentOps.readAgents: end`, state });\n    return agents;\n  } catch (error) {\n    throw new FrodoError(`Error reading agents`, error);\n  }\n}\n\n/**\n * Get agent\n * @param {string} agentId agent id/name\n * @returns {Promise<AgentSkeleton>} a promise that resolves to an agent object\n */\nexport async function readAgent({\n  agentId,\n  state,\n}: {\n  agentId: string;\n  state: State;\n}): Promise<AgentSkeleton> {\n  let agents = [];\n  try {\n    debugMessage({ message: `AgentOps.readAgent: start`, state });\n    agents = await findAgentById({ agentId, state });\n    if (agents.length === 1) {\n      const result = await _getAgentByTypeAndId({\n        agentType: agents[0]._type,\n        agentId: agents[0]._id,\n        state,\n      });\n      debugMessage({ message: `AgentOps.readAgent: end`, state });\n      return result;\n    }\n  } catch (error) {\n    throw new FrodoError(`Error reading agent ${agentId}`, error);\n  }\n  if (agents.length === 0) {\n    throw new FrodoError(`Agent '${agentId}' not found`);\n  } else {\n    throw new FrodoError(`${agents.length} agents '${agentId}' found`);\n  }\n}\n\n/**\n * Get agent by type and id\n * @param {AgentType} agentType agent type (IdentityGatewayAgent, J2EEAgent, WebAgent)\n * @param {string} agentId agent id/name\n * @returns {Promise<AgentSkeleton>} a promise that resolves to an agent object\n */\nexport async function readAgentByTypeAndId({\n  agentType,\n  agentId,\n  state,\n}: {\n  agentType: AgentType;\n  agentId: string;\n  state: State;\n}): Promise<AgentSkeleton> {\n  try {\n    debugMessage({ message: `AgentOps.readAgentByTypeAndId: start`, state });\n    const result = await _getAgentByTypeAndId({ agentType, agentId, state });\n    debugMessage({ message: `AgentOps.readAgentByTypeAndId: start`, state });\n    return result;\n  } catch (error) {\n    throw new FrodoError(\n      `Error reading agent ${agentId} of type ${agentType}`,\n      error\n    );\n  }\n}\n\n/**\n * Get identity gateway agents\n * @returns {: Promise<AgentSkeleton[]>} a promise that resolves to an array of IdentityGatewayAgent objects\n */\nexport async function readIdentityGatewayAgents({\n  state,\n}: {\n  state: State;\n}): Promise<AgentSkeleton[]> {\n  try {\n    debugMessage({\n      message: `AgentOps.readIdentityGatewayAgents: start`,\n      state,\n    });\n    const { result } = await getAgentsByType({\n      agentType: 'IdentityGatewayAgent',\n      state,\n    });\n    debugMessage({ message: `AgentOps.readIdentityGatewayAgents: end`, state });\n    return result;\n  } catch (error) {\n    throw new FrodoError(`Error reading identity gateway agents`, error);\n  }\n}\n\n/**\n * Get identity gateway agent\n * @param {string} gatewayId gateway id\n * @returns {Promise<AgentSkeleton>} a promise that resolves to an object containing an IdentityGatewayAgent object\n */\nexport async function readIdentityGatewayAgent({\n  gatewayId,\n  state,\n}: {\n  gatewayId: string;\n  state: State;\n}): Promise<AgentSkeleton> {\n  try {\n    debugMessage({\n      message: `AgentOps.readIdentityGatewayAgent: start`,\n      state,\n    });\n    const result = await readAgentByTypeAndId({\n      agentType: 'IdentityGatewayAgent',\n      agentId: gatewayId,\n      state,\n    });\n    debugMessage({ message: `AgentOps.readIdentityGatewayAgent: end`, state });\n    return result;\n  } catch (error) {\n    throw new FrodoError(\n      `Error reading identity gateway agent ${gatewayId}`,\n      error\n    );\n  }\n}\n\n/**\n * Create identity gateway agent\n * @param {string} gatewayId gateway id\n * @param {AgentSkeleton} gatewayData IdentityGatewayAgent object\n * @returns {Promise<AgentSkeleton>} a promise that resolves to an object containing an IdentityGatewayAgent object\n */\nexport async function createIdentityGatewayAgent({\n  gatewayId,\n  gatewayData,\n  state,\n}: {\n  gatewayId: string;\n  gatewayData: AgentSkeleton;\n  state: State;\n}): Promise<AgentSkeleton> {\n  debugMessage({\n    message: `AgentOps.createIdentityGatewayAgent: start`,\n    state,\n  });\n  try {\n    await readIdentityGatewayAgent({ gatewayId, state });\n    throw new FrodoError(`Agent ${gatewayId} already exists!`);\n  } catch (error) {\n    try {\n      const result = await putAgentByTypeAndId({\n        agentType: 'IdentityGatewayAgent',\n        agentId: gatewayId,\n        agentData: gatewayData,\n        state,\n      });\n      debugMessage({\n        message: `AgentOps.createIdentityGatewayAgent: end`,\n        state,\n      });\n      return result;\n    } catch (error) {\n      throw new FrodoError(\n        `Error creating identity gateway agent ${gatewayId}`,\n        error\n      );\n    }\n  }\n}\n\n/**\n * Update or create identity gateway agent\n * @param {string} gatewayId gateway id\n * @param {AgentSkeleton} gatewayData IdentityGatewayAgent object\n * @returns {Promise<AgentSkeleton>} a promise that resolves to an object containing an IdentityGatewayAgent object\n */\nexport async function updateIdentityGatewayAgent({\n  gatewayId,\n  gatewayData,\n  state,\n}: {\n  gatewayId: string;\n  gatewayData: AgentSkeleton;\n  state: State;\n}): Promise<AgentSkeleton> {\n  try {\n    debugMessage({\n      message: `AgentOps.updateIdentityGatewayAgent: start`,\n      state,\n    });\n    const result = await putAgentByTypeAndId({\n      agentType: 'IdentityGatewayAgent',\n      agentId: gatewayId,\n      agentData: gatewayData,\n      state,\n    });\n    debugMessage({\n      message: `AgentOps.updateIdentityGatewayAgent: end`,\n      state,\n    });\n    return result;\n  } catch (error) {\n    throw new FrodoError(\n      `Error updating identity gateway agent ${gatewayId}`,\n      error\n    );\n  }\n}\n\n/**\n * Get java agents\n * @returns {Promise<AgentSkeleton[]>} a promise that resolves to an array of J2EEAgent objects\n */\nexport async function readJavaAgents({\n  state,\n}: {\n  state: State;\n}): Promise<AgentSkeleton[]> {\n  try {\n    debugMessage({ message: `AgentOps.readJavaAgents: start`, state });\n    const { result } = await getAgentsByType({\n      agentType: 'J2EEAgent',\n      state,\n    });\n    debugMessage({ message: `AgentOps.readJavaAgents: end`, state });\n    return result;\n  } catch (error) {\n    throw new FrodoError(`Error reading java agents`, error);\n  }\n}\n\n/**\n * Get java agent\n * @param {string} agentId java agent id\n * @returns {Promise} a promise that resolves to an object containing an J2EEAgent object\n */\nexport async function readJavaAgent({\n  agentId,\n  state,\n}: {\n  agentId: string;\n  state: State;\n}): Promise<AgentSkeleton> {\n  try {\n    debugMessage({ message: `AgentOps.readJavaAgent: start`, state });\n    const result = await readAgentByTypeAndId({\n      agentType: 'J2EEAgent',\n      agentId,\n      state,\n    });\n    debugMessage({ message: `AgentOps.readJavaAgent: end`, state });\n    return result;\n  } catch (error) {\n    throw new FrodoError(`Error reading java agent ${agentId}`, error);\n  }\n}\n\n/**\n * Create java agent\n * @param {string} agentId java agent id\n * @param {Object} agentData java agent object\n * @returns {Promise} a promise that resolves to an object containing an java agent object\n */\nexport async function createJavaAgent({\n  agentId,\n  agentData,\n  state,\n}: {\n  agentId: string;\n  agentData: AgentSkeleton;\n  state: State;\n}): Promise<AgentSkeleton> {\n  debugMessage({ message: `AgentOps.createJavaAgent: start`, state });\n  try {\n    await readJavaAgent({ agentId, state });\n    throw new FrodoError(`Agent ${agentId} already exists!`);\n  } catch (error) {\n    try {\n      const result = await putAgentByTypeAndId({\n        agentType: 'J2EEAgent',\n        agentId,\n        agentData,\n        state,\n      });\n      debugMessage({\n        message: `AgentOps.createJavaAgent: end`,\n        state,\n      });\n      return result;\n    } catch (error) {\n      throw new FrodoError(`Error creating java agent ${agentId}`, error);\n    }\n  }\n}\n\n/**\n * Update or create java agent\n * @param {string} agentId java agent id\n * @param {Object} agentData java agent object\n * @returns {Promise} a promise that resolves to an object containing an java agent object\n */\nexport async function updateJavaAgent({\n  agentId,\n  agentData,\n  state,\n}: {\n  agentId: string;\n  agentData: AgentSkeleton;\n  state: State;\n}): Promise<AgentSkeleton> {\n  try {\n    debugMessage({ message: `AgentOps.updateJavaAgent: start`, state });\n    const result = await putAgentByTypeAndId({\n      agentType: 'J2EEAgent',\n      agentId,\n      agentData,\n      state,\n    });\n    debugMessage({ message: `AgentOps.updateJavaAgent: end`, state });\n    return result;\n  } catch (error) {\n    throw new FrodoError(`Error updating java agent ${agentId}`, error);\n  }\n}\n\n/**\n * Get web agents\n * @returns {Promise} a promise that resolves to an array of WebAgent objects\n */\nexport async function readWebAgents({ state }: { state: State }) {\n  try {\n    debugMessage({ message: `AgentOps.readWebAgents: start`, state });\n    const { result } = await getAgentsByType({\n      agentType: 'WebAgent',\n      state,\n    });\n    debugMessage({ message: `AgentOps.readWebAgents: end`, state });\n    return result;\n  } catch (error) {\n    throw new FrodoError(`Error reading web agents`, error);\n  }\n}\n\n/**\n * Get web agent\n * @param {string} agentId web agent id\n * @returns {Promise} a promise that resolves to an object containing an WebAgent object\n */\nexport async function readWebAgent({\n  agentId,\n  state,\n}: {\n  agentId: string;\n  state: State;\n}) {\n  try {\n    debugMessage({ message: `AgentOps.readWebAgent: start`, state });\n    const result = await readAgentByTypeAndId({\n      agentType: 'WebAgent',\n      agentId,\n      state,\n    });\n    debugMessage({ message: `AgentOps.readWebAgent: end`, state });\n    return result;\n  } catch (error) {\n    throw new FrodoError(`Error reading web agent ${agentId}`, error);\n  }\n}\n\n/**\n * Create web agent\n * @param {string} agentId java agent id\n * @param {Object} agentData java agent object\n * @returns {Promise} a promise that resolves to an object containing an java agent object\n */\nexport async function createWebAgent({\n  agentId,\n  agentData,\n  state,\n}: {\n  agentId: string;\n  agentData: AgentSkeleton;\n  state: State;\n}): Promise<AgentSkeleton> {\n  debugMessage({ message: `AgentOps.createWebAgent: start`, state });\n  try {\n    await readWebAgent({ agentId, state });\n    throw new FrodoError(`Agent ${agentId} already exists!`);\n  } catch (error) {\n    try {\n      const result = await putAgentByTypeAndId({\n        agentType: 'WebAgent',\n        agentId,\n        agentData,\n        state,\n      });\n      debugMessage({\n        message: `AgentOps.createWebAgent: end`,\n        state,\n      });\n      return result;\n    } catch (error) {\n      throw new FrodoError(`Error creating web agent ${agentId}`, error);\n    }\n  }\n}\n\n/**\n * Update or create web agent\n * @param {string} agentId web agent id\n * @param {Object} agentData WebAgent object\n * @returns {Promise} a promise that resolves to an object containing an WebAgent object\n */\nexport async function updateWebAgent({\n  agentId,\n  agentData,\n  state,\n}: {\n  agentId: string;\n  agentData: AgentSkeleton;\n  state: State;\n}) {\n  try {\n    debugMessage({ message: `AgentOps.updateWebAgent: start`, state });\n    const result = await putAgentByTypeAndId({\n      agentType: 'WebAgent',\n      agentId,\n      agentData,\n      state,\n    });\n    debugMessage({ message: `AgentOps.updateWebAgent: end`, state });\n    return result;\n  } catch (error) {\n    throw new FrodoError(`Error updating web agent ${agentId}`, error);\n  }\n}\n\n/**\n * Export all agents. The response can be saved to file as is.\n * @returns {Promise<AgentExportInterface>} Promise resolving to an AgentExportInterface object.\n */\nexport async function exportAgents({\n  state,\n}: {\n  state: State;\n}): Promise<AgentExportInterface> {\n  let indicatorId: string;\n  try {\n    debugMessage({ message: `AgentOps.exportAgents: start`, state });\n    const exportData = createAgentExportTemplate({ state });\n    const agents = await readAgents({ state });\n    indicatorId = createProgressIndicator({\n      total: agents.length,\n      message: 'Exporting agents...',\n      state,\n    });\n    for (const agent of agents) {\n      updateProgressIndicator({\n        id: indicatorId,\n        message: `Exporting agent ${agent._id}`,\n        state,\n      });\n      exportData.agents[agent._id] = agent;\n    }\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Exported ${agents.length} agents.`,\n      state,\n    });\n    debugMessage({ message: `AgentOps.exportAgents: end`, state });\n    return exportData;\n  } catch (error) {\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Error exporting agents`,\n      status: 'fail',\n      state,\n    });\n    throw new FrodoError(`Error exporting agents`, error);\n  }\n}\n\n/**\n * Export all identity gateway agents. The response can be saved to file as is.\n * @returns {Promise<AgentExportInterface} Promise resolving to an AgentExportInterface object.\n */\nexport async function exportIdentityGatewayAgents({\n  state,\n}: {\n  state: State;\n}): Promise<AgentExportInterface> {\n  let indicatorId: string;\n  try {\n    debugMessage({\n      message: `AgentOps.exportIdentityGatewayAgents: start`,\n      state,\n    });\n    const exportData = createAgentExportTemplate({ state });\n    const agents = await readIdentityGatewayAgents({ state });\n    indicatorId = createProgressIndicator({\n      total: agents.length,\n      message: 'Exporting IG agents...',\n      state,\n    });\n    for (const agent of agents) {\n      updateProgressIndicator({\n        id: indicatorId,\n        message: `Exporting IG agent ${agent._id}`,\n        state,\n      });\n      exportData.agents[agent._id] = agent;\n    }\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Exported ${agents.length} IG agents.`,\n      state,\n    });\n    debugMessage({\n      message: `AgentOps.exportIdentityGatewayAgents: end`,\n      state,\n    });\n    return exportData;\n  } catch (error) {\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Error exporting identity gateway agents`,\n      status: 'fail',\n      state,\n    });\n    throw new FrodoError(`Error exporting identity gateway agents`, error);\n  }\n}\n\n/**\n * Export all java agents. The response can be saved to file as is.\n * @returns {Promise<AgentExportInterface} Promise resolving to an AgentExportInterface object.\n */\nexport async function exportJavaAgents({\n  state,\n}: {\n  state: State;\n}): Promise<AgentExportInterface> {\n  let indicatorId: string;\n  try {\n    debugMessage({ message: `AgentOps.exportJavaAgents: start`, state });\n    const exportData = createAgentExportTemplate({ state });\n    const agents = await readJavaAgents({ state });\n    indicatorId = createProgressIndicator({\n      total: agents.length,\n      message: 'Exporting Java agents...',\n      state,\n    });\n    for (const agent of agents) {\n      updateProgressIndicator({\n        id: indicatorId,\n        message: `Exporting Java agent ${agent._id}`,\n        state,\n      });\n      exportData.agents[agent._id] = agent;\n    }\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Exported ${agents.length} Java agents.`,\n      state,\n    });\n    debugMessage({ message: `AgentOps.exportJavaAgents: end`, state });\n    return exportData;\n  } catch (error) {\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Error exporting java agents`,\n      status: 'fail',\n      state,\n    });\n    throw new FrodoError(`Error exporting java agents`, error);\n  }\n}\n\n/**\n * Export all web agents. The response can be saved to file as is.\n * @returns {Promise<AgentExportInterface} Promise resolving to an AgentExportInterface object.\n */\nexport async function exportWebAgents({\n  state,\n}: {\n  state: State;\n}): Promise<AgentExportInterface> {\n  let indicatorId: string;\n  try {\n    debugMessage({ message: `AgentOps.exportWebAgents: start`, state });\n    const exportData = createAgentExportTemplate({ state });\n    const agents = await readWebAgents({ state });\n    indicatorId = createProgressIndicator({\n      total: agents.length,\n      message: 'Exporting web agents...',\n      state,\n    });\n    for (const agent of agents) {\n      updateProgressIndicator({\n        id: indicatorId,\n        message: `Exporting web agent ${agent._id}`,\n        state,\n      });\n      exportData.agents[agent._id] = agent;\n    }\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Exported ${agents.length} web agents.`,\n      state,\n    });\n    debugMessage({ message: `AgentOps.exportWebAgents: end`, state });\n    return exportData;\n  } catch (error) {\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Error exporting web agents`,\n      status: 'fail',\n      state,\n    });\n    throw new FrodoError(`Error exporting web agents`, error);\n  }\n}\n\n/**\n * Export agent. The response can be saved to file as is.\n * @param agentId agent id/name\n * @returns {Promise<AgentExportInterface} Promise resolving to an AgentExportInterface object.\n */\nexport async function exportAgent({\n  agentId,\n  state,\n}: {\n  agentId: string;\n  state: State;\n}): Promise<AgentExportInterface> {\n  try {\n    debugMessage({ message: `AgentOps.exportAgent: start`, state });\n    const exportData = createAgentExportTemplate({ state });\n    const agentObject = await readAgent({ agentId, state });\n    exportData.agents[agentId] = agentObject;\n    debugMessage({ message: `AgentOps.exportAgent: end`, state });\n    return exportData;\n  } catch (error) {\n    throw new FrodoError(`Error exporting agent ${agentId}`, error);\n  }\n}\n\n/**\n * Export identity gateway agent. The response can be saved to file as is.\n * @param agentId agent id/name\n * @returns {Promise<AgentExportInterface} Promise resolving to an AgentExportInterface object.\n */\nexport async function exportIdentityGatewayAgent({\n  agentId,\n  state,\n}: {\n  agentId: string;\n  state: State;\n}): Promise<AgentExportInterface> {\n  try {\n    debugMessage({\n      message: `AgentOps.exportIdentityGatewayAgent: start`,\n      state,\n    });\n    const exportData = createAgentExportTemplate({ state });\n    const agentObject = await readIdentityGatewayAgent({\n      gatewayId: agentId,\n      state,\n    });\n    exportData.agents[agentId] = agentObject;\n    debugMessage({\n      message: `AgentOps.exportIdentityGatewayAgent: end`,\n      state,\n    });\n    return exportData;\n  } catch (error) {\n    throw new FrodoError(\n      `Error exporting identity gateway agent ${agentId}`,\n      error\n    );\n  }\n}\n\n/**\n * Export java agent. The response can be saved to file as is.\n * @param agentId agent id/name\n * @returns {Promise<AgentExportInterface} Promise resolving to an AgentExportInterface object.\n */\nexport async function exportJavaAgent({\n  agentId,\n  state,\n}: {\n  agentId: string;\n  state: State;\n}): Promise<AgentExportInterface> {\n  try {\n    debugMessage({ message: `AgentOps.exportJavaAgent: start`, state });\n    const exportData = createAgentExportTemplate({ state });\n    const agentObject = await readJavaAgent({ agentId, state });\n    exportData.agents[agentId] = agentObject;\n    debugMessage({ message: `AgentOps.exportJavaAgent: end`, state });\n    return exportData;\n  } catch (error) {\n    throw new FrodoError(`Error exporting java agent ${agentId}`, error);\n  }\n}\n\n/**\n * Export web agent. The response can be saved to file as is.\n * @param agentId agent id/name\n * @returns {Promise<AgentExportInterface} Promise resolving to an AgentExportInterface object.\n */\nexport async function exportWebAgent({\n  agentId,\n  state,\n}: {\n  agentId: string;\n  state: State;\n}): Promise<AgentExportInterface> {\n  try {\n    debugMessage({ message: `AgentOps.exportWebAgent: start`, state });\n    const exportData = createAgentExportTemplate({ state });\n    const agentObject = await readWebAgent({ agentId, state });\n    exportData.agents[agentId] = agentObject;\n    debugMessage({ message: `AgentOps.exportWebAgent: end`, state });\n    return exportData;\n  } catch (error) {\n    throw new FrodoError(`Error exporting web agent ${agentId}`, error);\n  }\n}\n\n/**\n * Import agents. The import data is usually read from an agent export file.\n * @param {AgentExportInterface} importData agent import data.\n */\nexport async function importAgents({\n  importData,\n  state,\n}: {\n  importData: AgentExportInterface;\n  state: State;\n}): Promise<void> {\n  const errors: Error[] = [];\n  try {\n    debugMessage({ message: `AgentOps.importAgents: start`, state });\n    for (const agentId of Object.keys(importData.agents)) {\n      let agentType: AgentType;\n      try {\n        agentType = importData.agents[agentId]._type._id as AgentType;\n        debugMessage({\n          message: `AgentOps.importAgents: ${agentId} [${agentType}]`,\n          state,\n        });\n        await putAgentByTypeAndId({\n          agentType,\n          agentId,\n          agentData: importData.agents[agentId],\n          state,\n        });\n      } catch (error) {\n        errors.push(\n          new FrodoError(\n            `Error importing agent ${agentId} of type ${agentType}`,\n            error\n          )\n        );\n      }\n    }\n    if (errors.length > 0) {\n      throw new FrodoError(`Error importing agents`, errors);\n    }\n    debugMessage({ message: `AgentOps.importAgents: end`, state });\n  } catch (error) {\n    // just re-throw previously caught errors\n    if (errors.length > 0) {\n      throw error;\n    }\n    throw new FrodoError(`Error importing agents`, error);\n  }\n}\n\n/**\n * Import identity gateway agents. The import data is usually read from an agent export file.\n * @param {AgentExportInterface} importData agent import data.\n */\nexport async function importIdentityGatewayAgents({\n  importData,\n  state,\n}: {\n  importData: AgentExportInterface;\n  state: State;\n}): Promise<void> {\n  const errors: Error[] = [];\n  try {\n    debugMessage({\n      message: `AgentOps.importIdentityGatewayAgents: start`,\n      state,\n    });\n    for (const agentId of Object.keys(importData.agents)) {\n      let agentType: AgentType;\n      try {\n        agentType = importData.agents[agentId]._type._id as AgentType;\n        if (agentType !== 'IdentityGatewayAgent')\n          throw new FrodoError(\n            `Wrong agent type! Expected 'IdentityGatewayAgent' but got '${agentType}'.`\n          );\n        await putAgentByTypeAndId({\n          agentType,\n          agentId,\n          agentData: importData.agents[agentId],\n          state,\n        });\n      } catch (error) {\n        errors.push(\n          new FrodoError(\n            `Error importing agent ${agentId} of type ${agentType}`,\n            error\n          )\n        );\n      }\n    }\n    if (errors.length > 0) {\n      throw new FrodoError(`Error importing identity gateway agents`, errors);\n    }\n    debugMessage({\n      message: `AgentOps.importIdentityGatewayAgents: end`,\n      state,\n    });\n  } catch (error) {\n    // just re-throw previously caught errors\n    if (errors.length > 0) {\n      throw error;\n    }\n    throw new FrodoError(`Error importing identity gateway agents`, error);\n  }\n}\n\n/**\n * Import java agents. The import data is usually read from an agent export file.\n * @param {AgentExportInterface} importData agent import data.\n */\nexport async function importJavaAgents({\n  importData,\n  state,\n}: {\n  importData: AgentExportInterface;\n  state: State;\n}): Promise<void> {\n  const errors: Error[] = [];\n  try {\n    debugMessage({ message: `AgentOps.importJavaAgents: start`, state });\n    for (const agentId of Object.keys(importData.agents)) {\n      let agentType: AgentType;\n      try {\n        agentType = importData.agents[agentId]._type._id as AgentType;\n        if (agentType !== 'J2EEAgent')\n          throw new FrodoError(\n            `Wrong agent type! Expected 'J2EEAgent' but got '${agentType}'.`\n          );\n        await putAgentByTypeAndId({\n          agentType,\n          agentId,\n          agentData: importData.agents[agentId],\n          state,\n        });\n      } catch (error) {\n        errors.push(\n          new FrodoError(\n            `Error importing agent ${agentId} of type ${agentType}`,\n            error\n          )\n        );\n      }\n    }\n    if (errors.length > 0) {\n      throw new FrodoError(`Error importing java agents`, errors);\n    }\n    debugMessage({ message: `AgentOps.importJavaAgents: end`, state });\n  } catch (error) {\n    // just re-throw previously caught errors\n    if (errors.length > 0) {\n      throw error;\n    }\n    throw new FrodoError(`Error importing java agents`, error);\n  }\n}\n\n/**\n * Import web agents. The import data is usually read from an agent export file.\n * @param {AgentExportInterface} importData agent import data.\n */\nexport async function importWebAgents({\n  importData,\n  state,\n}: {\n  importData: AgentExportInterface;\n  state: State;\n}): Promise<void> {\n  const errors: Error[] = [];\n  try {\n    debugMessage({ message: `AgentOps.importWebAgents: start`, state });\n    for (const agentId of Object.keys(importData.agents)) {\n      let agentType: AgentType;\n      try {\n        agentType = importData.agents[agentId]._type._id as AgentType;\n        if (agentType !== 'WebAgent')\n          throw new FrodoError(\n            `Wrong agent type! Expected 'WebAgent' but got '${agentType}'.`\n          );\n        await putAgentByTypeAndId({\n          agentType,\n          agentId,\n          agentData: importData.agents[agentId],\n          state,\n        });\n      } catch (error) {\n        errors.push(\n          new FrodoError(\n            `Error importing agent ${agentId} of type ${agentType}`,\n            error\n          )\n        );\n      }\n    }\n    if (errors.length > 0) {\n      throw new FrodoError(`Error importing web agents`, errors);\n    }\n    debugMessage({ message: `AgentOps.importWebAgents: end`, state });\n  } catch (error) {\n    // just re-throw previously caught errors\n    if (errors.length > 0) {\n      throw error;\n    }\n    throw new FrodoError(`Error importing web agents`, error);\n  }\n}\n\n/**\n * Import agent. The import data is usually read from an agent export file.\n * @param {string} agentId agent id/name\n * @param {AgentExportInterface} importData agent import data.\n * @returns {Promise} Promise resolving to an agent object.\n */\nexport async function importAgent({\n  agentId,\n  importData,\n  state,\n}: {\n  agentId: string;\n  importData: AgentExportInterface;\n  state: State;\n}) {\n  try {\n    debugMessage({ message: `AgentOps.importAgent: start`, state });\n    const agentType = importData.agents[agentId]?._type._id as AgentType;\n    const result = await putAgentByTypeAndId({\n      agentType,\n      agentId,\n      agentData: importData.agents[agentId],\n      state,\n    });\n    debugMessage({ message: `AgentOps.importAgent: end`, state });\n    return result;\n  } catch (error) {\n    throw new FrodoError(`Error importing agent ${agentId}`, error);\n  }\n}\n\n/**\n * Import identity gateway agent. The import data is usually read from an agent export file.\n * @param {string} agentId agent id/name\n * @param {AgentExportInterface} importData agent import data.\n * @returns {Promise} Promise resolving to an agent object.\n */\nexport async function importIdentityGatewayAgent({\n  agentId,\n  importData,\n  state,\n}: {\n  agentId: string;\n  importData: AgentExportInterface;\n  state: State;\n}) {\n  try {\n    debugMessage({\n      message: `AgentOps.importIdentityGatewayAgent: start`,\n      state,\n    });\n    const agentType = importData.agents[agentId]?._type._id as AgentType;\n    if (agentType !== 'IdentityGatewayAgent')\n      throw new FrodoError(\n        `Wrong agent type! Expected 'IdentityGatewayAgent' but got '${agentType}'.`\n      );\n    const result = await putAgentByTypeAndId({\n      agentType,\n      agentId,\n      agentData: importData.agents[agentId],\n      state,\n    });\n    debugMessage({\n      message: `AgentOps.importIdentityGatewayAgent: end`,\n      state,\n    });\n    return result;\n  } catch (error) {\n    throw new FrodoError(\n      `Error importing identity gateway agent ${agentId}`,\n      error\n    );\n  }\n}\n\n/**\n * Import java agent. The import data is usually read from an agent export file.\n * @param {string} agentId agent id/name\n * @param {AgentExportInterface} importData agent import data.\n * @returns {Promise} Promise resolving to an agent object.\n */\nexport async function importJavaAgent({\n  agentId,\n  importData,\n  state,\n}: {\n  agentId: string;\n  importData: AgentExportInterface;\n  state: State;\n}) {\n  try {\n    debugMessage({ message: `AgentOps.importJavaAgent: start`, state });\n    const agentType = importData.agents[agentId]?._type._id as AgentType;\n    if (agentType !== 'J2EEAgent')\n      throw new FrodoError(\n        `Wrong agent type! Expected 'J2EEAgent' but got '${agentType}'.`\n      );\n    const result = await putAgentByTypeAndId({\n      agentType,\n      agentId,\n      agentData: importData.agents[agentId],\n      state,\n    });\n    debugMessage({ message: `AgentOps.importJavaAgent: end`, state });\n    return result;\n  } catch (error) {\n    throw new FrodoError(`Error importing java agent ${agentId}`, error);\n  }\n}\n\n/**\n * Import java agent. The import data is usually read from an agent export file.\n * @param {string} agentId agent id/name\n * @param {AgentExportInterface} importData agent import data.\n * @returns {Promise} Promise resolving to an agent object.\n */\nexport async function importWebAgent({\n  agentId,\n  importData,\n  state,\n}: {\n  agentId: string;\n  importData: AgentExportInterface;\n  state: State;\n}) {\n  try {\n    debugMessage({ message: `AgentOps.importWebAgent: start`, state });\n    const agentType = importData.agents[agentId]?._type._id as AgentType;\n    if (agentType !== 'WebAgent')\n      throw new FrodoError(\n        `Wrong agent type! Expected 'WebAgent' but got '${agentType}'.`\n      );\n    const result = await putAgentByTypeAndId({\n      agentType,\n      agentId,\n      agentData: importData.agents[agentId],\n      state,\n    });\n    debugMessage({ message: `AgentOps.importWebAgent: end`, state });\n    return result;\n  } catch (error) {\n    throw new FrodoError(`Error importing web agent ${agentId}`, error);\n  }\n}\n\n/**\n * Delete all agents\n */\nexport async function deleteAgents({ state }: { state: State }) {\n  const errors: Error[] = [];\n  try {\n    debugMessage({ message: `AgentOps.deleteAgents: start`, state });\n    const agents = await readAgents({ state });\n    for (const agent of agents) {\n      try {\n        debugMessage({\n          message: `AgentOps.deleteAgents: '${agent['_id']}'`,\n          state,\n        });\n        await deleteAgentByTypeAndId({\n          agentType: agent['_type']['_id'] as AgentType,\n          agentId: agent['_id'],\n          state,\n        });\n      } catch (error) {\n        errors.push(\n          new FrodoError(\n            `Error deleting agent ${agent['_id']} of type ${agent['_type']['_id']}`,\n            error\n          )\n        );\n      }\n    }\n    if (errors.length > 0) {\n      throw new FrodoError(`Error deleting agents`, errors);\n    }\n    debugMessage({ message: `AgentOps.deleteAgents: end`, state });\n  } catch (error) {\n    // just re-throw previously caught errors\n    if (errors.length > 0) {\n      throw error;\n    }\n    throw new FrodoError(`Error deleting agents`, error);\n  }\n}\n\n/**\n * Delete all identity gateway agents\n */\nexport async function deleteIdentityGatewayAgents({ state }: { state: State }) {\n  const errors: Error[] = [];\n  try {\n    debugMessage({\n      message: `AgentOps.deleteIdentityGatewayAgents: start`,\n      state,\n    });\n    const agents = await readIdentityGatewayAgents({ state });\n    for (const agent of agents) {\n      try {\n        debugMessage({\n          message: `AgentOps.deleteIdentityGatewayAgent: '${agent['_id']}'`,\n          state,\n        });\n        await deleteAgentByTypeAndId({\n          agentType: agent['_type']['_id'] as AgentType,\n          agentId: agent['_id'],\n          state,\n        });\n      } catch (error) {\n        errors.push(\n          new FrodoError(\n            `Error deleting agent ${agent['_id']} of type ${agent['_type']['_id']}`,\n            error\n          )\n        );\n      }\n    }\n    if (errors.length > 0) {\n      throw new FrodoError(`Error deleting identity gateway agents`, errors);\n    }\n    debugMessage({\n      message: `AgentOps.deleteIdentityGatewayAgents: end`,\n      state,\n    });\n  } catch (error) {\n    // just re-throw previously caught errors\n    if (errors.length > 0) {\n      throw error;\n    }\n    throw new FrodoError(`Error deleting identity gateway agents`, error);\n  }\n}\n\n/**\n * Delete all java agents\n */\nexport async function deleteJavaAgents({ state }: { state: State }) {\n  const errors: Error[] = [];\n  try {\n    debugMessage({ message: `AgentOps.deleteJavaAgents: start`, state });\n    const agents = await readJavaAgents({ state });\n    for (const agent of agents) {\n      try {\n        debugMessage({\n          message: `AgentOps.deleteJavaAgent: '${agent['_id']}'`,\n          state,\n        });\n        await deleteAgentByTypeAndId({\n          agentType: agent['_type']['_id'] as AgentType,\n          agentId: agent['_id'],\n          state,\n        });\n      } catch (error) {\n        errors.push(\n          new FrodoError(\n            `Error deleting agent ${agent['_id']} of type ${agent['_type']['_id']}`,\n            error\n          )\n        );\n      }\n    }\n    if (errors.length > 0) {\n      throw new FrodoError(`Error deleting java agents`, errors);\n    }\n    debugMessage({ message: `AgentOps.deleteJavaAgents: end`, state });\n  } catch (error) {\n    // just re-throw previously caught errors\n    if (errors.length > 0) {\n      throw error;\n    }\n    throw new FrodoError(`Error deleting java agents`, error);\n  }\n}\n\n/**\n * Delete all web agents\n */\nexport async function deleteWebAgents({ state }: { state: State }) {\n  const errors: Error[] = [];\n  try {\n    debugMessage({ message: `AgentOps.deleteWebAgents: start`, state });\n    const agents = await readWebAgents({ state });\n    for (const agent of agents) {\n      try {\n        debugMessage({\n          message: `AgentOps.deleteWebAgent: '${agent['_id']}'`,\n          state,\n        });\n        await deleteAgentByTypeAndId({\n          agentType: agent['_type']['_id'],\n          agentId: agent['_id'],\n          state,\n        });\n      } catch (error) {\n        errors.push(\n          new FrodoError(\n            `Error deleting agent ${agent['_id']} of type ${agent['_type']['_id']}`,\n            error\n          )\n        );\n      }\n    }\n    if (errors.length > 0) {\n      throw new FrodoError(`Error deleting web agents`, errors);\n    }\n    debugMessage({ message: `AgentOps.deleteWebAgents: end`, state });\n  } catch (error) {\n    // just re-throw previously caught errors\n    if (errors.length > 0) {\n      throw error;\n    }\n    throw new FrodoError(`Error deleting web agents`, error);\n  }\n}\n\n/**\n * Delete agent\n * @param agentId agent id/name\n */\nexport async function deleteAgent({\n  agentId,\n  state,\n}: {\n  agentId: string;\n  state: State;\n}) {\n  try {\n    debugMessage({ message: `AgentOps.deleteAgent: start`, state });\n    const agents = await findAgentById({ agentId, state });\n    if (agents.length == 0) {\n      throw new FrodoError(`Agent '${agentId}' not found!`);\n    }\n    for (const agent of agents) {\n      debugMessage({\n        message: `AgentOps.deleteAgent: '${agent['_id']}'`,\n        state,\n      });\n      await deleteAgentByTypeAndId({\n        agentType: agent['_type'],\n        agentId: agent['_id'],\n        state,\n      });\n    }\n    debugMessage({ message: `AgentOps.deleteAgent: end`, state });\n  } catch (error) {\n    throw new FrodoError(`Error deleting agent ${agentId}`, error);\n  }\n}\n\n/**\n * Delete identity gateway agent\n * @param agentId agent id/name\n */\nexport async function deleteIdentityGatewayAgent({\n  agentId,\n  state,\n}: {\n  agentId: string;\n  state: State;\n}) {\n  try {\n    debugMessage({\n      message: `AgentOps.deleteIdentityGatewayAgent: start`,\n      state,\n    });\n    const agents = await findAgentByTypeAndId({\n      agentType: 'IdentityGatewayAgent',\n      agentId,\n      state,\n    });\n    if (agents.length == 0) {\n      throw new FrodoError(`Identity gateway agent '${agentId}' not found!`);\n    }\n    for (const agent of agents) {\n      debugMessage({\n        message: `AgentOps.deleteIdentityGatewayAgent: '${agent['_id']}'`,\n        state,\n      });\n      await deleteAgentByTypeAndId({\n        agentType: agent['_type']['_id'],\n        agentId: agent['_id'],\n        state,\n      });\n    }\n    debugMessage({\n      message: `AgentOps.deleteIdentityGatewayAgent: end`,\n      state,\n    });\n  } catch (error) {\n    throw new FrodoError(\n      `Error deleting identity gateway agent ${agentId}`,\n      error\n    );\n  }\n}\n\n/**\n * Delete java agent\n * @param agentId agent id/name\n */\nexport async function deleteJavaAgent({\n  agentId,\n  state,\n}: {\n  agentId: string;\n  state: State;\n}) {\n  try {\n    debugMessage({ message: `AgentOps.deleteJavaAgent: start`, state });\n    const agents = await findAgentByTypeAndId({\n      agentType: 'J2EEAgent',\n      agentId,\n      state,\n    });\n    if (agents.length == 0) {\n      throw new FrodoError(`Java agent '${agentId}' not found!`);\n    }\n    for (const agent of agents) {\n      debugMessage({\n        message: `AgentOps.deleteJavaAgent: '${agent['_id']}'`,\n        state,\n      });\n      await deleteAgentByTypeAndId({\n        agentType: agent['_type']['_id'],\n        agentId: agent['_id'],\n        state,\n      });\n    }\n    debugMessage({ message: `AgentOps.deleteJavaAgent: end`, state });\n  } catch (error) {\n    throw new FrodoError(`Error deleting java agent ${agentId}`, error);\n  }\n}\n\n/**\n * Delete web agent\n * @param agentId agent id/name\n */\nexport async function deleteWebAgent({\n  agentId,\n  state,\n}: {\n  agentId: string;\n  state: State;\n}) {\n  try {\n    debugMessage({ message: `AgentOps.deleteWebAgent: start`, state });\n    const agents = await findAgentByTypeAndId({\n      agentType: 'WebAgent',\n      agentId,\n      state,\n    });\n    if (agents.length == 0) {\n      throw new FrodoError(`Web agent '${agentId}' not found!`);\n    }\n    for (const agent of agents) {\n      debugMessage({\n        message: `AgentOps.deleteWebAgent: '${agent['_id']}'`,\n        state,\n      });\n      await deleteAgentByTypeAndId({\n        agentType: agent['_type']['_id'],\n        agentId: agent['_id'],\n        state,\n      });\n    }\n    debugMessage({ message: `AgentOps.deleteWebAgent: end`, state });\n  } catch (error) {\n    throw new FrodoError(`Error deleting web agent ${agentId}`, error);\n  }\n}\n","import util from 'util';\n\nimport { State } from '../shared/State';\nimport { getCurrentRealmPath } from '../utils/ForgeRockUtils';\nimport { cloneDeep } from '../utils/JsonUtils';\nimport { type IdObjectSkeletonInterface, type PagedResult } from './ApiTypes';\nimport { generateAmApi } from './BaseApi';\nimport { type AmServiceType } from './ServiceApi';\n\nconst circleOfTrustByIdURLTemplate =\n  '%s/json%s/realm-config/federation/circlesoftrust/%s';\nconst createCircleOfTrustURLTemplate =\n  '%s/json%s/realm-config/federation/circlesoftrust/?_action=create';\nconst queryAllCirclesOfTrustURLTemplate =\n  '%s/json%s/realm-config/federation/circlesoftrust?_queryFilter=true';\nconst apiVersion = 'protocol=2.1,resource=1.0';\nconst getApiConfig = () => {\n  return {\n    apiVersion,\n  };\n};\n\nexport type CircleOfTrustSkeleton = IdObjectSkeletonInterface & {\n  status?: string;\n  trustedProviders?: string[];\n  _type?: AmServiceType;\n};\n\n/**\n * Get all circles of trust\n * @returns {Promise<PagedResult<CircleOfTrustSkeleton>>} a promise that resolves to an array of circles of trust objects\n */\nexport async function getCirclesOfTrust({\n  state,\n}: {\n  state: State;\n}): Promise<PagedResult<CircleOfTrustSkeleton>> {\n  const urlString = util.format(\n    queryAllCirclesOfTrustURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state)\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get(\n    urlString,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Get circle of trust by id/name\n * @param {string} cotId circle of trust id/name\n * @returns {Promise<CircleOfTrustSkeleton>} a promise that resolves to a saml2 circle of trust object\n */\nexport async function getCircleOfTrust({\n  cotId,\n  state,\n}: {\n  cotId: string;\n  state: State;\n}): Promise<CircleOfTrustSkeleton> {\n  const urlString = util.format(\n    circleOfTrustByIdURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    cotId\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get(\n    urlString,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Create a circle of trust\n * @param {string} cotId circle of trust id/name\n * @param {CircleOfTrustSkeleton} cotData Object representing a SAML circle of trust\n * @returns {Promise<CircleOfTrustSkeleton>} a promise that resolves to a saml2 circle of trust object\n */\nexport async function createCircleOfTrust({\n  cotData,\n  state,\n}: {\n  cotData: CircleOfTrustSkeleton;\n  state: State;\n}): Promise<CircleOfTrustSkeleton> {\n  const postData = cloneDeep(cotData);\n  const urlString = util.format(\n    createCircleOfTrustURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state)\n  );\n  const { data } = await generateAmApi({\n    resource: getApiConfig(),\n    state,\n  }).post(urlString, postData, {\n    withCredentials: true,\n  });\n  return data;\n}\n\n/**\n * Update circle of trust\n * @param {string} cotId circle of trust id/name\n * @param {CircleOfTrustSkeleton} cotData Object representing a circle of trust\n * @returns {Promise<CircleOfTrustSkeleton>} a promise that resolves to a saml2 circle of trust object\n */\nexport async function updateCircleOfTrust({\n  cotId,\n  cotData,\n  state,\n}: {\n  cotId: string;\n  cotData: CircleOfTrustSkeleton;\n  state: State;\n}): Promise<CircleOfTrustSkeleton> {\n  // delete cotData._id;\n  delete cotData._rev;\n  const urlString = util.format(\n    circleOfTrustByIdURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    cotId\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).put(\n    urlString,\n    cotData,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Delete circle of trust\n * @param {string} realmId realm id\n * @returns {Promise<CircleOfTrustSkeleton>} a promise that resolves to an object containing a realm object\n */\nexport async function deleteCircleOfTrust({\n  cotId,\n  state,\n}: {\n  cotId: string;\n  state: State;\n}): Promise<CircleOfTrustSkeleton> {\n  const urlString = util.format(\n    circleOfTrustByIdURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    cotId\n  );\n  const { data } = await generateAmApi({\n    resource: getApiConfig(),\n    state,\n  }).delete(urlString, {\n    withCredentials: true,\n  });\n  return data;\n}\n","import util from 'util';\n\nimport { State } from '../shared/State';\nimport { getCurrentRealmPath } from '../utils/ForgeRockUtils';\nimport { cloneDeep } from '../utils/JsonUtils';\nimport { IdObjectSkeletonInterface, PagedResult } from './ApiTypes';\nimport { generateAmApi } from './BaseApi';\n\nconst providerByLocationAndIdURLTemplate = '%s/json%s/realm-config/saml2/%s/%s';\nconst createHostedProviderURLTemplate =\n  '%s/json%s/realm-config/saml2/hosted/?_action=create';\nconst createRemoteProviderURLTemplate =\n  '%s/json%s/realm-config/saml2/remote/?_action=importEntity';\nconst queryAllProvidersURLTemplate =\n  '%s/json%s/realm-config/saml2?_queryFilter=true';\nconst queryProvidersByEntityIdURLTemplate =\n  '%s/json%s/realm-config/saml2?_queryFilter=%s&_fields=%s';\nconst metadataByEntityIdURLTemplate =\n  '%s/saml2/jsp/exportmetadata.jsp?entityid=%s&realm=%s';\nconst apiVersion = 'protocol=2.1,resource=1.0';\nconst getApiConfig = () => {\n  return {\n    apiVersion,\n  };\n};\n\nexport type Saml2ProiderLocation = 'hosted' | 'remote';\n\nexport type Saml2ProviderStub = IdObjectSkeletonInterface & {\n  entityId: string;\n  location: Saml2ProiderLocation;\n  roles: string[];\n};\n\nexport type Saml2ProviderSkeleton = IdObjectSkeletonInterface & {\n  entityId: string;\n  entityLocation: Saml2ProiderLocation;\n  serviceProvider: unknown;\n  identityProvider: {\n    assertionProcessing?: {\n      attributeMapper?: {\n        attributeMapperScript?: string;\n      };\n    };\n    advanced?: {\n      idpAdapter?: {\n        idpAdapterScript?: string;\n      };\n    };\n  };\n  attributeQueryProvider: unknown;\n  xacmlPolicyEnforcementPoint: unknown;\n};\n\n/**\n * Get all SAML2 entity providers\n * @returns {Promise<PagedResult<Saml2ProviderStub>>} a promise that resolves to an array of saml2 entity stubs\n */\nexport async function getProviderStubs({\n  state,\n}: {\n  state: State;\n}): Promise<PagedResult<Saml2ProviderStub>> {\n  const urlString = util.format(\n    queryAllProvidersURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state)\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get(\n    urlString,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Query providers matching the filter and return the requested fields\n * @param {string} filter CREST filter string, eg \"entityId+eq+'${entityId}'\" or \"true\" for all providers\n * @param {string[]} fields array of field names to include in the response\n * @returns {Promise<PagedResult<Saml2ProviderStub>>} a promise that resolves to an object containing an array of saml2 entities\n */\nexport async function queryProviderStubs({\n  filter = 'true',\n  fields = ['*'],\n  state,\n}: {\n  filter?: string;\n  fields?: string[];\n  state: State;\n}): Promise<PagedResult<Saml2ProviderStub>> {\n  const urlString = util.format(\n    queryProvidersByEntityIdURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    encodeURIComponent(filter),\n    fields.join(',')\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get(\n    urlString,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Geta SAML2 entity provider by location and id\n * @param {Saml2ProiderLocation} location Entity provider location\n * @param {string} entityId64 Base64-encoded, unpadded provider entity id\n * @returns {Promise<Saml2ProviderSkeleton>} a promise that resolves to a saml2 entity provider object\n */\nexport async function getProvider({\n  location,\n  entityId64,\n  state,\n}: {\n  location: Saml2ProiderLocation;\n  entityId64: string;\n  state: State;\n}): Promise<Saml2ProviderSkeleton> {\n  const urlString = util.format(\n    providerByLocationAndIdURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    location,\n    entityId64\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get(\n    urlString,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Geta SAML2 entity provider by location and id\n * @param {Saml2ProiderLocation} location Entity provider location (hosted or remote)\n * @param {string} entityId64 Base64-encoded provider entity id\n * @returns {Promise<Saml2ProviderSkeleton>} a promise that resolves to a saml2 entity provider object\n */\nexport async function deleteProvider({\n  location,\n  entityId64,\n  state,\n}: {\n  location: Saml2ProiderLocation;\n  entityId64: string;\n  state: State;\n}): Promise<Saml2ProviderSkeleton> {\n  const urlString = util.format(\n    providerByLocationAndIdURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    location,\n    entityId64\n  );\n  const { data } = await generateAmApi({\n    resource: getApiConfig(),\n    state,\n  }).delete(urlString, {\n    withCredentials: true,\n  });\n  return data;\n}\n\n/**\n * Get a SAML2 entity provider's metadata URL by entity id\n * @param {string} entityId SAML2 entity id\n * @returns {string} the URL to get the metadata from\n */\nexport function getProviderMetadataUrl({\n  entityId,\n  state,\n}: {\n  entityId: string;\n  state: State;\n}): string {\n  return util.format(\n    metadataByEntityIdURLTemplate,\n    state.getHost(),\n    encodeURIComponent(entityId),\n    state.getRealm()\n  );\n}\n\n/**\n * Get a SAML2 entity provider's metadata by entity id\n * @param {string} entityId SAML2 entity id\n * @returns {Promise<string>} a promise that resolves to an object containing a SAML2 metadata\n */\nexport async function getProviderMetadata({\n  entityId,\n  state,\n}: {\n  entityId: string;\n  state: State;\n}): Promise<string> {\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get(\n    getProviderMetadataUrl({ entityId, state }),\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Create a SAML2 entity provider\n * @param {Saml2ProiderLocation} location 'hosted' or 'remote'\n * @param {Saml2ProviderSkeleton} providerData Object representing a SAML entity provider\n * @param {string} metaData Base64-encoded metadata XML. Only required for remote providers\n * @returns {Promise<Saml2ProviderSkeleton>} a promise that resolves to a saml2 entity provider object\n */\nexport async function createProvider({\n  location,\n  providerData,\n  metaData,\n  state,\n}: {\n  location: Saml2ProiderLocation;\n  providerData: Saml2ProviderSkeleton;\n  metaData?: string;\n  state: State;\n}): Promise<Saml2ProviderSkeleton> {\n  let postData = cloneDeep(providerData);\n  let urlString = util.format(\n    createHostedProviderURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state)\n  );\n\n  /**\n   * Remote entity providers must be created using XML metadata\n   */\n  if (location === 'remote') {\n    if (!metaData)\n      throw new Error(`Missing metadata for remote entity provider.`);\n    urlString = util.format(\n      createRemoteProviderURLTemplate,\n      state.getHost(),\n      getCurrentRealmPath(state)\n    );\n    postData = {\n      standardMetadata: metaData,\n    };\n  }\n\n  const { data } = await generateAmApi({\n    resource: getApiConfig(),\n    state,\n  }).post(urlString, postData, {\n    withCredentials: true,\n  });\n  return data;\n}\n\n/**\n * Update SAML2 entity provider\n * @param {Saml2ProiderLocation} location Entity provider location (hosted or remote)\n * @param {string} entityId SAML2 entity id\n * @param {Saml2ProviderSkeleton} providerData Object representing a SAML entity provider\n * @returns {Promise<Saml2ProviderSkeleton>} a promise that resolves to a saml2 entity provider object\n */\nexport async function updateProvider({\n  location,\n  entityId = undefined,\n  providerData,\n  state,\n}: {\n  location: Saml2ProiderLocation;\n  entityId?: string;\n  providerData: Saml2ProviderSkeleton;\n  state: State;\n}): Promise<Saml2ProviderSkeleton> {\n  const urlString = util.format(\n    providerByLocationAndIdURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    location,\n    entityId || providerData._id\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).put(\n    urlString,\n    providerData,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n","import {\n  createProvider as _createProvider,\n  deleteProvider as _deleteProvider,\n  getProvider as _getProviderByLocationAndId,\n  getProviderMetadata as _getProviderMetadata,\n  getProviderMetadataUrl as _getProviderMetadataUrl,\n  getProviderStubs as _getProviderStubs,\n  queryProviderStubs as _queryProviderStubs,\n  type Saml2ProiderLocation,\n  type Saml2ProviderSkeleton,\n  type Saml2ProviderStub,\n  updateProvider as _updateProvider,\n} from '../api/Saml2Api';\nimport { getScript, type ScriptSkeleton } from '../api/ScriptApi';\nimport { State } from '../shared/State';\nimport { decodeBase64Url, encode, encodeBase64Url } from '../utils/Base64Utils';\nimport {\n  createProgressIndicator,\n  debugMessage,\n  stopProgressIndicator,\n  updateProgressIndicator,\n} from '../utils/Console';\nimport {\n  convertBase64TextToArray,\n  convertBase64UrlTextToArray,\n  convertTextArrayToBase64,\n  convertTextArrayToBase64Url,\n  getMetadata,\n} from '../utils/ExportImportUtils';\nimport { get } from '../utils/JsonUtils';\nimport { FrodoError } from './FrodoError';\nimport { type ExportMetaData } from './OpsTypes';\nimport { updateScript } from './ScriptOps';\n\nexport type Saml2 = {\n  /**\n   * Read all SAML2 entity provider stubs\n   * @returns {Promise<Saml2ProviderStub[]>} a promise that resolves to an array of saml2 entity stubs\n   */\n  readSaml2ProviderStubs(): Promise<Saml2ProviderStub[]>;\n  /**\n   *\n   * @param {string} entityId Provider entity id\n   * @returns {Promise<Saml2ProviderStub>} Promise resolving to a Saml2ExportInterface object.\n   */\n  readSaml2ProviderStub(entityId: string): Promise<Saml2ProviderStub>;\n  /**\n   * Export a single entity provider. The response can be saved to file as is.\n   * @param {string} entityId Provider entity id\n   * @returns {Promise<Saml2ProviderSkeleton>} Promise resolving to a Saml2ExportInterface object.\n   */\n  readSaml2Provider(entityId: string): Promise<Saml2ProviderSkeleton>;\n  /**\n   * Create a SAML2 entity provider\n   * @param {Saml2ProiderLocation} location 'hosted' or 'remote'\n   * @param {Saml2ProviderSkeleton} providerData Object representing a SAML entity provider\n   * @param {string} metaData Base64-encoded metadata XML. Only required for remote providers\n   * @returns {Promise<Saml2ProviderSkeleton>} a promise that resolves to a saml2 entity provider object\n   */\n  createSaml2Provider(\n    location: Saml2ProiderLocation,\n    providerData: Saml2ProviderSkeleton,\n    metaData: string\n  ): Promise<Saml2ProviderSkeleton>;\n  /**\n   * Update SAML2 entity provider\n   * @param {Saml2ProiderLocation} location Entity provider location (hosted or remote)\n   * @param {string} entityId SAML2 entity id\n   * @param {Saml2ProviderSkeleton} providerData Object representing a SAML entity provider\n   * @returns {Promise<Saml2ProviderSkeleton>} a promise that resolves to a saml2 entity provider object\n   */\n  updateSaml2Provider(\n    location: Saml2ProiderLocation,\n    providerData: Saml2ProviderSkeleton,\n    entityId?: string\n  ): Promise<Saml2ProviderSkeleton>;\n  /**\n   * Delete an entity provider. The response can be saved to file as is.\n   * @param {string} entityId Provider entity id\n   * @returns {Promise<Saml2ProviderSkeleton>} Promise resolving to a Saml2ExportInterface object.\n   */\n  deleteSaml2Provider(entityId: string): Promise<Saml2ProviderSkeleton>;\n  /**\n   * Delete all entity providers.\n   * @returns {Promise<Saml2ProviderSkeleton[]>} Promise resolving to an array of Saml2ProviderSkeleton objects.\n   */\n  deleteSaml2Providers(): Promise<Saml2ProviderSkeleton[]>;\n  /**\n   * Get a SAML2 entity provider's metadata URL by entity id\n   * @param {string} entityId SAML2 entity id\n   * @returns {string} the URL to get the metadata from\n   */\n  getSaml2ProviderMetadataUrl(entityId: string): string;\n  /**\n   * Get a SAML2 entity provider's metadata by entity id\n   * @param {string} entityId SAML2 entity id\n   * @returns {Promise<object>} a promise that resolves to an object containing a SAML2 metadata\n   */\n  getSaml2ProviderMetadata(entityId: string): Promise<any>;\n  /**\n   * Export a single entity provider. The response can be saved to file as is.\n   * @param {string} entityId Provider entity id\n   * @param {Saml2EntitiesExportOptions} options export options\n   * @returns {Promise<Saml2ExportInterface>} Promise resolving to a Saml2ExportInterface object.\n   */\n  exportSaml2Provider(\n    entityId: string,\n    options?: Saml2EntitiesExportOptions\n  ): Promise<Saml2ExportInterface>;\n  /**\n   * Export all entity providers. The response can be saved to file as is.\n   * @param {Saml2EntitiesExportOptions} options export options\n   * @returns {Promise<Saml2ExportInterface>} Promise resolving to a Saml2ExportInterface object.\n   */\n  exportSaml2Providers(\n    options?: Saml2EntitiesExportOptions\n  ): Promise<Saml2ExportInterface>;\n  /**\n   * Import a SAML entity provider\n   * @param {string} entityId Provider entity id\n   * @param {Saml2ExportInterface} importData Import data\n   * @param {Saml2EntitiesImportOptions} options import options\n   * @returns {Promise<Saml2ProviderSkeleton>} a promise resolving to a provider object\n   */\n  importSaml2Provider(\n    entityId: string,\n    importData: Saml2ExportInterface,\n    options?: Saml2EntitiesImportOptions\n  ): Promise<Saml2ProviderSkeleton>;\n  /**\n   * Import SAML entity providers\n   * @param {Saml2ExportInterface} importData Import data\n   * @param {Saml2EntitiesImportOptions} options import options\n   * @returns {Promise<Saml2ProviderSkeleton[]>} a promise resolving to an array of provider objects\n   */\n  importSaml2Providers(\n    importData: Saml2ExportInterface,\n    options?: Saml2EntitiesImportOptions\n  ): Promise<Saml2ProviderSkeleton[]>;\n\n  // Deprecated\n\n  /**\n   * Get SAML2 entity provider stubs\n   * @returns {Promise<Saml2ProviderStub[]>} a promise that resolves to an array of saml2 entity stubs\n   * @deprecated since v2.0.0 use {@link Saml2.readSaml2ProviderStubs | readSaml2ProviderStubs} instead\n   * ```javascript\n   * readSaml2ProviderStubs(): Promise<Saml2ProviderStub[]>\n   * ```\n   * @group Deprecated\n   */\n  getSaml2ProviderStubs(): Promise<Saml2ProviderStub[]>;\n  /**\n   * Get a SAML2 entity provider's metadata URL by entity id\n   * @param {string} entityId SAML2 entity id\n   * @returns {string} the URL to get the metadata from\n   * @deprecated since v2.0.0 use {@link Saml2.getSaml2ProviderMetadataUrl | getSaml2ProviderMetadataUrl} instead\n   * ```javascript\n   * getSaml2ProviderMetadataUrl(entityId: string): string\n   * ```\n   * @group Deprecated\n   */\n  getProviderMetadataUrl(entityId: string): string;\n  /**\n   * Get a SAML2 entity provider's metadata by entity id\n   * @param {string} entityId SAML2 entity id\n   * @returns {Promise<any>} a promise that resolves to an object containing a SAML2 metadata\n   * @deprecated since v2.0.0 use {@link Saml2.getSaml2ProviderMetadata | getSaml2ProviderMetadata} instead\n   * ```javascript\n   * getSaml2ProviderMetadata(entityId: string): Promise<any>\n   * ```\n   * @group Deprecated\n   */\n  getProviderMetadata(entityId: string): Promise<any>;\n  /**\n   *\n   * @param {string} entityId Provider entity id\n   * @returns {Promise<Saml2ProviderStub>} Promise resolving to a Saml2ExportInterface object.\n   * @deprecated since v2.0.0 use {@link Saml2.readSaml2ProviderStub | readSaml2ProviderStub} instead\n   * ```javascript\n   * readSaml2ProviderStub(entityId: string): Promise<Saml2ProviderStub>\n   * ```\n   * @group Deprecated\n   */\n  getSaml2ProviderStub(entityId: string): Promise<Saml2ProviderStub>;\n  /**\n   * Export a single entity provider. The response can be saved to file as is.\n   * @param {string} entityId Provider entity id\n   * @returns {Promise<Saml2ProviderSkeleton>} Promise resolving to a Saml2ExportInterface object.\n   * @deprecated since v2.0.0 use {@link Saml2.readSaml2Provider | readSaml2Provider} instead\n   * ```javascript\n   * readSaml2Provider(entityId: string): Promise<Saml2ProviderSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  getSaml2Provider(entityId: string): Promise<Saml2ProviderSkeleton>;\n};\n\nexport default (state: State): Saml2 => {\n  return {\n    async readSaml2ProviderStubs(): Promise<Saml2ProviderStub[]> {\n      return readSaml2ProviderStubs({ state });\n    },\n    async readSaml2ProviderStub(entityId: string): Promise<Saml2ProviderStub> {\n      return readSaml2ProviderStub({ entityId, state });\n    },\n    async readSaml2Provider(entityId: string): Promise<Saml2ProviderSkeleton> {\n      return readSaml2Provider({ entityId, state });\n    },\n    async createSaml2Provider(\n      location: Saml2ProiderLocation,\n      providerData: Saml2ProviderSkeleton,\n      metaData: string\n    ): Promise<Saml2ProviderSkeleton> {\n      return createSaml2Provider({ location, providerData, metaData, state });\n    },\n    async updateSaml2Provider(\n      location: Saml2ProiderLocation,\n      providerData: Saml2ProviderSkeleton,\n      entityId?: string\n    ): Promise<Saml2ProviderSkeleton> {\n      return updateSaml2Provider({ location, providerData, entityId, state });\n    },\n    async deleteSaml2Provider(\n      entityId: string\n    ): Promise<Saml2ProviderSkeleton> {\n      return deleteSaml2Provider({ entityId, state });\n    },\n    async deleteSaml2Providers(): Promise<Saml2ProviderSkeleton[]> {\n      return deleteSaml2Providers({ state });\n    },\n    getSaml2ProviderMetadataUrl(entityId: string): string {\n      return getSaml2ProviderMetadataUrl({ entityId, state });\n    },\n    async getSaml2ProviderMetadata(entityId: string) {\n      return getSaml2ProviderMetadata({ entityId, state });\n    },\n    async exportSaml2Provider(\n      entityId: string,\n      options: Saml2EntitiesExportOptions = { deps: true }\n    ): Promise<Saml2ExportInterface> {\n      return exportSaml2Provider({ entityId, options, state });\n    },\n    async exportSaml2Providers(\n      options: Saml2EntitiesExportOptions = { deps: true }\n    ): Promise<Saml2ExportInterface> {\n      return exportSaml2Providers({ options, state });\n    },\n    async importSaml2Provider(\n      entityId: string,\n      importData: Saml2ExportInterface,\n      options: Saml2EntitiesImportOptions = { deps: true }\n    ): Promise<Saml2ProviderSkeleton> {\n      return importSaml2Provider({ entityId, importData, options, state });\n    },\n    async importSaml2Providers(\n      importData: Saml2ExportInterface,\n      options: Saml2EntitiesImportOptions = { deps: true }\n    ): Promise<Saml2ProviderSkeleton[]> {\n      return importSaml2Providers({ importData, options, state });\n    },\n\n    // Deprecated\n\n    async getSaml2ProviderStubs(): Promise<Saml2ProviderStub[]> {\n      return readSaml2ProviderStubs({ state });\n    },\n    getProviderMetadataUrl(entityId: string): string {\n      return getSaml2ProviderMetadataUrl({ entityId, state });\n    },\n    async getProviderMetadata(entityId: string) {\n      return getSaml2ProviderMetadata({ entityId, state });\n    },\n    async getSaml2ProviderStub(entityId: string): Promise<Saml2ProviderStub> {\n      return readSaml2ProviderStub({ entityId, state });\n    },\n    async getSaml2Provider(entityId: string): Promise<Saml2ProviderSkeleton> {\n      return readSaml2Provider({ entityId, state });\n    },\n  };\n};\n\nexport interface Saml2EntitiesImportOptions {\n  /**\n   * Include any dependencies (scripts).\n   */\n  deps: boolean;\n}\n\nexport interface Saml2EntitiesExportOptions {\n  /**\n   * Include any dependencies (scripts).\n   */\n  deps: boolean;\n}\n\nexport interface Saml2ExportInterface {\n  meta?: ExportMetaData;\n  script: Record<string, ScriptSkeleton>;\n  saml: {\n    hosted: Record<string, Saml2ProviderSkeleton>;\n    remote: Record<string, Saml2ProviderSkeleton>;\n    metadata: Record<string, string[]>;\n  };\n}\n\n// use a function vs a template variable to avoid problems in loops\nexport function createSaml2ExportTemplate({\n  state,\n}: {\n  state: State;\n}): Saml2ExportInterface {\n  return {\n    meta: getMetadata({ state }),\n    script: {},\n    saml: {\n      hosted: {},\n      remote: {},\n      metadata: {},\n    },\n  } as Saml2ExportInterface;\n}\n\n/**\n * Get SAML2 entity provider stubs\n * @returns {Promise<Saml2ProviderStub[]>} a promise that resolves to an array of saml2 entity stubs\n */\nexport async function readSaml2ProviderStubs({\n  state,\n}: {\n  state: State;\n}): Promise<Saml2ProviderStub[]> {\n  try {\n    const { result } = await _getProviderStubs({ state });\n    return result;\n  } catch (error) {\n    throw new FrodoError(`Error reading saml2 provider stubs`, error);\n  }\n}\n\n/**\n * Get all SAML2 entity ids\n * @returns {Promise<string[]>} a promise that resolves to an array of saml2 entity ids\n */\nexport async function readSaml2EntityIds({\n  state,\n}: {\n  state: State;\n}): Promise<string[]> {\n  try {\n    const { result } = await _getProviderStubs({ state });\n    const entityIds = result.map((stub) => stub.entityId);\n    return entityIds;\n  } catch (error) {\n    throw new FrodoError(`Error reading saml2 entity ids`, error);\n  }\n}\n\n/**\n * Get a SAML2 entity provider's metadata URL by entity id\n * @param {string} entityId SAML2 entity id\n * @returns {string} the URL to get the metadata from\n */\nexport function getSaml2ProviderMetadataUrl({\n  entityId,\n  state,\n}: {\n  entityId: string;\n  state: State;\n}): string {\n  try {\n    return _getProviderMetadataUrl({ entityId, state });\n  } catch (error) {\n    throw new FrodoError(\n      `Error getting metadata URL for saml2 provider ${entityId}`,\n      error\n    );\n  }\n}\n\n/**\n * Get a SAML2 entity provider's metadata by entity id\n * @param {string} entityId SAML2 entity id\n * @returns {Promise<object>} a promise that resolves to an object containing a SAML2 metadata\n */\nexport async function getSaml2ProviderMetadata({\n  entityId,\n  state,\n}: {\n  entityId: string;\n  state: State;\n}) {\n  try {\n    return _getProviderMetadata({ entityId, state });\n  } catch (error) {\n    throw new FrodoError(\n      `Error getting metadata for saml2 provider ${entityId}`,\n      error\n    );\n  }\n}\n\n/**\n * Include dependencies in the export file\n * @param {object} providerData Object representing a SAML entity provider\n * @param {object} fileData File data object to add dependencies to\n */\nasync function exportDependencies({\n  providerData,\n  fileData,\n  state,\n}: {\n  providerData: Saml2ProviderSkeleton;\n  fileData: Saml2ExportInterface;\n  state: State;\n}) {\n  const errors: Error[] = [];\n  const attrMapperScriptId = get(providerData, [\n    'identityProvider',\n    'assertionProcessing',\n    'attributeMapper',\n    'attributeMapperScript',\n  ]);\n  if (attrMapperScriptId && attrMapperScriptId !== '[Empty]') {\n    try {\n      const scriptData = await getScript({\n        scriptId: attrMapperScriptId,\n        state,\n      });\n      scriptData.script = convertBase64TextToArray(scriptData.script);\n      fileData.script[attrMapperScriptId] = scriptData;\n    } catch (error) {\n      errors.push(\n        new FrodoError(`Error getting attribute mapper script`, error)\n      );\n    }\n  }\n  const idpAdapterScriptId = get(providerData, [\n    'identityProvider',\n    'advanced',\n    'idpAdapter',\n    'idpAdapterScript',\n  ]);\n  if (idpAdapterScriptId && idpAdapterScriptId !== '[Empty]') {\n    try {\n      const scriptData = await getScript({\n        scriptId: idpAdapterScriptId,\n        state,\n      });\n      scriptData.script = convertBase64TextToArray(scriptData.script);\n      fileData.script[idpAdapterScriptId] = scriptData;\n    } catch (error) {\n      errors.push(new FrodoError(`Error getting idp adapter script`, error));\n    }\n  }\n  const spAdapterScriptId = get(providerData, [\n    'serviceProvider',\n    'assertionProcessing',\n    'adapter',\n    'spAdapterScript',\n  ]);\n  if (spAdapterScriptId && spAdapterScriptId !== '[Empty]') {\n    try {\n      const scriptData = await getScript({\n        scriptId: spAdapterScriptId,\n        state,\n      });\n      scriptData.script = convertBase64TextToArray(scriptData.script);\n      fileData.script[spAdapterScriptId] = scriptData;\n    } catch (error) {\n      errors.push(new FrodoError(`Error getting sp adapter script`, error));\n    }\n  }\n\n  if (errors.length > 0) {\n    throw new FrodoError(`Error exporting saml2 dependencies`, errors);\n  }\n\n  // const metaDataResponse = await getSaml2ProviderMetadata({\n  //   entityId: providerData.entityId,\n  //   state,\n  // });\n  // if (!metaDataResponse) {\n  //   throw new Error(\n  //     `Unable to obtain metadata from ${getSaml2ProviderMetadataUrl({\n  //       entityId: providerData.entityId,\n  //       state,\n  //     })}`\n  //   );\n  // }\n  // fileData.saml.metadata[providerData._id] = convertBase64UrlTextToArray(\n  //   encodeBase64Url(metaDataResponse)\n  // );\n}\n\n/**\n * Include metadata in the export file\n * @param {object} providerData Object representing a SAML entity provider\n * @param {object} fileData File data object to add metadata to\n */\nasync function exportMetadata({\n  providerData,\n  fileData,\n  state,\n}: {\n  providerData: Saml2ProviderSkeleton;\n  fileData: Saml2ExportInterface;\n  state: State;\n}) {\n  const metaDataResponse = await getSaml2ProviderMetadata({\n    entityId: providerData.entityId,\n    state,\n  });\n  if (!metaDataResponse) {\n    throw new FrodoError(\n      `Unable to obtain metadata from ${getSaml2ProviderMetadataUrl({\n        entityId: providerData.entityId,\n        state,\n      })}`\n    );\n  }\n  fileData.saml.metadata[providerData._id] = convertBase64UrlTextToArray(\n    encodeBase64Url(metaDataResponse)\n  );\n}\n\n/**\n *\n * @param {string} entityId Provider entity id\n * @returns {Promise<Saml2ProviderStub>} Promise resolving to a Saml2ExportInterface object.\n */\nexport async function readSaml2ProviderStub({\n  entityId,\n  state,\n}: {\n  entityId: string;\n  state: State;\n}): Promise<Saml2ProviderStub> {\n  try {\n    debugMessage({\n      message: `Saml2Ops.getSaml2ProviderStub: start [entityId=${entityId}]`,\n      state,\n    });\n    const found = await _queryProviderStubs({\n      filter: `entityId eq '${entityId}'`,\n      state,\n    });\n    switch (found.resultCount) {\n      case 0:\n        throw new FrodoError(`No provider with entity id '${entityId}' found`);\n      case 1: {\n        debugMessage({\n          message: `Saml2Ops.getSaml2ProviderStub: end [entityId=${entityId}]`,\n          state,\n        });\n        return found.result[0];\n      }\n      default:\n        throw new FrodoError(\n          `Multiple providers with entity id '${entityId}' found`\n        );\n    }\n  } catch (error) {\n    throw new FrodoError(\n      `Error reading saml2 provider stub ${entityId}`,\n      error\n    );\n  }\n}\n\n/**\n * Export a single entity provider. The response can be saved to file as is.\n * @param {string} entityId Provider entity id\n * @returns {Promise<Saml2ProviderSkeleton>} Promise resolving to a Saml2ExportInterface object.\n */\nexport async function readSaml2Provider({\n  entityId,\n  state,\n}: {\n  entityId: string;\n  state: State;\n}): Promise<Saml2ProviderSkeleton> {\n  try {\n    debugMessage({\n      message: `Saml2Ops.getSaml2Provider: start [entityId=${entityId}]`,\n      state,\n    });\n    const stub = await readSaml2ProviderStub({ entityId, state });\n    const { location } = stub;\n    const entityId64 = stub._id;\n    const providerData = await _getProviderByLocationAndId({\n      location,\n      entityId64,\n      state,\n    });\n    debugMessage({\n      message: `Saml2Ops.getSaml2Provider: end [entityId=${entityId}]`,\n      state,\n    });\n    return providerData;\n  } catch (error) {\n    throw new FrodoError(`Error reading saml2 provider ${entityId}`, error);\n  }\n}\n\n/**\n * Create a SAML2 entity provider\n * @param {Saml2ProiderLocation} location 'hosted' or 'remote'\n * @param {Saml2ProviderSkeleton} providerData Object representing a SAML entity provider\n * @param {string} metaData Base64-encoded metadata XML. Only required for remote providers\n * @returns {Promise<Saml2ProviderSkeleton>} a promise that resolves to a saml2 entity provider object\n */\nexport async function createSaml2Provider({\n  location,\n  providerData,\n  metaData,\n  state,\n}: {\n  location: Saml2ProiderLocation;\n  providerData: Saml2ProviderSkeleton;\n  metaData?: string;\n  state: State;\n}): Promise<Saml2ProviderSkeleton> {\n  try {\n    return _createProvider({ location, providerData, metaData, state });\n  } catch (error) {\n    throw new FrodoError(`Error creating saml2 provider`, error);\n  }\n}\n\n/**\n * Update SAML2 entity provider\n * @param {Saml2ProiderLocation} location Entity provider location (hosted or remote)\n * @param {string} entityId SAML2 entity id\n * @param {Saml2ProviderSkeleton} providerData Object representing a SAML entity provider\n * @returns {Promise<Saml2ProviderSkeleton>} a promise that resolves to a saml2 entity provider object\n */\nexport async function updateSaml2Provider({\n  location,\n  entityId = undefined,\n  providerData,\n  state,\n}: {\n  location: Saml2ProiderLocation;\n  entityId?: string;\n  providerData: Saml2ProviderSkeleton;\n  state: State;\n}): Promise<Saml2ProviderSkeleton> {\n  try {\n    return _updateProvider({ location, entityId, providerData, state });\n  } catch (error) {\n    throw new FrodoError(`Error updating saml2 provider`, error);\n  }\n}\n\n/**\n * Delete an entity provider. The response can be saved to file as is.\n * @param {string} entityId Provider entity id\n * @returns {Promise<Saml2ProviderSkeleton>} Promise resolving to a Saml2ExportInterface object.\n */\nexport async function deleteSaml2Provider({\n  entityId,\n  state,\n}: {\n  entityId: string;\n  state: State;\n}): Promise<Saml2ProviderSkeleton> {\n  try {\n    debugMessage({\n      message: `Saml2Ops.deleteSaml2Provider: start [entityId=${entityId}]`,\n      state,\n    });\n    const stub = await readSaml2ProviderStub({ entityId, state });\n    const { location } = stub;\n    const id = stub._id;\n    const providerData = await _deleteProvider({\n      location,\n      entityId64: id,\n      state,\n    });\n    debugMessage({\n      message: `Saml2Ops.deleteSaml2Provider: end [entityId=${entityId}]`,\n      state,\n    });\n    return providerData;\n  } catch (error) {\n    throw new FrodoError(`Error deleting saml2 provider ${entityId}`, error);\n  }\n}\n\n/**\n * Delete all entity providers.\n * @returns {Promise<Saml2ProviderSkeleton[]>} Promise resolving to an array of Saml2ProviderSkeleton objects.\n */\nexport async function deleteSaml2Providers({\n  state,\n}: {\n  state: State;\n}): Promise<Saml2ProviderSkeleton[]> {\n  try {\n    debugMessage({ message: `Saml2Ops.deleteSaml2Providers: start`, state });\n    const providers: Saml2ProviderSkeleton[] = [];\n    const stubs = await readSaml2ProviderStubs({ state });\n    for (const stub of stubs) {\n      const provider = await _deleteProvider({\n        location: stub.location,\n        entityId64: stub._id,\n        state,\n      });\n      providers.push(provider);\n    }\n    debugMessage({\n      message: `Saml2Ops.deleteSaml2Providers: end [deleted ${providers.length} providers]`,\n      state,\n    });\n    return providers;\n  } catch (error) {\n    throw new FrodoError(`Error deleting saml2 providers`, error);\n  }\n}\n\n/**\n * Export a single entity provider. The response can be saved to file as is.\n * @param {string} entityId Provider entity id\n * @returns {Promise<Saml2ExportInterface>} Promise resolving to a Saml2ExportInterface object.\n */\nexport async function exportSaml2Provider({\n  entityId,\n  options = { deps: true },\n  state,\n}: {\n  entityId: string;\n  options?: Saml2EntitiesExportOptions;\n  state: State;\n}): Promise<Saml2ExportInterface> {\n  try {\n    debugMessage({\n      message: `Saml2Ops.exportSaml2Provider: start [entityId=${entityId}]`,\n      state,\n    });\n    const exportData = createSaml2ExportTemplate({ state });\n    const stub = await readSaml2ProviderStub({ entityId, state });\n    const { location } = stub;\n    const id = stub._id;\n    const providerData = await _getProviderByLocationAndId({\n      location,\n      entityId64: id,\n      state,\n    });\n    exportData.saml[stub.location][providerData._id] = providerData;\n    await exportMetadata({ providerData, fileData: exportData, state });\n    if (options.deps) {\n      await exportDependencies({ providerData, fileData: exportData, state });\n    }\n    debugMessage({\n      message: `Saml2Ops.exportSaml2Provider: end [entityId=${entityId}]`,\n      state,\n    });\n    return exportData;\n  } catch (error) {\n    throw new FrodoError(`Error exporting saml2 provider ${entityId}`, error);\n  }\n}\n\n/**\n * Export all entity providers. The response can be saved to file as is.\n * @returns {Promise<Saml2ExportInterface>} Promise resolving to a Saml2ExportInterface object.\n */\nexport async function exportSaml2Providers({\n  options = { deps: true },\n  state,\n}: {\n  options?: Saml2EntitiesExportOptions;\n  state: State;\n}): Promise<Saml2ExportInterface> {\n  let indicatorId: string;\n  const errors: Error[] = [];\n  try {\n    const fileData = createSaml2ExportTemplate({ state });\n    const stubs = await readSaml2ProviderStubs({ state });\n    indicatorId = createProgressIndicator({\n      total: stubs.length,\n      message: 'Exporting SAML2 providers...',\n      state,\n    });\n    for (const stub of stubs) {\n      try {\n        updateProgressIndicator({\n          id: indicatorId,\n          message: `Exporting SAML2 provider ${stub._id}`,\n          state,\n        });\n        const providerData = await _getProviderByLocationAndId({\n          location: stub.location,\n          entityId64: stub._id,\n          state,\n        });\n        await exportMetadata({ providerData, fileData, state });\n        if (options.deps) {\n          try {\n            await exportDependencies({ providerData, fileData, state });\n          } catch (error) {\n            errors.push(error);\n          }\n        }\n        fileData.saml[stub.location][providerData._id] = providerData;\n      } catch (error) {\n        errors.push(\n          new FrodoError(`Error exporting saml2 provider ${stub._id}`, error)\n        );\n      }\n    }\n    if (errors.length > 0) {\n      throw new FrodoError(`Error exporting saml2 providers`, errors);\n    }\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Exported ${stubs.length} SAML2 providers.`,\n      state,\n    });\n    return fileData;\n  } catch (error) {\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Error exporting saml2 providers`,\n      status: 'fail',\n      state,\n    });\n    // re-throw previously caught error\n    if (errors.length > 0) {\n      throw error;\n    }\n    throw new FrodoError(`Error exporting saml2 providers`, error);\n  }\n}\n\n/**\n * Include dependencies from the import file\n * @param {object} providerData Object representing a SAML entity provider\n * @param {object} fileData File data object to read dependencies from\n */\nexport async function importDependencies({\n  providerData,\n  fileData,\n  state,\n}: {\n  providerData: Saml2ProviderSkeleton;\n  fileData: Saml2ExportInterface;\n  state: State;\n}) {\n  debugMessage({ message: `Saml2Ops.importDependencies: start`, state });\n  const errors: Error[] = [];\n  const attrMapperScriptId = get(providerData, [\n    'identityProvider',\n    'assertionProcessing',\n    'attributeMapper',\n    'attributeMapperScript',\n  ]);\n  if (attrMapperScriptId && attrMapperScriptId !== '[Empty]') {\n    try {\n      debugMessage({\n        message: `Saml2Ops.importDependencies: attributeMapperScript=${attrMapperScriptId}`,\n        state,\n      });\n      const scriptData = get(fileData, ['script', attrMapperScriptId]);\n      scriptData.script = convertTextArrayToBase64(\n        scriptData.script as string[]\n      );\n      await updateScript({ scriptId: attrMapperScriptId, scriptData, state });\n    } catch (error) {\n      errors.push(\n        new FrodoError(`Error getting attribute mapper script`, error)\n      );\n    }\n  }\n  const idpAdapterScriptId = get(providerData, [\n    'identityProvider',\n    'advanced',\n    'idpAdapter',\n    'idpAdapterScript',\n  ]);\n  if (idpAdapterScriptId && idpAdapterScriptId !== '[Empty]') {\n    try {\n      debugMessage({\n        message: `Saml2Ops.importDependencies: idpAdapterScript=${idpAdapterScriptId}`,\n        state,\n      });\n      const scriptData = get(fileData, ['script', idpAdapterScriptId]);\n      scriptData.script = convertTextArrayToBase64(\n        scriptData.script as string[]\n      );\n      await updateScript({ scriptId: idpAdapterScriptId, scriptData, state });\n    } catch (error) {\n      errors.push(\n        new FrodoError(`Error getting attribute mapper script`, error)\n      );\n    }\n  }\n  const spAdapterScriptId = get(providerData, [\n    'serviceProvider',\n    'assertionProcessing',\n    'adapter',\n    'spAdapterScript',\n  ]);\n  if (spAdapterScriptId && spAdapterScriptId !== '[Empty]') {\n    try {\n      debugMessage({\n        message: `Saml2Ops.importDependencies: spAdapterScriptId=${spAdapterScriptId}`,\n        state,\n      });\n      const scriptData = get(fileData, ['script', spAdapterScriptId]);\n      scriptData.script = convertTextArrayToBase64(\n        scriptData.script as string[]\n      );\n      await updateScript({ scriptId: spAdapterScriptId, scriptData, state });\n    } catch (error) {\n      errors.push(\n        new FrodoError(`Error getting attribute mapper script`, error)\n      );\n    }\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(`Error importing saml2 dependencies`, errors);\n  }\n  debugMessage({ message: `Saml2Ops.importDependencies: end`, state });\n}\n\n/**\n * Find provider in import file and return its location\n * @param {string} entityId64 Base64-encoded provider entity id\n * @param {Saml2ExportInterface} data Import file json data\n * @returns {string} 'hosted' or 'remote' if found, undefined otherwise\n */\nfunction getLocation(\n  entityId64: string,\n  data: Saml2ExportInterface\n): Saml2ProiderLocation {\n  if (data.saml.hosted[entityId64]) {\n    return 'hosted';\n  }\n  if (data.saml.remote[entityId64]) {\n    return 'remote';\n  }\n  return undefined;\n}\n\n/**\n * Import a SAML entity provider\n * @param {string} entityId Provider entity id\n * @param {Saml2ExportInterface} importData Import data\n * @param {Saml2ProviderImportOptions} options import options\n * @returns {Promise<Saml2ProviderSkeleton>} a promise resolving to a provider object\n */\nexport async function importSaml2Provider({\n  entityId,\n  importData,\n  options = { deps: true },\n  state,\n}: {\n  entityId: string;\n  importData: Saml2ExportInterface;\n  options?: Saml2EntitiesImportOptions;\n  state: State;\n}): Promise<Saml2ProviderSkeleton> {\n  debugMessage({ message: `Saml2Ops.importSaml2Provider: start`, state });\n  let response = null;\n  try {\n    const entityId64 = encode(entityId, false);\n    const location = getLocation(entityId64, importData);\n    debugMessage({\n      message: `Saml2Ops.importSaml2Provider: entityId=${entityId}, entityId64=${entityId64}, location=${location}`,\n      state,\n    });\n    if (location) {\n      const providerData = importData.saml[location][entityId64];\n      if (options.deps) {\n        await importDependencies({ providerData, fileData: importData, state });\n      }\n      let metaData = null;\n      if (location === 'remote') {\n        metaData = convertTextArrayToBase64Url(\n          importData.saml.metadata[entityId64]\n        );\n      }\n      try {\n        response = await _createProvider({\n          location,\n          providerData,\n          metaData,\n          state,\n        });\n      } catch (createProviderErr) {\n        try {\n          response = await _updateProvider({ location, providerData, state });\n        } catch (error) {\n          throw new FrodoError(`Error creating saml2 provider`, error);\n        }\n      }\n    } else {\n      throw new FrodoError(\n        `Saml2 provider ${entityId} not found in import data!`\n      );\n    }\n  } catch (error) {\n    throw new FrodoError(`Error importing saml2 provider ${entityId}`, error);\n  }\n  debugMessage({ message: `Saml2Ops.importSaml2Provider: end`, state });\n  return response;\n}\n\n/**\n * Import SAML entity providers\n * @param {Saml2ExportInterface} importData Import data\n * @param {Saml2ProviderImportOptions} options import options\n * @returns {Promise<Saml2ProviderSkeleton[]>} a promise resolving to an array of provider objects\n */\nexport async function importSaml2Providers({\n  importData,\n  options = { deps: true },\n  state,\n}: {\n  importData: Saml2ExportInterface;\n  options?: Saml2EntitiesImportOptions;\n  state: State;\n}): Promise<Saml2ProviderSkeleton[]> {\n  debugMessage({ message: `Saml2Ops.importSaml2Providers: start`, state });\n  const response = [];\n  const errors = [];\n  try {\n    // find providers in hosted and in remote and map locations\n    const hostedIds = Object.keys(importData.saml.hosted);\n    const remoteIds = Object.keys(importData.saml.remote);\n    const providerIds = hostedIds.concat(remoteIds);\n    for (const entityId64 of providerIds) {\n      debugMessage({\n        message: `Saml2Ops.importSaml2Providers: entityId=${decodeBase64Url(\n          entityId64\n        )}`,\n        state,\n      });\n      const location: Saml2ProiderLocation = hostedIds.includes(entityId64)\n        ? 'hosted'\n        : 'remote';\n      const providerData = importData.saml[location][entityId64];\n      if (options.deps) {\n        try {\n          await importDependencies({\n            providerData,\n            fileData: importData,\n            state,\n          });\n        } catch (error) {\n          errors.push(error);\n        }\n      }\n      let metaData = null;\n      if (location === 'remote') {\n        metaData = convertTextArrayToBase64Url(\n          importData.saml.metadata[entityId64]\n        );\n      }\n      try {\n        response.push(\n          await _createProvider({ location, providerData, metaData, state })\n        );\n      } catch (createProviderErr) {\n        try {\n          response.push(\n            await _updateProvider({ location, providerData, state })\n          );\n        } catch (error) {\n          errors.push(error);\n        }\n      }\n    }\n    if (errors.length > 0) {\n      throw new FrodoError(`Error importing saml2 providers`, errors);\n    }\n  } catch (error) {\n    // re-throw previously caught error\n    if (errors.length > 0) {\n      throw error;\n    }\n    throw new FrodoError(`Error importing saml2 providers`, error);\n  }\n  debugMessage({ message: `Saml2Ops.importSaml2Providers: end`, state });\n  return response;\n}\n","import {\n  type CircleOfTrustSkeleton,\n  createCircleOfTrust as _createCircleOfTrust,\n  deleteCircleOfTrust as _deleteCircleOfTrust,\n  getCircleOfTrust as _getCircleOfTrust,\n  getCirclesOfTrust as _getCirclesOfTrust,\n  updateCircleOfTrust as _updateCircleOfTrust,\n} from '../api/CirclesOfTrustApi';\nimport { type Saml2ProviderSkeleton } from '../api/Saml2Api';\nimport { type ScriptSkeleton } from '../api/ScriptApi';\nimport { State } from '../shared/State';\nimport {\n  createProgressIndicator,\n  debugMessage,\n  stopProgressIndicator,\n  updateProgressIndicator,\n} from '../utils/Console';\nimport { getMetadata } from '../utils/ExportImportUtils';\nimport { FrodoError } from './FrodoError';\nimport { type ExportMetaData } from './OpsTypes';\nimport { readSaml2EntityIds } from './Saml2Ops';\n\nexport type CirclesOfTrust = {\n  /**\n   * Create an empty agent export template\n   * @returns {CirclesOfTrustExportInterface} an empty agent export template\n   */\n  createCirclesOfTrustExportTemplate(): CirclesOfTrustExportInterface;\n  /**\n   * Read all circles of trust\n   * @param {string[]} entityProviders filter by entity providers\n   */\n  readCirclesOfTrust(\n    entityProviders?: string[]\n  ): Promise<CircleOfTrustSkeleton[]>;\n  /**\n   * Read circle of trust\n   * @param {string} cotId circle of trust id/name\n   */\n  readCircleOfTrust(cotId: string): Promise<CircleOfTrustSkeleton>;\n  /**\n   * Create circle of trust\n   * @param {string} cotId circle of trust id/name\n   * @param {CircleOfTrustSkeleton} cotData circle of trust data\n   */\n  createCircleOfTrust(\n    cotId?: string,\n    cotData?: CircleOfTrustSkeleton\n  ): Promise<CircleOfTrustSkeleton>;\n  /**\n   * Update circle of trust\n   * @param {string} cotId circle of trust id/name\n   * @param cotData circle of trust data\n   */\n  updateCircleOfTrust(\n    cotId: string,\n    cotData: CircleOfTrustSkeleton\n  ): Promise<CircleOfTrustSkeleton>;\n  /**\n   * Delete circle of trust\n   * @param {string} cotId circle of trust id/name\n   */\n  deleteCircleOfTrust(cotId: string): Promise<CircleOfTrustSkeleton>;\n  /**\n   * Delete circles of trust\n   * @param {string[]} entityProviders filter by entity providers\n   */\n  deleteCirclesOfTrust(\n    entityProviders?: string[]\n  ): Promise<CircleOfTrustSkeleton[]>;\n  /**\n   * Export circle of trust\n   * @param {string} cotId circle of trust id/name\n   */\n  exportCircleOfTrust(cotId: string): Promise<CirclesOfTrustExportInterface>;\n  /**\n   * Export all circles of trust\n   * @param {string[]} entityProviders filter by entity providers\n   */\n  exportCirclesOfTrust(\n    entityProviders?: string[]\n  ): Promise<CirclesOfTrustExportInterface>;\n  /**\n   * Import a circle of trust by id/name from file\n   * @param {string} cotId Circle of trust id/name\n   * @param {CirclesOfTrustExportInterface} importData Import data\n   * @returns {Promise<CircleOfTrustSkeleton[]>} a promise resolving to the circle of trust object that was created or updated. Note: If the circle of trust already exists and does not need updating, null is returned.\n   */\n  importCircleOfTrust(\n    cotId: string,\n    importData: CirclesOfTrustExportInterface\n  ): Promise<CircleOfTrustSkeleton>;\n  /**\n   * Import first circle of trust\n   * @param {CirclesOfTrustExportInterface} importData Import data\n   * @returns {Promise<CircleOfTrustSkeleton[]>} a promise resolving to the circle of trust object that was created or updated. Note: If the circle of trust already exists and does not need updating, null is returned.\n   */\n  importFirstCircleOfTrust(\n    importData: CirclesOfTrustExportInterface\n  ): Promise<CircleOfTrustSkeleton>;\n  /**\n   * Import all circles of trust\n   * @param {string[]} entityProviders filter by entity providers\n   * @param {CirclesOfTrustExportInterface} importData Import data\n   * @returns {Promise<CircleOfTrustSkeleton[]>} a promise resolving to an array of circle of trust objects that were created or updated. Note: If a circle of trust already exists and does not need updating, it is omitted from the response array.\n   */\n  importCirclesOfTrust(\n    importData: CirclesOfTrustExportInterface,\n    entityProviders?: string[]\n  ): Promise<CircleOfTrustSkeleton[]>;\n\n  // Deprecated\n\n  /**\n   * Get all circles of trust\n   * @returns {Promise<CircleOfTrustSkeleton[]>} a promise resolving to an array of circle of trust objects\n   * @deprecated since v2.0.0 use {@link CirclesOfTrust.readCirclesOfTrust | readCirclesOfTrust} instead\n   * ```javascript\n   * readCirclesOfTrust(): Promise<CircleOfTrustSkeleton[]>\n   * ```\n   * @group Deprecated\n   */\n  getCirclesOfTrust(): Promise<CircleOfTrustSkeleton[]>;\n  /**\n   * Get circle of trust\n   * @param {string} cotId circle of trust id/name\n   * @returns {Promise<CircleOfTrustSkeleton>} a promise resolving to a circle of trust object\n   * @deprecated since v2.0.0 use {@link CirclesOfTrust.readCircleOfTrust | readCircleOfTrust} instead\n   * ```javascript\n   * readCircleOfTrust(cotId: string): Promise<CircleOfTrustSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  getCircleOfTrust(cotId: string): Promise<CircleOfTrustSkeleton>;\n};\n\nexport default (state: State): CirclesOfTrust => {\n  return {\n    createCirclesOfTrustExportTemplate() {\n      return createCirclesOfTrustExportTemplate({ state });\n    },\n    async readCirclesOfTrust(entityProviders: string[] = []) {\n      return readCirclesOfTrust({ entityProviders, state });\n    },\n    async readCircleOfTrust(cotId: string) {\n      return readCircleOfTrust({ cotId, state });\n    },\n    async createCircleOfTrust(cotId: string, cotData: CircleOfTrustSkeleton) {\n      return createCircleOfTrust({ cotId, cotData, state });\n    },\n    async updateCircleOfTrust(cotId: string, cotData: CircleOfTrustSkeleton) {\n      return updateCircleOfTrust({ cotId, cotData, state });\n    },\n    async deleteCircleOfTrust(cotId: string) {\n      return deleteCircleOfTrust({ cotId, state });\n    },\n    async deleteCirclesOfTrust(\n      entityProviders: string[] = []\n    ): Promise<CircleOfTrustSkeleton[]> {\n      return deleteCirclesOfTrust({ entityProviders, state });\n    },\n    async exportCircleOfTrust(cotId: string) {\n      return exportCircleOfTrust({ cotId, state });\n    },\n    async exportCirclesOfTrust(entityProviders: string[] = []) {\n      return exportCirclesOfTrust({ entityProviders, state });\n    },\n    async importCircleOfTrust(\n      cotId: string,\n      importData: CirclesOfTrustExportInterface\n    ) {\n      return importCircleOfTrust({ cotId, importData, state });\n    },\n    async importFirstCircleOfTrust(importData: CirclesOfTrustExportInterface) {\n      return importFirstCircleOfTrust({ importData, state });\n    },\n    async importCirclesOfTrust(\n      importData: CirclesOfTrustExportInterface,\n      entityProviders: string[] = []\n    ): Promise<CircleOfTrustSkeleton[]> {\n      return importCirclesOfTrust({ importData, entityProviders, state });\n    },\n\n    // Deprecated\n\n    async getCirclesOfTrust() {\n      return readCirclesOfTrust({ state });\n    },\n    async getCircleOfTrust(cotId: string) {\n      return readCircleOfTrust({ cotId, state });\n    },\n  };\n};\n\nexport interface CirclesOfTrustExportInterface {\n  meta?: ExportMetaData;\n  script: Record<string, ScriptSkeleton>;\n  saml: {\n    hosted: Record<string, Saml2ProviderSkeleton>;\n    remote: Record<string, Saml2ProviderSkeleton>;\n    metadata: Record<string, string[]>;\n    cot: Record<string, CircleOfTrustSkeleton>;\n  };\n}\n\n/**\n * Create an empty agent export template\n * @returns {CirclesOfTrustExportInterface} an empty agent export template\n */\nexport function createCirclesOfTrustExportTemplate({\n  state,\n}: {\n  state: State;\n}): CirclesOfTrustExportInterface {\n  return {\n    meta: getMetadata({ state }),\n    script: {},\n    saml: {\n      hosted: {},\n      remote: {},\n      metadata: {},\n      cot: {},\n    },\n  } as CirclesOfTrustExportInterface;\n}\n\n/**\n * Get circles of trust\n */\nexport async function readCirclesOfTrust({\n  entityProviders = [],\n  state,\n}: {\n  entityProviders?: string[];\n  state: State;\n}): Promise<CircleOfTrustSkeleton[]> {\n  try {\n    debugMessage({\n      message: `CirclesOfTrustOps.readCirclesOfTrust: start`,\n      state,\n    });\n    let { result } = await _getCirclesOfTrust({ state });\n    if (entityProviders.length) {\n      debugMessage({\n        message: `CirclesOfTrustOps.readCirclesOfTrust: filtering results to entity providers: ${entityProviders}`,\n        state,\n      });\n      entityProviders = entityProviders.map((id) => `${id}|saml2`);\n      result = result.filter((circleOfTrust) => {\n        let hasEntityId = false;\n        for (const trustedProvider of circleOfTrust.trustedProviders) {\n          if (!hasEntityId && entityProviders.includes(trustedProvider)) {\n            hasEntityId = true;\n          }\n        }\n        return hasEntityId;\n      });\n    }\n    debugMessage({\n      message: `CirclesOfTrustOps.readCirclesOfTrust: end`,\n      state,\n    });\n    return result;\n  } catch (error) {\n    throw new FrodoError(`Error reading circles of trust`, error);\n  }\n}\n\n/**\n * Get circle of trust\n * @param {string} cotId circle of trust id/name\n * @returns {Promise<CirclesOfTrustExportInterface>} a promise that resolves to an CirclesOfTrustExportInterface object\n */\nexport async function readCircleOfTrust({\n  cotId,\n  state,\n}: {\n  cotId: string;\n  state: State;\n}): Promise<CircleOfTrustSkeleton> {\n  try {\n    const response = await _getCircleOfTrust({ cotId, state });\n    return response;\n  } catch (error) {\n    throw new FrodoError(`Error reading circle of trust ${cotId}`, error);\n  }\n}\n\n/**\n * Create circle of trust\n * @param {string} cotId circle of trust id/name\n * @param {CircleOfTrustSkeleton} cotData circle of trust data\n * @returns {Promise<CirclesOfTrustExportInterface>} a promise that resolves to an CirclesOfTrustExportInterface object\n */\nexport async function createCircleOfTrust({\n  cotId = undefined,\n  cotData = {},\n  state,\n}: {\n  cotId?: string;\n  cotData?: CircleOfTrustSkeleton;\n  state: State;\n}): Promise<CircleOfTrustSkeleton> {\n  if (cotId) cotData._id = cotId;\n  try {\n    const response = await _createCircleOfTrust({ cotData, state });\n    return response;\n  } catch (createError) {\n    if (\n      createError.response?.data?.code === 500 &&\n      createError.response?.data?.message ===\n        \"Unable to update entity provider's circle of trust\"\n    ) {\n      try {\n        const response = await _updateCircleOfTrust({ cotId, cotData, state });\n        return response;\n      } catch (updateError) {\n        throw new FrodoError(\n          `Error creating circle of trust ${cotId}`,\n          updateError\n        );\n      }\n    } else {\n      throw new FrodoError(\n        `Error creating circle of trust ${cotId}`,\n        createError\n      );\n    }\n  }\n}\n\n/**\n * Update circle of trust\n * @param {string} cotId circle of trust id/name\n * @param {CircleOfTrustSkeleton} cotData circle of trust data\n * @returns {Promise<CircleOfTrustSkeleton>} a promise that resolves to an CircleOfTrustSkeleton object\n */\nexport async function updateCircleOfTrust({\n  cotId,\n  cotData,\n  state,\n}: {\n  cotId: string;\n  cotData: CircleOfTrustSkeleton;\n  state: State;\n}): Promise<CircleOfTrustSkeleton> {\n  try {\n    const response = await _updateCircleOfTrust({ cotId, cotData, state });\n    return response || cotData;\n  } catch (error) {\n    if (\n      error.response?.data?.code === 500 &&\n      (error.response?.data?.message ===\n        \"Unable to update entity provider's circle of trust\" ||\n        error.response?.data?.message ===\n          'An error occurred while updating the COT memberships')\n    ) {\n      try {\n        const response = await _updateCircleOfTrust({ cotId, cotData, state });\n        return response || cotData;\n      } catch (error) {\n        throw new FrodoError(`Error updating circle of trust ${cotId}`, error);\n      }\n    } else {\n      throw new FrodoError(`Error updating circle of trust ${cotId}`, error);\n    }\n  }\n}\n\n/**\n * Delete circle of trust\n * @param {string} cotId circle of trust id/name\n * @returns {Promise<CirclesOfTrustExportInterface>} a promise that resolves to an CirclesOfTrustExportInterface object\n */\nexport async function deleteCircleOfTrust({\n  cotId,\n  state,\n}: {\n  cotId: string;\n  state: State;\n}): Promise<CircleOfTrustSkeleton> {\n  try {\n    const response = await _deleteCircleOfTrust({ cotId, state });\n    return response;\n  } catch (error) {\n    throw new FrodoError(`Error deleting circle of trust ${cotId}`, error);\n  }\n}\n\n/**\n * Delete circles of trust\n * @returns {Promise<CirclesOfTrustExportInterface>} a promise that resolves to an CirclesOfTrustExportInterface object\n */\nexport async function deleteCirclesOfTrust({\n  entityProviders = [],\n  state,\n}: {\n  entityProviders?: string[];\n  state: State;\n}): Promise<CircleOfTrustSkeleton[]> {\n  const errors: Error[] = [];\n  try {\n    debugMessage({\n      message: `CirclesOfTrustOps.deleteCirclesOfTrust: start`,\n      state,\n    });\n    const deleted: CircleOfTrustSkeleton[] = [];\n    const cots = await readCirclesOfTrust({ entityProviders, state });\n    for (const cot of cots) {\n      try {\n        deleted.push(await deleteCircleOfTrust({ cotId: cot._id, state }));\n      } catch (error) {\n        errors.push(error);\n      }\n    }\n    if (errors.length > 0) {\n      throw new FrodoError(`Error deleting circles of trust`, errors);\n    }\n    debugMessage({\n      message: `CirclesOfTrustOps.deleteCirclesOfTrust: end`,\n      state,\n    });\n    return deleted;\n  } catch (error) {\n    // just re-throw previously caught errors\n    if (errors.length > 0) {\n      throw error;\n    }\n    throw new FrodoError(`Error deleting circles of trust`, errors);\n  }\n}\n\n/**\n * Export circle of trust\n * @param {string} cotId circle of trust id/name\n * @returns {Promise<CirclesOfTrustExportInterface>} a promise that resolves to an CirclesOfTrustExportInterface object\n */\nexport async function exportCircleOfTrust({\n  cotId,\n  state,\n}: {\n  cotId: string;\n  state: State;\n}): Promise<CirclesOfTrustExportInterface> {\n  try {\n    debugMessage({\n      message: `CirclesOfTrustOps.exportCircleOfTrust: start`,\n      state,\n    });\n    const exportData = createCirclesOfTrustExportTemplate({ state });\n    const cotData = await readCircleOfTrust({\n      cotId,\n      state,\n    });\n    exportData.saml.cot[cotData._id] = cotData;\n    debugMessage({\n      message: `CirclesOfTrustOps.exportCircleOfTrust: end`,\n      state,\n    });\n    return exportData;\n  } catch (error) {\n    throw new FrodoError(`Error exporting circle of trust ${cotId}`, error);\n  }\n}\n\n/**\n * Application export options\n */\nexport type CircleOfTrustExportOptions = {\n  /**\n   * Indicate progress\n   */\n  indicateProgress: boolean;\n};\n\n/**\n * Export circles of trust\n * @returns {Promise<CirclesOfTrustExportInterface>} a promise that resolves to an CirclesOfTrustExportInterface object\n */\nexport async function exportCirclesOfTrust({\n  entityProviders = [],\n  options = { indicateProgress: true },\n  state,\n}: {\n  entityProviders?: string[];\n  options?: CircleOfTrustExportOptions;\n  state: State;\n}): Promise<CirclesOfTrustExportInterface> {\n  try {\n    debugMessage({\n      message: `CirclesOfTrustOps.exportCirclesOfTrust: start`,\n      state,\n    });\n    const exportData = createCirclesOfTrustExportTemplate({ state });\n    let indicatorId: string;\n    const cots = await readCirclesOfTrust({ entityProviders, state });\n    if (options.indicateProgress)\n      indicatorId = createProgressIndicator({\n        total: cots.length,\n        message: 'Exporting circles of trust...',\n        state,\n      });\n    for (const cot of cots) {\n      if (options.indicateProgress)\n        updateProgressIndicator({\n          id: indicatorId,\n          message: `Exporting circle of trust ${cot._id}`,\n          state,\n        });\n      exportData.saml.cot[cot._id] = cot;\n    }\n    if (options.indicateProgress)\n      stopProgressIndicator({\n        id: indicatorId,\n        message:\n          cots.length > 1 ? `Exported ${cots.length} circles of trust.` : null,\n        state,\n      });\n    debugMessage({\n      message: `CirclesOfTrustOps.exportCirclesOfTrust: end`,\n      state,\n    });\n    return exportData;\n  } catch (error) {\n    throw new FrodoError(`Error exporting circles of trust`);\n  }\n}\n\n/**\n * Import a circle of trust by id/name from file\n * @param {String} cotId Circle of trust id/name\n * @param {CirclesOfTrustExportInterface} importData import data\n */\nexport async function importCircleOfTrust({\n  cotId,\n  importData,\n  state,\n}: {\n  cotId: string;\n  importData: CirclesOfTrustExportInterface;\n  state: State;\n}) {\n  const imported = [];\n  try {\n    let response = null;\n    for (const id of Object.keys(importData.saml.cot)) {\n      if (id === cotId) {\n        const validEntityIds = await readSaml2EntityIds({ state });\n        const validProviders = validEntityIds.map((id) => `${id}|saml2`);\n        const cotData = importData.saml.cot[id];\n        delete cotData._rev;\n        // only allow adding valid providers\n        cotData.trustedProviders = validProviders.filter((value) =>\n          cotData.trustedProviders.includes(value)\n        );\n        try {\n          response = await createCircleOfTrust({ cotId, cotData, state });\n          return response;\n        } catch (createError) {\n          if ((createError as FrodoError).httpStatus === 409) {\n            debugMessage({\n              message: `Circle of trust: ${cotId} already exists, updating...`,\n              state,\n            });\n            const existingCot = await readCircleOfTrust({ cotId, state });\n            debugMessage({\n              message: `CirclesOfTrustOps.importCirclesOfTrust: Existing trusted providers for ${cotId}:\\n${existingCot.trustedProviders\n                .map((it) => it.split('|')[0])\n                .join('\\n')}.`,\n              state,\n            });\n            const providers = [\n              ...new Set([\n                ...existingCot.trustedProviders,\n                ...cotData.trustedProviders,\n              ]),\n            ];\n            debugMessage({\n              message: `CirclesOfTrustOps.importCirclesOfTrust: Merged trusted providers for ${cotId}:\\n${providers\n                .map((it) => it.split('|')[0])\n                .join('\\n')}.`,\n              state,\n            });\n            if (providers.length > existingCot.trustedProviders.length) {\n              existingCot.trustedProviders = providers;\n              response = await updateCircleOfTrust({\n                cotId,\n                cotData: existingCot,\n                state,\n              });\n              imported.push(id);\n              return response;\n            } else {\n              debugMessage({\n                message: `CirclesOfTrustOps.importCirclesOfTrust: No new trusted providers for ${cotId}.`,\n                state,\n              });\n              imported.push(id);\n              return existingCot;\n            }\n          } else {\n            throw createError;\n          }\n        }\n      }\n    }\n    if (imported.length == 0) {\n      throw new FrodoError(`Import error:\\n${cotId} not found in import data!`);\n    }\n  } catch (error) {\n    // just re-throw our own errors\n    if (imported.length == 0) {\n      throw error;\n    }\n    throw new FrodoError(`Error importing circle of trust ${cotId}`);\n  }\n}\n\n/**\n * Import first circle of trust\n * @param {CirclesOfTrustExportInterface} importData import data\n */\nexport async function importFirstCircleOfTrust({\n  importData,\n  state,\n}: {\n  importData: CirclesOfTrustExportInterface;\n  state: State;\n}): Promise<CircleOfTrustSkeleton> {\n  try {\n    for (const cotId of Object.keys(importData.saml.cot)) {\n      const validEntityIds = await readSaml2EntityIds({ state });\n      const validProviders = validEntityIds.map((id) => `${id}|saml2`);\n      const cotData = importData.saml.cot[cotId];\n      delete cotData._rev;\n      // only allow adding valid providers\n      cotData.trustedProviders = validProviders.filter((value) =>\n        cotData.trustedProviders.includes(value)\n      );\n      try {\n        const response = await createCircleOfTrust({ cotId, cotData, state });\n        return response;\n      } catch (createError) {\n        if ((createError as FrodoError).httpStatus === 409) {\n          debugMessage({\n            message: `Circle of trust: ${cotId} already exists, updating...`,\n            state,\n          });\n          const existingCot = await readCircleOfTrust({ cotId, state });\n          debugMessage({\n            message: `CirclesOfTrustOps.importCirclesOfTrust: Existing trusted providers for ${cotId}:\\n${existingCot.trustedProviders\n              .map((it) => it.split('|')[0])\n              .join('\\n')}.`,\n            state,\n          });\n          const providers = [\n            ...new Set([\n              ...existingCot.trustedProviders,\n              ...cotData.trustedProviders,\n            ]),\n          ];\n          debugMessage({\n            message: `CirclesOfTrustOps.importCirclesOfTrust: Merged trusted providers for ${cotId}:\\n${providers\n              .map((it) => it.split('|')[0])\n              .join('\\n')}.`,\n            state,\n          });\n          if (providers.length > existingCot.trustedProviders.length) {\n            existingCot.trustedProviders = providers;\n            const response = await updateCircleOfTrust({\n              cotId,\n              cotData: existingCot,\n              state,\n            });\n            return response;\n          } else {\n            debugMessage({\n              message: `CirclesOfTrustOps.importCirclesOfTrust: No new trusted providers for ${cotId}.`,\n              state,\n            });\n            return existingCot;\n          }\n        } else {\n          throw createError;\n        }\n      }\n      break;\n    }\n  } catch (error) {\n    throw new FrodoError(`Error importing first circle of trust`, error);\n  }\n  throw new FrodoError(`No circles of trust found in import data!`);\n}\n\n/**\n * Import circles of trust\n * @param {CirclesOfTrustExportInterface} importData import data\n */\nexport async function importCirclesOfTrust({\n  entityProviders = [],\n  importData,\n  state,\n}: {\n  entityProviders?: string[];\n  importData: CirclesOfTrustExportInterface;\n  state: State;\n}): Promise<CircleOfTrustSkeleton[]> {\n  const responses = [];\n  const errors = [];\n  try {\n    entityProviders = entityProviders.map((id) => `${id}|saml2`);\n    const validEntityIds = await readSaml2EntityIds({ state });\n    const validProviders = validEntityIds.map((id) => `${id}|saml2`);\n    for (const cotId of Object.keys(importData.saml.cot)) {\n      try {\n        const cotData: CircleOfTrustSkeleton = importData.saml.cot[cotId];\n        delete cotData._rev;\n        // apply filter and merge logic\n        if (entityProviders.length) {\n          // only allow filtering for valid providers\n          entityProviders = validProviders.filter((value) =>\n            entityProviders.includes(value)\n          );\n          // determine if cot import candidate matches entity providers filter\n          let hasEntityId = false;\n          for (const trustedProvider of cotData.trustedProviders) {\n            if (!hasEntityId && entityProviders.includes(trustedProvider)) {\n              hasEntityId = true;\n            }\n          }\n          if (hasEntityId) {\n            try {\n              const response = await createCircleOfTrust({\n                cotId,\n                cotData,\n                state,\n              });\n              responses.push(response);\n            } catch (createError) {\n              if ((createError as FrodoError).httpStatus === 409) {\n                debugMessage({\n                  message: `Circle of trust: ${cotId} already exists, updating...`,\n                  state,\n                });\n                const existingCot = await readCircleOfTrust({ cotId, state });\n                debugMessage({\n                  message: `CirclesOfTrustOps.importCirclesOfTrust: Existing trusted providers for ${cotId}:\\n${existingCot.trustedProviders\n                    .map((it) => it.split('|')[0])\n                    .join('\\n')}.`,\n                  state,\n                });\n                const providers = [\n                  ...new Set([\n                    ...existingCot.trustedProviders,\n                    ...entityProviders,\n                  ]),\n                ];\n                debugMessage({\n                  message: `CirclesOfTrustOps.importCirclesOfTrust: Updated trusted providers for ${cotId}:\\n${providers\n                    .map((it) => it.split('|')[0])\n                    .join('\\n')}.`,\n                  state,\n                });\n                if (providers.length > existingCot.trustedProviders.length) {\n                  existingCot.trustedProviders = providers;\n                  const response = await updateCircleOfTrust({\n                    cotId,\n                    cotData: existingCot,\n                    state,\n                  });\n                  responses.push(response);\n                } else {\n                  debugMessage({\n                    message: `CirclesOfTrustOps.importCirclesOfTrust: No new trusted providers for ${cotId}.`,\n                    state,\n                  });\n                }\n              } else {\n                throw createError;\n              }\n            }\n          }\n        }\n        // import unfiltered but merge if existing cot\n        else {\n          // only allow adding valid providers\n          cotData.trustedProviders = validProviders.filter((value) =>\n            cotData.trustedProviders.includes(value)\n          );\n          try {\n            const response = await createCircleOfTrust({\n              cotId,\n              cotData,\n              state,\n            });\n            responses.push(response);\n          } catch (createError) {\n            if ((createError as FrodoError).httpStatus === 409) {\n              debugMessage({\n                message: `Circle of trust: ${cotId} already exists, updating...`,\n                state,\n              });\n              const existingCot = await readCircleOfTrust({ cotId, state });\n              debugMessage({\n                message: `CirclesOfTrustOps.importCirclesOfTrust: Existing trusted providers for ${cotId}:\\n${existingCot.trustedProviders\n                  .map((it) => it.split('|')[0])\n                  .join('\\n')}.`,\n                state,\n              });\n              const providers = [\n                ...new Set([\n                  ...existingCot.trustedProviders,\n                  ...cotData.trustedProviders,\n                ]),\n              ];\n              debugMessage({\n                message: `CirclesOfTrustOps.importCirclesOfTrust: Merged trusted providers for ${cotId}:\\n${providers\n                  .map((it) => it.split('|')[0])\n                  .join('\\n')}.`,\n                state,\n              });\n              if (providers.length > existingCot.trustedProviders.length) {\n                existingCot.trustedProviders = providers;\n                const response = await updateCircleOfTrust({\n                  cotId,\n                  cotData: existingCot,\n                  state,\n                });\n                responses.push(response);\n              } else {\n                debugMessage({\n                  message: `CirclesOfTrustOps.importCirclesOfTrust: No new trusted providers for ${cotId}.`,\n                  state,\n                });\n              }\n            } else {\n              throw createError;\n            }\n          }\n        }\n      } catch (error) {\n        debugMessage({\n          message: `Error ${error.response?.status} creating/updating circle of trust: ${error.response?.data?.message}`,\n          state,\n        });\n        errors.push(error);\n      }\n    }\n    if (errors.length > 0) {\n      throw new FrodoError(`Error importing circles of trust`);\n    }\n    return responses;\n  } catch (error) {\n    // just re-throw previously caught errors\n    if (errors.length > 0) {\n      throw error;\n    }\n    throw new FrodoError(`Error importing circles of trust`, error);\n  }\n}\n","import util from 'util';\n\nimport { State } from '../shared/State';\nimport { getHostBaseUrl } from '../utils/ForgeRockUtils';\nimport { IdObjectSkeletonInterface, PagedResult } from './ApiTypes';\nimport { generateIdmApi } from './BaseApi';\n\nconst systemActionsUrlTemplate = '%s/openidm/system?_action=%s';\nconst systemTestUrlTemplate = '%s/openidm/system/%s?_action=test';\nconst systemObjectActionsUrlTemplate = '%s/openidm/system/%s/%s?_action=%s';\nconst systemRunScriptUrlTemplate =\n  '%s/openidm/system/%s?_action=script&scriptId=%s&scriptExecuteMode=resource';\nconst systemQueryAllUrlTemplate =\n  '%s/openidm/system/%s/%s?_queryId=query-all-ids';\nconst systemQueryByFilterUrlTemplate =\n  '%s/openidm/system/%s/%s?_queryFilter=%s';\nconst systemObjectUrlTemplate = '%s/openidm/system/%s/%s/%s';\n\nexport const DEFAULT_PAGE_SIZE: number = 1000;\n\nexport interface ConnectorServerStatusInterface {\n  name: string;\n  type: string;\n  ok: boolean;\n}\n\nexport interface TestConnectorServersInterface {\n  openicf: ConnectorServerStatusInterface[];\n}\n\nexport interface SystemStatusInterface {\n  name: string;\n  enabled: boolean;\n  config: string;\n  connectorRef: {\n    connectorHostRef: string;\n    bundleVersion: string;\n    bundleName: string;\n    connectorName: string;\n  };\n  displayName: string;\n  objectTypes: string[];\n  ok: boolean;\n}\n\n/**\n * Test connector servers\n * @returns {Promise<TestConnectorServersInterface>} a promise that resolves to a TestConnectorServersInterface object\n */\nexport async function testConnectorServers({\n  state,\n}: {\n  state: State;\n}): Promise<TestConnectorServersInterface> {\n  const urlString = util.format(\n    systemActionsUrlTemplate,\n    getHostBaseUrl(state.getHost()),\n    'testConnectorServers'\n  );\n  const { data } = await generateIdmApi({ state, requestOverride: {} }).post(\n    urlString\n  );\n  return data as TestConnectorServersInterface;\n}\n\nexport async function readAvailableSystems({\n  state,\n}: {\n  state: State;\n}): Promise<SystemStatusInterface[]> {\n  const urlString = util.format(\n    systemActionsUrlTemplate,\n    getHostBaseUrl(state.getHost()),\n    'test'\n  );\n  const { data } = await generateIdmApi({ requestOverride: {}, state }).post(\n    urlString\n  );\n  return data;\n}\n\nexport async function readSystemStatus({\n  systemName,\n  state,\n}: {\n  systemName: string;\n  state: State;\n}): Promise<SystemStatusInterface> {\n  const urlString = util.format(\n    systemTestUrlTemplate,\n    getHostBaseUrl(state.getHost()),\n    systemName\n  );\n  const { data } = await generateIdmApi({ requestOverride: {}, state }).post(\n    urlString\n  );\n  return data;\n}\n\nexport async function authenticateSystemObject({\n  systemName,\n  systemObjectType,\n  username,\n  password,\n  state,\n}: {\n  systemName: string;\n  systemObjectType: string;\n  username: string;\n  password: string;\n  state: State;\n}): Promise<IdObjectSkeletonInterface> {\n  const urlString = util.format(\n    systemObjectActionsUrlTemplate,\n    getHostBaseUrl(state.getHost()),\n    systemName,\n    systemObjectType,\n    'authenticate'\n  );\n  const { data } = await generateIdmApi({ requestOverride: {}, state }).post(\n    urlString,\n    { username, password }\n  );\n  return data;\n}\n\nexport async function runSystemScript({\n  systemName,\n  scriptName,\n  state,\n}: {\n  systemName: string;\n  scriptName: string;\n  state: State;\n}) {\n  const urlString = util.format(\n    systemRunScriptUrlTemplate,\n    getHostBaseUrl(state.getHost()),\n    systemName,\n    scriptName\n  );\n  const { data } = await generateIdmApi({ requestOverride: {}, state }).post(\n    urlString\n  );\n  return data;\n}\n\n//?_queryId=query-all-ids&_pageSize=/lmextuserCustomer sw '6'&_totalPagedResultsPolicy=EXACT\nexport async function queryAllSystemObjectIds({\n  systemName,\n  systemObjectType,\n  pageSize = DEFAULT_PAGE_SIZE,\n  pageCookie = undefined,\n  state,\n}: {\n  systemName: string;\n  systemObjectType: string;\n  pageSize?: number;\n  pageCookie?: string;\n  state: State;\n}): Promise<PagedResult<IdObjectSkeletonInterface>> {\n  const pagingParams = pageSize\n    ? `&_pageSize=${pageSize}&_totalPagedResultsPolicy=EXACT`\n    : '';\n  const urlTemplate = pageCookie\n    ? `${systemQueryAllUrlTemplate}${pagingParams}&_pagedResultsCookie=${pageCookie}`\n    : `${systemQueryAllUrlTemplate}${pagingParams}`;\n  const urlString = util.format(\n    urlTemplate,\n    getHostBaseUrl(state.getHost()),\n    systemName,\n    systemObjectType\n  );\n  const { data } = await generateIdmApi({ state }).get(urlString);\n  return data;\n}\n\nexport async function querySystemObjects({\n  systemName,\n  systemObjectType,\n  filter,\n  fields = ['*'],\n  pageSize = DEFAULT_PAGE_SIZE,\n  pageCookie = undefined,\n  state,\n}: {\n  systemName: string;\n  systemObjectType: string;\n  filter: string;\n  fields: string[];\n  pageSize?: number;\n  pageCookie?: string;\n  state: State;\n}): Promise<PagedResult<IdObjectSkeletonInterface>> {\n  const fieldsParam = fields.length > 0 ? `&_fields=${fields.join(',')}` : '';\n  const pagingParams = pageSize\n    ? `&_pageSize=${pageSize}&_totalPagedResultsPolicy=EXACT`\n    : '';\n  const urlTemplate = pageCookie\n    ? `${systemQueryByFilterUrlTemplate}${pagingParams}${fieldsParam}&_pagedResultsCookie=${pageCookie}`\n    : `${systemQueryByFilterUrlTemplate}${pagingParams}${fieldsParam}`;\n  const urlString = util.format(\n    urlTemplate,\n    getHostBaseUrl(state.getHost()),\n    systemName,\n    systemObjectType,\n    decodeURIComponent(filter) === filter ? encodeURIComponent(filter) : filter\n  );\n  const { data } = await generateIdmApi({ requestOverride: {}, state }).get(\n    urlString\n  );\n  return data as PagedResult<IdObjectSkeletonInterface>;\n}\n\nexport async function getSystemObject({\n  systemName,\n  systemObjectType,\n  systemObjectId,\n  fields = ['*'],\n  state,\n}: {\n  systemName: string;\n  systemObjectType: string;\n  systemObjectId: string;\n  fields?: string[];\n  state: State;\n}): Promise<IdObjectSkeletonInterface> {\n  const fieldsParam = `_fields=${fields.join(',')}`;\n  const urlString = util.format(\n    `${systemObjectUrlTemplate}?${fieldsParam}`,\n    getHostBaseUrl(state.getHost()),\n    systemName,\n    systemObjectType,\n    systemObjectId\n  );\n  const { data } = await generateIdmApi({ requestOverride: {}, state }).get(\n    urlString\n  );\n  return data as IdObjectSkeletonInterface;\n}\n\nexport async function createSystemObject({\n  systemName,\n  systemObjectType,\n  systemObjectData,\n  state,\n}: {\n  systemName: string;\n  systemObjectType: string;\n  systemObjectData: IdObjectSkeletonInterface;\n  state: State;\n}): Promise<IdObjectSkeletonInterface> {\n  const urlString = util.format(\n    systemObjectActionsUrlTemplate,\n    getHostBaseUrl(state.getHost()),\n    systemName,\n    systemObjectType,\n    'create'\n  );\n  const { data } = await generateIdmApi({ requestOverride: {}, state }).post(\n    urlString,\n    systemObjectData\n  );\n  return data;\n}\n\nexport async function putSystemObject({\n  systemName,\n  systemObjectType,\n  systemObjectId,\n  systemObjectData,\n  failIfExists = false,\n  state,\n}: {\n  systemName: string;\n  systemObjectType: string;\n  systemObjectId: string;\n  systemObjectData: IdObjectSkeletonInterface;\n  failIfExists?: boolean;\n  state: State;\n}): Promise<IdObjectSkeletonInterface> {\n  const urlString = util.format(\n    systemObjectUrlTemplate,\n    getHostBaseUrl(state.getHost()),\n    systemName,\n    systemObjectType,\n    systemObjectId\n  );\n  const requestOverride = failIfExists\n    ? { headers: { 'If-None-Match': '*' } }\n    : { headers: { 'If-Match': '*' } };\n  const { data } = await generateIdmApi({ requestOverride, state }).put(\n    urlString,\n    systemObjectData\n  );\n  return data;\n}\n\nexport interface SystemObjectPatchOperationInterface {\n  operation:\n    | 'add'\n    | 'copy'\n    | 'increment'\n    | 'move'\n    | 'remove'\n    | 'replace'\n    | 'transform';\n  field: string;\n  value?: any;\n  from?: string;\n}\n\nexport async function patchSystemObject({\n  systemName,\n  systemObjectType,\n  systemObjectId,\n  operations,\n  state,\n}: {\n  systemName: string;\n  systemObjectType: string;\n  systemObjectId: string;\n  operations: SystemObjectPatchOperationInterface[];\n  state: State;\n}): Promise<IdObjectSkeletonInterface> {\n  const urlString = util.format(\n    systemObjectUrlTemplate,\n    getHostBaseUrl(state.getHost()),\n    systemName,\n    systemObjectType,\n    systemObjectId\n  );\n  const { data } = await generateIdmApi({ requestOverride: {}, state }).patch(\n    urlString,\n    operations\n  );\n  return data;\n}\n\nexport async function deleteSystemObject({\n  systemName,\n  systemObjectType,\n  systemObjectId,\n  state,\n}: {\n  systemName: string;\n  systemObjectType: string;\n  systemObjectId: string;\n  state: State;\n}): Promise<IdObjectSkeletonInterface> {\n  const urlString = util.format(\n    systemObjectUrlTemplate,\n    getHostBaseUrl(state.getHost()),\n    systemName,\n    systemObjectType,\n    systemObjectId\n  );\n  const { data } = await generateIdmApi({ requestOverride: {}, state }).delete(\n    urlString\n  );\n  return data;\n}\n","import { IdObjectSkeletonInterface, PagedResult } from '../api/ApiTypes';\nimport {\n  authenticateSystemObject as _authenticateSystemObject,\n  ConnectorServerStatusInterface,\n  createSystemObject as _createSystemObject,\n  DEFAULT_PAGE_SIZE,\n  deleteSystemObject as _deleteSystemObject,\n  getSystemObject as _getSystemObject,\n  patchSystemObject as _patchSystemObject,\n  putSystemObject as _putSystemObject,\n  queryAllSystemObjectIds as _queryAllSystemObjectIds,\n  querySystemObjects as _querySystemObjects,\n  readAvailableSystems as _readAvailableSystems,\n  readSystemStatus as _readSystemStatus,\n  runSystemScript as _runSystemScript,\n  SystemObjectPatchOperationInterface,\n  SystemStatusInterface,\n  testConnectorServers as _testConnectorServers,\n} from '../api/IdmSystemApi';\nimport { State } from '../shared/State';\nimport { ObjectTypeSkeleton, readConnector } from './ConnectorOps';\nimport { FrodoError } from './FrodoError';\n\nexport type IdmSystem = {\n  /**\n   * Test connector servers\n   * @returns {Promise<ConnectorServerStatusInterface[]>} a promise that resolves to an array of ConnectorServerStatusInterface objects\n   */\n  testConnectorServers(): Promise<ConnectorServerStatusInterface[]>;\n  /**\n   * Read available systems/connectors status\n   * @returns {Promise<SystemStatusInterface[]>} a promise resolving to an array of system status objects\n   */\n  readAvailableSystems(): Promise<SystemStatusInterface[]>;\n  /**\n   * Read system/connector status\n   * @returns {Promise<SystemStatusInterface>} a promise resolving to a system status object\n   */\n  readSystemStatus(systemName: string): Promise<SystemStatusInterface>;\n  /**\n   * Authenticate a system object using username and password (pass-through authentication)\n   * @param {string} systemName name of system/connector\n   * @param {string} systemObjectType type of system object\n   * @param {string} username system object username\n   * @param {string} password system object password\n   * @returns {Promise<IdObjectSkeletonInterface>} a promise resolving to an IdObjectSkeletonInterface object containing only the _id\n   */\n  authenticateSystemObject(\n    systemName: string,\n    systemObjectType: string,\n    username: string,\n    password: string\n  ): Promise<IdObjectSkeletonInterface>;\n  /**\n   * Run system script\n   * @param {string} systemName name of system/connector\n   * @param {string} scriptName name of script\n   * @returns {Promise<any>} a promise resolving to a status object\n   */\n  runSystemScript(systemName: string, scriptName: string): Promise<any>;\n  /**\n   * Query all system object ids\n   * @param {string} systemName name of system/connector\n   * @param {string} systemObjectType type of system object\n   * @param {number} pageSize page size (default value: 1000)\n   * @param {string} pageCookie paged results cookie\n   * @returns {Promise<PagedResult<IdObjectSkeletonInterface>>} a promise resolving to an array of IdObjectSkeletonInterface objects\n   */\n  queryAllSystemObjectIds(\n    systemName: string,\n    systemObjectType: string,\n    pageSize?: number,\n    pageCookie?: string\n  ): Promise<PagedResult<IdObjectSkeletonInterface>>;\n  /**\n   * Query system objects using a search filter\n   * @param {string} systemName name of system/connector\n   * @param {string} systemObjectType type of system object\n   * @param {string} filter search filter\n   * @param {string[]} fields array of fields to return\n   * @param {number} pageSize page size (default value: 1000)\n   * @param {string} pageCookie paged results cookie\n   * @returns {Promise<PagedResult<IdObjectSkeletonInterface>>} a promise resolving to an array of IdObjectSkeletonInterface objects\n   */\n  querySystemObjects(\n    systemName: string,\n    systemObjectType: string,\n    filter: string,\n    fields?: string[],\n    pageSize?: number,\n    pageCookie?: string\n  ): Promise<PagedResult<IdObjectSkeletonInterface>>;\n  /**\n   * Read system object\n   * @param {string} systemName name of system/connector\n   * @param {string} systemObjectType type of system object\n   * @param {string} systemObjectId id of system object\n   * @param {string[]} fields array of fields to return (default: `['*']`)\n   * @returns {Promise<IdObjectSkeletonInterface>} a promise resolving to an IdObjectSkeletonInterface object\n   */\n  readSystemObject(\n    systemName: string,\n    systemObjectType: string,\n    systemObjectId: string,\n    fields?: string[]\n  ): Promise<IdObjectSkeletonInterface>;\n  /**\n   * Create system object\n   * @param {string} systemName name of system/connector\n   * @param {string} systemObjectType type of system object\n   * @param {IdObjectSkeletonInterface} systemObjectData system object data\n   * @returns {Promise<IdObjectSkeletonInterface>} a promise resolving to an IdObjectSkeletonInterface object\n   */\n  createSystemObject(\n    systemName: string,\n    systemObjectType: string,\n    systemObjectData: IdObjectSkeletonInterface\n  ): Promise<IdObjectSkeletonInterface>;\n  /**\n   * Update or create system object\n   * @param {string} systemName name of system/connector\n   * @param {string} systemObjectType type of system object\n   * @param {string} systemObjectId id of system object\n   * @param {IdObjectSkeletonInterface} systemObjectData system object data\n   * @param {boolean} failIfExists fail if object exists (default value: false)\n   * @returns {Promise<IdObjectSkeletonInterface>} a promise resolving to an IdObjectSkeletonInterface object\n   */\n  updateSystemObject(\n    systemName: string,\n    systemObjectType: string,\n    systemObjectId: string,\n    systemObjectData: IdObjectSkeletonInterface,\n    failIfExists?: boolean\n  ): Promise<IdObjectSkeletonInterface>;\n  /**\n   * Partially update system object through a collection of patch operations.\n   * @param {string} systemName name of system/connector\n   * @param {string} systemObjectType type of system object\n   * @param {string} systemObjectId id of system object\n   * @param {SystemObjectPatchOperationInterface[]} operations collection of patch operations to perform on the object\n   * @returns {Promise<IdObjectSkeletonInterface>} a promise resolving to an IdObjectSkeletonInterface object\n   */\n  updateSystemObjectProperties(\n    systemName: string,\n    systemObjectType: string,\n    systemObjectId: string,\n    operations: SystemObjectPatchOperationInterface[]\n  ): Promise<IdObjectSkeletonInterface>;\n  /**\n   * Delete system object\n   * @param {string} systemName name of system/connector\n   * @param {string} systemObjectType type of system object\n   * @param {string} systemObjectId id of system object\n   * @returns {Promise<IdObjectSkeletonInterface>} a promise resolving to an IdObjectSkeletonInterface object\n   */\n  deleteSystemObject(\n    systemName: string,\n    systemObjectType: string,\n    systemObjectId: string\n  ): Promise<IdObjectSkeletonInterface>;\n  /**\n   * Read system schema\n   * @param {string} systemName name of system/connector\n   * @returns {Promise<Record<string, ObjectTypeSkeleton>>} a promise resolving to a map of Record<string, ObjectTypeSkeleton>\n   */\n  readSystemSchema(\n    systemName: string\n  ): Promise<Record<string, ObjectTypeSkeleton>>;\n};\n\nexport default (state: State): IdmSystem => {\n  return {\n    async testConnectorServers(): Promise<ConnectorServerStatusInterface[]> {\n      return testConnectorServers({ state });\n    },\n    async readAvailableSystems(): Promise<SystemStatusInterface[]> {\n      return readAvailableSystems({ state });\n    },\n    async readSystemStatus(systemName: string): Promise<SystemStatusInterface> {\n      return readSystemStatus({ systemName, state });\n    },\n    async authenticateSystemObject(\n      systemName: string,\n      systemObjectType: string,\n      username: string,\n      password: string\n    ): Promise<IdObjectSkeletonInterface> {\n      return authenticateSystemObject({\n        systemName,\n        systemObjectType,\n        username,\n        password,\n        state,\n      });\n    },\n    async runSystemScript(\n      systemName: string,\n      scriptName: string\n    ): Promise<any> {\n      return runSystemScript({ systemName, scriptName, state });\n    },\n    async queryAllSystemObjectIds(\n      systemName: string,\n      systemObjectType: string,\n      pageSize: number = DEFAULT_PAGE_SIZE,\n      pageCookie?: string\n    ): Promise<PagedResult<IdObjectSkeletonInterface>> {\n      return queryAllSystemObjectIds({\n        systemName,\n        systemObjectType,\n        pageSize,\n        pageCookie,\n        state,\n      });\n    },\n    async querySystemObjects(\n      systemName: string,\n      systemObjectType: string,\n      filter: string = 'true',\n      fields: string[] = ['*'],\n      pageSize: number = DEFAULT_PAGE_SIZE,\n      pageCookie: string = undefined\n    ): Promise<PagedResult<IdObjectSkeletonInterface>> {\n      return querySystemObjects({\n        systemName,\n        systemObjectType,\n        filter,\n        fields,\n        pageSize,\n        pageCookie,\n        state,\n      });\n    },\n    async readSystemObject(\n      systemName: string,\n      systemObjectType: string,\n      systemObjectId: string,\n      fields: string[] = ['*']\n    ): Promise<IdObjectSkeletonInterface> {\n      return readSystemObject({\n        systemName,\n        systemObjectType,\n        systemObjectId,\n        fields,\n        state,\n      });\n    },\n    async createSystemObject(\n      systemName: string,\n      systemObjectType: string,\n      systemObjectData: IdObjectSkeletonInterface\n    ): Promise<IdObjectSkeletonInterface> {\n      return createSystemObject({\n        systemName,\n        systemObjectType,\n        systemObjectData,\n        state,\n      });\n    },\n    async updateSystemObject(\n      systemName: string,\n      systemObjectType: string,\n      systemObjectId: string,\n      systemObjectData: IdObjectSkeletonInterface,\n      failIfExists = false\n    ): Promise<IdObjectSkeletonInterface> {\n      return updateSystemObject({\n        systemName,\n        systemObjectType,\n        systemObjectId,\n        systemObjectData,\n        failIfExists,\n        state,\n      });\n    },\n    async updateSystemObjectProperties(\n      systemName: string,\n      systemObjectType: string,\n      systemObjectId: string,\n      operations: SystemObjectPatchOperationInterface[]\n    ): Promise<IdObjectSkeletonInterface> {\n      return updateSystemObjectProperties({\n        systemName,\n        systemObjectType,\n        systemObjectId,\n        operations,\n        state,\n      });\n    },\n    async deleteSystemObject(\n      systemName: string,\n      systemObjectType: string,\n      systemObjectId: string\n    ): Promise<IdObjectSkeletonInterface> {\n      return deleteSystemObject({\n        systemName,\n        systemObjectType,\n        systemObjectId,\n        state,\n      });\n    },\n    async readSystemSchema(\n      systemName: string\n    ): Promise<Record<string, ObjectTypeSkeleton>> {\n      return readSystemSchema({ systemName, state });\n    },\n  };\n};\n\n/**\n * Test connector servers\n * @returns {Promise<ConnectorServerStatusInterface[]>} a promise that resolves to an array of ConnectorServerStatusInterface objects\n */\nexport async function testConnectorServers({\n  state,\n}: {\n  state: State;\n}): Promise<ConnectorServerStatusInterface[]> {\n  try {\n    const response = await _testConnectorServers({ state });\n    return response.openicf;\n  } catch (error) {\n    throw new FrodoError(`Error testing connector servers`, error);\n  }\n}\n\nexport async function readAvailableSystems({\n  state,\n}: {\n  state: State;\n}): Promise<SystemStatusInterface[]> {\n  try {\n    return _readAvailableSystems({ state });\n  } catch (error) {\n    throw new FrodoError(`Error reading available systems`, error);\n  }\n}\n\nexport async function readSystemStatus({\n  systemName,\n  state,\n}: {\n  systemName: string;\n  state: State;\n}): Promise<SystemStatusInterface> {\n  try {\n    return _readSystemStatus({ systemName, state });\n  } catch (error) {\n    throw new FrodoError(`Error reading system status`, error);\n  }\n}\n\nexport async function authenticateSystemObject({\n  systemName,\n  systemObjectType,\n  username,\n  password,\n  state,\n}: {\n  systemName: string;\n  systemObjectType: string;\n  username: string;\n  password: string;\n  state: State;\n}): Promise<IdObjectSkeletonInterface> {\n  try {\n    return _authenticateSystemObject({\n      systemName,\n      systemObjectType,\n      username,\n      password,\n      state,\n    });\n  } catch (error) {\n    throw new FrodoError(\n      `Error authenticating ${systemObjectType} ${username} in system ${systemName}`,\n      error\n    );\n  }\n}\n\nexport async function runSystemScript({\n  systemName,\n  scriptName,\n  state,\n}: {\n  systemName: string;\n  scriptName: string;\n  state: State;\n}) {\n  try {\n    return _runSystemScript({ systemName, scriptName, state });\n  } catch (error) {\n    throw new FrodoError(\n      `Error running script ${scriptName} in system ${systemName}`,\n      error\n    );\n  }\n}\n\nexport async function queryAllSystemObjectIds({\n  systemName,\n  systemObjectType,\n  pageSize = DEFAULT_PAGE_SIZE,\n  pageCookie = undefined,\n  state,\n}: {\n  systemName: string;\n  systemObjectType: string;\n  pageSize?: number;\n  pageCookie?: string;\n  state: State;\n}): Promise<PagedResult<IdObjectSkeletonInterface>> {\n  try {\n    return _queryAllSystemObjectIds({\n      systemName,\n      systemObjectType,\n      pageSize,\n      pageCookie,\n      state,\n    });\n  } catch (error) {\n    throw new FrodoError(\n      `Error querying all ${systemObjectType} IDs in system ${systemName}`,\n      error\n    );\n  }\n}\n\nexport async function querySystemObjects({\n  systemName,\n  systemObjectType,\n  filter,\n  fields = ['*'],\n  pageSize = DEFAULT_PAGE_SIZE,\n  pageCookie = undefined,\n  state,\n}: {\n  systemName: string;\n  systemObjectType: string;\n  filter: string;\n  fields?: string[];\n  pageSize?: number;\n  pageCookie?: string;\n  state: State;\n}): Promise<PagedResult<IdObjectSkeletonInterface>> {\n  try {\n    return _querySystemObjects({\n      systemName,\n      systemObjectType,\n      filter,\n      fields,\n      pageSize,\n      pageCookie,\n      state,\n    });\n  } catch (error) {\n    throw new FrodoError(\n      `Error querying ${systemObjectType} objects in system ${systemName} matching filter \"${filter}\"`,\n      error\n    );\n  }\n}\n\nexport async function readSystemObject({\n  systemName,\n  systemObjectType,\n  systemObjectId,\n  fields = ['*'],\n  state,\n}: {\n  systemName: string;\n  systemObjectType: string;\n  systemObjectId: string;\n  fields?: string[];\n  state: State;\n}): Promise<IdObjectSkeletonInterface> {\n  try {\n    return _getSystemObject({\n      systemName,\n      systemObjectType,\n      systemObjectId,\n      fields,\n      state,\n    });\n  } catch (error) {\n    throw new FrodoError(\n      `Error reading ${systemObjectType} ${systemObjectId} in system ${systemName}`,\n      error\n    );\n  }\n}\n\nexport async function createSystemObject({\n  systemName,\n  systemObjectType,\n  systemObjectData,\n  state,\n}: {\n  systemName: string;\n  systemObjectType: string;\n  systemObjectData: IdObjectSkeletonInterface;\n  state: State;\n}): Promise<IdObjectSkeletonInterface> {\n  try {\n    return _createSystemObject({\n      systemName,\n      systemObjectType,\n      systemObjectData,\n      state,\n    });\n  } catch (error) {\n    throw new FrodoError(\n      `Error creating ${systemObjectType} object in system ${systemName}`,\n      error\n    );\n  }\n}\n\nexport async function updateSystemObject({\n  systemName,\n  systemObjectType,\n  systemObjectId,\n  systemObjectData,\n  failIfExists = false,\n  state,\n}: {\n  systemName: string;\n  systemObjectType: string;\n  systemObjectId: string;\n  systemObjectData: IdObjectSkeletonInterface;\n  failIfExists?: boolean;\n  state: State;\n}): Promise<IdObjectSkeletonInterface> {\n  try {\n    return _putSystemObject({\n      systemName,\n      systemObjectType,\n      systemObjectId,\n      systemObjectData,\n      failIfExists,\n      state,\n    });\n  } catch (error) {\n    throw new FrodoError(\n      `Error updating ${systemObjectType} ${systemObjectId} in system ${systemName}`,\n      error\n    );\n  }\n}\n\nexport async function updateSystemObjectProperties({\n  systemName,\n  systemObjectType,\n  systemObjectId,\n  operations,\n  state,\n}: {\n  systemName: string;\n  systemObjectType: string;\n  systemObjectId: string;\n  operations: SystemObjectPatchOperationInterface[];\n  state: State;\n}): Promise<IdObjectSkeletonInterface> {\n  try {\n    return _patchSystemObject({\n      systemName,\n      systemObjectType,\n      systemObjectId,\n      operations,\n      state,\n    });\n  } catch (error) {\n    throw new FrodoError(\n      `Error updating ${systemObjectType} ${systemObjectId} properties in system ${systemName}`,\n      error\n    );\n  }\n}\n\nexport async function deleteSystemObject({\n  systemName,\n  systemObjectType,\n  systemObjectId,\n  state,\n}: {\n  systemName: string;\n  systemObjectType: string;\n  systemObjectId: string;\n  state: State;\n}): Promise<IdObjectSkeletonInterface> {\n  try {\n    return _deleteSystemObject({\n      systemName,\n      systemObjectType,\n      systemObjectId,\n      state,\n    });\n  } catch (error) {\n    throw new FrodoError(\n      `Error deleting ${systemObjectType} ${systemObjectId} from system ${systemName}`,\n      error\n    );\n  }\n}\n\nexport async function readSystemSchema({\n  systemName,\n  state,\n}: {\n  systemName: string;\n  state: State;\n}): Promise<Record<string, ObjectTypeSkeleton>> {\n  try {\n    const { objectTypes } = await readConnector({\n      connectorId: systemName,\n      state,\n    });\n    return objectTypes;\n  } catch (error) {\n    throw new FrodoError(`Error reading schema of system ${systemName}`, error);\n  }\n}\n","import {\n  IdObjectSkeletonInterface,\n  NoIdObjectSkeletonInterface,\n} from '../api/ApiTypes';\nimport {\n  deleteConfigEntity as _deleteConfigEntity,\n  getConfigEntities as _getConfigEntities,\n  getConfigEntitiesByType as _getConfigEntitiesByType,\n  getConfigEntity as _getConfigEntity,\n  getConfigEntity,\n  getConfigStubs as _getConfigEntityStubs,\n  IdmConfigStub,\n  putConfigEntity as _putConfigEntity,\n} from '../api/IdmConfigApi';\nimport { ConnectorServerStatusInterface } from '../api/IdmSystemApi';\nimport Constants from '../shared/Constants';\nimport { State } from '../shared/State';\nimport {\n  createProgressIndicator,\n  debugMessage,\n  printError,\n  printMessage,\n  stopProgressIndicator,\n  updateProgressIndicator,\n} from '../utils/Console';\nimport { getMetadata } from '../utils/ExportImportUtils';\nimport { areScriptHooksValid } from '../utils/ScriptValidationUtils';\nimport { FrodoError } from './FrodoError';\nimport { testConnectorServers as _testConnectorServers } from './IdmSystemOps';\nimport { ExportMetaData } from './OpsTypes';\n\nexport type IdmConfig = {\n  /**\n   * Read available config entity types\n   * @returns {string[]} promise resolving to an array of config entity types\n   */\n  readConfigEntityTypes(): Promise<string[]>;\n  /**\n   * Read all config entity stubs. For full entities use {@link IdmConfig.readConfigEntities | readConfigEntities}.\n   * @returns {IdmConfigStub[]} promise resolving to an array of config entity stubs\n   */\n  readConfigEntityStubs(): Promise<IdmConfigStub[]>;\n  /**\n   * Read all config entities\n   * @returns {IdObjectSkeletonInterface[]} promise reolving to an array of config entities\n   */\n  readConfigEntities(): Promise<IdObjectSkeletonInterface[]>;\n  /**\n   * Read all config entities of a type\n   * @param {string} type config entity type\n   * @returns {IdObjectSkeletonInterface[]} promise resolving to an array of config entities of a type\n   */\n  readConfigEntitiesByType(type: string): Promise<IdObjectSkeletonInterface[]>;\n  /**\n   * Read config entity\n   * @param {string} entityId config entity id/name\n   * @returns {IdObjectSkeletonInterface} promise resolving to a config entity\n   */\n  readConfigEntity(entityId: string): Promise<IdObjectSkeletonInterface>;\n  /**\n   * Export all IDM config entities\n   * @returns {ConfigEntityExportInterface} promise resolving to a ConfigEntityExportInterface object\n   */\n  exportConfigEntities(): Promise<ConfigEntityExportInterface>;\n  /**\n   * Create config entity\n   * @param {string} entityId config entity id/name\n   * @param {IdObjectSkeletonInterface} entityData config entity data\n   * @returns {IdObjectSkeletonInterface} promise resolving to a config entity\n   */\n  createConfigEntity(\n    entityId: string,\n    entityData: IdObjectSkeletonInterface\n  ): Promise<IdObjectSkeletonInterface>;\n  /**\n   * Update or create config entity\n   * @param {string} entityId config entity id/name\n   * @param {IdObjectSkeletonInterface} entityData config entity data\n   * @returns {IdObjectSkeletonInterface} promise resolving to a config entity\n   */\n  updateConfigEntity(\n    entityId: string,\n    entityData: IdObjectSkeletonInterface\n  ): Promise<IdObjectSkeletonInterface>;\n  /**\n   * Import idm config entities.\n   * @param {ConfigEntityExportInterface} importData idm config entity import data.\n   * @param {ConfigEntityImportOptions} options import options\n   * @returns {Promise<IdObjectSkeletonInterface[]>} a promise resolving to an array of config entity objects\n   */\n  importConfigEntities(\n    importData: ConfigEntityExportInterface,\n    options: ConfigEntityImportOptions\n  ): Promise<IdObjectSkeletonInterface[]>;\n  /**\n   * Delete all config entities\n   * @returns {IdObjectSkeletonInterface[]} promise reolving to an array of config entities\n   */\n  deleteConfigEntities(): Promise<IdObjectSkeletonInterface[]>;\n  /**\n   * Delete all config entities of a type\n   * @param {string} type config entity type\n   * @returns {IdObjectSkeletonInterface[]} promise resolving to an array of config entities of a type\n   */\n  deleteConfigEntitiesByType(\n    type: string\n  ): Promise<IdObjectSkeletonInterface[]>;\n  /**\n   * Delete config entity\n   * @param {string} entityId config entity id/name\n   * @returns {IdObjectSkeletonInterface} promise resolving to a config entity\n   */\n  deleteConfigEntity(entityId: string): Promise<IdObjectSkeletonInterface>;\n\n  // Deprecated\n\n  /**\n   * Get available config entity types\n   * @returns {string[]} promise resolving to an array of config entity types\n   * @deprecated since v2.0.0 use {@link IdmConfig.readConfigEntityTypes | readConfigEntityTypes} instead\n   * ```javascript\n   * readConfigEntityTypes(): Promise<string[]>\n   * ```\n   * @group Deprecated\n   */\n  getConfigEntityTypes(): Promise<string[]>;\n  /**\n   * Get all config entities\n   * @returns {IdObjectSkeletonInterface[]} promise reolving to an array of config entities\n   * @deprecated since v2.0.0 use {@link IdmConfig.readConfigEntities | readConfigEntities} instead\n   * ```javascript\n   * readConfigEntities(): Promise<IdObjectSkeletonInterface[]>\n   * ```\n   * @group Deprecated\n   */\n  getAllConfigEntities(): Promise<IdmConfigStub[]>;\n  /**\n   * Get all config entities of a type\n   * @param {string} type config entity type\n   * @returns {IdObjectSkeletonInterface[]} promise resolving to an array of config entities of a type\n   * @deprecated since v2.0.0 use {@link IdmConfig.readConfigEntitiesByType | readConfigEntitiesByType} instead\n   * ```javascript\n   * readConfigEntitiesByType(type: string): Promise<IdObjectSkeletonInterface[]>\n   * ```\n   * @group Deprecated\n   */\n  getConfigEntitiesByType(type: string): Promise<IdObjectSkeletonInterface[]>;\n  /**\n   * Get config entity\n   * @param {string} entityId config entity id/name\n   * @returns {IdObjectSkeletonInterface} promise resolving to a config entity\n   * @deprecated since v2.0.0 use {@link IdmConfig.readConfigEntity | readConfigEntity} instead\n   * ```javascript\n   * readConfigEntity(entityId: string): Promise<IdObjectSkeletonInterface>\n   * ```\n   * @group Deprecated\n   */\n  getConfigEntity(entityId: string): Promise<IdObjectSkeletonInterface>;\n  /**\n   * Put config entity\n   * @param {string} entityId config entity id/name\n   * @param {IdObjectSkeletonInterface} entityData config entity data\n   * @returns {IdObjectSkeletonInterface} promise resolving to a config entity\n   * @deprecated since v2.0.0 use {@link IdmConfig.updateConfigEntity | updateConfigEntity} or {@link IdmConfig.createConfigEntity | createConfigEntity} instead\n   * ```javascript\n   * updateConfigEntity(entityId: string, entityData: IdObjectSkeletonInterface): Promise<IdObjectSkeletonInterface>\n   * createConfigEntity(entityId: string, entityData: IdObjectSkeletonInterface): Promise<IdObjectSkeletonInterface>\n   * ```\n   * @group Deprecated\n   */\n  putConfigEntity(\n    entityId: string,\n    entityData: IdObjectSkeletonInterface\n  ): Promise<IdObjectSkeletonInterface>;\n  /**\n   * Test connector servers\n   * @deprecated since v2.0.0-42 use {@link IdmSystem.testConnectorServers | testConnectorServers} or {@link IdmSystem.testConnectorServers | testConnectorServers} instead\n   * @returns {Promise<ConnectorServerStatusInterface[]>} a promise that resolves to an array of ConnectorServerStatusInterface objects\n   */\n  testConnectorServers(): Promise<ConnectorServerStatusInterface[]>;\n};\n\nexport default (state: State): IdmConfig => {\n  return {\n    async readConfigEntityTypes(): Promise<string[]> {\n      return readConfigEntityTypes({ state });\n    },\n    async readConfigEntityStubs(): Promise<IdmConfigStub[]> {\n      return readConfigEntityStubs({ state });\n    },\n    async readConfigEntities(): Promise<IdObjectSkeletonInterface[]> {\n      return readConfigEntities({ state });\n    },\n    async readConfigEntitiesByType(\n      type: string\n    ): Promise<IdObjectSkeletonInterface[]> {\n      return readConfigEntitiesByType({ type, state });\n    },\n    async readConfigEntity(\n      entityId: string\n    ): Promise<IdObjectSkeletonInterface> {\n      return readConfigEntity({ entityId, state });\n    },\n    async exportConfigEntities(): Promise<ConfigEntityExportInterface> {\n      return exportConfigEntities({ state });\n    },\n    async createConfigEntity(\n      entityId: string,\n      entityData: IdObjectSkeletonInterface\n    ): Promise<IdObjectSkeletonInterface> {\n      return createConfigEntity({ entityId, entityData, state });\n    },\n    async updateConfigEntity(\n      entityId: string,\n      entityData: IdObjectSkeletonInterface\n    ): Promise<IdObjectSkeletonInterface> {\n      return updateConfigEntity({ entityId, entityData, state });\n    },\n    async importConfigEntities(\n      importData: ConfigEntityExportInterface,\n      options: ConfigEntityImportOptions = { validate: false }\n    ): Promise<IdObjectSkeletonInterface[]> {\n      return importConfigEntities({ importData, options, state });\n    },\n    async deleteConfigEntities(): Promise<IdObjectSkeletonInterface[]> {\n      return deleteConfigEntities({ state });\n    },\n    async deleteConfigEntitiesByType(\n      type: string\n    ): Promise<IdObjectSkeletonInterface[]> {\n      return deleteConfigEntitiesByType({ type, state });\n    },\n    async deleteConfigEntity(\n      entityId: string\n    ): Promise<IdObjectSkeletonInterface> {\n      return deleteConfigEntity({ entityId, state });\n    },\n\n    // Deprecated\n\n    async getConfigEntityTypes(): Promise<string[]> {\n      return readConfigEntityTypes({ state });\n    },\n    async getAllConfigEntities(): Promise<IdmConfigStub[]> {\n      return readConfigEntityStubs({ state });\n    },\n    async getConfigEntitiesByType(\n      type: string\n    ): Promise<IdObjectSkeletonInterface[]> {\n      return readConfigEntitiesByType({ type, state });\n    },\n    async getConfigEntity(\n      entityId: string\n    ): Promise<IdObjectSkeletonInterface> {\n      return _getConfigEntity({ entityId, state });\n    },\n    async putConfigEntity(\n      entityId: string,\n      entityData: NoIdObjectSkeletonInterface | string\n    ): Promise<IdObjectSkeletonInterface> {\n      return _putConfigEntity({ entityId, entityData, state });\n    },\n    async testConnectorServers(): Promise<ConnectorServerStatusInterface[]> {\n      return _testConnectorServers({ state });\n    },\n  };\n};\n\n/**\n * Config entity import options\n */\nexport interface ConfigEntityImportOptions {\n  /**\n   * validate script hooks\n   */\n  validate: boolean;\n}\n\nexport interface ConfigEntityExportInterface {\n  meta?: ExportMetaData;\n  config: Record<string, IdObjectSkeletonInterface>;\n}\n\n/**\n * Create an empty config entity export template\n * @returns {ConfigEntityExportInterface} an empty config entity export template\n */\nexport function createConfigEntityExportTemplate({\n  state,\n}: {\n  state: State;\n}): ConfigEntityExportInterface {\n  return {\n    meta: getMetadata({ state }),\n    config: {},\n  } as ConfigEntityExportInterface;\n}\n\nexport async function readConfigEntityStubs({\n  state,\n}: {\n  state: State;\n}): Promise<IdmConfigStub[]> {\n  try {\n    const { configurations } = await _getConfigEntityStubs({ state });\n    return configurations;\n  } catch (error) {\n    throw new FrodoError(`Error reading config entity stubs`, error);\n  }\n}\n\nexport async function readConfigEntityTypes({\n  state,\n}: {\n  state: State;\n}): Promise<string[]> {\n  try {\n    const types: string[] = [];\n    const stubs = await readConfigEntityStubs({ state });\n    for (const stub of stubs) {\n      if (stub._id.split('/').length > 0) {\n        const type = stub._id.split('/')[0];\n        if (!types.includes(type)) types.push(type);\n      }\n    }\n    return types;\n  } catch (error) {\n    throw new FrodoError(`Error reading config entity types`, error);\n  }\n}\n\nexport async function readConfigEntities({\n  state,\n}: {\n  state: State;\n}): Promise<IdObjectSkeletonInterface[]> {\n  try {\n    const { result } = await _getConfigEntities({ state });\n    return result;\n  } catch (error) {\n    throw new FrodoError(`Error reading config entities`, error);\n  }\n}\n\nexport async function readConfigEntitiesByType({\n  type,\n  state,\n}: {\n  type: string;\n  state: State;\n}): Promise<NoIdObjectSkeletonInterface[]> {\n  try {\n    const { result } = await _getConfigEntitiesByType({ type, state });\n    return result;\n  } catch (error) {\n    throw new FrodoError(`Error reading config entities by type`, error);\n  }\n}\n\nexport async function readConfigEntity({\n  entityId,\n  state,\n}: {\n  entityId: string;\n  state: State;\n}): Promise<IdObjectSkeletonInterface> {\n  try {\n    const result = await getConfigEntity({ entityId, state });\n    return result;\n  } catch (error) {\n    throw new FrodoError(`Error reading config entity ${entityId}`, error);\n  }\n}\n\nconst AIC_PROTECTED_ENTITIES: string[] = [\n  'emailTemplate/frEmailUpdated',\n  'emailTemplate/frForgotUsername',\n  'emailTemplate/frOnboarding',\n  'emailTemplate/frPasswordUpdated',\n  'emailTemplate/frProfileUpdated',\n  'emailTemplate/frResetPassword',\n  'emailTemplate/frUsernameUpdated',\n];\n\nconst IDM_UNAVAILABLE_ENTITIES = [\n  'script',\n  'notificationFactory',\n  'apiVersion',\n  'metrics',\n  'repo.init',\n  'endpoint/validateQueryFilter',\n  'endpoint/oauthproxy',\n  'external.rest',\n  'scheduler',\n  'org.apache.felix.fileinstall/openidm',\n  'cluster',\n  'endpoint/mappingDetails',\n  'fieldPolicy/teammember',\n];\n/**\n * Export all IDM config entities\n * @returns {ConfigEntityExportInterface} promise resolving to a ConfigEntityExportInterface object\n */\nexport async function exportConfigEntities({\n  state,\n}: {\n  state: State;\n}): Promise<ConfigEntityExportInterface> {\n  let indicatorId: string;\n  try {\n    const configurations = await readConfigEntities({ state });\n    indicatorId = createProgressIndicator({\n      total: configurations.length,\n      message: 'Exporting config entities...',\n      state,\n    });\n    const entityPromises = [];\n    for (const configEntity of configurations) {\n      updateProgressIndicator({\n        id: indicatorId,\n        message: `Exporting config entity ${configEntity._id}`,\n        state,\n      });\n      entityPromises.push(\n        readConfigEntity({ entityId: configEntity._id, state }).catch(\n          (readConfigEntityError) => {\n            const error: FrodoError = readConfigEntityError;\n            if (\n              // operation is not available in ForgeRock Identity Cloud\n              !(\n                error.httpStatus === 403 &&\n                error.httpMessage ===\n                  'This operation is not available in ForgeRock Identity Cloud.'\n              ) &&\n              // list of config entities, which do not exist by default or ever.\n              !(\n                IDM_UNAVAILABLE_ENTITIES.includes(configEntity._id) &&\n                error.httpStatus === 404 &&\n                error.httpErrorReason === 'Not Found'\n              ) &&\n              // https://bugster.forgerock.org/jira/browse/OPENIDM-18270\n              !(\n                error.httpStatus === 404 &&\n                error.httpMessage ===\n                  'No configuration exists for id org.apache.felix.fileinstall/openidm'\n              )\n            ) {\n              printMessage({\n                message: readConfigEntityError.response?.data,\n                type: 'error',\n                state,\n              });\n              printMessage({\n                message: `Error getting config entity ${configEntity._id}: ${readConfigEntityError}`,\n                type: 'error',\n                state,\n              });\n            }\n          }\n        )\n      );\n    }\n    const results = await Promise.all(entityPromises);\n    const exportData = createConfigEntityExportTemplate({ state });\n    for (const result of results) {\n      if (result != null) {\n        exportData.config[result._id] = result;\n      }\n    }\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Exported ${configurations.length} config entities.`,\n      status: 'success',\n      state,\n    });\n    return exportData;\n  } catch (error) {\n    printError(error);\n  }\n}\n\nexport async function createConfigEntity({\n  entityId,\n  entityData,\n  state,\n}: {\n  entityId: string;\n  entityData: IdObjectSkeletonInterface;\n  state: State;\n}): Promise<IdObjectSkeletonInterface> {\n  debugMessage({ message: `IdmConfigOps.createConfigEntity: start`, state });\n  try {\n    await readConfigEntity({ entityId, state });\n  } catch (error) {\n    try {\n      const result = await updateConfigEntity({\n        entityId,\n        entityData,\n        state,\n      });\n      debugMessage({ message: `IdmConfigOps.createConfigEntity: end`, state });\n      return result;\n    } catch (error) {\n      throw new FrodoError(`Error creating config entity ${entityId}`, error);\n    }\n  }\n  throw new FrodoError(`Config entity ${entityId} already exists!`);\n}\n\nexport async function updateConfigEntity({\n  entityId,\n  entityData,\n  state,\n}: {\n  entityId: string;\n  entityData: IdObjectSkeletonInterface;\n  state: State;\n}): Promise<IdObjectSkeletonInterface> {\n  try {\n    const result = await _putConfigEntity({ entityId, entityData, state });\n    return result;\n  } catch (error) {\n    throw new FrodoError(`Error updating config entity ${entityId}`, error);\n  }\n}\n\nexport async function importConfigEntities({\n  importData,\n  options = { validate: false },\n  state,\n}: {\n  importData: ConfigEntityExportInterface;\n  options: ConfigEntityImportOptions;\n  state: State;\n}): Promise<IdObjectSkeletonInterface[]> {\n  debugMessage({ message: `IdmConfigOps.importConfigEntities: start`, state });\n  const response = [];\n  const errors = [];\n  for (const entityId of Object.keys(importData.config)) {\n    try {\n      debugMessage({\n        message: `IdmConfigOps.importConfigEntities: ${entityId}`,\n        state,\n      });\n      const entityData = importData.config[entityId];\n      if (\n        options.validate &&\n        !areScriptHooksValid({ jsonData: entityData, state })\n      ) {\n        throw new FrodoError(\n          `Invalid script hook in the config object '${entityId}'`\n        );\n      }\n      try {\n        const result = await updateConfigEntity({\n          entityId,\n          entityData,\n          state,\n        });\n        response.push(result);\n      } catch (error) {\n        if (\n          // protected entities (e.g. root realm email templates)\n          !(\n            state.getDeploymentType() === Constants.CLOUD_DEPLOYMENT_TYPE_KEY &&\n            AIC_PROTECTED_ENTITIES.includes(entityId) &&\n            error.httpStatus === 403 &&\n            error.httpCode === 'ERR_BAD_REQUEST'\n          )\n        ) {\n          throw error;\n        }\n      }\n    } catch (error) {\n      errors.push(error);\n    }\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(`Error importing config entities`, errors);\n  }\n  debugMessage({ message: `IdmConfigOps.importConfigEntities: end`, state });\n  return response;\n}\n\nexport async function deleteConfigEntities({\n  state,\n}: {\n  state: State;\n}): Promise<IdObjectSkeletonInterface[]> {\n  debugMessage({\n    message: `IdmConfigOps.deleteConfigEntities: start`,\n    state,\n  });\n  const result: IdObjectSkeletonInterface[] = [];\n  const errors = [];\n  try {\n    const configEntityStubs = await readConfigEntityStubs({ state });\n    for (const configEntityStub of configEntityStubs) {\n      try {\n        debugMessage({\n          message: `IdmConfigOps.deleteConfigEntities: '${configEntityStub['_id']}'`,\n          state,\n        });\n        result.push(\n          await _deleteConfigEntity({\n            entityId: configEntityStub['_id'],\n            state,\n          })\n        );\n      } catch (error) {\n        errors.push(error);\n      }\n    }\n  } catch (error) {\n    errors.push(error);\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(`Error deleting config entities`, errors);\n  }\n  debugMessage({\n    message: `IdmConfigOps.deleteConfigEntities: end`,\n    state,\n  });\n  return result;\n}\n\nexport async function deleteConfigEntitiesByType({\n  type,\n  state,\n}: {\n  type: string;\n  state: State;\n}): Promise<IdObjectSkeletonInterface[]> {\n  debugMessage({\n    message: `IdmConfigOps.deleteConfigEntitiesByType: start`,\n    state,\n  });\n  const result: IdObjectSkeletonInterface[] = [];\n  const errors: Error[] = [];\n  try {\n    const configEntities = await readConfigEntitiesByType({ type, state });\n    for (const configEntity of configEntities) {\n      try {\n        debugMessage({\n          message: `IdmConfigOps.deleteConfigEntitiesByType: '${configEntity['_id']}'`,\n          state,\n        });\n        result.push(\n          await _deleteConfigEntity({\n            entityId: configEntity['_id'] as string,\n            state,\n          })\n        );\n      } catch (error) {\n        errors.push(error);\n      }\n    }\n    if (errors.length > 0) {\n      throw new FrodoError(`Error deleting config entities by type`, errors);\n    }\n    debugMessage({\n      message: `IdmConfigOps.deleteConfigEntitiesByType: end`,\n      state,\n    });\n    return result;\n  } catch (error) {\n    // re-throw previously caught errors\n    if (errors.length > 0) {\n      throw error;\n    }\n    throw new FrodoError(`Error deleting config entities by type`, error);\n  }\n}\n\nexport async function deleteConfigEntity({\n  entityId,\n  state,\n}: {\n  entityId: string;\n  state: State;\n}): Promise<IdObjectSkeletonInterface> {\n  try {\n    return _deleteConfigEntity({ entityId, state });\n  } catch (error) {\n    throw new FrodoError(`Error deleting config entity ${entityId}`, error);\n  }\n}\n","import { IdObjectSkeletonInterface } from '../api/ApiTypes';\nimport { putConfigEntity } from '../api/IdmConfigApi';\nimport { State } from '../shared/State';\nimport {\n  createProgressIndicator,\n  debugMessage,\n  stopProgressIndicator,\n  updateProgressIndicator,\n} from '../utils/Console';\nimport { getMetadata } from '../utils/ExportImportUtils';\nimport { FrodoError } from './FrodoError';\nimport {\n  deleteConfigEntity,\n  readConfigEntitiesByType,\n  readConfigEntity,\n} from './IdmConfigOps';\nimport { ExportMetaData } from './OpsTypes';\n\nexport type Mapping = {\n  /**\n   * Create an empty mapping export template\n   * @returns {MappingExportInterface} an empty mapping export template\n   */\n  createMappingExportTemplate(): MappingExportInterface;\n  /**\n   * Read mappings from sync.json (legacy)\n   * @returns {Promise<MappingSkeleton[]>} a promise that resolves to an array of mapping objects\n   */\n  readSyncMappings(): Promise<MappingSkeleton[]>;\n  /**\n   * Read mappings\n   * @param {string} connectorId limit mappings to connector\n   * @param {string} moType limit mappings to managed object type\n   * @returns {Promise<MappingSkeleton[]>} a promise that resolves to an array of mapping objects\n   */\n  readMappings(\n    connectorId?: string,\n    moType?: string\n  ): Promise<MappingSkeleton[]>;\n  /**\n   * Read mapping\n   * @param {string} mappingId id of the mapping (new: 'mapping/\\<name>', legacy: 'sync/\\<name>')\n   * @returns {Promise<MappingSkeleton>} a promise that resolves an mapping object\n   */\n  readMapping(mappingId: string): Promise<MappingSkeleton>;\n  /**\n   * Create mapping\n   * @param {string} mappingId id of the mapping (new: 'mapping/\\<name>', legacy: 'sync/\\<name>')\n   * @param {MappingSkeleton} mappingData mapping object\n   * @returns {Promise<MappingSkeleton>} a promise that resolves to an mapping object\n   */\n  createMapping(\n    mappingId: string,\n    mappingData: MappingSkeleton\n  ): Promise<MappingSkeleton>;\n  /**\n   * Update or create mapping\n   * @param {string} mappingId id of the mapping (new: 'mapping/\\<name>', legacy: 'sync/\\<name>')\n   * @param {MappingSkeleton} mappingData mapping object\n   * @returns {Promise<MappingSkeleton>} a promise that resolves to an mapping object\n   */\n  updateMapping(\n    mappingId: string,\n    mappingData: MappingSkeleton\n  ): Promise<MappingSkeleton>;\n  /**\n   * Update or create mappings in sync.json (legacy)\n   * @param {MappingSkeleton} mappingData mapping object\n   * @returns {Promise<MappingSkeleton>} a promise that resolves to an mapping object\n   */\n  updateSyncMappings(mappings: MappingSkeleton[]): Promise<MappingSkeleton[]>;\n  /**\n   * Delete all mappings\n   * @param {string} connectorId limit mappings to connector\n   * @param {string} moType limit mappings to managed object type\n   * @returns {Promise<MappingSkeleton[]>} a promise that resolves to an array of mapping objects\n   */\n  deleteMappings(\n    connectorId?: string,\n    moType?: string\n  ): Promise<MappingSkeleton[]>;\n  /**\n   * Delete mapping\n   * @param {string} mappingId id of the mapping (new: 'mapping/\\<name>', legacy: 'sync/\\<name>')\n   * @returns {Promise<MappingSkeleton>} a promise that resolves an mapping object\n   */\n  deleteMapping(mappingId: string): Promise<MappingSkeleton>;\n  /**\n   * Export mapping\n   * @param {string} mappingId id of the mapping (new: 'mapping/\\<name>', legacy: 'sync/\\<name>')\n   * @returns {Promise<MappingExportInterface>} a promise that resolves to a MappingExportInterface object\n   */\n  exportMapping(mappingId: string): Promise<MappingExportInterface>;\n  /**\n   * Export all mappings\n   * @returns {Promise<MappingExportInterface>} a promise that resolves to a MappingExportInterface object\n   */\n  exportMappings(): Promise<MappingExportInterface>;\n  /**\n   * Import mapping\n   * @param {string} mappingId id of the mapping (new: 'mapping/\\<name>', legacy: 'sync/\\<name>')\n   * @param {MappingExportInterface} importData import data\n   * @param {MappingImportOptions} options import options\n   * @returns {Promise<MappingSkeleton>} a promise resolving to a MappingSkeleton object\n   */\n  importMapping(\n    mappingId: string,\n    importData: MappingExportInterface,\n    options?: MappingImportOptions\n  ): Promise<MappingSkeleton>;\n  /**\n   * Import first mapping\n   * @param {MappingExportInterface} importData import data\n   * @param {MappingImportOptions} options import options\n   * @returns {Promise<MappingSkeleton>} a promise resolving to a MappingSkeleton object\n   */\n  importFirstMapping(\n    importData: MappingExportInterface,\n    options?: MappingImportOptions\n  ): Promise<MappingSkeleton>;\n  /**\n   * Import all mappings\n   * @param {MappingExportInterface} importData import data\n   * @param {MappingImportOptions} options import options\n   * @returns {Promise<MappingSkeleton[]>} a promise resolving to an array of MappingSkeleton objects\n   */\n  importMappings(\n    importData: MappingExportInterface,\n    options?: MappingImportOptions\n  ): Promise<MappingSkeleton[]>;\n};\n\nexport default (state: State): Mapping => {\n  return {\n    createMappingExportTemplate(): MappingExportInterface {\n      return createMappingExportTemplate({ state });\n    },\n    async readSyncMappings(): Promise<MappingSkeleton[]> {\n      return readSyncMappings({ state });\n    },\n    async readMappings(\n      connectorId: string = undefined,\n      moType: string = undefined\n    ): Promise<any> {\n      return readMappings({ connectorId, moType, state });\n    },\n    async readMapping(mappingId: string): Promise<any> {\n      return readMapping({ mappingId, state });\n    },\n    async createMapping(\n      mappingId: string,\n      mappingData: MappingSkeleton\n    ): Promise<any> {\n      return createMapping({\n        mappingId,\n        mappingData,\n        state,\n      });\n    },\n    async updateMapping(\n      mappingId: string,\n      mappingData: MappingSkeleton\n    ): Promise<MappingSkeleton> {\n      return updateMapping({\n        mappingId,\n        mappingData,\n        state,\n      });\n    },\n    async updateSyncMappings(\n      mappings: MappingSkeleton[]\n    ): Promise<MappingSkeleton[]> {\n      return updateLegacyMappings({\n        mappings,\n        state,\n      });\n    },\n    async deleteMappings(\n      connectorId: string = undefined,\n      moType: string = undefined\n    ): Promise<MappingSkeleton[]> {\n      return deleteMappings({ connectorId, moType, state });\n    },\n    async deleteMapping(mappingId: string): Promise<MappingSkeleton> {\n      return deleteMapping({ mappingId, state });\n    },\n    async exportMapping(mappingId: string): Promise<MappingExportInterface> {\n      return exportMapping({ mappingId, state });\n    },\n    async exportMappings(): Promise<MappingExportInterface> {\n      return exportMappings({ state });\n    },\n    async importMapping(\n      mappingId: string,\n      importData: MappingExportInterface,\n      options?: MappingImportOptions\n    ): Promise<MappingSkeleton> {\n      return importMapping({ mappingId, importData, options, state });\n    },\n    async importFirstMapping(\n      importData: MappingExportInterface,\n      options?: MappingImportOptions\n    ): Promise<MappingSkeleton> {\n      return importFirstMapping({ importData, options, state });\n    },\n    async importMappings(\n      importData: MappingExportInterface,\n      options?: MappingImportOptions\n    ): Promise<MappingSkeleton[]> {\n      return importMappings({ importData, options, state });\n    },\n  };\n};\n\nexport type MappingPolicy = {\n  action: 'CREATE' | 'DELETE' | 'EXCEPTION' | 'IGNORE' | 'UPDATE';\n  situation:\n    | 'ABSENT'\n    | 'ALL_GONE'\n    | 'AMBIGUOUS'\n    | 'CONFIRMED'\n    | 'FOUND'\n    | 'FOUND_ALREADY_LINKED'\n    | 'LINK_ONLY'\n    | 'MISSING'\n    | 'SOURCE_IGNORED'\n    | 'SOURCE_MISSING'\n    | 'TARGET_IGNORED'\n    | 'UNASSIGNED'\n    | 'UNQUALIFIED';\n};\n\nexport type MappingProperty = {\n  source?: string;\n  target: string;\n  transform?: {\n    globals: any;\n    source: string;\n    type: string;\n  };\n};\n\nexport type MappingSkeleton = IdObjectSkeletonInterface & {\n  name: string;\n  displayName?: string;\n  linkQualifiers?: string[];\n  consentRequired?: boolean;\n  policies?: MappingPolicy[];\n  properties?: MappingProperty[];\n  source?: string;\n  target?: string;\n};\n\nexport interface MappingExportInterface {\n  meta?: ExportMetaData;\n  mapping: Record<string, MappingSkeleton>;\n}\n\n/**\n * Mapping export options\n */\nexport interface MappingExportOptions {\n  /**\n   * Use string arrays to store multi-line text in scripts.\n   */\n  useStringArrays: boolean;\n  /**\n   * Include any dependencies.\n   */\n  deps: boolean;\n}\n\n/**\n * Mapping import options\n */\nexport interface MappingImportOptions {\n  /**\n   * Include any dependencies.\n   */\n  deps: boolean;\n}\n\nexport function createMappingExportTemplate({\n  state,\n}: {\n  state: State;\n}): MappingExportInterface {\n  return {\n    meta: getMetadata({ state }),\n    mapping: {},\n  } as MappingExportInterface;\n}\n\n/**\n * Read mappings from sync.json (legacy)\n * @returns {Promise<MappingSkeleton[]>} a promise that resolves to an array of mapping objects\n */\nexport async function readSyncMappings({\n  state,\n}: {\n  state: State;\n}): Promise<MappingSkeleton[]> {\n  try {\n    debugMessage({\n      message: `MappingOps.readLegacyMappings: start`,\n      state,\n    });\n    const sync = await readConfigEntity({\n      entityId: 'sync',\n      state,\n    });\n    const mappings = (sync.mappings as MappingSkeleton[]).map((it) => {\n      it._id = `sync/${it.name}`;\n      return it;\n    });\n    debugMessage({\n      message: `MappingOps.readLegacyMappings: end`,\n      state,\n    });\n    return mappings;\n  } catch (error) {\n    throw new FrodoError(`Error reading sync mappings`, error);\n  }\n}\n\n/**\n * Read mappings\n * @param {string} connectorId limit mappings to connector\n * @param {string} moType limit mappings to managed object type\n * @returns {Promise<MappingSkeleton[]>} a promise that resolves to an array of mapping objects\n */\nexport async function readMappings({\n  connectorId,\n  moType,\n  state,\n}: {\n  connectorId?: string;\n  moType?: string;\n  state: State;\n}): Promise<MappingSkeleton[]> {\n  try {\n    debugMessage({\n      message: `MappingOps.readMappings: start [connectorId=${\n        connectorId ? connectorId : 'all'\n      }, moType=${moType ? moType : 'all'}]`,\n      state,\n    });\n    let mappings = (await readConfigEntitiesByType({\n      type: 'mapping',\n      state,\n    })) as MappingSkeleton[];\n    const legacyMappings = await readSyncMappings({ state });\n    mappings = mappings.concat(legacyMappings);\n    if (connectorId)\n      mappings = mappings.filter(\n        (mapping) =>\n          mapping.source.startsWith(`system/${connectorId}/`) ||\n          mapping.target.startsWith(`system/${connectorId}/`)\n      );\n    if (moType)\n      mappings = mappings.filter(\n        (mapping) =>\n          mapping.source === `managed/${moType}` ||\n          mapping.target === `managed/${moType}`\n      );\n    debugMessage({\n      message: `MappingOps.readMappings: end`,\n      state,\n    });\n    return mappings;\n  } catch (error) {\n    throw new FrodoError(`Error reading mappings`, error);\n  }\n}\n\n/**\n * Read mapping\n * @param {string} mappingId id of the mapping (new: 'mapping/\\<name>', legacy: 'sync/\\<name>')\n * @returns {Promise<MappingSkeleton>} a promise that resolves an mapping object\n */\nexport async function readMapping({\n  mappingId,\n  state,\n}: {\n  mappingId: string;\n  state: State;\n}): Promise<MappingSkeleton> {\n  if (mappingId.startsWith('sync/')) {\n    const mappings = await readSyncMappings({ state });\n    for (const mapping of mappings) {\n      if (mapping._id === mappingId) return mapping;\n    }\n    throw new FrodoError(`Mapping '${mappingId}' not found!`);\n  } else if (mappingId.startsWith('mapping/')) {\n    const mapping = await readConfigEntity({\n      entityId: mappingId,\n      state,\n    });\n    return mapping as MappingSkeleton;\n  } else {\n    throw new FrodoError(\n      `Invalid mapping id ${mappingId}. Must start with 'sync/' or 'mapping/'`\n    );\n  }\n}\n\n/**\n * Create mapping\n * @param {string} mappingId id of the mapping (new: 'mapping/\\<name>', legacy: 'sync/\\<name>')\n * @param {MappingSkeleton} mappingData mapping object\n * @returns {Promise<MappingSkeleton>} a promise that resolves to an mapping object\n */\nexport async function createMapping({\n  mappingId,\n  mappingData,\n  state,\n}: {\n  mappingId: string;\n  mappingData: MappingSkeleton;\n  state: State;\n}): Promise<MappingSkeleton> {\n  debugMessage({\n    message: `MappingOps.createMapping: start`,\n    state,\n  });\n  try {\n    await readMapping({\n      mappingId,\n      state,\n    });\n  } catch (error) {\n    try {\n      const result = await updateMapping({\n        mappingId,\n        mappingData,\n        state,\n      });\n      debugMessage({\n        message: `MappingOps.createMapping: end`,\n        state,\n      });\n      return result as MappingSkeleton;\n    } catch (error) {\n      throw new FrodoError(`Error creating mapping ${mappingId}`, error);\n    }\n  }\n  throw new FrodoError(`Mapping ${mappingId} already exists!`);\n}\n\n/**\n * Update or create mapping\n * @param {string} mappingId id of the mapping (new: 'mapping/\\<name>', legacy: 'sync/\\<name>')\n * @param {MappingSkeleton} mappingData mapping object\n * @returns {Promise<MappingSkeleton>} a promise that resolves to an mapping object\n */\nexport async function updateMapping({\n  mappingId,\n  mappingData,\n  state,\n}: {\n  mappingId: string;\n  mappingData: MappingSkeleton;\n  state: State;\n}): Promise<MappingSkeleton> {\n  if (mappingId.startsWith('sync/')) {\n    try {\n      let mappings = await readMappings({ state });\n      mappings = mappings.map((mapping) => {\n        if (mappingId == mapping._id) {\n          return mappingData;\n        }\n        return mapping;\n      });\n      const sync = await putConfigEntity({\n        entityId: 'sync',\n        entityData: { mappings },\n        state,\n      });\n      for (const mapping of sync.mappings.map((it: MappingSkeleton) => {\n        it._id = `sync/${it.name}`;\n        return it;\n      })) {\n        if (mapping._id === mappingId) return mapping;\n      }\n    } catch (error) {\n      throw new FrodoError(`Error updating sync mapping ${mappingId}`, error);\n    }\n    throw new FrodoError(\n      `Mapping ${mappingId} not found after successful update!`\n    );\n  } else if (mappingId.startsWith('mapping/')) {\n    try {\n      const mapping = await putConfigEntity({\n        entityId: mappingId,\n        entityData: mappingData,\n        state,\n      });\n      return mapping;\n    } catch (error) {\n      throw new FrodoError(`Error updating mapping ${mappingId}`, error);\n    }\n  } else {\n    throw new FrodoError(\n      `Invalid mapping id ${mappingId}. Must start with 'sync/' or 'mapping/'`\n    );\n  }\n}\n\n/**\n * Update or create multiple mappings\n * @param {MappingSkeleton[]} mappings array of mapping objects\n * @returns {Promise<MappingSkeleton[]>} a promise that resolves to an array of mapping objects\n */\nexport async function updateLegacyMappings({\n  mappings,\n  state,\n}: {\n  mappings: MappingSkeleton[];\n  state: State;\n}): Promise<MappingSkeleton[]> {\n  try {\n    const sync = await putConfigEntity({\n      entityId: 'sync',\n      entityData: { mappings },\n      state,\n    });\n    return sync.mappings;\n  } catch (error) {\n    throw new FrodoError(`Error updating legacy mappings`, error);\n  }\n}\n\n/**\n * Delete mappings\n * @param {string} connectorId limit mappings to connector\n * @param {string} moType limit mappings to managed object type\n * @returns {Promise<MappingSkeleton[]>} a promise that resolves to an array of mapping objects\n */\nexport async function deleteMappings({\n  connectorId,\n  moType,\n  state,\n}: {\n  connectorId?: string;\n  moType?: string;\n  state: State;\n}): Promise<MappingSkeleton[]> {\n  try {\n    debugMessage({ message: `MappingOps.deleteMappings: start`, state });\n    const mappings = await readMappings({ state });\n    const deletedMappings: MappingSkeleton[] = [];\n    // delete all mappings\n    if (!connectorId && !moType) {\n      // delete all mappings in sync.json\n      await updateLegacyMappings({\n        mappings: [],\n        state,\n      });\n      for (const mapping of mappings.filter((it) =>\n        it._id.startsWith('sync/')\n      )) {\n        deletedMappings.push(mapping);\n      }\n      // delete all the new mappings\n      for (const mapping of mappings.filter((it) =>\n        it._id.startsWith('mapping/')\n      )) {\n        deletedMappings.push(\n          await deleteMapping({ mappingId: mapping._id, state })\n        );\n      }\n      return deletedMappings;\n    }\n    // delete filtered mappings\n    else {\n      let mappingsToDelete: MappingSkeleton[] = [];\n      if (connectorId) {\n        debugMessage({\n          message: `MappingOps.deleteMappings: select mappings for connector ${connectorId}`,\n          state,\n        });\n        mappingsToDelete = mappings.filter(\n          (mapping) =>\n            mapping.source.startsWith(`system/${connectorId}/`) ||\n            mapping.target.startsWith(`system/${connectorId}/`)\n        );\n      }\n      if (moType) {\n        debugMessage({\n          message: `MappingOps.deleteMappings: select mappings for managed object type ${moType}`,\n          state,\n        });\n        mappingsToDelete = mappingsToDelete.filter(\n          (mapping) =>\n            mapping.source === `managed/${moType}` ||\n            mapping.target === `managed/${moType}`\n        );\n      }\n      // filter only sync mappings\n      const legacyMappingIdsToDelete = mappingsToDelete\n        .filter((it) => it._id.startsWith('sync/'))\n        .map((it) => it._id);\n      debugMessage({\n        message: `MappingOps.deleteMappings: selected ${\n          mappingsToDelete.length\n        } mappings: ${legacyMappingIdsToDelete.join(', ')}`,\n        state,\n      });\n      const updatedLegacyMappings = mappings.filter(\n        (mapping) => !legacyMappingIdsToDelete.includes(mapping._id)\n      );\n      debugMessage({\n        message: `MappingOps.deleteMappings: ${\n          updatedLegacyMappings.length\n        } remaining mappings: ${updatedLegacyMappings\n          .map((mapping) => mapping._id)\n          .join(', ')}`,\n        state,\n      });\n      // update the mappings\n      const finalMappings = await updateLegacyMappings({\n        mappings: updatedLegacyMappings,\n        state,\n      });\n      for (const mapping of mappings.filter((it) =>\n        it._id.startsWith('sync/')\n      )) {\n        deletedMappings.push(mapping);\n      }\n      debugMessage({\n        message: `MappingOps.deleteMappings: ${\n          finalMappings.length\n        } mappings after update: ${finalMappings\n          .map((mapping) => mapping._id)\n          .join(', ')}`,\n        state,\n      });\n      // are there any mappings that were not deleted?\n      const undeletedMappings = finalMappings.filter((mapping) =>\n        legacyMappingIdsToDelete.includes(mapping._id)\n      );\n      // delete all the new mappings\n      for (const mapping of mappings.filter((it) =>\n        it._id.startsWith('mapping/')\n      )) {\n        deletedMappings.push(\n          await deleteMapping({ mappingId: mapping._id, state })\n        );\n      }\n      // if there were undeleted mappings, throw exception\n      if (undeletedMappings.length > 0) {\n        const message = `${\n          undeletedMappings.length\n        } mappings were not deleted from sync.json: ${undeletedMappings\n          .map((mapping) => mapping._id)\n          .join(', ')}`;\n        debugMessage({\n          message,\n          state,\n        });\n        throw new FrodoError(message);\n      }\n      debugMessage({\n        message: `MappingOps.deleteMappings: deleted ${\n          mappingsToDelete.length\n        } mappings: ${legacyMappingIdsToDelete.join(', ')}`,\n        state,\n      });\n      debugMessage({ message: `MappingOps.deleteMappings: end`, state });\n      // otherwise return deleted mappings\n      return deletedMappings;\n    }\n  } catch (error) {\n    throw new FrodoError(`Error deleting mappings`, error);\n  }\n}\n\n/**\n * Delete mapping\n * @param {string} mappingId id of the mapping (new: 'mapping/\\<name>', legacy: 'sync/\\<name>')\n * @returns {Promise<MappingSkeleton>} a promise that resolves an mapping object\n */\nexport async function deleteMapping({\n  mappingId,\n  state,\n}: {\n  mappingId: string;\n  state: State;\n}): Promise<MappingSkeleton> {\n  try {\n    debugMessage({ message: `MappingOps.deleteMapping: start`, state });\n    if (mappingId.startsWith('sync/')) {\n      const mappings = await readMappings({ state });\n      const mappingsToDelete = mappings.filter(\n        (mapping) => mapping._id === mappingId\n      );\n      if (mappingsToDelete.length !== 1) {\n        const message = `Mapping ${mappingId} not found in sync.json or multiple mappings found!`;\n        debugMessage({\n          message: `MappingOps.deleteMapping: ${message}`,\n          state,\n        });\n        throw new FrodoError(message);\n      }\n      const updatedMappings = mappings.filter(\n        (mapping) => mapping._id !== mappingId\n      );\n      debugMessage({\n        message: `MappingOps.deleteMapping: ${\n          updatedMappings.length\n        } remaining mappings in sync.json: ${updatedMappings\n          .map((mapping) => mapping._id)\n          .join(', ')}`,\n        state,\n      });\n      // update the mappings\n      const finalMappings = await updateLegacyMappings({\n        mappings: updatedMappings,\n        state,\n      });\n      debugMessage({\n        message: `MappingOps.deleteMapping: ${\n          finalMappings.length\n        } mappings in sync.json after update: ${finalMappings\n          .map((mapping) => mapping._id)\n          .join(', ')}`,\n        state,\n      });\n      // are there any mappings that were not deleted?\n      const undeletedMappings = finalMappings.filter(\n        (mapping) => mappingId == mapping._id\n      );\n      // if so, throw exception\n      if (undeletedMappings.length > 0) {\n        const message = `Mapping ${undeletedMappings[0]} was not deleted from sync.json after successful update.`;\n        debugMessage({\n          message,\n          state,\n        });\n        throw new FrodoError(message);\n      }\n      debugMessage({\n        message: `MappingOps.deleteMapping: deleted legacy mapping ${mappingId} from sync.json.`,\n        state,\n      });\n      debugMessage({ message: `MappingOps.deleteMapping: end`, state });\n      // otherwise return deleted mapping\n      return mappingsToDelete[0];\n    } else if (mappingId.startsWith('mapping/')) {\n      const mapping = await deleteConfigEntity({\n        entityId: mappingId,\n        state,\n      });\n      debugMessage({ message: `MappingOps.deleteMapping: end`, state });\n      return mapping as MappingSkeleton;\n    } else {\n      throw new FrodoError(\n        `Invalid mapping id ${mappingId}. Must start with 'sync/' or 'mapping/'`\n      );\n    }\n  } catch (error) {\n    throw new FrodoError(`Error deleting mapping ${mappingId}`, error);\n  }\n}\n\n/**\n * Export mapping\n * @param {string} mappingId id of the mapping (new: 'mapping/\\<name>', legacy: 'sync/\\<name>')\n * @returns {Promise<MappingExportInterface>} a promise that resolves to a MappingExportInterface object\n */\nexport async function exportMapping({\n  mappingId,\n  state,\n}: {\n  mappingId: string;\n  state: State;\n}): Promise<MappingExportInterface> {\n  try {\n    debugMessage({ message: `MappingOps.exportMapping: start`, state });\n    const mappingData = await readMapping({ mappingId, state });\n    const exportData = createMappingExportTemplate({ state });\n    exportData.mapping[mappingData._id] = mappingData;\n    debugMessage({ message: `MappingOps.exportMapping: end`, state });\n    return exportData;\n  } catch (error) {\n    throw new FrodoError(`Error exporting mappings`, error);\n  }\n}\n\n/**\n * Export all mappings\n * @returns {Promise<MappingExportInterface>} a promise that resolves to a MappingExportInterface object\n */\nexport async function exportMappings({\n  state,\n}: {\n  state: State;\n}): Promise<MappingExportInterface> {\n  let indicatorId: string;\n  try {\n    const exportData = createMappingExportTemplate({ state });\n    const allMappingsData = await readMappings({ state });\n    indicatorId = createProgressIndicator({\n      total: allMappingsData.length,\n      message: 'Exporting mappings',\n      state,\n    });\n    for (const mappingData of allMappingsData) {\n      updateProgressIndicator({\n        id: indicatorId,\n        message: `Exporting mapping ${mappingData._id}`,\n        state,\n      });\n      exportData.mapping[mappingData._id] = mappingData;\n    }\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `${allMappingsData.length} mappings exported.`,\n      state,\n    });\n    return exportData;\n  } catch (error) {\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Error exporting mappings`,\n      status: 'fail',\n      state,\n    });\n    throw new FrodoError(`Error exporting mappings`, error);\n  }\n}\n\n/**\n * Import mapping\n * @param {string} mappingId id of the mapping (new: 'mapping/\\<name>', legacy: 'sync/\\<name>')\n * @param {MappingExportInterface} importData import data\n * @param {MappingImportOptions} options import options\n * @returns {Promise<MappingSkeleton>} a promise resolving to a MappingSkeleton object\n */\nexport async function importMapping({\n  mappingId,\n  importData,\n  options = { deps: true },\n  state,\n}: {\n  mappingId: string;\n  importData: MappingExportInterface;\n  options?: MappingImportOptions;\n  state: State;\n}): Promise<MappingSkeleton> {\n  let response = null;\n  const errors = [];\n  const imported = [];\n  for (const key of Object.keys(importData.mapping)) {\n    if (key === mappingId) {\n      try {\n        if (options.deps) {\n          //\n        }\n        response = await updateMapping({\n          mappingId,\n          mappingData: importData.mapping[mappingId],\n          state,\n        });\n        imported.push(key);\n      } catch (error) {\n        errors.push(error);\n      }\n    }\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(`Error importing mapping ${mappingId}`, errors);\n  }\n  if (0 === imported.length) {\n    throw new FrodoError(`Mapping ${mappingId} not found in import data`);\n  }\n  return response;\n}\n\n/**\n * Import first mapping\n * @param {MappingExportInterface} importData import data\n * @param {MappingImportOptions} options import options\n * @returns {Promise<MappingSkeleton>} a promise resolving to a MappingSkeleton object\n */\nexport async function importFirstMapping({\n  importData,\n  options = { deps: true },\n  state,\n}: {\n  importData: MappingExportInterface;\n  options?: MappingImportOptions;\n  state: State;\n}): Promise<MappingSkeleton> {\n  let response = null;\n  const errors = [];\n  const imported = [];\n  for (const key of Object.keys(importData.mapping)) {\n    try {\n      if (options.deps) {\n        //\n      }\n      response = await updateMapping({\n        mappingId: key,\n        mappingData: importData.mapping[key],\n        state,\n      });\n      imported.push(key);\n    } catch (error) {\n      errors.push(error);\n    }\n    break;\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(`Error importing first mapping`, errors);\n  }\n  if (0 === imported.length) {\n    throw new FrodoError(`No mappings found in import data!`);\n  }\n  return response;\n}\n\n/**\n * Import all mappings\n * @param {MappingExportInterface} importData import data\n * @param {MappingImportOptions} options import options\n * @returns {Promise<MappingSkeleton[]>} a promise resolving to an array of MappingSkeleton objects\n */\nexport async function importMappings({\n  importData,\n  options = { deps: true },\n  state,\n}: {\n  importData: MappingExportInterface;\n  options?: MappingImportOptions;\n  state: State;\n}): Promise<MappingSkeleton[]> {\n  const response = [];\n  const errors = [];\n  for (const key of Object.keys(importData.mapping)) {\n    try {\n      if (options.deps) {\n        //\n      }\n      response.push(\n        await updateMapping({\n          mappingId: key,\n          mappingData: importData.mapping[key],\n          state,\n        })\n      );\n    } catch (error) {\n      errors.push(error);\n    }\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(`Error importing mappings`, errors);\n  }\n  return response;\n}\n","import { IdObjectSkeletonInterface } from '../api/ApiTypes';\nimport {\n  deleteConfigEntity,\n  getConfigEntity,\n  putConfigEntity,\n} from '../api/IdmConfigApi';\nimport { State } from '../shared/State';\nimport {\n  createProgressIndicator,\n  debugMessage,\n  stopProgressIndicator,\n  updateProgressIndicator,\n} from '../utils/Console';\nimport { getMetadata } from '../utils/ExportImportUtils';\nimport { FrodoError } from './FrodoError';\nimport { readConfigEntitiesByType } from './IdmConfigOps';\nimport { MappingSkeleton, readMappings } from './MappingOps';\nimport { ExportMetaData } from './OpsTypes';\n\nexport type Connector = {\n  /**\n   * Connector type key used to build the IDM id: '<type>/<id>'\n   */\n  CONNECTOR_TYPE: string;\n  /**\n   * Create an empty connector export template\n   * @returns {ConnectorExportInterface} an empty connector export template\n   */\n  createConnectorExportTemplate(): ConnectorExportInterface;\n  /**\n   * Get all connectors\n   * @returns {Promise<ConnectorSkeleton[]>} a promise that resolves to an array of connector objects\n   */\n  readConnectors(): Promise<ConnectorSkeleton[]>;\n  /**\n   * Get connector\n   * @param {string} connectorId id/name of the connector without the type prefix\n   * @returns {Promise<ConnectorSkeleton>} a promise that resolves an connector object\n   */\n  readConnector(connectorId: string): Promise<ConnectorSkeleton>;\n  /**\n   * Create connector\n   * @param {string} connectorId id/name of the connector without the type prefix\n   * @param {ConnectorSkeleton} connectorData connector object\n   * @returns {Promise<ConnectorSkeleton>} a promise that resolves to an connector object\n   */\n  createConnector(\n    connectorId: string,\n    connectorData: ConnectorSkeleton\n  ): Promise<ConnectorSkeleton>;\n  /**\n   * Update or create connector\n   * @param {string} connectorId id/name of the connector without the type prefix\n   * @param {ConnectorSkeleton} connectorData connector object\n   * @returns {Promise<ConnectorSkeleton>} a promise that resolves to an connector object\n   */\n  updateConnector(\n    connectorId: string,\n    connectorData: ConnectorSkeleton\n  ): Promise<ConnectorSkeleton>;\n  /**\n   * Delete all connectors\n   * @returns {Promise<ConnectorSkeleton[]>} a promise that resolves to an array of connector objects\n   */\n  deleteConnectors(): Promise<ConnectorSkeleton[]>;\n  /**\n   * Delete connector\n   * @param {string} connectorId id/name of the connector without the type prefix\n   * @returns {Promise<ConnectorSkeleton>} a promise that resolves an connector object\n   */\n  deleteConnector(connectorId: string): Promise<ConnectorSkeleton>;\n  /**\n   * Export connector\n   * @param {string} connectorId id/name of the connector without the type prefix\n   * @param {ConnectorExportOptions} options export options\n   * @returns {Promise<ConnectorExportInterface>} a promise that resolves to a ConnectorExportInterface object\n   */\n  exportConnector(\n    connectorId: string,\n    options?: ConnectorExportOptions\n  ): Promise<ConnectorExportInterface>;\n  /**\n   * Export all connectors\n   * @returns {Promise<ConnectorExportInterface>} a promise that resolves to a ConnectorExportInterface object\n   */\n  exportConnectors(): Promise<ConnectorExportInterface>;\n  /**\n   * Import connector\n   * @param {string} connectorId id/name of the connector without the type prefix\n   * @param {ConnectorExportInterface} importData import data\n   * @param {ConnectorImportOptions} options import options\n   * @returns {Promise<ConnectorSkeleton>} a promise resolving to a ConnectorSkeleton object\n   */\n  importConnector(\n    connectorId: string,\n    importData: ConnectorExportInterface,\n    options?: ConnectorImportOptions\n  ): Promise<ConnectorSkeleton>;\n  /**\n   * Import first connector\n   * @param {ConnectorExportInterface} importData import data\n   * @param {ConnectorImportOptions} options import options\n   * @returns {Promise<ConnectorSkeleton>} a promise resolving to a ConnectorSkeleton object\n   */\n  importFirstConnector(\n    importData: ConnectorExportInterface,\n    options?: ConnectorImportOptions\n  ): Promise<ConnectorSkeleton>;\n  /**\n   * Import all connectors\n   * @param {ConnectorExportInterface} importData import data\n   * @param {ConnectorImportOptions} options import options\n   * @returns {Promise<ConnectorSkeleton[]>} a promise resolving to an array of ConnectorSkeleton objects\n   */\n  importConnectors(\n    importData: ConnectorExportInterface,\n    options?: ConnectorImportOptions\n  ): Promise<ConnectorSkeleton[]>;\n};\n\nexport default (state: State): Connector => {\n  return {\n    CONNECTOR_TYPE,\n    createConnectorExportTemplate(): ConnectorExportInterface {\n      return createConnectorExportTemplate({ state });\n    },\n    async readConnectors(): Promise<ConnectorSkeleton[]> {\n      return readConnectors({ state });\n    },\n    async readConnector(connectorId: string): Promise<ConnectorSkeleton> {\n      return readConnector({ connectorId, state });\n    },\n    async createConnector(\n      connectorId: string,\n      connectorData: ConnectorSkeleton\n    ): Promise<ConnectorSkeleton> {\n      return createConnector({\n        connectorId,\n        connectorData,\n        state,\n      });\n    },\n    async updateConnector(\n      connectorId: string,\n      connectorData: ConnectorSkeleton\n    ): Promise<ConnectorSkeleton> {\n      return updateConnector({\n        connectorId,\n        connectorData,\n        state,\n      });\n    },\n    async deleteConnectors(): Promise<ConnectorSkeleton[]> {\n      return deleteConnectors({ state });\n    },\n    async deleteConnector(connectorId: string): Promise<ConnectorSkeleton> {\n      return deleteConnector({ connectorId, state });\n    },\n    async exportConnector(\n      connectorId: string,\n      options: ConnectorExportOptions = { deps: true, useStringArrays: true }\n    ): Promise<ConnectorExportInterface> {\n      return exportConnector({ connectorId, options, state });\n    },\n    async exportConnectors(): Promise<ConnectorExportInterface> {\n      return exportConnectors({ state });\n    },\n    async importConnector(\n      connectorId: string,\n      importData: ConnectorExportInterface,\n      options?: ConnectorImportOptions\n    ): Promise<ConnectorSkeleton> {\n      return importConnector({ connectorId, importData, options, state });\n    },\n    async importFirstConnector(\n      importData: ConnectorExportInterface,\n      options?: ConnectorImportOptions\n    ): Promise<ConnectorSkeleton> {\n      return importFirstConnector({ importData, options, state });\n    },\n    async importConnectors(\n      importData: ConnectorExportInterface,\n      options?: ConnectorImportOptions\n    ): Promise<ConnectorSkeleton[]> {\n      return importConnectors({ importData, options, state });\n    },\n  };\n};\n\n/**\n * Connector type key used to build the IDM id: '\\<type>/\\<id>'\n */\nexport const CONNECTOR_TYPE = 'provisioner.openicf';\n\nexport type ObjectPropertyFlag =\n  | 'NOT_CREATABLE'\n  | 'NOT_READABLE'\n  | 'NOT_RETURNED_BY_DEFAULT'\n  | 'NOT_UPDATEABLE';\n\nexport type ObjectPropertyType = 'array' | 'boolean' | 'string';\n\nexport type ObjectPropertyNativeType =\n  | 'array'\n  | 'boolean'\n  | 'string'\n  | 'JAVA_TYPE_BIGDECIMAL'\n  | 'JAVA_TYPE_BIGINTEGER'\n  | 'JAVA_TYPE_BYTE'\n  | 'JAVA_TYPE_BYTE_ARRAY'\n  | 'JAVA_TYPE_CHAR'\n  | 'JAVA_TYPE_CHARACTER'\n  | 'JAVA_TYPE_DATE'\n  | 'JAVA_TYPE_DOUBLE'\n  | 'JAVA_TYPE_FILE'\n  | 'JAVA_TYPE_FLOAT'\n  | 'JAVA_TYPE_GUARDEDBYTEARRAY'\n  | 'JAVA_TYPE_GUARDEDSTRING'\n  | 'JAVA_TYPE_INT'\n  | 'JAVA_TYPE_INTEGER'\n  | 'JAVA_TYPE_LONG'\n  | 'JAVA_TYPE_OBJECT'\n  | 'JAVA_TYPE_PRIMITIVE_BOOLEAN'\n  | 'JAVA_TYPE_PRIMITIVE_BYTE'\n  | 'JAVA_TYPE_PRIMITIVE_DOUBLE'\n  | 'JAVA_TYPE_PRIMITIVE_FLOAT'\n  | 'JAVA_TYPE_PRIMITIVE_LONG'\n  | 'JAVA_TYPE_STRING';\n\nexport type ObjectPropertySkeleton = {\n  flags?: ObjectPropertyFlag[];\n  nativeName: string;\n  nativeType: ObjectPropertyNativeType;\n  type: ObjectPropertyType;\n  runAsUser?: boolean;\n  required?: boolean;\n  items?: {\n    nativeType: ObjectPropertyNativeType;\n    type: ObjectPropertyType;\n  };\n};\n\nexport type ObjectTypeSkeleton = {\n  $schema: string;\n  id: string;\n  nativeType: string;\n  properties: Record<string, ObjectPropertySkeleton>;\n  type: 'object';\n};\n\nexport type ConnectorSkeleton = IdObjectSkeletonInterface & {\n  configurationProperties: any;\n  connectorRef: {\n    bundleName: string;\n    bundleVersion: string;\n    connectorHostRef: string;\n    connectorName: string;\n    displayName: string;\n    systemType: 'provisioner.openicf';\n  };\n  enabled: boolean;\n  objectTypes: Record<string, ObjectTypeSkeleton>;\n};\n\n/**\n * Connector export options\n */\nexport interface ConnectorExportOptions {\n  /**\n   * Use string arrays to store multi-line text in scripts.\n   */\n  useStringArrays: boolean;\n  /**\n   * Include any dependencies (mappings).\n   */\n  deps: boolean;\n}\n\n/**\n * Connector import options\n */\nexport interface ConnectorImportOptions {\n  /**\n   * Include any dependencies (mappings).\n   */\n  deps: boolean;\n}\n\nexport interface ConnectorExportInterface {\n  meta?: ExportMetaData;\n  connector: Record<string, ConnectorSkeleton>;\n  mapping?: Record<string, MappingSkeleton>;\n}\n\nexport function createConnectorExportTemplate({\n  state,\n}: {\n  state: State;\n}): ConnectorExportInterface {\n  return {\n    meta: getMetadata({ state }),\n    connector: {},\n    mapping: {},\n  } as ConnectorExportInterface;\n}\n\n/**\n * Get all connectors\n * @returns {Promise<ConnectorSkeleton[]>} a promise that resolves to an array of connector objects\n */\nexport async function readConnectors({\n  state,\n}: {\n  state: State;\n}): Promise<ConnectorSkeleton[]> {\n  try {\n    const connectors = await readConfigEntitiesByType({\n      type: CONNECTOR_TYPE,\n      state,\n    });\n    return connectors as ConnectorSkeleton[];\n  } catch (error) {\n    throw new FrodoError(`Error reading connectors`, error);\n  }\n}\n\n/**\n * Get connector\n * @param {string} connectorId id/name of the connector without the type prefix\n * @returns {Promise<ConnectorSkeleton>} a promise that resolves an connector object\n */\nexport async function readConnector({\n  connectorId,\n  state,\n}: {\n  connectorId: string;\n  state: State;\n}): Promise<ConnectorSkeleton> {\n  try {\n    debugMessage({\n      message: `ConnectorOps.readConnector: start [connector=${connectorId}]`,\n      state,\n    });\n    const entityId = `${CONNECTOR_TYPE}/${connectorId}`;\n    debugMessage({\n      message: `ConnectorOps.readConnector: use entity id: ${entityId}`,\n      state,\n    });\n    const connectorData = await getConfigEntity({\n      entityId,\n      state,\n    });\n    debugMessage({\n      message: `ConnectorOps.readConnector: end [connector=${connectorId}]`,\n      state,\n    });\n    return connectorData;\n  } catch (error) {\n    throw new FrodoError(`Error reading connector ${connectorId}`, error);\n  }\n}\n\n/**\n * Create connector\n * @param {string} connectorId id/name of the connector without the type prefix\n * @param {ConnectorSkeleton} connectorData connector object\n * @returns {Promise<ConnectorSkeleton>} a promise that resolves to an connector object\n */\nexport async function createConnector({\n  connectorId,\n  connectorData,\n  state,\n}: {\n  connectorId: string;\n  connectorData: ConnectorSkeleton;\n  state: State;\n}): Promise<ConnectorSkeleton> {\n  debugMessage({\n    message: `ConnectorOps.createConnector: start`,\n    state,\n  });\n  try {\n    await readConnector({\n      connectorId: connectorId,\n      state,\n    });\n  } catch (error) {\n    try {\n      const result = await putConfigEntity({\n        entityId: `${CONNECTOR_TYPE}/${connectorId}`,\n        entityData: connectorData,\n        state,\n      });\n      debugMessage({\n        message: `ConnectorOps.createConnector: end`,\n        state,\n      });\n      return result as ConnectorSkeleton;\n    } catch (error) {\n      throw new FrodoError(`Error creating connector ${connectorId}`, error);\n    }\n  }\n  throw new Error(`Connector ${connectorId} already exists!`);\n}\n\n/**\n * Update or create connector\n * @param {string} connectorId id/name of the connector without the type prefix\n * @param {ConnectorSkeleton} connectorData connector object\n * @returns {Promise<ConnectorSkeleton>} a promise that resolves to an connector object\n */\nexport async function updateConnector({\n  connectorId,\n  connectorData,\n  state,\n}: {\n  connectorId: string;\n  connectorData: ConnectorSkeleton;\n  state: State;\n}): Promise<ConnectorSkeleton> {\n  try {\n    return putConfigEntity({\n      entityId: `${CONNECTOR_TYPE}/${connectorId}`,\n      entityData: connectorData,\n      state,\n    });\n  } catch (error) {\n    throw new FrodoError(`Error updating connector ${connectorId}`, error);\n  }\n}\n\n/**\n * Delete all connectors\n * @returns {Promise<ConnectorSkeleton[]>} a promise that resolves to an array of connector objects\n */\nexport async function deleteConnectors({\n  state,\n}: {\n  state: State;\n}): Promise<ConnectorSkeleton[]> {\n  const errors: Error[] = [];\n  try {\n    debugMessage({\n      message: `ConnectorOps.deleteConnectors: start`,\n      state,\n    });\n    const result: ConnectorSkeleton[] = [];\n    const connectors = await readConnectors({ state });\n    for (const connector of connectors) {\n      try {\n        debugMessage({\n          message: `ConnectorOps.deleteConnectors: '${connector['_id']}'`,\n          state,\n        });\n        result.push(\n          await deleteConfigEntity({\n            entityId: connector['_id'],\n            state,\n          })\n        );\n      } catch (error) {\n        errors.push(error);\n      }\n    }\n    if (errors.length > 0) {\n      throw new FrodoError(`Error deleting connectors`, errors);\n    }\n    debugMessage({\n      message: `ConnectorOps.deleteConnectors: end`,\n      state,\n    });\n    return result;\n  } catch (error) {\n    // re-throw previously caught errors\n    if (errors.length > 0) {\n      throw error;\n    }\n    throw new FrodoError(`Error deleting connectors`, error);\n  }\n}\n\n/**\n * Delete connector\n * @param {string} connectorId id/name of the connector without the type prefix\n * @returns {Promise<ConnectorSkeleton>} a promise that resolves an connector object\n */\nexport async function deleteConnector({\n  connectorId,\n  state,\n}: {\n  connectorId: string;\n  state: State;\n}): Promise<ConnectorSkeleton> {\n  try {\n    return deleteConfigEntity({\n      entityId: `${CONNECTOR_TYPE}/${connectorId}`,\n      state,\n    });\n  } catch (error) {\n    throw new FrodoError(`Error deleting connector ${connectorId}`, error);\n  }\n}\n\n/**\n * Export connector\n * @param {string} connectorId id/name of the connector without the type prefix\n * @returns {Promise<ConnectorExportInterface>} a promise that resolves to a ConnectorExportInterface object\n */\nexport async function exportConnector({\n  connectorId,\n  options = { deps: true, useStringArrays: true },\n  state,\n}: {\n  connectorId: string;\n  options?: ConnectorExportOptions;\n  state: State;\n}): Promise<ConnectorExportInterface> {\n  try {\n    debugMessage({\n      message: `ConnectorOps.exportConnector: start [connector=${connectorId}]`,\n      state,\n    });\n    const connectorData = await readConnector({ connectorId, state });\n    const exportData = createConnectorExportTemplate({ state });\n    exportData.connector[connectorId] = connectorData;\n    if (options.deps) {\n      const mappings = await readMappings({ connectorId, state });\n      for (const mapping of mappings) {\n        exportData.mapping[mapping.name] = mapping;\n      }\n    }\n    debugMessage({ message: `ConnectorOps.exportConnector: end`, state });\n    return exportData;\n  } catch (error) {\n    throw new FrodoError(`Error exporting connector ${connectorId}`, error);\n  }\n}\n\n/**\n * Export all connectors\n * @returns {Promise<ConnectorExportInterface>} a promise that resolves to a ConnectorExportInterface object\n */\nexport async function exportConnectors({\n  state,\n}: {\n  state: State;\n}): Promise<ConnectorExportInterface> {\n  try {\n    const exportData = createConnectorExportTemplate({ state });\n    const allConnectorsData = await readConnectors({ state });\n    const indicatorId = createProgressIndicator({\n      total: allConnectorsData.length,\n      message: 'Exporting connectors',\n      state,\n    });\n    for (const connectorData of allConnectorsData) {\n      const connectorId = connectorData._id.split('/')[1];\n      updateProgressIndicator({\n        id: indicatorId,\n        message: `Exporting connector ${connectorId}`,\n        state,\n      });\n      exportData.connector[connectorId] = connectorData;\n    }\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `${allConnectorsData.length} connectors exported.`,\n      state,\n    });\n    return exportData;\n  } catch (error) {\n    throw new FrodoError(`Error exporting connectors`, error);\n  }\n}\n\n/**\n * Import connector\n * @param {string} connectorId id/name of the connector without the type prefix\n * @param {ConnectorExportInterface} importData import data\n * @param {ConnectorImportOptions} options import options\n * @returns {Promise<ConnectorSkeleton>} a promise resolving to a ConnectorSkeleton object\n */\nexport async function importConnector({\n  connectorId,\n  importData,\n  options = { deps: true },\n  state,\n}: {\n  connectorId: string;\n  importData: ConnectorExportInterface;\n  options?: ConnectorImportOptions;\n  state: State;\n}): Promise<ConnectorSkeleton> {\n  let response = null;\n  const errors = [];\n  const imported = [];\n  for (const key of Object.keys(importData.connector)) {\n    if (key === connectorId) {\n      try {\n        if (options.deps) {\n          //\n        }\n        response = await updateConnector({\n          connectorId,\n          connectorData: importData.connector[connectorId],\n          state,\n        });\n        imported.push(key);\n      } catch (error) {\n        errors.push(error);\n      }\n      break;\n    }\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(`Error importing connector ${connectorId}`, errors);\n  }\n  if (0 === imported.length) {\n    throw new FrodoError(`Connector ${connectorId} not found in import data!`);\n  }\n  return response;\n}\n\n/**\n * Import first connector\n * @param {ConnectorExportInterface} importData import data\n * @param {ConnectorImportOptions} options import options\n * @returns {Promise<ConnectorSkeleton>} a promise resolving to a ConnectorSkeleton object\n */\nexport async function importFirstConnector({\n  importData,\n  options = { deps: true },\n  state,\n}: {\n  importData: ConnectorExportInterface;\n  options?: ConnectorImportOptions;\n  state: State;\n}): Promise<ConnectorSkeleton> {\n  let response = null;\n  const errors = [];\n  const imported = [];\n  for (const key of Object.keys(importData.connector)) {\n    try {\n      if (options.deps) {\n        //\n      }\n      response = await updateConnector({\n        connectorId: key,\n        connectorData: importData.connector[key],\n        state,\n      });\n      imported.push(key);\n    } catch (error) {\n      errors.push(error);\n    }\n    break;\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(`Error importing first connector`, errors);\n  }\n  if (0 === imported.length) {\n    throw new FrodoError(`No connectors not found in import data!`);\n  }\n  return response;\n}\n\n/**\n * Import all connectors\n * @param {ConnectorExportInterface} importData import data\n * @param {ConnectorImportOptions} options import options\n * @returns {Promise<ConnectorSkeleton[]>} a promise resolving to an array of ConnectorSkeleton objects\n */\nexport async function importConnectors({\n  importData,\n  options = { deps: true },\n  state,\n}: {\n  importData: ConnectorExportInterface;\n  options?: ConnectorImportOptions;\n  state: State;\n}): Promise<ConnectorSkeleton[]> {\n  const response = [];\n  const errors = [];\n  for (const key of Object.keys(importData.connector)) {\n    try {\n      if (options.deps) {\n        //\n      }\n      response.push(\n        await updateConnector({\n          connectorId: key,\n          connectorData: importData.connector[key],\n          state,\n        })\n      );\n    } catch (error) {\n      errors.push(error);\n    }\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(`Error importing connectors`, errors);\n  }\n  return response;\n}\n","import { IdObjectSkeletonInterface, PagedResult } from '../api/ApiTypes';\nimport {\n  createManagedObject as _createManagedObject,\n  DEFAULT_PAGE_SIZE,\n  deleteManagedObject as _deleteManagedObject,\n  getManagedObject as _getManagedObject,\n  type ManagedObjectPatchOperationInterface,\n  patchManagedObject as _patchManagedObject,\n  putManagedObject as _putManagedObject,\n  queryAllManagedObjectsByType,\n  queryManagedObjects as _queryManagedObjects,\n} from '../api/ManagedObjectApi';\nimport Constants from '../shared/Constants';\nimport { State } from '../shared/State';\nimport { FrodoError } from './FrodoError';\n\nexport type ManagedObject = {\n  /**\n   * Create managed object\n   * @param {string} type managed object type, e.g. teammember or alpha_user\n   * @param {IdObjectSkeletonInterface} moData managed object data\n   * @param {string} id managed object _id\n   */\n  createManagedObject(\n    type: string,\n    moData: IdObjectSkeletonInterface,\n    id?: string\n  ): Promise<IdObjectSkeletonInterface>;\n  /**\n   * Read managed object\n   * @param {string} type managed object type, e.g. alpha_user or user\n   * @param {string} id managed object id\n   * @param {string[]} id array of fields to include\n   * @returns {Promise<IdObjectSkeletonInterface>} a promise that resolves to an IdObjectSkeletonInterface\n   */\n  readManagedObject(\n    type: string,\n    id: string,\n    fields: string[]\n  ): Promise<IdObjectSkeletonInterface>;\n  /**\n   * Read all managed object of the specified type\n   * @param {string} type managed object type, e.g. alpha_user or user\n   * @param {string[]} fields array of fields to return\n   * @returns {Promise<IdObjectSkeletonInterface[]>} a promise that resolves to an array of IdObjectSkeletonInterfaces\n   */\n  readManagedObjects(\n    type: string,\n    fields: string[]\n  ): Promise<IdObjectSkeletonInterface[]>;\n  /**\n   * Update managed object\n   * @param {string} type managed object type, e.g. alpha_user or user\n   * @param {string} id managed object id\n   * @param {IdObjectSkeletonInterface} moData managed object data\n   * @returns {Promise<IdObjectSkeletonInterface>} a promise that resolves to an IdObjectSkeletonInterface\n   */\n  updateManagedObject(\n    type: string,\n    id: string,\n    moData: IdObjectSkeletonInterface\n  ): Promise<IdObjectSkeletonInterface>;\n  /**\n   * Partially update managed object through a collection of patch operations.\n   * @param {string} type managed object type, e.g. alpha_user or user\n   * @param {string} id managed object id\n   * @param {ManagedObjectPatchOperationInterface[]} operations collection of patch operations to perform on the object\n   * @param {string} rev managed object revision\n   * @returns {Promise<IdObjectSkeletonInterface>} a promise that resolves to an IdObjectSkeletonInterface\n   */\n  updateManagedObjectProperties(\n    type: string,\n    id: string,\n    operations: ManagedObjectPatchOperationInterface[],\n    rev?: string\n  ): Promise<IdObjectSkeletonInterface>;\n  /**\n   * Partially update multiple managed object through a collection of patch operations.\n   * @param {string} type managed object type, e.g. alpha_user or user\n   * @param {string} filter CREST search filter\n   * @param {ManagedObjectPatchOperationInterface[]} operations collection of patch operations to perform on the object\n   * @param {string} rev managed object revision\n   * @param {number} pageSize page size\n   * @returns {Promise<IdObjectSkeletonInterface>} a promise that resolves to an IdObjectSkeletonInterface\n   */\n  updateManagedObjectsProperties(\n    type: string,\n    filter: string,\n    operations: ManagedObjectPatchOperationInterface[],\n    rev?: string,\n    pageSize?: number\n  ): Promise<IdObjectSkeletonInterface[]>;\n  /**\n   * Delete managed object\n   * @param {string} type managed object type, e.g. alpha_user or user\n   * @param {string} id managed object id\n   * @returns {Promise<IdObjectSkeletonInterface>} a promise that resolves to an IdObjectSkeletonInterface\n   */\n  deleteManagedObject(\n    type: string,\n    id: string\n  ): Promise<IdObjectSkeletonInterface>;\n  /**\n   * Delete managed objects by filter\n   * @param {string} type managed object type, e.g. alpha_user or user\n   * @param {string} filter filter\n   * @returns {Promise<number>} a promise that resolves the number of deleted objects\n   */\n  deleteManagedObjects(type: string, filter: string): Promise<number>;\n  /**\n   * Query managed objects\n   * @param {string} type managed object type, e.g. alpha_user or user\n   * @param {string} filter CREST search filter\n   * @param {string[]} fields array of fields to return\n   * @return {Promise<IdObjectSkeletonInterface[]>} a promise resolving to an array of managed objects\n   */\n  queryManagedObjects(\n    type: string,\n    filter?: string,\n    fields?: string[],\n    pageSize?: number\n  ): Promise<IdObjectSkeletonInterface[]>;\n  /**\n   * Resolve a managed object's uuid to a human readable username\n   * @param {string} type managed object type, e.g. teammember or alpha_user\n   * @param {string} id managed object _id\n   * @returns {Promise<string>} resolved username or uuid if any error occurs during reslution\n   */\n  resolveUserName(type: string, id: string): Promise<string>;\n  /**\n   * Resolve a managed object's uuid to a human readable full name\n   * @param {string} type managed object type, e.g. teammember or alpha_user\n   * @param {string} id managed object _id\n   * @returns {Promise<string>} resolved full name or uuid if any error occurs during reslution\n   */\n  resolveFullName(type: string, id: string): Promise<string>;\n  /**\n   * Resolve a perpetrator's uuid to a human readable string identifying the perpetrator\n   * @param {string} id managed object _id\n   * @returns {Promise<string>} resolved perpetrator descriptive string or uuid if any error occurs during reslution\n   */\n  resolvePerpetratorUuid(id: string): Promise<string>;\n};\n\nexport default (state: State): ManagedObject => {\n  return {\n    async createManagedObject(\n      type: string,\n      moData: IdObjectSkeletonInterface,\n      id: string = undefined\n    ): Promise<IdObjectSkeletonInterface> {\n      return createManagedObject({ type, id, moData, state });\n    },\n    async readManagedObject(\n      type: string,\n      id: string,\n      fields: string[]\n    ): Promise<IdObjectSkeletonInterface> {\n      return readManagedObject({ type, id, fields, state });\n    },\n    async readManagedObjects(\n      type: string,\n      fields: string[]\n    ): Promise<IdObjectSkeletonInterface[]> {\n      return readManagedObjects({ type, fields, state });\n    },\n    async updateManagedObject(\n      type: string,\n      id: string,\n      moData: IdObjectSkeletonInterface\n    ): Promise<IdObjectSkeletonInterface> {\n      return updateManagedObject({ type, id, moData, state });\n    },\n    async updateManagedObjectProperties(\n      type: string,\n      id: string,\n      operations: ManagedObjectPatchOperationInterface[],\n      rev?: string\n    ): Promise<IdObjectSkeletonInterface> {\n      return updateManagedObjectProperties({\n        type,\n        id,\n        operations,\n        rev,\n        state,\n      });\n    },\n    async updateManagedObjectsProperties(\n      type: string,\n      filter: string,\n      operations: ManagedObjectPatchOperationInterface[],\n      rev?: string,\n      pageSize: number = DEFAULT_PAGE_SIZE\n    ): Promise<IdObjectSkeletonInterface[]> {\n      return updateManagedObjectsProperties({\n        type,\n        filter,\n        operations,\n        rev,\n        pageSize,\n        state,\n      });\n    },\n    async deleteManagedObject(\n      type: string,\n      id: string\n    ): Promise<IdObjectSkeletonInterface> {\n      return deleteManagedObject({ type, id, state });\n    },\n    async deleteManagedObjects(type: string, filter: string): Promise<number> {\n      return deleteManagedObjects({ type, filter, state });\n    },\n    async queryManagedObjects(\n      type: string,\n      filter: string = undefined,\n      fields: string[] = [],\n      pageSize: number = DEFAULT_PAGE_SIZE\n    ): Promise<IdObjectSkeletonInterface[]> {\n      return queryManagedObjects({ type, filter, fields, pageSize, state });\n    },\n    async resolveUserName(type: string, id: string) {\n      return resolveUserName({ type, id, state });\n    },\n    async resolveFullName(type: string, id: string) {\n      return resolveFullName({ type, id, state });\n    },\n    async resolvePerpetratorUuid(id: string): Promise<string> {\n      return resolvePerpetratorUuid({ id, state });\n    },\n  };\n};\n\nexport async function createManagedObject({\n  type,\n  id,\n  moData,\n  state,\n}: {\n  type: string;\n  id?: string;\n  moData: IdObjectSkeletonInterface;\n  state: State;\n}): Promise<IdObjectSkeletonInterface> {\n  try {\n    if (id)\n      return _putManagedObject({ type, id, moData, failIfExists: true, state });\n    return _createManagedObject({ moType: type, moData, state });\n  } catch (error) {\n    throw new FrodoError(\n      `Error creating managed ${type} object${id ? ' (' + id + ')' : ''}`,\n      error\n    );\n  }\n}\n\nexport async function readManagedObject({\n  type,\n  id,\n  fields,\n  state,\n}: {\n  type: string;\n  id: string;\n  fields: string[];\n  state: State;\n}): Promise<IdObjectSkeletonInterface> {\n  try {\n    return _getManagedObject({ type, id, fields, state });\n  } catch (error) {\n    throw new FrodoError(`Error reading managed ${type} object`, error);\n  }\n}\n\nexport async function readManagedObjects({\n  type,\n  fields,\n  state,\n}: {\n  type: string;\n  fields: string[];\n  state: State;\n}): Promise<IdObjectSkeletonInterface[]> {\n  try {\n    let managedObjects: IdObjectSkeletonInterface[] = [];\n    let result = {\n      result: [],\n      resultCount: 0,\n      pagedResultsCookie: null,\n      totalPagedResultsPolicy: 'NONE',\n      totalPagedResults: -1,\n      remainingPagedResults: -1,\n    };\n    do {\n      result = await queryAllManagedObjectsByType({\n        type,\n        fields,\n        pageCookie: result.pagedResultsCookie,\n        state,\n      });\n      managedObjects = managedObjects.concat(result.result);\n    } while (result.pagedResultsCookie);\n    return managedObjects;\n  } catch (error) {\n    throw new FrodoError(`Error reading managed ${type} objects`, error);\n  }\n}\n\nexport async function updateManagedObject({\n  type,\n  id,\n  moData,\n  state,\n}: {\n  type: string;\n  id: string;\n  moData: IdObjectSkeletonInterface;\n  state: State;\n}): Promise<IdObjectSkeletonInterface> {\n  try {\n    return _putManagedObject({ type, id, moData, state });\n  } catch (error) {\n    throw new FrodoError(\n      `Error updating managed ${type} object (${id})`,\n      error\n    );\n  }\n}\n\nexport async function updateManagedObjectProperties({\n  type,\n  id,\n  operations,\n  rev = null,\n  state,\n}: {\n  type: string;\n  id: string;\n  operations: ManagedObjectPatchOperationInterface[];\n  rev?: string;\n  state: State;\n}): Promise<IdObjectSkeletonInterface> {\n  try {\n    return _patchManagedObject({ type, id, operations, rev, state });\n  } catch (error) {\n    throw new FrodoError(\n      `Error updating managed ${type} object properties (${id})`,\n      error\n    );\n  }\n}\n\nexport async function updateManagedObjectsProperties({\n  type,\n  filter,\n  operations,\n  rev = null,\n  pageSize = DEFAULT_PAGE_SIZE,\n  state,\n}: {\n  type: string;\n  filter: string;\n  operations: ManagedObjectPatchOperationInterface[];\n  rev?: string;\n  pageSize?: number;\n  state: State;\n}): Promise<IdObjectSkeletonInterface[]> {\n  const result: IdObjectSkeletonInterface[] = [];\n  const errors = [];\n  let page: PagedResult<IdObjectSkeletonInterface> = {\n    result: [],\n    resultCount: 0,\n    pagedResultsCookie: null,\n    totalPagedResultsPolicy: 'NONE',\n    totalPagedResults: -1,\n    remainingPagedResults: -1,\n  };\n  do {\n    try {\n      page = await _queryManagedObjects({\n        type,\n        filter,\n        fields: [],\n        pageSize,\n        pageCookie: page.pagedResultsCookie,\n        state,\n      });\n      for (const obj of page.result) {\n        try {\n          result.push(\n            await _patchManagedObject({\n              type,\n              id: obj._id,\n              operations,\n              rev,\n              state,\n            })\n          );\n        } catch (error) {\n          errors.push(error);\n        }\n      }\n    } catch (error) {\n      errors.push(error);\n    }\n  } while (page.pagedResultsCookie);\n  if (errors.length > 0) {\n    throw new FrodoError(\n      `Error patching \"${type}\" objects matching filter \"${filter}\"`,\n      errors\n    );\n  }\n  return result;\n}\n\nexport async function deleteManagedObject({\n  type,\n  id,\n  state,\n}: {\n  type: string;\n  id: string;\n  state: State;\n}): Promise<IdObjectSkeletonInterface> {\n  try {\n    return _deleteManagedObject({ type, id, state });\n  } catch (error) {\n    throw new FrodoError(\n      `Error deleting managed ${type} object (${id})`,\n      error\n    );\n  }\n}\n\nexport async function deleteManagedObjects({\n  type,\n  filter,\n  state,\n}: {\n  type: string;\n  filter: string;\n  state: State;\n}): Promise<number> {\n  let count = 0;\n  const errors = [];\n  let result: PagedResult<IdObjectSkeletonInterface> = {\n    result: [],\n    resultCount: 0,\n    pagedResultsCookie: null,\n    totalPagedResultsPolicy: 'NONE',\n    totalPagedResults: -1,\n    remainingPagedResults: -1,\n  };\n  do {\n    try {\n      result = await _queryManagedObjects({\n        type,\n        filter,\n        fields: ['_id'],\n        pageCookie: result.pagedResultsCookie,\n        state,\n      });\n      for (const obj of result.result) {\n        await deleteManagedObject({ type, id: obj._id, state });\n        count++;\n      }\n    } catch (error) {\n      errors.push(error);\n    }\n  } while (result.pagedResultsCookie);\n  if (errors.length > 0) {\n    throw new FrodoError(\n      `Error deleting \"${type}\" objects matching filter \"${filter}\". Successfully deleted ${count} objects.`,\n      errors\n    );\n  }\n  return count;\n}\n\nexport async function queryManagedObjects({\n  type,\n  filter = 'true',\n  fields = ['*'],\n  pageSize = DEFAULT_PAGE_SIZE,\n  state,\n}: {\n  type: string;\n  filter?: string;\n  fields?: string[];\n  pageSize?: number;\n  state: State;\n}): Promise<IdObjectSkeletonInterface[]> {\n  const result: IdObjectSkeletonInterface[] = [];\n  const errors = [];\n  let page: PagedResult<IdObjectSkeletonInterface> = {\n    result: [],\n    resultCount: 0,\n    pagedResultsCookie: null,\n    totalPagedResultsPolicy: 'NONE',\n    totalPagedResults: -1,\n    remainingPagedResults: -1,\n  };\n  do {\n    try {\n      page = await _queryManagedObjects({\n        type,\n        filter,\n        fields,\n        pageSize,\n        pageCookie: page.pagedResultsCookie,\n        state,\n      });\n      result.push(...page.result);\n    } catch (error) {\n      errors.push(error);\n    }\n  } while (page.pagedResultsCookie);\n  if (errors.length > 0) {\n    throw new FrodoError(\n      `Error querying \"${type}\" objects matching filter \"${filter}\"`,\n      errors\n    );\n  }\n  return result;\n}\n\nexport async function resolveUserName({\n  type,\n  id,\n  state,\n}: {\n  type: string;\n  id: string;\n  state: State;\n}): Promise<string> {\n  try {\n    return (\n      await _getManagedObject({\n        type,\n        id,\n        fields: ['userName'],\n        state,\n      })\n    ).userName as string;\n  } catch (error) {\n    // ignore\n  }\n  return id;\n}\n\nexport async function resolveFullName({\n  type,\n  id,\n  state,\n}: {\n  type: string;\n  id: string;\n  state: State;\n}): Promise<string> {\n  try {\n    const managedObject = await _getManagedObject({\n      type,\n      id,\n      fields: ['givenName', 'sn'],\n      state,\n    });\n    return `${managedObject.givenName} ${managedObject.sn}`;\n  } catch (error) {\n    // ignore\n  }\n  return id;\n}\n\nexport async function resolvePerpetratorUuid({\n  id,\n  state,\n}: {\n  id: string;\n  state: State;\n}): Promise<string> {\n  try {\n    if (state.getDeploymentType() === Constants.CLOUD_DEPLOYMENT_TYPE_KEY) {\n      const lookupPromises: Promise<IdObjectSkeletonInterface>[] = [];\n      lookupPromises.push(\n        _getManagedObject({\n          type: 'teammember',\n          id,\n          fields: ['givenName', 'sn', 'userName'],\n          state,\n        })\n      );\n      lookupPromises.push(\n        _getManagedObject({\n          type: 'svcacct',\n          id,\n          fields: ['name', 'description'],\n          state,\n        })\n      );\n      lookupPromises.push(\n        _getManagedObject({\n          type: 'alpha_user',\n          id,\n          fields: ['givenName', 'sn', 'userName'],\n          state,\n        })\n      );\n      lookupPromises.push(\n        _getManagedObject({\n          type: 'bravo_user',\n          id,\n          fields: ['givenName', 'sn', 'userName'],\n          state,\n        })\n      );\n      const lookupResults = await Promise.allSettled(lookupPromises);\n      // tenant admin\n      if (lookupResults[0].status === 'fulfilled') {\n        const admin = lookupResults[0].value;\n        return `Admin user: ${admin.givenName} ${admin.sn} (${admin.userName})`;\n      }\n      // service account\n      if (lookupResults[1].status === 'fulfilled') {\n        const sa = lookupResults[1].value;\n        return `Service account: ${sa.name} (${sa.description})`;\n      }\n      // alpha user\n      if (lookupResults[2].status === 'fulfilled') {\n        const user = lookupResults[2].value;\n        return `Alpha user: ${user.givenName} ${user.sn} (${user.userName})`;\n      }\n      // bravo user\n      if (lookupResults[3].status === 'fulfilled') {\n        const user = lookupResults[3].value;\n        return `Bravo user:${user.givenName} ${user.sn} (${user.userName})`;\n      }\n    } else {\n      const user = await _getManagedObject({\n        type: 'user',\n        id,\n        fields: ['givenName', 'sn', 'userName'],\n        state,\n      });\n      return `${user.givenName} ${user.sn} (${user.userName})`;\n    }\n  } catch (error) {\n    // ignore\n  }\n  return id;\n}\n","import { type IdObjectSkeletonInterface } from '../api/ApiTypes';\nimport { CircleOfTrustSkeleton } from '../api/CirclesOfTrustApi';\nimport { type OAuth2ClientSkeleton } from '../api/OAuth2ClientApi';\nimport { Saml2ProviderSkeleton } from '../api/Saml2Api';\nimport { type ScriptSkeleton } from '../api/ScriptApi';\nimport constants from '../shared/Constants';\nimport { State } from '../shared/State';\nimport { decode } from '../utils/Base64Utils';\nimport {\n  createProgressIndicator,\n  debugMessage,\n  stopProgressIndicator,\n  updateProgressIndicator,\n} from '../utils/Console';\nimport { getMetadata } from '../utils/ExportImportUtils';\nimport { get, mergeDeep } from '../utils/JsonUtils';\nimport {\n  CirclesOfTrustExportInterface,\n  exportCirclesOfTrust,\n  importCirclesOfTrust,\n  readCirclesOfTrust,\n  updateCircleOfTrust,\n} from './CirclesOfTrustOps';\nimport {\n  ConnectorExportInterface,\n  ConnectorSkeleton,\n  exportConnector,\n  importConnector,\n} from './ConnectorOps';\nimport { FrodoError } from './FrodoError';\nimport {\n  createManagedObject,\n  deleteManagedObject,\n  queryManagedObjects,\n  readManagedObject,\n  readManagedObjects,\n  updateManagedObject,\n} from './ManagedObjectOps';\nimport { MappingSkeleton } from './MappingOps';\nimport {\n  deleteOAuth2Client,\n  exportOAuth2Client,\n  importOAuth2Client,\n  OAuth2ClientExportInterface,\n} from './OAuth2ClientOps';\nimport { type ExportMetaData } from './OpsTypes';\nimport {\n  deleteSaml2Provider,\n  exportSaml2Provider,\n  importSaml2Provider,\n  Saml2ExportInterface,\n} from './Saml2Ops';\n\nconst defaultFields = [\n  'authoritative',\n  'connectorId',\n  'description',\n  'icon',\n  'mappingNames',\n  'name',\n  'ssoEntities',\n  'templateName',\n  'templateVersion',\n  'uiConfig',\n  'url',\n];\n\n// const allFields = defaultFields.concat(['members', 'owners', 'roles']);\n\nexport type Application = {\n  /**\n   * Create an empty application export template\n   * @returns {ApplicationExportInterface} an empty application export template\n   */\n  createApplicationExportTemplate(): ApplicationExportInterface;\n  /**\n   * Get application managed object type\n   * @returns {String} application managed object type in this realm\n   */\n  getRealmManagedApplication(): string;\n  /**\n   * Create application\n   * @param {string} applicationId application id/name\n   * @param {ApplicationSkeleton} applicationData application data\n   * @returns {Promise<ApplicationSkeleton>} a promise that resolves to an application object\n   */\n  createApplication(\n    applicationId: string,\n    applicationData: ApplicationSkeleton\n  ): Promise<ApplicationSkeleton>;\n  /**\n   * Read application\n   * @param {string} applicationId application uuid\n   * @returns {Promise<ApplicationSkeleton>} a promise that resolves to an application object\n   */\n  readApplication(applicationId: string): Promise<ApplicationSkeleton>;\n  /**\n   * Read application by name\n   * @param {string} applicationName application name\n   * @returns {Promise<ApplicationSkeleton>} a promise that resolves to an application object\n   */\n  readApplicationByName(applicationName: string): Promise<ApplicationSkeleton>;\n  /**\n   * Read all applications. Results are sorted aphabetically.\n   * @returns {Promise<ApplicationSkeleton[]>} a promise that resolves to an array of application objects\n   */\n  readApplications(): Promise<ApplicationSkeleton[]>;\n  /**\n   * Update application\n   * @param {string} applicationId application uuid\n   * @param {ApplicationSkeleton} applicationData application data\n   * @returns {Promise<ApplicationSkeleton>} a promise that resolves to an application object\n   */\n  updateApplication(\n    applicationId: string,\n    applicationData: ApplicationSkeleton\n  ): Promise<ApplicationSkeleton>;\n  /**\n   * Delete application\n   * @param {string} applicationId application uuid\n   * @param {boolean} deep deep delete (remove dependencies)\n   * @returns {Promise<ApplicationSkeleton>} a promise that resolves to an application object\n   */\n  deleteApplication(\n    applicationId: string,\n    deep?: boolean\n  ): Promise<ApplicationSkeleton>;\n  /**\n   * Delete application by name\n   * @param {string} applicationName application name\n   * @param {boolean} deep deep delete (remove dependencies)\n   * @returns {Promise<ApplicationSkeleton>} a promise that resolves to an application object\n   */\n  deleteApplicationByName(\n    applicationName: string,\n    deep?: boolean\n  ): Promise<ApplicationSkeleton>;\n  /**\n   * Delete all applications\n   * @param {boolean} deep deep delete (remove dependencies)\n   * @returns {Promise<ApplicationSkeleton[]>} a promise that resolves to an array of application objects\n   */\n  deleteApplications(deep?: boolean): Promise<ApplicationSkeleton[]>;\n  /**\n   * Query applications\n   * @param filter CREST search filter\n   * @param fields array of fields to return\n   */\n  queryApplications(\n    filter: string,\n    fields?: string[]\n  ): Promise<ApplicationSkeleton[]>;\n  /**\n   * Export application. The response can be saved to file as is.\n   * @param {string} applicationId application uuid\n   * @param {ApplicationExportOptions} options export options\n   * @returns {Promise<ApplicationExportInterface} Promise resolving to an ApplicationExportInterface object.\n   */\n  exportApplication(\n    applicationId: string,\n    options: ApplicationExportOptions\n  ): Promise<ApplicationExportInterface>;\n  /**\n   * Export application by name. The response can be saved to file as is.\n   * @param {string} applicationName application name\n   * @param {ApplicationExportOptions} options export options\n   * @returns {Promise<ApplicationExportInterface} Promise resolving to an ApplicationExportInterface object.\n   */\n  exportApplicationByName(\n    applicationName: string,\n    options: ApplicationExportOptions\n  ): Promise<ApplicationExportInterface>;\n  /**\n   * Export all applications. The response can be saved to file as is.\n   * @returns {Promise<ApplicationExportInterface>} Promise resolving to an ApplicationExportInterface object.\n   */\n  exportApplications(\n    options?: ApplicationExportOptions\n  ): Promise<ApplicationExportInterface>;\n  /**\n   * Import application. The import data is usually read from an application export file.\n   * @param {string} applicationId application uuid\n   * @param {ApplicationExportInterface} importData application import data.\n   * @returns {Promise<ApplicationSkeleton>} Promise resolving to an application object.\n   */\n  importApplication(\n    applicationId: string,\n    importData: ApplicationExportInterface,\n    options: ApplicationImportOptions\n  ): Promise<ApplicationSkeleton>;\n  /**\n   * Import application by name. The import data is usually read from an application export file.\n   * @param {string} applicationName application name\n   * @param {ApplicationExportInterface} importData application import data.\n   * @returns {Promise<ApplicationSkeleton>} Promise resolving to an application object.\n   */\n  importApplicationByName(\n    applicationName: string,\n    importData: ApplicationExportInterface,\n    options: ApplicationImportOptions\n  ): Promise<ApplicationSkeleton>;\n  /**\n   * Import first application. The import data is usually read from an application export file.\n   * @param {ApplicationExportInterface} importData application import data.\n   */\n  importFirstApplication(\n    importData: ApplicationExportInterface,\n    options: ApplicationImportOptions\n  ): Promise<ApplicationSkeleton[]>;\n  /**\n   * Import applications. The import data is usually read from an application export file.\n   * @param {ApplicationExportInterface} importData application import data.\n   */\n  importApplications(\n    importData: ApplicationExportInterface,\n    options: ApplicationImportOptions\n  ): Promise<ApplicationSkeleton[]>;\n};\n\nexport default (state: State): Application => {\n  return {\n    createApplicationExportTemplate(): ApplicationExportInterface {\n      return createApplicationExportTemplate({ state });\n    },\n    getRealmManagedApplication() {\n      return getRealmManagedApplication({ state });\n    },\n    async createApplication(\n      applicationId: string,\n      applicationData: ApplicationSkeleton\n    ): Promise<ApplicationSkeleton> {\n      return createApplication({\n        applicationId,\n        applicationData,\n        state,\n      });\n    },\n    async readApplication(\n      applicationId: string,\n      fields = defaultFields\n    ): Promise<ApplicationSkeleton> {\n      return readApplication({ applicationId, fields, state });\n    },\n    async readApplicationByName(\n      applicationName: string,\n      fields = defaultFields\n    ): Promise<ApplicationSkeleton> {\n      return readApplicationByName({ applicationName, fields, state });\n    },\n    async readApplications(): Promise<ApplicationSkeleton[]> {\n      return readApplications({ state });\n    },\n    async updateApplication(\n      applicationId: string,\n      moData: IdObjectSkeletonInterface\n    ): Promise<ApplicationSkeleton> {\n      return updateApplication({\n        applicationId,\n        applicationData: moData,\n        state,\n      });\n    },\n    async deleteApplication(\n      applicationId: string,\n      deep = true\n    ): Promise<ApplicationSkeleton> {\n      return deleteApplication({ applicationId, options: { deep }, state });\n    },\n    async deleteApplicationByName(\n      applicationName: string,\n      deep = true\n    ): Promise<ApplicationSkeleton> {\n      return deleteApplicationByName({\n        applicationName,\n        options: { deep },\n        state,\n      });\n    },\n    async deleteApplications(deep = true): Promise<ApplicationSkeleton[]> {\n      return deleteApplications({ options: { deep }, state });\n    },\n    async queryApplications(\n      filter: string,\n      fields: string[] = defaultFields\n    ): Promise<ApplicationSkeleton[]> {\n      return queryApplications({ filter, fields, state });\n    },\n    async exportApplication(\n      applicationId: string,\n      options: ApplicationExportOptions\n    ): Promise<ApplicationExportInterface> {\n      return exportApplication({ applicationId, options, state });\n    },\n    async exportApplicationByName(\n      applicationName: string,\n      options: ApplicationExportOptions\n    ): Promise<ApplicationExportInterface> {\n      return exportApplicationByName({ applicationName, options, state });\n    },\n    async exportApplications(\n      options: ApplicationExportOptions = { deps: true, useStringArrays: true }\n    ): Promise<ApplicationExportInterface> {\n      return exportApplications({ options, state });\n    },\n    async importApplication(\n      applicationId: string,\n      importData: ApplicationExportInterface,\n      options: ApplicationImportOptions\n    ): Promise<ApplicationSkeleton> {\n      return importApplication({ applicationId, importData, options, state });\n    },\n    async importApplicationByName(\n      applicationName: string,\n      importData: ApplicationExportInterface,\n      options: ApplicationImportOptions\n    ): Promise<ApplicationSkeleton> {\n      return importApplicationByName({\n        applicationName,\n        importData,\n        options,\n        state,\n      });\n    },\n    async importFirstApplication(\n      importData: ApplicationExportInterface,\n      options: ApplicationImportOptions\n    ): Promise<ApplicationSkeleton[]> {\n      return importApplications({ importData, options, state });\n    },\n    async importApplications(\n      importData: ApplicationExportInterface,\n      options: ApplicationImportOptions\n    ): Promise<ApplicationSkeleton[]> {\n      return importApplications({ importData, options, state });\n    },\n  };\n};\n\nexport type ApplicationSkeleton = IdObjectSkeletonInterface & {\n  authoritative: boolean;\n  connectorId: string;\n  description: string;\n  icon: string;\n  mappingNames: string[];\n  members;\n  name: string;\n  owners;\n  roles;\n  ssoEntities: {\n    idpLocation: string;\n    idpPrivateId: string;\n    spLocation: string;\n    spPrivate: string;\n  };\n  templateName: string;\n  templateVersion: string;\n  uiConfig: object;\n  url: string;\n};\n\n/**\n * Export format for applications\n */\nexport interface ApplicationExportInterface {\n  /**\n   * Metadata\n   */\n  meta?: ExportMetaData;\n  /**\n   * Managed applications\n   */\n  managedApplication: Record<string, ApplicationSkeleton>;\n  /**\n   * Scripts\n   */\n  script?: Record<string, ScriptSkeleton>;\n  /**\n   * OAuth2 clients\n   */\n  application?: Record<string, OAuth2ClientSkeleton>;\n  /**\n   * Saml providers, circles of trust, and metadata\n   */\n  saml?: {\n    hosted?: Record<string, Saml2ProviderSkeleton>;\n    remote?: Record<string, Saml2ProviderSkeleton>;\n    metadata?: Record<string, string[]>;\n    cot?: Record<string, CircleOfTrustSkeleton>;\n  };\n  /**\n   * connectors\n   */\n  connector?: Record<string, ConnectorSkeleton>;\n  /**\n   * mappings\n   */\n  mapping?: Record<string, MappingSkeleton>;\n}\n\n/**\n * Application export options\n */\nexport type ApplicationExportOptions = {\n  /**\n   * Include any dependencies (scripts, oauth2 clients, saml providers, circles of trust, etc).\n   */\n  deps: boolean;\n  /**\n   * Use string arrays to store multi-line text in scripts.\n   */\n  useStringArrays: boolean;\n};\n\n/**\n * Application export options\n */\nexport type ApplicationImportOptions = {\n  /**\n   * Import any dependencies (scripts).\n   */\n  deps: boolean;\n};\n\nexport function createApplicationExportTemplate({\n  state,\n}: {\n  state: State;\n}): ApplicationExportInterface {\n  return {\n    meta: getMetadata({ state }),\n    managedApplication: {},\n    application: {},\n  } as ApplicationExportInterface;\n}\n\nexport function getRealmManagedApplication({ state }: { state: State }) {\n  let realmManagedOrg = 'application';\n  if (state.getDeploymentType() === constants.CLOUD_DEPLOYMENT_TYPE_KEY) {\n    realmManagedOrg = `${state.getRealm()}_application`;\n  }\n  return realmManagedOrg;\n}\n\nexport async function createApplication({\n  applicationId,\n  applicationData,\n  state,\n}: {\n  applicationId: string;\n  applicationData: ApplicationSkeleton;\n  state: State;\n}): Promise<ApplicationSkeleton> {\n  try {\n    const application = await createManagedObject({\n      type: getRealmManagedApplication({ state }),\n      id: applicationId,\n      moData: applicationData,\n      state,\n    });\n    return application as ApplicationSkeleton;\n  } catch (error) {\n    throw new FrodoError(`Error creating application ${applicationId}`, error);\n  }\n}\n\nexport async function readApplication({\n  applicationId,\n  fields = defaultFields,\n  state,\n}: {\n  applicationId: string;\n  fields?: string[];\n  state: State;\n}): Promise<ApplicationSkeleton> {\n  try {\n    const application = await readManagedObject({\n      type: getRealmManagedApplication({ state }),\n      id: applicationId,\n      fields,\n      state,\n    });\n    return application as ApplicationSkeleton;\n  } catch (error) {\n    throw new FrodoError(`Error reading application ${applicationId}`, error);\n  }\n}\n\nexport async function readApplicationByName({\n  applicationName,\n  fields = defaultFields,\n  state,\n}: {\n  applicationName: string;\n  fields?: string[];\n  state: State;\n}): Promise<ApplicationSkeleton> {\n  try {\n    const applications = await queryApplications({\n      filter: `name eq '${applicationName}'`,\n      fields,\n      state,\n    });\n    switch (applications.length) {\n      case 1:\n        return applications[0];\n      case 0:\n        throw new Error(`Application '${applicationName}' not found`);\n      default:\n        throw new Error(\n          `${applications.length} applications '${applicationName}' found`\n        );\n    }\n  } catch (error) {\n    throw new FrodoError(`Error reading application ${applicationName}`, error);\n  }\n}\n\nexport async function readApplications({\n  fields = defaultFields,\n  state,\n}: {\n  fields?: string[];\n  state: State;\n}): Promise<ApplicationSkeleton[]> {\n  try {\n    const applications = await readManagedObjects({\n      type: getRealmManagedApplication({ state }),\n      fields,\n      state,\n    });\n    return applications as ApplicationSkeleton[];\n  } catch (error) {\n    throw new FrodoError(`Error reading applications`, error);\n  }\n}\n\nexport async function updateApplication({\n  applicationId,\n  applicationData,\n  state,\n}: {\n  applicationId: string;\n  applicationData: IdObjectSkeletonInterface;\n  state: State;\n}): Promise<ApplicationSkeleton> {\n  try {\n    const application = await updateManagedObject({\n      type: getRealmManagedApplication({ state }),\n      id: applicationId,\n      moData: applicationData,\n      state,\n    });\n    return application as ApplicationSkeleton;\n  } catch (error) {\n    throw new FrodoError(`Error updating application ${applicationId}`, error);\n  }\n}\n\nfunction isOidcApplication(applicationData: ApplicationSkeleton): boolean {\n  return get(applicationData, ['ssoEntities', 'oidcId']) ? true : false;\n}\n\nfunction getOAuth2ClientId(applicationData): string {\n  return get(applicationData, ['ssoEntities', 'oidcId']);\n}\n\nfunction isSaml2Application(applicationData: ApplicationSkeleton): boolean {\n  return get(applicationData, ['ssoEntities', 'idpPrivateId']) ? true : false;\n}\n\nfunction getSaml2IdpEntityId(applicationData: ApplicationSkeleton): string {\n  return decode(get(applicationData, ['ssoEntities', 'idpPrivateId']));\n}\n\nfunction getSaml2SpEntityId(applicationData: ApplicationSkeleton): string {\n  return decode(get(applicationData, ['ssoEntities', 'spPrivateId']));\n}\n\nfunction isProvisioningApplication(\n  applicationData: ApplicationSkeleton\n): boolean {\n  return get(applicationData, ['connectorId']) ? true : false;\n}\n\nfunction getConnectorId(applicationData: ApplicationSkeleton): string {\n  return get(applicationData, ['connectorId']);\n}\n\nasync function exportDependencies({\n  applicationData,\n  options,\n  exportData,\n  state,\n}: {\n  applicationData: ApplicationSkeleton;\n  options: ApplicationExportOptions;\n  exportData: ApplicationExportInterface;\n  state: State;\n}) {\n  try {\n    debugMessage({\n      message: `ApplicationOps.exportDependencies: start [application=${applicationData['name']}]`,\n      state,\n    });\n    // oauth2clients\n    if (isOidcApplication(applicationData)) {\n      const clientId = getOAuth2ClientId(applicationData);\n      const clientData = await exportOAuth2Client({\n        clientId,\n        options: {\n          deps: options.deps,\n          useStringArrays: options.useStringArrays,\n        },\n        state,\n      });\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      exportData = mergeDeep(exportData, clientData);\n    }\n    // saml entity providers and circles of trust\n    if (isSaml2Application(applicationData)) {\n      // saml IDPs\n      const saml2IdpId = getSaml2IdpEntityId(applicationData);\n      if (saml2IdpId) {\n        const saml2IdpData = await exportSaml2Provider({\n          entityId: saml2IdpId,\n          state,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        exportData = mergeDeep(exportData, saml2IdpData);\n      }\n      // saml SPs\n      const saml2SpId = getSaml2SpEntityId(applicationData);\n      if (saml2SpId) {\n        const saml2SpData = await exportSaml2Provider({\n          entityId: saml2SpId,\n          state,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        exportData = mergeDeep(exportData, saml2SpData);\n      }\n      // circles of trust\n      const cotData = await exportCirclesOfTrust({\n        entityProviders: [saml2IdpId, saml2SpId],\n        options: { indicateProgress: false },\n        state,\n      });\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      exportData = mergeDeep(exportData, cotData);\n    }\n    // connectors and mappings\n    if (isProvisioningApplication(applicationData)) {\n      const connectorId = getConnectorId(applicationData);\n      if (connectorId) {\n        debugMessage({\n          message: `ApplicationOps.exportDependencies: application=${applicationData['name']}, connector=${connectorId}`,\n          state,\n        });\n        const connectorData = await exportConnector({\n          connectorId,\n          options: { deps: true, useStringArrays: true },\n          state,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        exportData = mergeDeep(exportData, connectorData);\n      }\n    }\n    debugMessage({\n      message: `ApplicationOps.exportDependencies: end`,\n      state,\n    });\n  } catch (error) {\n    throw new FrodoError(`Error exporting dependencies`, error);\n  }\n}\n\nasync function importDependencies({\n  applicationData,\n  importData,\n  state,\n}: {\n  applicationData: ApplicationSkeleton;\n  importData: ApplicationExportInterface;\n  state: State;\n}) {\n  const errors: Error[] = [];\n  try {\n    debugMessage({\n      message: `ApplicationOps.importDependencies: start [application=${applicationData['name']}]`,\n      state,\n    });\n    // oauth2clients\n    if (isOidcApplication(applicationData)) {\n      const clientId = getOAuth2ClientId(applicationData);\n      try {\n        await importOAuth2Client({\n          clientId,\n          importData: importData as OAuth2ClientExportInterface,\n          options: { deps: true },\n          state,\n        });\n      } catch (error) {\n        errors.push(error);\n      }\n    }\n    // saml entity providers and circles of trust\n    if (isSaml2Application(applicationData)) {\n      // saml IDPs\n      const saml2IdpId = getSaml2IdpEntityId(applicationData);\n      if (saml2IdpId) {\n        try {\n          await importSaml2Provider({\n            entityId: saml2IdpId,\n            importData: importData as Saml2ExportInterface,\n            options: { deps: true },\n            state,\n          });\n        } catch (error) {\n          errors.push(error);\n        }\n      }\n      // saml SPs\n      const saml2SpId = getSaml2SpEntityId(applicationData);\n      if (saml2SpId) {\n        try {\n          await importSaml2Provider({\n            entityId: saml2SpId,\n            importData: importData as Saml2ExportInterface,\n            options: { deps: true },\n            state,\n          });\n        } catch (error) {\n          errors.push(error);\n        }\n      }\n      // circles of trust\n      try {\n        await importCirclesOfTrust({\n          entityProviders: [saml2IdpId, saml2SpId],\n          importData: importData as CirclesOfTrustExportInterface,\n          state,\n        });\n      } catch (error) {\n        errors.push(error);\n      }\n    }\n    // connectors and mappings\n    if (isProvisioningApplication(applicationData)) {\n      const connectorId = getConnectorId(applicationData);\n      if (connectorId) {\n        try {\n          await importConnector({\n            connectorId,\n            importData: importData as ConnectorExportInterface,\n            options: { deps: true },\n            state,\n          });\n        } catch (error) {\n          errors.push(error);\n        }\n      }\n    }\n    if (errors.length) {\n      throw new FrodoError(`Error importing dependencies`, errors);\n    }\n    debugMessage({\n      message: `ApplicationOps.importDependencies: end`,\n      state,\n    });\n  } catch (error) {\n    // just re-throw previously caught errors\n    if (errors.length > 0) {\n      throw error;\n    }\n    throw new FrodoError(`Error importing dependencies`, error);\n  }\n}\n\nasync function deleteDependencies({\n  applicationData,\n  state,\n}: {\n  applicationData: ApplicationSkeleton;\n  state: State;\n}) {\n  const errors: Error[] = [];\n  try {\n    debugMessage({\n      message: `ApplicationOps.deleteDependencies: start [application=${applicationData['name']}]`,\n      state,\n    });\n    // oauth2clients\n    if (isOidcApplication(applicationData)) {\n      const clientId = getOAuth2ClientId(applicationData);\n      if (clientId) {\n        try {\n          await deleteOAuth2Client({\n            clientId,\n            state,\n          });\n          debugMessage({\n            message: `ApplicationOps.deleteDependencies: Deleted oauth2 client '${clientId}'.`,\n            state,\n          });\n        } catch (error) {\n          errors.push(error);\n        }\n      }\n    }\n    // saml entity providers and circles of trust\n    if (isSaml2Application(applicationData)) {\n      // saml IDPs\n      const saml2IdpId = getSaml2IdpEntityId(applicationData);\n      try {\n        if (saml2IdpId) {\n          await deleteSaml2Provider({\n            entityId: saml2IdpId,\n            state,\n          });\n          debugMessage({\n            message: `ApplicationOps.deleteDependencies: Deleted saml2 idp '${saml2IdpId}'.`,\n            state,\n          });\n        }\n      } catch (error) {\n        errors.push(error);\n      }\n      // saml SPs\n      const saml2SpId = getSaml2SpEntityId(applicationData);\n      try {\n        if (saml2SpId) {\n          await deleteSaml2Provider({\n            entityId: saml2SpId,\n            state,\n          });\n          debugMessage({\n            message: `ApplicationOps.deleteDependencies: Deleted saml2 sp '${saml2SpId}'.`,\n            state,\n          });\n        }\n      } catch (error) {\n        errors.push(error);\n      }\n      // circles of trust\n      // only remove providers from circle of trust, don't delete the cot object\n      try {\n        const cots = await readCirclesOfTrust({\n          entityProviders: [saml2IdpId, saml2SpId],\n          state,\n        });\n        for (const cot of cots) {\n          // remove providers before saving modified cot\n          debugMessage({\n            message: `ApplicationOps.deleteDependencies: Existing trusted providers for ${\n              cot._id\n            }:\\n${cot.trustedProviders\n              .map((it) => it.split('|')[0])\n              .join('\\n')}.`,\n            state,\n          });\n          const providers = cot.trustedProviders.filter(\n            (provider) =>\n              provider !== `${saml2IdpId}|saml2` &&\n              provider !== `${saml2SpId}|saml2`\n          );\n          cot.trustedProviders = providers;\n          debugMessage({\n            message: `ApplicationOps.deleteDependencies: Updated trusted providers for ${\n              cot._id\n            }:\\n${cot.trustedProviders\n              .map((it) => it.split('|')[0])\n              .join('\\n')}.`,\n            state,\n          });\n          await updateCircleOfTrust({ cotId: cot._id, cotData: cot, state });\n        }\n      } catch (error) {\n        errors.push(error);\n      }\n    }\n    if (errors.length > 0) {\n      throw new FrodoError(`Error deleting dependencies`, errors);\n    }\n    debugMessage({\n      message: `ApplicationOps.deleteDependencies: end`,\n      state,\n    });\n  } catch (error) {\n    // just re-throw previously caught errors\n    if (errors.length > 0) {\n      throw error;\n    }\n    throw new FrodoError(`Error deleting dependencies`, error);\n  }\n}\n\nexport async function deleteApplication({\n  applicationId,\n  options = { deep: true },\n  state,\n}: {\n  applicationId: string;\n  options?: { deep: boolean };\n  state: State;\n}): Promise<ApplicationSkeleton> {\n  try {\n    debugMessage({ message: `ApplicationOps.deleteApplication: start`, state });\n    const { deep } = options;\n    const applicationData: ApplicationSkeleton = (await deleteManagedObject({\n      type: getRealmManagedApplication({ state }),\n      id: applicationId,\n      state,\n    })) as ApplicationSkeleton;\n    if (deep) {\n      await deleteDependencies({ applicationData, state });\n    }\n    debugMessage({ message: `ApplicationOps.deleteApplication: end`, state });\n    return applicationData as ApplicationSkeleton;\n  } catch (error) {\n    throw new FrodoError(`Error deleting application ${applicationId}`, error);\n  }\n}\n\nexport async function deleteApplicationByName({\n  applicationName,\n  options = { deep: true },\n  state,\n}: {\n  applicationName: string;\n  options?: { deep: boolean };\n  state: State;\n}): Promise<ApplicationSkeleton> {\n  let applications: ApplicationSkeleton[] = [];\n  try {\n    applications = await queryApplications({\n      filter: `name eq '${applicationName}'`,\n      fields: ['_id'],\n      state,\n    });\n    if (applications.length == 1) {\n      return deleteApplication({\n        applicationId: applications[0]._id,\n        options,\n        state,\n      });\n    }\n  } catch (error) {\n    throw new FrodoError(\n      `Error deleting application ${applicationName}`,\n      error\n    );\n  }\n  if (applications.length == 0) {\n    throw new FrodoError(`Application '${applicationName}' not found`);\n  }\n  if (applications.length > 1) {\n    throw new FrodoError(\n      `${applications.length} applications '${applicationName}' found`\n    );\n  }\n}\n\nexport async function deleteApplications({\n  options = { deep: true },\n  state,\n}: {\n  options?: { deep: boolean };\n  state: State;\n}): Promise<ApplicationSkeleton[]> {\n  const errors: Error[] = [];\n  try {\n    debugMessage({\n      message: `ApplicationOps.deleteApplications: start`,\n      state,\n    });\n    const applications = await readApplications({\n      state,\n    });\n    const deleted: ApplicationSkeleton[] = [];\n    for (const application of applications) {\n      debugMessage({\n        message: `ApplicationOps.deleteApplications: '${application['_id']}'`,\n        state,\n      });\n      try {\n        deleted.push(\n          await deleteApplication({\n            applicationId: application['_id'],\n            options,\n            state,\n          })\n        );\n      } catch (error) {\n        errors.push(error);\n      }\n    }\n    if (errors.length) {\n      throw new FrodoError(`Error deleting applications`, errors);\n    }\n    debugMessage({ message: `ApplicationOps.deleteApplications: end`, state });\n    return deleted;\n  } catch (error) {\n    // just re-throw previously caught errors\n    if (errors.length > 0) {\n      throw error;\n    }\n    throw new FrodoError(`Error deleting applications`, error);\n  }\n}\n\nexport async function queryApplications({\n  filter,\n  fields = defaultFields,\n  state,\n}: {\n  filter: string;\n  fields?: string[];\n  state: State;\n}): Promise<ApplicationSkeleton[]> {\n  try {\n    const application = await queryManagedObjects({\n      type: getRealmManagedApplication({ state }),\n      filter,\n      fields,\n      state,\n    });\n    return application as ApplicationSkeleton[];\n  } catch (error) {\n    throw new FrodoError(\n      `Error querying applications with filter ${filter}`,\n      error\n    );\n  }\n}\n\nexport async function exportApplication({\n  applicationId,\n  options = {\n    deps: true,\n    useStringArrays: true,\n  },\n  state,\n}: {\n  applicationId: string;\n  options: ApplicationExportOptions;\n  state: State;\n}): Promise<ApplicationExportInterface> {\n  try {\n    debugMessage({ message: `ApplicationOps.exportApplication: start`, state });\n    const applicationData = await readApplication({ applicationId, state });\n    const exportData = createApplicationExportTemplate({ state });\n    exportData.managedApplication[applicationData._id] = applicationData;\n    if (options.deps) {\n      await exportDependencies({\n        applicationData: applicationData,\n        options,\n        exportData,\n        state,\n      });\n    }\n    debugMessage({ message: `ApplicationOps.exportApplication: end`, state });\n    return exportData;\n  } catch (error) {\n    throw new FrodoError(`Error exporting application ${applicationId}`, error);\n  }\n}\n\nexport async function exportApplicationByName({\n  applicationName,\n  options = {\n    deps: true,\n    useStringArrays: true,\n  },\n  state,\n}: {\n  applicationName: string;\n  options: ApplicationExportOptions;\n  state: State;\n}): Promise<ApplicationExportInterface> {\n  try {\n    debugMessage({\n      message: `ApplicationOps.exportApplicationByName: start`,\n      state,\n    });\n    const applicationData = await readApplicationByName({\n      applicationName,\n      state,\n    });\n    const exportData = createApplicationExportTemplate({ state });\n    exportData.managedApplication[applicationData._id] = applicationData;\n    if (options.deps) {\n      await exportDependencies({\n        applicationData: applicationData,\n        options,\n        exportData,\n        state,\n      });\n    }\n    debugMessage({\n      message: `ApplicationOps.exportApplicationByName: end`,\n      state,\n    });\n    return exportData;\n  } catch (error) {\n    throw new FrodoError(\n      `Error exporting application ${applicationName}`,\n      error\n    );\n  }\n}\n\nexport async function exportApplications({\n  options,\n  state,\n}: {\n  options: ApplicationExportOptions;\n  state: State;\n}): Promise<ApplicationExportInterface> {\n  const errors: Error[] = [];\n  let indicatorId: string;\n  try {\n    debugMessage({ message: `ApplicationOps.exportApplication: start`, state });\n    const exportData = createApplicationExportTemplate({ state });\n    const applications = await readApplications({ state });\n    indicatorId = createProgressIndicator({\n      total: applications.length,\n      message: 'Exporting applications...',\n      state,\n    });\n    for (const applicationData of applications) {\n      updateProgressIndicator({\n        id: indicatorId,\n        message: `Exporting application ${applicationData.name}`,\n        state,\n      });\n      exportData.managedApplication[applicationData._id] = applicationData;\n      if (options.deps) {\n        try {\n          await exportDependencies({\n            applicationData: applicationData,\n            options,\n            exportData,\n            state,\n          });\n        } catch (error) {\n          errors.push(error);\n        }\n      }\n    }\n    if (errors.length > 0) {\n      stopProgressIndicator({\n        id: indicatorId,\n        message: `Error exporting applications`,\n        status: 'fail',\n        state,\n      });\n      throw new FrodoError(`Error exporting applications`, errors);\n    }\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Exported ${applications.length} applications`,\n      state,\n    });\n    debugMessage({ message: `ApplicationOps.exportApplication: end`, state });\n    return exportData;\n  } catch (error) {\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Error exporting applications`,\n      status: 'fail',\n      state,\n    });\n    // just re-throw previously caught errors\n    if (errors.length > 0) {\n      throw error;\n    }\n    throw new FrodoError(`Error exporting applications`, error);\n  }\n}\n\n/**\n * Import application\n * @param {string} clientId client id\n * @param {ApplicationExportInterface} importData import data\n * @param {ApplicationImportOptions} options import options\n * @returns {Promise<ApplicationSkeleton>} a promise resolving to an oauth2 client\n */\nexport async function importApplication({\n  applicationId,\n  importData,\n  options = { deps: true },\n  state,\n}: {\n  applicationId: string;\n  importData: ApplicationExportInterface;\n  options?: ApplicationImportOptions;\n  state: State;\n}): Promise<ApplicationSkeleton> {\n  let response = null;\n  const errors = [];\n  const imported = [];\n  try {\n    for (const id of Object.keys(importData.managedApplication)) {\n      if (id === applicationId) {\n        try {\n          const applicationData = importData.managedApplication[id];\n          delete applicationData._provider;\n          delete applicationData._rev;\n          if (options.deps) {\n            await importDependencies({ applicationData, importData, state });\n          }\n          response = await updateApplication({\n            applicationId,\n            applicationData,\n            state,\n          });\n          imported.push(id);\n        } catch (error) {\n          errors.push(error);\n        }\n      }\n    }\n    if (errors.length > 0) {\n      throw new FrodoError(\n        `Error importing application ${applicationId}`,\n        errors\n      );\n    }\n    if (0 === imported.length) {\n      throw new FrodoError(\n        `Import error:\\n${applicationId} not found in import data!`\n      );\n    }\n    return response;\n  } catch (error) {\n    // just re-throw previously caught errors\n    if (errors.length > 0 || imported.length == 0) {\n      throw error;\n    }\n    throw new FrodoError(`Error importing application ${applicationId}`, error);\n  }\n}\n\n/**\n * Import application\n * @param {string} clientId client id\n * @param {ApplicationExportInterface} importData import data\n * @param {ApplicationImportOptions} options import options\n * @returns {Promise<ApplicationSkeleton>} a promise resolving to an oauth2 client\n */\nexport async function importApplicationByName({\n  applicationName: applicationName,\n  importData,\n  options = { deps: true },\n  state,\n}: {\n  applicationName: string;\n  importData: ApplicationExportInterface;\n  options?: ApplicationImportOptions;\n  state: State;\n}): Promise<ApplicationSkeleton> {\n  let response = null;\n  const errors = [];\n  const imported = [];\n  try {\n    for (const applicationId of Object.keys(importData.managedApplication)) {\n      if (\n        importData.managedApplication[applicationId].name === applicationName\n      ) {\n        try {\n          const applicationData = importData.managedApplication[applicationId];\n          delete applicationData._provider;\n          delete applicationData._rev;\n          if (options.deps) {\n            await importDependencies({ applicationData, importData, state });\n          }\n          response = await updateApplication({\n            applicationId,\n            applicationData,\n            state,\n          });\n          imported.push(applicationId);\n        } catch (error) {\n          errors.push(error);\n        }\n      }\n    }\n    if (errors.length > 0) {\n      throw new FrodoError(\n        `Error importing application ${applicationName}`,\n        errors\n      );\n    }\n    if (0 === imported.length) {\n      throw new FrodoError(\n        `Import error:\\n${applicationName} not found in import data!`\n      );\n    }\n    return response;\n  } catch (error) {\n    // just re-throw previously caught errors\n    if (errors.length > 0 || imported.length == 0) {\n      throw error;\n    }\n    throw new FrodoError(\n      `Error importing application ${applicationName}`,\n      error\n    );\n  }\n}\n\n/**\n * Import first application\n * @param {ApplicationExportInterface} importData import data\n * @param {ApplicationImportOptions} options import options\n * @returns {Promise<ApplicationSkeleton[]>} a promise resolving to an array of oauth2 clients\n */\nexport async function importFirstApplication({\n  importData,\n  options = { deps: true },\n  state,\n}: {\n  importData: ApplicationExportInterface;\n  options?: ApplicationImportOptions;\n  state: State;\n}): Promise<ApplicationSkeleton> {\n  let response = null;\n  const errors = [];\n  const imported = [];\n  try {\n    for (const applicationId of Object.keys(importData.managedApplication)) {\n      try {\n        const applicationData = importData.managedApplication[applicationId];\n        delete applicationData._provider;\n        delete applicationData._rev;\n        if (options.deps) {\n          await importDependencies({ applicationData, importData, state });\n        }\n        response = await updateApplication({\n          applicationId,\n          applicationData,\n          state,\n        });\n        imported.push(applicationId);\n      } catch (error) {\n        errors.push(error);\n      }\n      break;\n    }\n    if (errors.length > 0) {\n      throw new FrodoError(`Error importing first application`, errors);\n    }\n    if (0 === imported.length) {\n      throw new FrodoError(\n        `Import error:\\nNo applications found in import data!`\n      );\n    }\n    return response;\n  } catch (error) {\n    // just re-throw previously caught errors\n    if (errors.length > 0 || imported.length == 0) {\n      throw error;\n    }\n    throw new FrodoError(`Error importing first application`, error);\n  }\n}\n\n/**\n * Import applications\n * @param {ApplicationExportInterface} importData import data\n * @param {ApplicationImportOptions} options import options\n * @returns {Promise<ApplicationSkeleton[]>} a promise resolving to an array of oauth2 clients\n */\nexport async function importApplications({\n  importData,\n  options = { deps: true },\n  state,\n}: {\n  importData: ApplicationExportInterface;\n  options?: ApplicationImportOptions;\n  state: State;\n}): Promise<ApplicationSkeleton[]> {\n  const response = [];\n  const errors = [];\n  try {\n    for (const applicationId of Object.keys(importData.managedApplication)) {\n      const applicationData = importData.managedApplication[applicationId];\n      delete applicationData._provider;\n      delete applicationData._rev;\n      if (options.deps) {\n        try {\n          await importDependencies({ applicationData, importData, state });\n        } catch (error) {\n          errors.push(error);\n        }\n      }\n      try {\n        response.push(\n          await updateApplication({\n            applicationId,\n            applicationData,\n            state,\n          })\n        );\n      } catch (error) {\n        errors.push(error);\n      }\n    }\n    if (errors.length) {\n      throw new FrodoError(`Error importing applications`, errors);\n    }\n    return response;\n  } catch (error) {\n    // just re-throw previously caught errors\n    if (errors.length > 0) {\n      throw error;\n    }\n    throw new FrodoError(`Error importing applications`, error);\n  }\n}\n","import { createHash, randomBytes } from 'crypto';\nimport url from 'url';\nimport { v4 } from 'uuid';\n\nimport { step } from '../api/AuthenticateApi';\nimport { getServerInfo, getServerVersionInfo } from '../api/ServerInfoApi';\nimport Constants from '../shared/Constants';\nimport { State } from '../shared/State';\nimport { encodeBase64Url } from '../utils/Base64Utils';\nimport { debugMessage, verboseMessage } from '../utils/Console';\nimport { isValidUrl, parseUrl } from '../utils/ExportImportUtils';\nimport { CallbackHandler } from './CallbackOps';\nimport {\n  getServiceAccount,\n  SERVICE_ACCOUNT_DEFAULT_SCOPES,\n} from './cloud/ServiceAccountOps';\nimport {\n  getConnectionProfile,\n  saveConnectionProfile,\n} from './ConnectionProfileOps';\nimport { FrodoError } from './FrodoError';\nimport { createSignedJwtToken, JwkRsa } from './JoseOps';\nimport {\n  accessToken,\n  type AccessTokenMetaType,\n  authorize,\n} from './OAuth2OidcOps';\nimport { getSessionInfo } from './SessionOps';\nimport {\n  hasSaBearerToken,\n  hasUserBearerToken,\n  hasUserSessionToken,\n  readSaBearerToken,\n  readUserBearerToken,\n  readUserSessionToken,\n  saveSaBearerToken,\n  saveUserBearerToken,\n  saveUserSessionToken,\n} from './TokenCacheOps';\n\nexport type Authenticate = {\n  /**\n   * Get tokens and store them in State\n   * @param {boolean} forceLoginAsUser true to force login as user even if a service account is available (default: false)\n   * @param {boolean} autoRefresh true to automatically refresh tokens before they expire (default: true)\n   * @param {CallbackHandler} callbackHandler function allowing the library to collect responses from the user through callbacks\n   * @returns {Promise<Tokens>} object containing the tokens\n   */\n  getTokens(\n    forceLoginAsUser?: boolean,\n    autoRefresh?: boolean,\n    callbackHandler?: CallbackHandler\n  ): Promise<Tokens>;\n\n  // Deprecated\n  /**\n   * Get access token for service account\n   * @param {string} saId optional service account id\n   * @param {JwkRsa} saJwk optional service account JWK\n   * @returns {string | null} Access token or null\n   * @deprecated since v2.0.0 use {@link Authenticate.getTokens | getTokens} instead\n   * ```javascript\n   * getTokens(): Promise<boolean>\n   * ```\n   * @group Deprecated\n   */\n  getAccessTokenForServiceAccount(\n    saId?: string,\n    saJwk?: JwkRsa\n  ): Promise<string | null>;\n};\n\nexport default (state: State): Authenticate => {\n  return {\n    async getTokens(\n      forceLoginAsUser = false,\n      autoRefresh = true,\n      callbackHandler = null\n    ) {\n      return getTokens({\n        forceLoginAsUser,\n        autoRefresh,\n        callbackHandler,\n        state,\n      });\n    },\n\n    // Deprecated\n    async getAccessTokenForServiceAccount(\n      saId: string = undefined,\n      saJwk: JwkRsa = undefined\n    ): Promise<string | null> {\n      const { access_token } = await getFreshSaBearerToken({\n        saId,\n        saJwk,\n        state,\n      });\n      return access_token;\n    },\n  };\n};\n\nconst adminClientPassword = 'doesnotmatter';\nconst redirectUrlTemplate = '/platform/appAuthHelperRedirect.html';\n\nconst cloudIdmAdminScopes = 'openid fr:idm:* fr:idc:esv:*';\nconst forgeopsIdmAdminScopes = 'openid fr:idm:*';\nconst serviceAccountDefaultScopes = SERVICE_ACCOUNT_DEFAULT_SCOPES.join(' '); //'fr:am:* fr:idm:* fr:idc:esv:*';\n\nconst fidcClientId = 'idmAdminClient';\nconst forgeopsClientId = 'idm-admin-ui';\nlet adminClientId = fidcClientId;\n\n/**\n * Helper function to get cookie name\n * @param {State} state library state\n * @returns {string} cookie name\n */\nasync function determineCookieName(state: State) {\n  const data = await getServerInfo({ state });\n  debugMessage({\n    message: `AuthenticateOps.determineCookieName: cookieName=${data.cookieName}`,\n    state,\n  });\n  return data.cookieName;\n}\n\n/**\n * Helper function to determine if this is a setup mfa prompt in the ID Cloud tenant admin login journey\n * @param {Object} payload response from the previous authentication journey step\n * @param {State} state library state\n * @returns {Object} an object indicating if 2fa is required and the original payload\n */\nfunction checkAndHandle2FA({\n  payload,\n  otpCallbackHandler,\n  state,\n}: {\n  payload;\n  otpCallbackHandler: CallbackHandler;\n  state: State;\n}) {\n  debugMessage({ message: `AuthenticateOps.checkAndHandle2FA: start`, state });\n  // let skippable = false;\n  if ('callbacks' in payload) {\n    for (let callback of payload.callbacks) {\n      // select localAuthentication if Admin Federation is enabled\n      if (callback.type === 'SelectIdPCallback') {\n        debugMessage({\n          message: `AuthenticateOps.checkAndHandle2FA: Admin federation enabled. Allowed providers:`,\n          state,\n        });\n        let localAuth = false;\n        for (const value of callback.output[0].value) {\n          debugMessage({ message: `${value.provider}`, state });\n          if (value.provider === 'localAuthentication') {\n            localAuth = true;\n          }\n        }\n        if (localAuth) {\n          debugMessage({ message: `local auth allowed`, state });\n          callback.input[0].value = 'localAuthentication';\n        } else {\n          debugMessage({ message: `local auth NOT allowed`, state });\n        }\n      }\n      if (callback.type === 'HiddenValueCallback') {\n        if (callback.input[0].value.includes('skip')) {\n          // skippable = true;\n          callback.input[0].value = 'Skip';\n          // debugMessage(\n          //   `AuthenticateOps.checkAndHandle2FA: end [need2fa=true, skippable=true]`\n          // );\n          // return {\n          //   nextStep: true,\n          //   need2fa: true,\n          //   factor: 'None',\n          //   supported: true,\n          //   payload,\n          // };\n        }\n        if (callback.input[0].value.includes('webAuthnOutcome')) {\n          // webauthn!!!\n          debugMessage({\n            message: `AuthenticateOps.checkAndHandle2FA: end [need2fa=true, unsupported factor: webauthn]`,\n            state,\n          });\n          return {\n            nextStep: false,\n            need2fa: true,\n            factor: 'WebAuthN',\n            supported: false,\n            payload,\n          };\n        }\n      }\n      if (callback.type === 'NameCallback') {\n        if (callback.output[0].value.includes('code')) {\n          // skippable = false;\n          debugMessage({\n            message: `AuthenticateOps.checkAndHandle2FA: need2fa=true, skippable=false`,\n            state,\n          });\n          if (!otpCallbackHandler)\n            throw new FrodoError(\n              `2fa required but no otpCallback function provided.`\n            );\n          callback = otpCallbackHandler(callback);\n          debugMessage({\n            message: `AuthenticateOps.checkAndHandle2FA: end [need2fa=true, skippable=false, factor=Code]`,\n            state,\n          });\n          return {\n            nextStep: true,\n            need2fa: true,\n            factor: 'Code',\n            supported: true,\n            payload,\n          };\n        } else {\n          // answer callback\n          callback.input[0].value = state.getUsername();\n        }\n      }\n      if (callback.type === 'PasswordCallback') {\n        // answer callback\n        callback.input[0].value = state.getPassword();\n      }\n    }\n    debugMessage({\n      message: `AuthenticateOps.checkAndHandle2FA: end [need2fa=false]`,\n      state,\n    });\n    // debugMessage(payload);\n    return {\n      nextStep: true,\n      need2fa: false,\n      factor: 'None',\n      supported: true,\n      payload,\n    };\n  }\n  debugMessage({\n    message: `AuthenticateOps.checkAndHandle2FA: end [need2fa=false]`,\n    state,\n  });\n  // debugMessage(payload);\n  return {\n    nextStep: false,\n    need2fa: false,\n    factor: 'None',\n    supported: true,\n    payload,\n  };\n}\n\n/**\n * Helper function to set the default realm by deployment type\n * @param {State} state library state\n */\nfunction determineDefaultRealm(state: State) {\n  if (!state.getRealm() || state.getRealm() === Constants.DEFAULT_REALM_KEY) {\n    state.setRealm(\n      Constants.DEPLOYMENT_TYPE_REALM_MAP[state.getDeploymentType()]\n    );\n  }\n}\n\n/**\n * Helper function to determine the deployment type\n * @param {State} state library state\n * @returns {Promise<string>} deployment type\n */\nasync function determineDeploymentType(state: State): Promise<string> {\n  const cookieValue = state.getCookieValue();\n  let deploymentType = state.getDeploymentType();\n\n  switch (deploymentType) {\n    case Constants.CLOUD_DEPLOYMENT_TYPE_KEY:\n      return deploymentType;\n\n    case Constants.FORGEOPS_DEPLOYMENT_TYPE_KEY:\n      adminClientId = forgeopsClientId;\n      return deploymentType;\n\n    case Constants.CLASSIC_DEPLOYMENT_TYPE_KEY:\n      return deploymentType;\n\n    // detect deployment type\n    default: {\n      // if we are using a service account, we know it's cloud\n      if (state.getUseBearerTokenForAmApis())\n        return Constants.CLOUD_DEPLOYMENT_TYPE_KEY;\n\n      const verifier = encodeBase64Url(randomBytes(32));\n      const challenge = encodeBase64Url(\n        createHash('sha256').update(verifier).digest()\n      );\n      const challengeMethod = 'S256';\n      const redirectURL = url.resolve(state.getHost(), redirectUrlTemplate);\n\n      const config = {\n        maxRedirects: 0,\n        headers: {\n          [state.getCookieName()]: state.getCookieValue(),\n        },\n      };\n      let bodyFormData = `redirect_uri=${redirectURL}&scope=${cloudIdmAdminScopes}&response_type=code&client_id=${fidcClientId}&csrf=${cookieValue}&decision=allow&code_challenge=${challenge}&code_challenge_method=${challengeMethod}`;\n\n      deploymentType = Constants.CLASSIC_DEPLOYMENT_TYPE_KEY;\n      try {\n        await authorize({\n          amBaseUrl: state.getHost(),\n          data: bodyFormData,\n          config,\n          state,\n        });\n      } catch (e) {\n        // debugMessage(e.response);\n        if (\n          e.response?.status === 302 &&\n          e.response.headers?.location?.indexOf('code=') > -1\n        ) {\n          verboseMessage({\n            message: `ForgeRock Identity Cloud`['brightCyan'] + ` detected.`,\n            state,\n          });\n          deploymentType = Constants.CLOUD_DEPLOYMENT_TYPE_KEY;\n        } else {\n          try {\n            bodyFormData = `redirect_uri=${redirectURL}&scope=${forgeopsIdmAdminScopes}&response_type=code&client_id=${forgeopsClientId}&csrf=${state.getCookieValue()}&decision=allow&code_challenge=${challenge}&code_challenge_method=${challengeMethod}`;\n            await authorize({\n              amBaseUrl: state.getHost(),\n              data: bodyFormData,\n              config,\n              state,\n            });\n          } catch (ex) {\n            if (\n              ex.response?.status === 302 &&\n              ex.response.headers?.location?.indexOf('code=') > -1\n            ) {\n              adminClientId = forgeopsClientId;\n              verboseMessage({\n                message: `ForgeOps deployment`['brightCyan'] + ` detected.`,\n                state,\n              });\n              deploymentType = Constants.FORGEOPS_DEPLOYMENT_TYPE_KEY;\n            } else {\n              verboseMessage({\n                message: `Classic deployment`['brightCyan'] + ` detected.`,\n                state,\n              });\n            }\n          }\n        }\n      }\n      return deploymentType;\n    }\n  }\n}\n\n/**\n * Helper function to extract the semantic version string from a version info object\n * @param {Object} versionInfo version info object\n * @returns {String} semantic version\n */\nfunction getSemanticVersion(versionInfo) {\n  if ('version' in versionInfo) {\n    const versionString = versionInfo.version;\n    const rx = /([\\d]\\.[\\d]\\.[\\d](\\.[\\d])*)/g;\n    const version = versionString.match(rx);\n    return version[0];\n  }\n  throw new Error('Cannot extract semantic version from version info object.');\n}\n\nexport type UserSessionMetaType = {\n  tokenId: string;\n  successUrl: string;\n  realm: string;\n  expires: number;\n  from_cache?: boolean;\n};\n\n/**\n * Helper function to authenticate and obtain and store session cookie\n * @param {State} state library state\n * @returns {string} Session token or null\n */\nasync function getFreshUserSessionToken({\n  otpCallbackHandler,\n  state,\n}: {\n  otpCallbackHandler: CallbackHandler;\n  state: State;\n}): Promise<UserSessionMetaType> {\n  debugMessage({\n    message: `AuthenticateOps.getFreshUserSessionToken: start`,\n    state,\n  });\n  const config = {\n    headers: {\n      'X-OpenAM-Username': state.getUsername(),\n      'X-OpenAM-Password': state.getPassword(),\n    },\n  };\n  let response = await step({ body: {}, config, state });\n\n  let skip2FA = null;\n  let steps = 0;\n  const maxSteps = 3;\n  do {\n    skip2FA = checkAndHandle2FA({\n      payload: response,\n      otpCallbackHandler: otpCallbackHandler,\n      state,\n    });\n\n    // throw exception if 2fa required but factor not supported by frodo (e.g. WebAuthN)\n    if (!skip2FA.supported) {\n      throw new Error(`Unsupported 2FA factor: ${skip2FA.factor}`);\n    }\n\n    if (skip2FA.nextStep) {\n      steps++;\n      response = await step({ body: skip2FA.payload, state });\n    }\n\n    if ('tokenId' in response) {\n      response['from_cache'] = false;\n      // get session expiration\n      const sessionInfo = await getSessionInfo({\n        tokenId: response['tokenId'],\n        state,\n      });\n      response['expires'] = Date.parse(sessionInfo.maxIdleExpirationTime);\n      debugMessage({\n        message: `AuthenticateOps.getFreshUserSessionToken: end [tokenId=${response['tokenId']}]`,\n        state,\n      });\n      debugMessage({\n        message: response,\n        state,\n      });\n      return response as UserSessionMetaType;\n    }\n  } while (skip2FA.nextStep && steps < maxSteps);\n  debugMessage({\n    message: `AuthenticateOps.getFreshUserSessionToken: end [no session]`,\n    state,\n  });\n  return null;\n}\n\n/**\n * Helper function to obtain user session token\n * @param {State} state library state\n * @returns {Promise<UserSessionMetaType>} session token or null\n */\nasync function getUserSessionToken(\n  otpCallback: CallbackHandler,\n  state: State\n): Promise<UserSessionMetaType> {\n  debugMessage({\n    message: `AuthenticateOps.getUserSessionToken: start`,\n    state,\n  });\n  let token: UserSessionMetaType = null;\n  if (state.getUseTokenCache() && (await hasUserSessionToken({ state }))) {\n    try {\n      token = await readUserSessionToken({ state });\n      token.from_cache = true;\n      debugMessage({\n        message: `AuthenticateOps.getUserSessionToken: cached`,\n        state,\n      });\n    } catch (error) {\n      debugMessage({\n        message: `AuthenticateOps.getUserSessionToken: failed cache read`,\n        state,\n      });\n    }\n  }\n  if (!token) {\n    token = await getFreshUserSessionToken({\n      otpCallbackHandler: otpCallback,\n      state,\n    });\n    token.from_cache = false;\n    debugMessage({\n      message: `AuthenticateOps.getUserSessionToken: fresh`,\n      state,\n    });\n  }\n  if (state.getUseTokenCache()) {\n    await saveUserSessionToken({ token, state });\n  }\n  debugMessage({\n    message: `AuthenticateOps.getUserSessionToken: end`,\n    state,\n  });\n  return token;\n}\n\n/**\n * Helper function to obtain an oauth2 authorization code\n * @param {string} redirectURL oauth2 redirect uri\n * @param {string} codeChallenge PKCE code challenge\n * @param {string} codeChallengeMethod PKCE code challenge method\n * @param {State} state library state\n * @returns {string} oauth2 authorization code or null\n */\nasync function getAuthCode(\n  redirectURL: string,\n  codeChallenge: string,\n  codeChallengeMethod: string,\n  state: State\n): Promise<string> {\n  try {\n    const bodyFormData = `redirect_uri=${redirectURL}&scope=${\n      state.getDeploymentType() === Constants.CLOUD_DEPLOYMENT_TYPE_KEY\n        ? cloudIdmAdminScopes\n        : forgeopsIdmAdminScopes\n    }&response_type=code&client_id=${adminClientId}&csrf=${state.getCookieValue()}&decision=allow&code_challenge=${codeChallenge}&code_challenge_method=${codeChallengeMethod}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      maxRedirects: 0,\n    };\n    let response = undefined;\n    try {\n      response = await authorize({\n        amBaseUrl: state.getHost(),\n        data: bodyFormData,\n        config,\n        state,\n      });\n    } catch (error) {\n      response = error.response;\n      if (response.status < 200 || response.status > 399) {\n        throw error;\n      }\n    }\n    const redirectLocationURL = response.headers?.location;\n    const queryObject = url.parse(redirectLocationURL, true).query;\n    if ('code' in queryObject) {\n      return queryObject.code as string;\n    }\n    throw new FrodoError(`Authz code not found`);\n  } catch (error) {\n    throw new FrodoError(`Error getting authz code`, error);\n  }\n}\n\n/**\n * Helper function to obtain oauth2 access token\n * @param {State} state library state\n * @returns {Promise<AccessTokenMetaType>} access token or null\n */\nasync function getFreshUserBearerToken({\n  state,\n}: {\n  state: State;\n}): Promise<AccessTokenMetaType> {\n  debugMessage({\n    message: `AuthenticateOps.getAccessTokenForUser: start`,\n    state,\n  });\n  try {\n    const verifier = encodeBase64Url(randomBytes(32));\n    const challenge = encodeBase64Url(\n      createHash('sha256').update(verifier).digest()\n    );\n    const challengeMethod = 'S256';\n    const redirectURL = url.resolve(state.getHost(), redirectUrlTemplate);\n    const authCode = await getAuthCode(\n      redirectURL,\n      challenge,\n      challengeMethod,\n      state\n    );\n    let response: AccessTokenMetaType = null;\n    if (state.getDeploymentType() === Constants.CLOUD_DEPLOYMENT_TYPE_KEY) {\n      const config = {\n        auth: {\n          username: adminClientId,\n          password: adminClientPassword,\n        },\n      };\n      const bodyFormData = `redirect_uri=${redirectURL}&grant_type=authorization_code&code=${authCode}&code_verifier=${verifier}`;\n      response = await accessToken({\n        amBaseUrl: state.getHost(),\n        data: bodyFormData,\n        config,\n        state,\n      });\n    } else {\n      const bodyFormData = `client_id=${adminClientId}&redirect_uri=${redirectURL}&grant_type=authorization_code&code=${authCode}&code_verifier=${verifier}`;\n      response = await accessToken({\n        amBaseUrl: state.getHost(),\n        data: bodyFormData,\n        config: {},\n        state,\n      });\n    }\n    if ('access_token' in response) {\n      debugMessage({\n        message: `AuthenticateOps.getAccessTokenForUser: end with token`,\n        state,\n      });\n      return response;\n    }\n    throw new FrodoError(`No access token in response`);\n  } catch (error) {\n    throw new FrodoError(`Error getting access token for user`, error);\n  }\n}\n\n/**\n * Helper function to obtain oauth2 access token\n * @param {State} state library state\n * @returns {Promise<AccessTokenMetaType>} access token or null\n */\nasync function getUserBearerToken(state: State): Promise<AccessTokenMetaType> {\n  debugMessage({\n    message: `AuthenticateOps.getUserBearerToken: start`,\n    state,\n  });\n  let token: AccessTokenMetaType = null;\n  if (state.getUseTokenCache() && (await hasUserBearerToken({ state }))) {\n    try {\n      token = await readUserBearerToken({ state });\n      token.from_cache = true;\n      debugMessage({\n        message: `AuthenticateOps.getUserBearerToken: end [cached]`,\n        state,\n      });\n    } catch (error) {\n      debugMessage({\n        message: `AuthenticateOps.getUserBearerToken: end [failed cache read]`,\n        state,\n      });\n    }\n  }\n  if (!token) {\n    token = await getFreshUserBearerToken({ state });\n    token.from_cache = false;\n    debugMessage({\n      message: `AuthenticateOps.getUserBearerToken: end [fresh]`,\n      state,\n    });\n  }\n  if (state.getUseTokenCache()) {\n    await saveUserBearerToken({ token, state });\n  }\n  return token;\n}\n\nfunction createPayload(serviceAccountId: string, host: string) {\n  const u = parseUrl(host);\n  const aud = `${u.origin}:${\n    u.port ? u.port : u.protocol === 'https' ? '443' : '80'\n  }${u.pathname}/oauth2/access_token`;\n\n  // Cross platform way of setting JWT expiry time 3 minutes in the future, expressed as number of seconds since EPOCH\n  const exp = Math.floor(new Date().getTime() / 1000 + 180);\n\n  // A unique ID for the JWT which is required when requesting the openid scope\n  const jti = v4();\n\n  const iss = serviceAccountId;\n  const sub = serviceAccountId;\n\n  // Create the payload for our bearer token\n  const payload = { iss, sub, aud, exp, jti };\n\n  return payload;\n}\n\n/**\n * Get fresh access token for service account\n * @param {State} state library state\n * @returns {Promise<AccessTokenResponseType>} response object containg token, scope, type, and expiration in seconds\n */\nexport async function getFreshSaBearerToken({\n  saId = undefined,\n  saJwk = undefined,\n  state,\n}: {\n  saId?: string;\n  saJwk?: JwkRsa;\n  state: State;\n}): Promise<AccessTokenMetaType> {\n  debugMessage({\n    message: `AuthenticateOps.getFreshSaBearerToken: start`,\n    state,\n  });\n  saId = saId ? saId : state.getServiceAccountId();\n  saJwk = saJwk ? saJwk : state.getServiceAccountJwk();\n  const payload = createPayload(saId, state.getHost());\n  const jwt = await createSignedJwtToken(payload, saJwk);\n  const scope = state.getServiceAccountScope() || serviceAccountDefaultScopes;\n  const bodyFormData = `assertion=${jwt}&client_id=service-account&grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer&scope=${scope}`;\n  let response: AccessTokenMetaType;\n  try {\n    response = await accessToken({\n      amBaseUrl: state.getHost(),\n      data: bodyFormData,\n      config: {},\n      state,\n    });\n  } catch (error) {\n    const err: FrodoError = error as FrodoError;\n    if (\n      err.isHttpError &&\n      err.httpErrorText === 'invalid_scope' &&\n      err.httpDescription?.startsWith('Unsupported scope for service account: ')\n    ) {\n      const invalidScopes: string[] = err.httpDescription\n        .substring(39)\n        .split(',');\n      const finalScopes: string[] = scope.split(' ').filter((el) => {\n        return !invalidScopes.includes(el);\n      });\n      const bodyFormData = `assertion=${jwt}&client_id=service-account&grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer&scope=${finalScopes.join(\n        ' '\n      )}`;\n      response = await accessToken({\n        amBaseUrl: state.getHost(),\n        data: bodyFormData,\n        config: {},\n        state,\n      });\n    }\n  }\n  if ('access_token' in response) {\n    debugMessage({\n      message: `AuthenticateOps.getFreshSaBearerToken: end`,\n      state,\n    });\n    return response;\n  }\n  debugMessage({\n    message: `AuthenticateOps.getFreshSaBearerToken: end [No access token in response]`,\n    state,\n  });\n  return null;\n}\n\n/**\n * Get cached or fresh access token for service account\n * @param {State} state library state\n * @returns {Promise<AccessTokenResponseType>} response object containg token, scope, type, and expiration in seconds\n */\nexport async function getSaBearerToken({\n  state,\n}: {\n  state: State;\n}): Promise<AccessTokenMetaType> {\n  try {\n    debugMessage({\n      message: `AuthenticateOps.getSaBearerToken: start`,\n      state,\n    });\n    let token: AccessTokenMetaType = null;\n    if (state.getUseTokenCache() && (await hasSaBearerToken({ state }))) {\n      try {\n        token = await readSaBearerToken({ state });\n        token.from_cache = true;\n        debugMessage({\n          message: `AuthenticateOps.getSaBearerToken: end [cached]`,\n          state,\n        });\n      } catch (error) {\n        debugMessage({\n          message: `AuthenticateOps.getSaBearerToken: end [failed cache read]`,\n          state,\n        });\n      }\n    }\n    if (!token) {\n      token = await getFreshSaBearerToken({ state });\n      token.from_cache = false;\n      debugMessage({\n        message: `AuthenticateOps.getSaBearerToken: end [fresh]`,\n        state,\n      });\n    }\n    if (state.getUseTokenCache()) {\n      await saveSaBearerToken({ token, state });\n    }\n    return token;\n  } catch (error) {\n    throw new FrodoError(\n      `Error getting access token for service account`,\n      error\n    );\n  }\n}\n\n/**\n * Helper function to determine deployment type, default realm, and version and update library state\n * @param state library state\n */\nasync function determineDeploymentTypeAndDefaultRealmAndVersion(\n  state: State\n): Promise<void> {\n  debugMessage({\n    message: `AuthenticateOps.determineDeploymentTypeAndDefaultRealmAndVersion: start`,\n    state,\n  });\n  state.setDeploymentType(await determineDeploymentType(state));\n  determineDefaultRealm(state);\n  debugMessage({\n    message: `AuthenticateOps.determineDeploymentTypeAndDefaultRealmAndVersion: realm=${state.getRealm()}, type=${state.getDeploymentType()}`,\n    state,\n  });\n\n  const versionInfo = await getServerVersionInfo({ state });\n\n  // https://github.com/rockcarver/frodo-cli/issues/109\n  debugMessage({ message: `Full version: ${versionInfo.fullVersion}`, state });\n\n  const version = await getSemanticVersion(versionInfo);\n  state.setAmVersion(version);\n  debugMessage({\n    message: `AuthenticateOps.determineDeploymentTypeAndDefaultRealmAndVersion: end`,\n    state,\n  });\n}\n\n/**\n * Get logged-in subject\n * @param {State} state library state\n * @returns {string} a string identifying subject type and id\n */\nasync function getLoggedInSubject(state: State): Promise<string> {\n  let subjectString = `user ${state.getUsername()}`;\n  if (state.getUseBearerTokenForAmApis()) {\n    try {\n      const name = (\n        await getServiceAccount({\n          serviceAccountId: state.getServiceAccountId(),\n          state,\n        })\n      ).name;\n      subjectString = `service account ${name} [${state.getServiceAccountId()}]`;\n    } catch (error) {\n      subjectString = `service account ${state.getServiceAccountId()}`;\n    }\n  }\n  return subjectString;\n}\n\n/**\n * Helper method to set, reset, or cancel timer to auto refresh tokens\n * @param {boolean} forceLoginAsUser true to force login as user even if a service account is available (default: false)\n * @param {boolean} autoRefresh true to automatically refresh tokens before they expire (default: true)\n * @param {State} state library state\n */\nfunction scheduleAutoRefresh(\n  forceLoginAsUser: boolean,\n  autoRefresh: boolean,\n  state: State\n) {\n  let timer = state.getAutoRefreshTimer();\n  // clear existing timer\n  if (timer) {\n    debugMessage({\n      message: `AuthenticateOps.scheduleAutoRefresh: cancel existing timer`,\n      state,\n    });\n    clearTimeout(timer);\n  }\n  // new timer\n  if (autoRefresh) {\n    const expires =\n      state.getDeploymentType() === Constants.CLASSIC_DEPLOYMENT_TYPE_KEY\n        ? state.getUserSessionTokenMeta()?.expires\n        : state.getUseBearerTokenForAmApis()\n          ? state.getBearerTokenMeta()?.expires\n          : Math.min(\n              state.getBearerTokenMeta()?.expires,\n              state.getUserSessionTokenMeta()?.expires\n            );\n    let timeout = expires - Date.now() - 1000 * 25;\n    if (timeout < 1000 * 30) {\n      debugMessage({\n        message: `Timeout below threshold of 30 seconds (${Math.ceil(\n          timeout / 1000\n        )}), resetting timeout to 10ms.`,\n        state,\n      });\n      if (timeout < 10) timeout = 10;\n    }\n    debugMessage({\n      message: `AuthenticateOps.scheduleAutoRefresh: set new timer [${Math.floor(\n        timeout / 1000\n      )}s (${new Date(timeout).getMinutes()}m ${new Date(\n        timeout\n      ).getSeconds()}s)]`,\n      state,\n    });\n    timer = setTimeout(getTokens, timeout, {\n      forceLoginAsUser,\n      autoRefresh,\n      state,\n      // Volker's Visual Studio Code doesn't want to have it any other way.\n    }) as unknown as NodeJS.Timeout;\n    state.setAutoRefreshTimer(timer);\n    timer.unref();\n  }\n}\n\nexport type Tokens = {\n  bearerToken?: AccessTokenMetaType;\n  userSessionToken?: UserSessionMetaType;\n  subject?: string;\n  host?: string;\n  realm?: string;\n};\n\n/**\n * Get tokens\n * @param {boolean} forceLoginAsUser true to force login as user even if a service account is available (default: false)\n * @param {boolean} autoRefresh true to automatically refresh tokens before they expire (default: true)\n * @param {State} state library state\n * @returns {Promise<Tokens>} object containing the tokens\n */\nexport async function getTokens({\n  forceLoginAsUser = false,\n  autoRefresh = true,\n  callbackHandler = null,\n  state,\n}: {\n  forceLoginAsUser?: boolean;\n  autoRefresh?: boolean;\n  callbackHandler?: CallbackHandler;\n  state: State;\n}): Promise<Tokens> {\n  debugMessage({ message: `AuthenticateOps.getTokens: start`, state });\n  if (!state.getHost()) {\n    throw new FrodoError(`No host specified`);\n  }\n  let usingConnectionProfile: boolean = false;\n  try {\n    // if username/password on cli are empty, try to read from connections.json\n    if (\n      state.getUsername() == null &&\n      state.getPassword() == null &&\n      !state.getServiceAccountId() &&\n      !state.getServiceAccountJwk()\n    ) {\n      const conn = await getConnectionProfile({ state });\n      usingConnectionProfile = true;\n      state.setHost(conn.tenant);\n      state.setDeploymentType(conn.deploymentType);\n      state.setUsername(conn.username);\n      state.setPassword(conn.password);\n      state.setAuthenticationService(conn.authenticationService);\n      state.setAuthenticationHeaderOverrides(\n        conn.authenticationHeaderOverrides\n      );\n      state.setServiceAccountId(conn.svcacctId);\n      state.setServiceAccountJwk(conn.svcacctJwk);\n      state.setServiceAccountScope(conn.svcacctScope);\n    }\n\n    // if host is not a valid URL, try to locate a valid URL and deployment type from connections.json\n    if (!isValidUrl(state.getHost())) {\n      const conn = await getConnectionProfile({ state });\n      state.setHost(conn.tenant);\n      state.setDeploymentType(conn.deploymentType);\n    }\n\n    // now that we have the full tenant URL we can lookup the cookie name\n    state.setCookieName(await determineCookieName(state));\n\n    // use service account to login?\n    if (\n      !forceLoginAsUser &&\n      state.getServiceAccountId() &&\n      state.getServiceAccountJwk()\n    ) {\n      debugMessage({\n        message: `AuthenticateOps.getTokens: Authenticating with service account ${state.getServiceAccountId()}`,\n        state,\n      });\n      try {\n        const token = await getSaBearerToken({ state });\n        state.setBearerTokenMeta(token);\n        if (usingConnectionProfile && !token.from_cache) {\n          saveConnectionProfile({ host: state.getHost(), state });\n        }\n        state.setUseBearerTokenForAmApis(true);\n        await determineDeploymentTypeAndDefaultRealmAndVersion(state);\n      } catch (saErr) {\n        throw new FrodoError(`Service account login error`, saErr);\n      }\n    }\n    // use user account to login\n    else if (state.getUsername() && state.getPassword()) {\n      debugMessage({\n        message: `AuthenticateOps.getTokens: Authenticating with user account ${state.getUsername()}`,\n        state,\n      });\n      const token = await getUserSessionToken(callbackHandler, state);\n      if (token) state.setUserSessionTokenMeta(token);\n      await determineDeploymentTypeAndDefaultRealmAndVersion(state);\n      if (\n        state.getCookieValue() &&\n        // !state.getBearerToken() &&\n        (state.getDeploymentType() === Constants.CLOUD_DEPLOYMENT_TYPE_KEY ||\n          state.getDeploymentType() === Constants.FORGEOPS_DEPLOYMENT_TYPE_KEY)\n      ) {\n        const accessToken = await getUserBearerToken(state);\n        if (accessToken) state.setBearerTokenMeta(accessToken);\n      }\n    }\n    // incomplete or no credentials\n    else {\n      throw new FrodoError(`Incomplete or no credentials`);\n    }\n    if (\n      state.getCookieValue() ||\n      (state.getUseBearerTokenForAmApis() && state.getBearerToken())\n    ) {\n      if (state.getBearerTokenMeta()?.from_cache) {\n        verboseMessage({ message: `Using cached bearer token.`, state });\n      }\n      if (\n        !state.getUseBearerTokenForAmApis() &&\n        state.getUserSessionTokenMeta()?.from_cache\n      ) {\n        verboseMessage({ message: `Using cached session token.`, state });\n      }\n      scheduleAutoRefresh(forceLoginAsUser, autoRefresh, state);\n      const tokens: Tokens = {\n        bearerToken: state.getBearerTokenMeta(),\n        userSessionToken: state.getUserSessionTokenMeta(),\n        subject: await getLoggedInSubject(state),\n        host: state.getHost(),\n        realm: state.getRealm() ? state.getRealm() : 'root',\n      };\n      debugMessage({\n        message: `AuthenticateOps.getTokens: end with tokens`,\n        state,\n      });\n      // `Connected to ${state.getHost()} [${state.getRealm() ? state.getRealm() : 'root'}] as ${await getLoggedInSubject(state)}`\n      return tokens;\n    }\n  } catch (error) {\n    throw new FrodoError(`Error getting tokens`, error);\n  }\n}\n","import util from 'util';\n\nimport { State } from '../shared/State';\nimport { generateAmApi } from './BaseApi';\n\nconst serverInfoUrlTemplate = '%s/json/serverinfo/%s';\n\nconst serverInfoApiVersion = 'resource=1.1';\nconst serverVersionoApiVersion = 'resource=1.0';\n\nconst getServerInfoApiConfig = () => ({\n  apiVersion: serverInfoApiVersion,\n});\n\nconst getServerVersionApiConfig = () => ({\n  apiVersion: serverVersionoApiVersion,\n});\n\n/**\n * Get server info\n * @param {State} state library state\n * @returns {Promise} a promise that resolves to an object containing a server info object\n */\nexport async function getServerInfo({ state }: { state: State }) {\n  const urlString = util.format(serverInfoUrlTemplate, state.getHost(), '*');\n  const { data } = await generateAmApi({\n    resource: getServerInfoApiConfig(),\n    requestOverride: {},\n    state,\n  }).get(urlString, {});\n  return data;\n}\n\n/**\n * Get server version info\n * @param {State} state library state\n * @returns {Promise} a promise that resolves to an object containing a server version info object\n */\nexport async function getServerVersionInfo({ state }: { state: State }) {\n  const urlString = util.format(\n    serverInfoUrlTemplate,\n    state.getHost(),\n    'version'\n  );\n  const { data } = await generateAmApi({\n    resource: getServerVersionApiConfig(),\n    requestOverride: {},\n    state,\n  }).get(urlString, {});\n  return data;\n}\n","import util from 'util';\n\nimport { IdObjectSkeletonInterface } from '../../api/ApiTypes';\nimport { State } from '../../shared/State';\nimport { getHostBaseUrl } from '../../utils/ForgeRockUtils';\nimport { generateAmApi } from '../BaseApi';\n\nconst envInfoURLTemplate = '%s/feature?_queryFilter=true';\n\nconst getApiConfig = () => ({\n  path: `/feature`,\n});\n\nexport interface FeatureInterface extends IdObjectSkeletonInterface {\n  installedVersion: string;\n  availableVersions: string[];\n}\n\n/**\n * Get all features\n * @returns {Promise<{ result: FeatureInterface[]; }>} a promise that resolves to an object containing an array of feature objects\n */\nexport async function getFeatures({ state }: { state: State }): Promise<{\n  result: FeatureInterface[];\n}> {\n  const urlString = util.format(\n    envInfoURLTemplate,\n    getHostBaseUrl(state.getHost())\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get(\n    urlString,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n","import {\n  FeatureInterface,\n  getFeatures as _getFeatures,\n} from '../../api/cloud/FeatureApi';\nimport { State } from '../../shared/State';\nimport { debugMessage } from '../../utils/Console';\n\nexport type Feature = {\n  /**\n   * Get all features\n   * @returns {Promise<FeatureInterface[]>} a promise that resolves to an array of feature objects\n   */\n  getFeatures(): Promise<FeatureInterface[]>;\n  /**\n   * Check if feature is available\n   * @param {string} featureId feature id (e.g. 'service-accounts')\n   * @returns {Promise<boolean>} a promise that resolves to true if the feature is available and to false otherwise\n   */\n  hasFeature(featureId: string): Promise<boolean>;\n};\n\nexport default (state: State): Feature => {\n  return {\n    /**\n     * Get all features\n     * @returns {Promise<FeatureInterface[]>} a promise that resolves to an array of feature objects\n     */\n    async getFeatures(): Promise<FeatureInterface[]> {\n      return getFeatures({ state });\n    },\n\n    /**\n     * Check if feature is available\n     * @param {string} featureId feature id (e.g. 'service-accounts')\n     * @returns {Promise<boolean>} a promise that resolves to true if the feature is available and to false otherwise\n     */\n    async hasFeature(featureId: string): Promise<boolean> {\n      return hasFeature({ featureId, state });\n    },\n  };\n};\n\n/**\n * Get all features\n * @returns {Promise<FeatureInterface[]>} a promise that resolves to an array of feature objects\n */\nexport async function getFeatures({\n  state,\n}: {\n  state: State;\n}): Promise<FeatureInterface[]> {\n  if (typeof state.getFeatures() !== 'undefined') return state.getFeatures();\n  try {\n    const { result } = await _getFeatures({ state });\n    state.setFeatures(JSON.parse(JSON.stringify(result)));\n  } catch (error) {\n    debugMessage({ message: error.response?.data, state });\n    state.setFeatures([]);\n  }\n  return state.getFeatures();\n}\n\n/**\n * Check if feature is available\n * @param {string} featureId feature id (e.g. 'service-accounts')\n * @returns {Promise<boolean>} a promise that resolves to true if the feature is available and to false otherwise\n */\nexport async function hasFeature({\n  featureId,\n  state,\n}: {\n  featureId: string;\n  state: State;\n}): Promise<boolean> {\n  if (typeof state.getFeatures() === 'undefined') await getFeatures({ state });\n  const featureIds = state.getFeatures().map((feature) => feature._id);\n  return featureIds.includes(featureId);\n}\n","import { IdObjectSkeletonInterface } from '../../api/ApiTypes';\nimport {\n  createManagedObject,\n  getManagedObject,\n} from '../../api/ManagedObjectApi';\nimport { State } from '../../shared/State';\nimport { debugMessage } from '../../utils/Console';\nimport { FrodoError } from '../FrodoError';\nimport { JwksInterface } from '../JoseOps';\nimport { hasFeature } from './FeatureOps';\n\nexport type ServiceAccount = {\n  /**\n   * Check if service accounts are available\n   * @returns {Promise<boolean>} true if service accounts are available, false otherwise\n   */\n  isServiceAccountsFeatureAvailable(): Promise<boolean>;\n  /**\n   * Create service account\n   * @param {string} name Human-readable name of service account\n   * @param {string} description Description of service account\n   * @param {'Active' | 'Inactive'} accountStatus Service account status\n   * @param {string[]} scopes Scopes.\n   * @param {JwksInterface} jwks Java Web Key Set\n   * @returns {Promise<IdObjectSkeletonInterface>} A promise resolving to a service account object\n   */\n  createServiceAccount(\n    name: string,\n    description: string,\n    accountStatus: 'active' | 'inactive',\n    scopes: string[],\n    jwks: JwksInterface\n  ): Promise<IdObjectSkeletonInterface>;\n  /**\n   * Get service account\n   * @param {string} serviceAccountId service account id\n   * @returns {Promise<ServiceAccountType>} a promise resolving to a service account object\n   */\n  getServiceAccount(serviceAccountId: string): Promise<ServiceAccountType>;\n};\n\nexport default (state: State): ServiceAccount => {\n  return {\n    /**\n     * Check if service accounts are available\n     * @returns {Promise<boolean>} true if service accounts are available, false otherwise\n     */\n    async isServiceAccountsFeatureAvailable(): Promise<boolean> {\n      return isServiceAccountsFeatureAvailable({ state });\n    },\n\n    /**\n     * Create service account\n     * @param {string} name Human-readable name of service account\n     * @param {string} description Description of service account\n     * @param {'Active' | 'Inactive'} accountStatus Service account status\n     * @param {string[]} scopes Scopes.\n     * @param {JwksInterface} jwks Java Web Key Set\n     * @returns {Promise<IdObjectSkeletonInterface>} A promise resolving to a service account object\n     */\n    async createServiceAccount(\n      name: string,\n      description: string,\n      accountStatus: 'active' | 'inactive',\n      scopes: string[],\n      jwks: JwksInterface\n    ): Promise<IdObjectSkeletonInterface> {\n      return createServiceAccount({\n        name,\n        description,\n        accountStatus,\n        scopes,\n        jwks,\n        state,\n      });\n    },\n\n    /**\n     * Get service account\n     * @param {string} serviceAccountId service account id\n     * @returns {Promise<ServiceAccountType>} a promise resolving to a service account object\n     */\n    async getServiceAccount(serviceAccountId: string) {\n      return getServiceAccount({ serviceAccountId, state });\n    },\n  };\n};\n\nconst moType = 'svcacct';\n\n// Scopes\nconst scopes = {\n  OpenIdScope: 'openid',\n  ProfileScope: 'profile',\n  AmFullScope: 'fr:am:*',\n  IdmFullScope: 'fr:idm:*',\n  AutoAccessFullScope: 'fr:autoaccess:*',\n  IGAFullScope: 'fr:iga:*',\n  AnalyticsFullScope: 'fr:idc:analytics:*',\n\n  // AMIntrospectRealmTokenScope lets you introspect scopes _from the same realm_, there is a separate scope to introspect tokens from _all_ realms\n  AMIntrospectRealmTokenScope: 'am-introspect-all-tokens',\n\n  // Special AM scopes (used by resource servers)\n  AMIntrospectAllTokens: 'am-introspect-all-tokens',\n  AMIntrospectAllTokensAnyRealm: 'am-introspect-all-tokens-any-realm',\n\n  // Certificate scopes\n  CertificateFullScope: 'fr:idc:certificate:*',\n  CertificateReadScope: 'fr:idc:certificate:read',\n\n  // ESV API scopes\n  ESVFullScope: 'fr:idc:esv:*',\n  ESVReadScope: 'fr:idc:esv:read',\n  ESVUpdateScope: 'fr:idc:esv:update',\n  ESVRestartScope: 'fr:idc:esv:restart',\n\n  // Content security policy scopes\n  ContentSecurityPolicyFullScope: 'fr:idc:content-security-policy:*',\n\n  // Federation scopes\n  FederationFullScope: 'fr:idc:federation:*',\n  FederationReadScope: 'fr:idc:federation:read',\n\n  // Release scopes\n  ReleaseFullScope: 'fr:idc:release:*',\n\n  // SSOCookie scopes\n  SSOCookieFullScope: 'fr:idc:sso-cookie:*',\n\n  // CustomDomainFullScope Custom domain scopes\n  CustomDomainFullScope: 'fr:idc:custom-domain:*',\n\n  // Promotion scopes\n  PromotionScope: 'fr:idc:promotion:*',\n};\n\nexport const SERVICE_ACCOUNT_ALLOWED_SCOPES: string[] = [\n  scopes.AmFullScope,\n  scopes.AnalyticsFullScope,\n  scopes.AutoAccessFullScope,\n  scopes.CertificateFullScope,\n  scopes.CertificateReadScope,\n  scopes.ContentSecurityPolicyFullScope,\n  scopes.CustomDomainFullScope,\n  scopes.ESVFullScope,\n  scopes.ESVReadScope,\n  scopes.ESVRestartScope,\n  scopes.ESVUpdateScope,\n  scopes.IdmFullScope,\n  scopes.IGAFullScope,\n  scopes.PromotionScope,\n  scopes.ReleaseFullScope,\n  scopes.SSOCookieFullScope,\n];\n\nexport const SERVICE_ACCOUNT_DEFAULT_SCOPES: string[] = [\n  scopes.AmFullScope,\n  scopes.AnalyticsFullScope,\n  scopes.AutoAccessFullScope,\n  scopes.CertificateFullScope,\n  scopes.CertificateReadScope,\n  scopes.ContentSecurityPolicyFullScope,\n  scopes.CustomDomainFullScope,\n  scopes.ESVFullScope,\n  scopes.IdmFullScope,\n  scopes.IGAFullScope,\n  scopes.PromotionScope,\n  scopes.ReleaseFullScope,\n  scopes.SSOCookieFullScope,\n];\n\nexport type ServiceAccountType = IdObjectSkeletonInterface & {\n  name: string;\n  description: string;\n  accountStatus: 'active' | 'inactive';\n  scopes: string[];\n  jwks: string;\n};\n\n/**\n * Check if service accounts are available\n * @returns {Promise<boolean>} true if service accounts are available, false otherwise\n */\nexport async function isServiceAccountsFeatureAvailable({\n  state,\n}: {\n  state: State;\n}): Promise<boolean> {\n  debugMessage({\n    message: `ServiceAccountOps.isServiceAccountsFeatureAvailable: start`,\n    state,\n  });\n  const featureAvailable = await hasFeature({\n    featureId: 'service-accounts',\n    state,\n  });\n  debugMessage({\n    message: `ServiceAccountOps.isServiceAccountsFeatureAvailable: end, available=${featureAvailable}`,\n    state,\n  });\n  return featureAvailable;\n}\n\n/**\n * Create service account\n * @param {string} name Human-readable name of service account\n * @param {string} description Description of service account\n * @param {'active' | 'inactive'} accountStatus Service account status\n * @param {string[]} scopes Scopes.\n * @param {JwksInterface} jwks Java Web Key Set\n * @param {State} state library state\n * @returns {Promise<ServiceAccountType>} A promise resolving to a service account object\n */\nexport async function createServiceAccount({\n  name,\n  description,\n  accountStatus,\n  scopes,\n  jwks,\n  state,\n}: {\n  name: string;\n  description: string;\n  accountStatus: 'active' | 'inactive';\n  scopes: string[];\n  jwks: JwksInterface;\n  state: State;\n}): Promise<ServiceAccountType> {\n  try {\n    debugMessage({\n      message: `ServiceAccountOps.createServiceAccount: start`,\n      state,\n    });\n    const payload: ServiceAccountType = {\n      name,\n      description,\n      accountStatus,\n      scopes,\n      jwks: JSON.stringify(jwks),\n    };\n    debugMessage({\n      message: `ServiceAccountOps: createServiceAccount: payload:`,\n      state,\n    });\n    debugMessage({ message: payload, state });\n    const result = await createManagedObject({\n      moType,\n      moData: payload,\n      state,\n    });\n    debugMessage({\n      message: `ServiceAccountOps.createServiceAccount: end`,\n      state,\n    });\n    return result as ServiceAccountType;\n  } catch (error) {\n    throw new FrodoError(`Error creating service account ${name}`, error);\n  }\n}\n\n/**\n * Get service account\n * @param {string} serviceAccountId service account id\n * @param {State} state library state\n * @returns {Promise} a promise resolving to a service account object\n */\nexport async function getServiceAccount({\n  serviceAccountId,\n  state,\n}: {\n  serviceAccountId: string;\n  state: State;\n}) {\n  try {\n    debugMessage({\n      message: `ServiceAccountOps.getServiceAccount: start`,\n      state,\n    });\n    const serviceAccount = await getManagedObject({\n      type: moType,\n      id: serviceAccountId,\n      fields: ['*'],\n      state,\n    });\n    debugMessage({ message: serviceAccount, state });\n    debugMessage({\n      message: `ServiceAccountOps.getServiceAccount: end`,\n      state,\n    });\n    return serviceAccount as ServiceAccountType;\n  } catch (error) {\n    throw new FrodoError(\n      `Error getting service account ${serviceAccountId}`,\n      error\n    );\n  }\n}\n","import fs from 'fs';\nimport os from 'os';\nimport path from 'path';\n\nimport { IdObjectSkeletonInterface } from '../api/ApiTypes';\nimport Constants from '../shared/Constants';\nimport { State } from '../shared/State';\nimport { debugMessage, printMessage, verboseMessage } from '../utils/Console';\nimport DataProtection from '../utils/DataProtection';\nimport { isValidUrl, saveJsonToFile } from '../utils/ExportImportUtils';\nimport {\n  createServiceAccount,\n  getServiceAccount,\n  SERVICE_ACCOUNT_DEFAULT_SCOPES,\n} from './cloud/ServiceAccountOps';\nimport { FrodoError } from './FrodoError';\nimport { createJwkRsa, createJwks, getJwkRsaPublic, JwkRsa } from './JoseOps';\n\nexport type ConnectionProfile = {\n  /**\n   * Get connection profiles file name\n   * @returns {string} connection profiles file name\n   */\n  getConnectionProfilesPath(): string;\n  /**\n   * Find connection profiles\n   * @param {ConnectionsFileInterface} connectionProfiles connection profile object\n   * @param {string} host host url or unique substring\n   * @returns {SecureConnectionProfileInterface[]} Array of connection profiles\n   */\n  findConnectionProfiles(\n    connectionProfiles: ConnectionsFileInterface,\n    host: string\n  ): SecureConnectionProfileInterface[];\n  /**\n   * Initialize connection profiles\n   *\n   * This method is called from app.ts and runs before any of the message handlers are registered.\n   * Therefore none of the Console message functions will produce any output.\n   */\n  initConnectionProfiles(): Promise<void>;\n  /**\n   * Get connection profile by host\n   * @param {String} host host tenant host url or unique substring\n   * @returns {Object} connection profile or null\n   */\n  getConnectionProfileByHost(host: string): Promise<ConnectionProfileInterface>;\n  /**\n   * Get connection profile\n   * @returns {Object} connection profile or null\n   */\n  getConnectionProfile(): Promise<ConnectionProfileInterface>;\n  /**\n   * Save connection profile\n   * @param {string} host host url for new profiles or unique substring for existing profiles\n   * @returns {Promise<boolean>} true if the operation succeeded, false otherwise\n   */\n  saveConnectionProfile(host: string): Promise<boolean>;\n  /**\n   * Delete connection profile\n   * @param {string} host host tenant host url or unique substring\n   */\n  deleteConnectionProfile(host: string): void;\n  /**\n   * Create a new service account using auto-generated parameters\n   * @returns {Promise<IdObjectSkeletonInterface>} A promise resolving to a service account object\n   */\n  addNewServiceAccount(): Promise<IdObjectSkeletonInterface>;\n};\n\nexport default (state: State): ConnectionProfile => {\n  return {\n    getConnectionProfilesPath(): string {\n      return getConnectionProfilesPath({ state });\n    },\n    findConnectionProfiles(\n      connectionProfiles: ConnectionsFileInterface,\n      host: string\n    ): SecureConnectionProfileInterface[] {\n      return findConnectionProfiles({\n        connectionProfiles,\n        host,\n        state,\n      });\n    },\n    async initConnectionProfiles() {\n      initConnectionProfiles({ state });\n    },\n    async getConnectionProfileByHost(\n      host: string\n    ): Promise<ConnectionProfileInterface> {\n      return getConnectionProfileByHost({ host, state });\n    },\n    async getConnectionProfile(): Promise<ConnectionProfileInterface> {\n      return getConnectionProfile({ state });\n    },\n    async saveConnectionProfile(host: string): Promise<boolean> {\n      return saveConnectionProfile({ host, state });\n    },\n    deleteConnectionProfile(host: string): void {\n      deleteConnectionProfile({ host, state });\n    },\n    async addNewServiceAccount(): Promise<IdObjectSkeletonInterface> {\n      return addNewServiceAccount({ state });\n    },\n  };\n};\n\nconst fileOptions = {\n  indentation: 4,\n};\n\nexport interface SecureConnectionProfileInterface {\n  tenant: string;\n  deploymentType?: string;\n  username?: string | null;\n  encodedPassword?: string | null;\n  logApiKey?: string | null;\n  encodedLogApiSecret?: string | null;\n  authenticationService?: string | null;\n  authenticationHeaderOverrides?: Record<string, string>;\n  svcacctId?: string | null;\n  encodedSvcacctJwk?: string | null;\n  svcacctName?: string | null;\n  svcacctScope?: string | null;\n}\n\nexport interface ConnectionProfileInterface {\n  tenant: string;\n  deploymentType?: string;\n  username?: string | null;\n  password?: string | null;\n  logApiKey?: string | null;\n  logApiSecret?: string | null;\n  authenticationService?: string | null;\n  authenticationHeaderOverrides?: Record<string, string>;\n  svcacctId?: string | null;\n  svcacctJwk?: JwkRsa;\n  svcacctName?: string | null;\n  svcacctScope?: string | null;\n}\n\nexport interface ConnectionsFileInterface {\n  [key: string]: SecureConnectionProfileInterface;\n}\n\nconst legacyProfileFilename = '.frodorc';\nconst newProfileFilename = 'Connections.json';\n\n/**\n * Get connection profiles file name\n * @param {State} state library state\n * @returns {String} connection profiles file name\n */\nexport function getConnectionProfilesPath({ state }: { state: State }): string {\n  debugMessage({\n    message: `ConnectionProfileOps.getConnectionProfilesPath: start`,\n    state,\n  });\n  const profilesPath =\n    state.getConnectionProfilesPath() ||\n    process.env[Constants.FRODO_CONNECTION_PROFILES_PATH_KEY] ||\n    `${os.homedir()}/.frodo/${newProfileFilename}`;\n  debugMessage({\n    message: `ConnectionProfileOps.getConnectionProfilesPath: end [profilesPath=${profilesPath}]`,\n    state,\n  });\n  return profilesPath;\n}\n\n/**\n * Find connection profiles\n * @param {ConnectionsFileInterface} connectionProfiles connection profile object\n * @param {string} host host url or unique substring\n * @param {State} state library state\n * @returns {SecureConnectionProfileInterface[]} Array of connection profiles\n */\nfunction findConnectionProfiles({\n  connectionProfiles,\n  host,\n  state,\n}: {\n  connectionProfiles: ConnectionsFileInterface;\n  host: string;\n  state: State;\n}): SecureConnectionProfileInterface[] {\n  const profiles: SecureConnectionProfileInterface[] = [];\n  for (const tenant in connectionProfiles) {\n    // debugMessage({\n    //   message: `ConnectionProfileOps.findConnectionProfiles: tenant=${tenant}`,\n    //   state,\n    // });\n    if (tenant.includes(host)) {\n      debugMessage({\n        message: `ConnectionProfileOps.findConnectionProfiles: '${host}' identifies '${tenant}', including in result set`,\n        state,\n      });\n      const foundProfile = { ...connectionProfiles[tenant] };\n      foundProfile.tenant = tenant;\n      profiles.push(foundProfile);\n    }\n  }\n  return profiles;\n}\n\n/**\n * Migrate from .frodorc to Connections.json\n */\nfunction migrateFromLegacyProfile() {\n  try {\n    const legacyPath = `${os.homedir()}/.frodo/${legacyProfileFilename}`;\n    const newPath = `${os.homedir()}/.frodo/${newProfileFilename}`;\n    if (!fs.existsSync(legacyPath) && !fs.existsSync(newPath)) {\n      // no connections file (old or new), create empty new one\n      fs.writeFileSync(\n        newPath,\n        JSON.stringify({}, null, fileOptions.indentation)\n      );\n    } else if (fs.existsSync(legacyPath) && !fs.existsSync(newPath)) {\n      // old exists, new one does not - so copy old to new one\n      fs.copyFileSync(legacyPath, newPath);\n      // for now, just add a \"deprecated\" suffix. May delete the old file\n      // in a future release\n      fs.renameSync(legacyPath, `${legacyPath}.deprecated`);\n    }\n    // in other cases, where\n    // (both old and new exist) OR (only new one exists) don't do anything\n  } catch (error) {\n    throw new FrodoError(\n      `Error migrating from legacy connection profile`,\n      error\n    );\n  }\n}\n\n/**\n * Initialize connection profiles\n *\n * This method is called from app.ts and runs before any of the message handlers are registered.\n * Therefore none of the Console message functions will produce any output.\n * @param {State} state library state\n */\nexport async function initConnectionProfiles({ state }: { state: State }) {\n  debugMessage({\n    message: `ConnectionProfileOps.initConnectionProfiles: start`,\n    state,\n  });\n  const dataProtection = new DataProtection({\n    pathToMasterKey: state.getMasterKeyPath(),\n    state,\n  });\n  try {\n    // create connections.json file if it doesn't exist\n    const filename = getConnectionProfilesPath({ state });\n    const folderName = path.dirname(filename);\n    if (!fs.existsSync(filename)) {\n      if (!fs.existsSync(folderName)) {\n        debugMessage({\n          message: `ConnectionProfileOps.initConnectionProfiles: folder does not exist: ${folderName}, creating...`,\n          state,\n        });\n        fs.mkdirSync(folderName, { recursive: true });\n      }\n      if (!fs.existsSync(filename)) {\n        debugMessage({\n          message: `ConnectionProfileOps.initConnectionProfiles: file does not exist: ${filename}, creating...`,\n          state,\n        });\n        fs.writeFileSync(\n          filename,\n          JSON.stringify({}, null, fileOptions.indentation)\n        );\n      }\n    }\n    // encrypt the password and logApiSecret from clear text to aes-256-GCM\n    else {\n      migrateFromLegacyProfile();\n      const data = fs.readFileSync(filename, 'utf8');\n      const connectionsData: ConnectionsFileInterface = JSON.parse(data);\n      let convert = false;\n      for (const conn of Object.keys(connectionsData)) {\n        if (connectionsData[conn]['password']) {\n          convert = true;\n          connectionsData[conn].encodedPassword = await dataProtection.encrypt(\n            connectionsData[conn]['password']\n          );\n          delete connectionsData[conn]['password'];\n        }\n        if (connectionsData[conn]['logApiSecret']) {\n          convert = true;\n          connectionsData[conn].encodedLogApiSecret =\n            await dataProtection.encrypt(connectionsData[conn]['logApiSecret']);\n          delete connectionsData[conn]['logApiSecret'];\n        }\n        if (connectionsData[conn]['svcacctJwk']) {\n          convert = true;\n          connectionsData[conn].encodedSvcacctJwk =\n            await dataProtection.encrypt(connectionsData[conn]['svcacctJwk']);\n          delete connectionsData[conn]['svcacctJwk'];\n        }\n      }\n      if (convert) {\n        fs.writeFileSync(\n          filename,\n          JSON.stringify(connectionsData, null, fileOptions.indentation)\n        );\n      }\n    }\n    debugMessage({\n      message: `ConnectionProfileOps.initConnectionProfiles: end`,\n      state,\n    });\n  } catch (error) {\n    throw new FrodoError(`Error initializing connection profiles`, error);\n  }\n}\n\n/**\n * Get connection profile by host\n * @param {string} host host tenant host url or unique substring\n * @param {State} state library state\n * @returns {Promise<ConnectionProfileInterface>} connection profile\n */\nexport async function getConnectionProfileByHost({\n  host,\n  state,\n}: {\n  host: string;\n  state: State;\n}): Promise<ConnectionProfileInterface> {\n  const dataProtection = new DataProtection({\n    pathToMasterKey: state.getMasterKeyPath(),\n    state,\n  });\n  const filename = getConnectionProfilesPath({ state });\n  if (!fs.statSync(filename, { throwIfNoEntry: false })) {\n    throw new FrodoError(`Connection profiles file ${filename} not found`);\n  }\n  const connectionsData = JSON.parse(fs.readFileSync(filename, 'utf8'));\n  const profiles = findConnectionProfiles({\n    connectionProfiles: connectionsData,\n    host,\n    state,\n  });\n  if (profiles.length == 0) {\n    throw new FrodoError(`No connection profile found matching '${host}'`);\n  }\n  if (profiles.length > 1) {\n    throw new FrodoError(\n      `Multiple matching connection profiles found matching '${host}':\\n  - ${profiles\n        .map((profile) => profile.tenant)\n        .join(\n          '\\n  - '\n        )}\\nSpecify a sub-string uniquely identifying a single connection profile host URL.`\n    );\n  }\n  return {\n    tenant: profiles[0].tenant,\n    deploymentType: profiles[0].deploymentType,\n    username: profiles[0].username ? profiles[0].username : null,\n    password: profiles[0].encodedPassword\n      ? await dataProtection.decrypt(profiles[0].encodedPassword)\n      : null,\n    logApiKey: profiles[0].logApiKey ? profiles[0].logApiKey : null,\n    logApiSecret: profiles[0].encodedLogApiSecret\n      ? await dataProtection.decrypt(profiles[0].encodedLogApiSecret)\n      : null,\n    authenticationService: profiles[0].authenticationService\n      ? profiles[0].authenticationService\n      : null,\n    authenticationHeaderOverrides: profiles[0].authenticationHeaderOverrides\n      ? profiles[0].authenticationHeaderOverrides\n      : {},\n    svcacctName: profiles[0].svcacctName ? profiles[0].svcacctName : null,\n    svcacctId: profiles[0].svcacctId ? profiles[0].svcacctId : null,\n    svcacctJwk: profiles[0].encodedSvcacctJwk\n      ? await dataProtection.decrypt(profiles[0].encodedSvcacctJwk)\n      : null,\n    svcacctScope: profiles[0].svcacctScope ? profiles[0].svcacctScope : null,\n  };\n}\n\n/**\n * Get connection profile\n * @returns {Object} connection profile or null\n */\nexport async function getConnectionProfile({\n  state,\n}: {\n  state: State;\n}): Promise<ConnectionProfileInterface> {\n  return getConnectionProfileByHost({ host: state.getHost(), state });\n}\n\n/**\n * Save connection profile\n * @param {string} host host url for new profiles or unique substring for existing profiles\n * @returns {Promise<boolean>} true if the operation succeeded, false otherwise\n */\nexport async function saveConnectionProfile({\n  host,\n  state,\n}: {\n  host: string;\n  state: State;\n}): Promise<boolean> {\n  try {\n    debugMessage({\n      message: `ConnectionProfileOps.saveConnectionProfile: start`,\n      state,\n    });\n    const dataProtection = new DataProtection({\n      pathToMasterKey: state.getMasterKeyPath(),\n      state,\n    });\n    const filename = getConnectionProfilesPath({ state });\n    debugMessage({\n      message: `Saving connection profile in ${filename}`,\n      state,\n    });\n    let profiles: ConnectionsFileInterface = {};\n    let profile: SecureConnectionProfileInterface = { tenant: '' };\n    if (fs.statSync(filename, { throwIfNoEntry: false })) {\n      const data = fs.readFileSync(filename, 'utf8');\n      profiles = JSON.parse(data);\n\n      // find tenant\n      const found = findConnectionProfiles({\n        connectionProfiles: profiles,\n        host,\n        state,\n      });\n\n      // replace tenant in session with real tenant url if necessary\n      if (found.length === 1) {\n        profile = found[0];\n        state.setHost(profile.tenant);\n        verboseMessage({\n          message: `Existing profile: ${profile.tenant}`,\n          state,\n        });\n        debugMessage({ message: profile, state });\n      }\n\n      // connection profile not found, validate host is a real URL\n      if (found.length === 0) {\n        if (isValidUrl(host)) {\n          state.setHost(host);\n          debugMessage({ message: `New profile: ${host}`, state });\n        } else {\n          throw new FrodoError(\n            `No existing profile found matching '${host}'. Provide a valid URL as the host argument to create a new profile.`\n          );\n        }\n      }\n    } else {\n      debugMessage({\n        message: `New profiles file ${filename} with new profile ${host}`,\n        state,\n      });\n    }\n\n    // deployment type\n    if (state.getDeploymentType())\n      profile.deploymentType = state.getDeploymentType();\n\n    // user account\n    if (state.getUsername()) profile.username = state.getUsername();\n    if (state.getPassword())\n      profile.encodedPassword = await dataProtection.encrypt(\n        state.getPassword()\n      );\n\n    // log API\n    if (state.getLogApiKey()) profile.logApiKey = state.getLogApiKey();\n    if (state.getLogApiSecret())\n      profile.encodedLogApiSecret = await dataProtection.encrypt(\n        state.getLogApiSecret()\n      );\n\n    // service account\n    if (state.getServiceAccountId()) {\n      profile.svcacctId = state.getServiceAccountId();\n      if (state.getBearerToken()) {\n        profile.svcacctName = (\n          await getServiceAccount({\n            serviceAccountId: state.getServiceAccountId(),\n            state,\n          })\n        ).name;\n      }\n    }\n    if (state.getServiceAccountJwk()) {\n      profile.encodedSvcacctJwk = await dataProtection.encrypt(\n        state.getServiceAccountJwk()\n      );\n    }\n    if (\n      state.getUseBearerTokenForAmApis() &&\n      state.getBearerTokenMeta() &&\n      state.getBearerTokenMeta().scope !== profile.svcacctScope\n    ) {\n      profile.svcacctScope = state.getBearerTokenMeta().scope;\n    }\n    // update existing service account profile\n    if (state.getBearerToken() && profile.svcacctId && !profile.svcacctName) {\n      profile.svcacctName = (\n        await getServiceAccount({ serviceAccountId: profile.svcacctId, state })\n      ).name;\n      debugMessage({\n        message: `ConnectionProfileOps.saveConnectionProfile: added missing service account name`,\n        state,\n      });\n    }\n\n    // advanced settings\n    if (state.getAuthenticationService()) {\n      profile.authenticationService = state.getAuthenticationService();\n      printMessage({\n        message:\n          'Advanced setting: Authentication Service: ' +\n          state.getAuthenticationService(),\n        type: 'info',\n        state,\n      });\n    }\n    if (\n      state.getAuthenticationHeaderOverrides() &&\n      Object.entries(state.getAuthenticationHeaderOverrides()).length\n    ) {\n      profile.authenticationHeaderOverrides =\n        state.getAuthenticationHeaderOverrides();\n      printMessage({\n        message: 'Advanced setting: Authentication Header Overrides: ',\n        type: 'info',\n        state,\n      });\n      printMessage({\n        message: state.getAuthenticationHeaderOverrides(),\n        type: 'info',\n        state,\n      });\n    }\n\n    // remove the helper key 'tenant'\n    delete profile.tenant;\n\n    // update profiles\n    profiles[state.getHost()] = profile;\n\n    // sort profiles\n    const orderedProfiles = Object.keys(profiles)\n      .sort()\n      .reduce((obj, key) => {\n        obj[key] = profiles[key];\n        return obj;\n      }, {});\n\n    // save profiles\n    saveJsonToFile({\n      data: orderedProfiles,\n      filename,\n      includeMeta: false,\n      state,\n    });\n    verboseMessage({\n      message: `Saved connection profile ${state.getHost()} in ${filename}`,\n      state,\n    });\n    debugMessage({\n      message: `ConnectionProfileOps.saveConnectionProfile: end [true]`,\n      state,\n    });\n    return true;\n  } catch (error) {\n    throw new FrodoError(`Error saving connection profile`, error);\n  }\n}\n\n/**\n * Delete connection profile\n * @param {String} host host tenant host url or unique substring\n */\nexport function deleteConnectionProfile({\n  host,\n  state,\n}: {\n  host: string;\n  state: State;\n}) {\n  const filename = getConnectionProfilesPath({ state });\n  let connectionsData: ConnectionsFileInterface = {};\n  if (!fs.statSync(filename, { throwIfNoEntry: false })) {\n    throw new FrodoError(`Connection profiles file ${filename} not found`);\n  }\n  const data = fs.readFileSync(filename, 'utf8');\n  connectionsData = JSON.parse(data);\n  const profiles = findConnectionProfiles({\n    connectionProfiles: connectionsData,\n    host,\n    state,\n  });\n  if (profiles.length == 0) {\n    throw new FrodoError(`No connection profile found matching '${host}'`);\n  }\n  if (profiles.length > 1) {\n    throw new FrodoError(\n      `Multiple matching connection profiles found matching '${host}':\\n  - ${profiles\n        .map((profile) => profile.tenant)\n        .join(\n          '\\n  - '\n        )}\\nSpecify a sub-string uniquely identifying a single connection profile host URL.`\n    );\n  }\n  delete connectionsData[profiles[0].tenant];\n  fs.writeFileSync(filename, JSON.stringify(connectionsData, null, 2));\n}\n\n/**\n * Create a new service account using auto-generated parameters\n * @returns {Promise<IdObjectSkeletonInterface>} A promise resolving to a service account object\n */\nexport async function addNewServiceAccount({\n  state,\n}: {\n  state: State;\n}): Promise<IdObjectSkeletonInterface> {\n  try {\n    debugMessage({\n      message: `ConnectionProfileOps.addNewServiceAccount: start`,\n      state,\n    });\n    const name = `Frodo-SA-${new Date().getTime()}`;\n    debugMessage({\n      message: `ConnectionProfileOps.addNewServiceAccount: name=${name}...`,\n      state,\n    });\n    const description = `${state.getUsername()}'s Frodo Service Account`;\n    const scope = SERVICE_ACCOUNT_DEFAULT_SCOPES;\n    const jwkPrivate = await createJwkRsa();\n    const jwkPublic = await getJwkRsaPublic(jwkPrivate);\n    const jwks = createJwks(jwkPublic);\n    const sa = await createServiceAccount({\n      name,\n      description,\n      accountStatus: 'active',\n      scopes: scope,\n      jwks,\n      state,\n    });\n    debugMessage({\n      message: `ConnectionProfileOps.addNewServiceAccount: id=${sa._id}`,\n      state,\n    });\n    state.setServiceAccountId(sa._id);\n    state.setServiceAccountJwk(jwkPrivate);\n    debugMessage({\n      message: `ConnectionProfileOps.addNewServiceAccount: end`,\n      state,\n    });\n    return sa;\n  } catch (error) {\n    throw new FrodoError(`Error creating new service account`, error);\n  }\n}\n","/**\n * Data is stored in base64 format. Initially it was binary data\n * Format used in this encryption module.\n * inspired by AndiDittrich\n * +--------------------+-----------------------+----------------+----------------+\n * | SALT               | Initialization Vector | Auth Tag       | Payload        |\n * | Used to derive key | AES GCM XOR Init      | Data Integrity | Encrypted Data |\n * | 64 Bytes, random   | 16 Bytes, random      | 16 Bytes       | (N-96) Bytes   |\n * +--------------------+-----------------------+----------------+----------------+\n * This module doesn't take care of data persistence, it's assumed the consuming method/class/package will do so.\n */\nimport crypto from 'crypto';\nimport fs, { promises as fsp } from 'fs';\nimport { homedir } from 'os';\nimport { promisify } from 'util';\n\nimport Constants from '../shared/Constants';\nimport { State } from '../shared/State';\nimport { printMessage } from './Console';\n\nconst scrypt = promisify(crypto.scrypt);\n// using WeakMaps for added security since it gets garbage collected\nconst _masterKey = new WeakMap();\nconst _nonce = new WeakMap();\nconst _salt = new WeakMap();\nconst _key = new WeakMap();\nconst _encrypt = new WeakMap();\n\nclass DataProtection {\n  constructor({\n    pathToMasterKey = undefined,\n    sessionKey = undefined,\n    state,\n  }: {\n    pathToMasterKey?: string;\n    sessionKey?: string;\n    state: State;\n  }) {\n    const masterKeyPath = () =>\n      pathToMasterKey ||\n      process.env[Constants.FRODO_MASTER_KEY_PATH_KEY] ||\n      `${homedir()}/.frodo/masterkey.key`;\n    // Generates a 256bit master key and base64-encodes it. This master key is used to derive the key for encryption. this key should be protected by an HSM or KMS\n    _masterKey.set(this, async () => {\n      if (!sessionKey) {\n        try {\n          if (process.env[Constants.FRODO_MASTER_KEY_KEY])\n            return process.env[Constants.FRODO_MASTER_KEY_KEY];\n          if (!fs.existsSync(masterKeyPath())) {\n            const masterKey = crypto.randomBytes(32).toString('base64');\n            await fsp.writeFile(masterKeyPath(), masterKey);\n          }\n          return await fsp.readFile(masterKeyPath(), 'utf8');\n        } catch (err) {\n          printMessage({ message: err.message, type: 'error', state });\n          return '';\n        }\n      } else {\n        return sessionKey;\n      }\n    });\n\n    // the nonce for AES GCM\n    _nonce.set(this, () => crypto.randomBytes(16));\n\n    // The salt\n    _salt.set(this, () => crypto.randomBytes(64));\n\n    // The function that derives the key, this supports sync and async operations\n    _key.set(\n      this,\n      // eslint-disable-next-line no-return-await\n      async (masterKey, salt) => await scrypt(masterKey, salt, 32)\n    );\n\n    // private method to encrypt and return encrypted data. cleaner code\n    _encrypt.set(this, (key, nonce, data, salt) => {\n      const cipher = crypto.createCipheriv('aes-256-gcm', key, nonce);\n      const encrypted = Buffer.concat([\n        cipher.update(JSON.stringify(data), 'utf8'),\n        cipher.final(),\n      ]);\n      const tag = cipher.getAuthTag();\n      const buffer = Buffer.concat([salt, nonce, tag, encrypted]);\n      return buffer.toString('base64');\n    });\n  }\n\n  async encrypt(data) {\n    const nonce = _nonce.get(this)();\n    const salt = _salt.get(this)();\n    const masterKey = await _masterKey.get(this)();\n    const key = await _key.get(this)(masterKey, salt);\n    return _encrypt.get(this)(key, nonce, data, salt);\n  }\n\n  async decrypt(data) {\n    const buffer = Buffer.from(data.toString(), 'base64');\n    const salt = buffer.subarray(0, 64);\n    const nonce = buffer.subarray(64, 80);\n    const tag = buffer.subarray(80, 96);\n    const encrypted = buffer.subarray(96);\n    const masterKey = await _masterKey.get(this)();\n    const key = await _key.get(this)(masterKey, salt);\n    const decipher = crypto.createDecipheriv('aes-256-gcm', key, nonce);\n    decipher.setAuthTag(tag);\n    return JSON.parse(\n      decipher.update(encrypted.toString('binary'), 'binary', 'utf8') +\n        decipher.final('utf8')\n    );\n  }\n}\nexport default DataProtection;\n","import util from 'util';\n\nimport { State } from '../shared/State';\nimport { getCurrentRealmPath } from '../utils/ForgeRockUtils';\nimport { generateAmApi } from './BaseApi';\n\nconst getSessionInfoURLTemplate = '%s/json%s/sessions/?_action=getSessionInfo';\nconst apiVersion = 'resource=4.0';\n\nfunction getApiConfig() {\n  return {\n    apiVersion,\n  };\n}\n\nexport type SessionInfoType = {\n  username: string;\n  universalId: string;\n  realm: string;\n  latestAccessTime: string;\n  maxIdleExpirationTime: string;\n  maxSessionExpirationTime: string;\n  properties: {\n    AMCtxId: string;\n    [k: string]: string;\n  };\n};\n\n/**\n * Get session info\n * @param {string} tokenId session token\n * @returns {Promise<SessionInfoType>} a promise resolving to a session info object\n */\nexport async function getSessionInfo({\n  tokenId,\n  state,\n}: {\n  tokenId: string;\n  state: State;\n}): Promise<SessionInfoType> {\n  const urlString = util.format(\n    getSessionInfoURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state)\n  );\n  const { data } = await generateAmApi({\n    resource: getApiConfig(),\n    state,\n  }).post(\n    urlString,\n    {\n      tokenId,\n    },\n    {\n      withCredentials: true,\n    }\n  );\n  return data as SessionInfoType;\n}\n","import {\n  getSessionInfo as _getSessionInfo,\n  type SessionInfoType,\n} from '../api/SessionApi';\nimport { State } from '../shared/State';\nimport { FrodoError } from './FrodoError';\n\nexport type Session = {\n  /**\n   * Get session info\n   * @param {string} tokenId session token\n   * @returns {Promise<SessionInfoType>} a promise resolving to a session info object\n   */\n  getSessionInfo(tokenId: string): Promise<SessionInfoType>;\n};\n\nexport default (state: State): Session => {\n  return {\n    async getSessionInfo(tokenId: string): Promise<SessionInfoType> {\n      return getSessionInfo({ tokenId, state });\n    },\n  };\n};\n\n/**\n * Get session info\n * @param {string} tokenId session token\n * @returns {Promise<SessionInfoType>} a promise resolving to a session info object\n */\nexport async function getSessionInfo({\n  tokenId,\n  state,\n}: {\n  tokenId: string;\n  state: State;\n}): Promise<SessionInfoType> {\n  try {\n    return _getSessionInfo({ tokenId, state });\n  } catch (error) {\n    throw new FrodoError(`Error getting session info`, error);\n  }\n}\n","import fs from 'fs';\nimport os from 'os';\nimport path from 'path';\nimport { v5 as uuidv5 } from 'uuid';\n\nimport Constants from '../shared/Constants';\nimport { State } from '../shared/State';\nimport { debugMessage } from '../utils/Console';\nimport DataProtection from '../utils/DataProtection';\nimport { get, put, stringify } from '../utils/JsonUtils';\nimport { UserSessionMetaType } from './AuthenticateOps';\nimport { type AccessTokenMetaType } from './OAuth2OidcOps';\n\nexport type TokenCache = {\n  /**\n   * Get connection profiles file name\n   * @returns {string} connection profiles file name\n   */\n  getTokenCachePath(): string;\n  /**\n   * Initialize token cache\n   *\n   * This method is called from app.ts and runs before any of the message handlers are registered.\n   * Therefore none of the Console message functions will produce any output.\n   */\n  initTokenCache(): void;\n  /**\n   * Check if there are suitable tokens in the cache\n   * @param {tokenType} tokenType type of token\n   * @returns {Promise<boolean>} true if tokens found in cache, false otherwise\n   */\n  hasToken(tokenType: tokenType): Promise<boolean>;\n  /**\n   * Check if there are suitable user session tokens in the cache\n   * @returns {Promise<boolean>} true if tokens found in cache, false otherwise\n   */\n  hasUserSessionToken(): Promise<boolean>;\n  /**\n   * Check if there are suitable user bearer tokens in the cache\n   * @returns {Promise<boolean>} true if tokens found in cache, false otherwise\n   */\n  hasUserBearerToken(): Promise<boolean>;\n  /**\n   * Check if there are suitable service account bearer tokens in the cache\n   * @returns {Promise<boolean>} true if tokens found in cache, false otherwise\n   */\n  hasSaBearerToken(): Promise<boolean>;\n  /**\n   * Read token\n   * @param {tokenType} tokenType type of token\n   * @returns {Promise<string>} token or null\n   */\n  readToken(\n    tokenType: tokenType\n  ): Promise<AccessTokenMetaType | UserSessionMetaType>;\n  /**\n   * Read user session token\n   * @returns {Promise<string>} token or null\n   */\n  readUserSessionToken(): Promise<UserSessionMetaType>;\n  /**\n   * Read user bearer token\n   * @returns {Promise<string>} token or null\n   */\n  readUserBearerToken(): Promise<AccessTokenMetaType>;\n  /**\n   * Read service account bearer token\n   * @returns {Promise<string>} token or null\n   */\n  readSaBearerToken(): Promise<AccessTokenMetaType>;\n  /**\n   * Save user session token for current connection\n   * @returns {Promise<boolean>} true if the operation succeeded, false otherwise\n   */\n  saveUserSessionToken(token: UserSessionMetaType): Promise<boolean>;\n  /**\n   * Save user bearer token for current connection\n   * @returns {Promise<boolean>} true if the operation succeeded, false otherwise\n   */\n  saveUserBearerToken(token: AccessTokenMetaType): Promise<boolean>;\n  /**\n   * Save service account bearer token for current connection\n   * @returns {Promise<boolean>} true if the operation succeeded, false otherwise\n   */\n  saveSaBearerToken(token: AccessTokenMetaType): Promise<boolean>;\n  /**\n   * Purge all expired tokens from cache\n   * @returns {TokenCacheInterface} purged cache\n   */\n  purge(): TokenCacheInterface;\n  /**\n   * Flush cache\n   * @returns {boolean} true if the operation succeeded, false otherwise\n   */\n  flush(): boolean;\n};\n\nexport default (state: State): TokenCache => {\n  return {\n    getTokenCachePath(): string {\n      return getTokenCachePath({ state });\n    },\n    initTokenCache() {\n      initTokenCache({ state });\n    },\n    async hasToken(tokenType: tokenType): Promise<boolean> {\n      return hasToken({\n        tokenType,\n        state,\n      });\n    },\n    async hasUserSessionToken(): Promise<boolean> {\n      return hasUserSessionToken({\n        state,\n      });\n    },\n    async hasUserBearerToken(): Promise<boolean> {\n      return hasUserBearerToken({\n        state,\n      });\n    },\n    async hasSaBearerToken(): Promise<boolean> {\n      return hasSaBearerToken({\n        state,\n      });\n    },\n    async readToken(\n      tokenType: tokenType\n    ): Promise<AccessTokenMetaType | UserSessionMetaType> {\n      return readToken({ tokenType, state });\n    },\n    async readUserSessionToken(): Promise<UserSessionMetaType> {\n      return readUserSessionToken({ state });\n    },\n    async readUserBearerToken(): Promise<AccessTokenMetaType> {\n      return readUserBearerToken({ state });\n    },\n    async readSaBearerToken(): Promise<AccessTokenMetaType> {\n      return readSaBearerToken({ state });\n    },\n    async saveUserSessionToken(token: UserSessionMetaType): Promise<boolean> {\n      return saveUserSessionToken({ token, state });\n    },\n    async saveUserBearerToken(token: AccessTokenMetaType): Promise<boolean> {\n      return saveUserBearerToken({ token, state });\n    },\n    async saveSaBearerToken(token: AccessTokenMetaType): Promise<boolean> {\n      return saveSaBearerToken({ token, state });\n    },\n    purge(): TokenCacheInterface {\n      return purge({ state });\n    },\n    flush(): boolean {\n      return flush({ state });\n    },\n  };\n};\n\nconst UUIDV5_NAMESPACE = 'e9a38338-21c0-4dcd-ba74-7ddeac58edbe';\nconst checksumKey = getChecksum('checksum');\nconst tokenKey = getChecksum('token');\n\nconst fileOptions = {\n  indentation: 4,\n};\n\nexport interface tokenTypeInterface {\n  userSession: string;\n  userBearer: string;\n  saBearer: string;\n}\n\nexport type tokenType = 'userSession' | 'userBearer' | 'saBearer';\n\nexport interface TokenCacheInterface {\n  [hostKey: string]: {\n    [realmKey: string]: {\n      [typeKey in keyof typeKey]: {\n        [subjectKey: string]: {\n          [expKey: string]: string;\n        };\n      };\n    };\n  };\n}\n\nconst tokenCacheFilename = 'TokenCache.json';\n\n/**\n * Get token cache file name\n * @param {State} state library state\n * @returns {String} connection profiles file name\n */\nexport function getTokenCachePath({ state }: { state: State }): string {\n  debugMessage({\n    message: `TokenCacheOps.getTokenCachePath: start`,\n    state,\n  });\n  const tokenCachePath =\n    state.getTokenCachePath() ||\n    process.env[Constants.FRODO_TOKEN_CACHE_PATH_KEY] ||\n    `${os.homedir()}/.frodo/${tokenCacheFilename}`;\n  debugMessage({\n    message: `TokenCacheOps.getTokenCachePath: end [tokenCachePath=${tokenCachePath}]`,\n    state,\n  });\n  return tokenCachePath;\n}\n\nfunction purgeExpiredTokens(\n  tokenCache: TokenCacheInterface,\n  state: State\n): TokenCacheInterface {\n  const now = Date.now();\n  debugMessage({\n    message: `TokenCacheOps.purgeExpiredTokens: start [now=${now}]`,\n    state,\n  });\n  for (const hostKey of Object.keys(tokenCache)) {\n    for (const realmKey of Object.keys(tokenCache[hostKey])) {\n      for (const typeKey of Object.keys(tokenCache[hostKey][realmKey])) {\n        for (const subjectKey of Object.keys(\n          tokenCache[hostKey][realmKey][typeKey]\n        )) {\n          for (const expKey of Object.keys(\n            tokenCache[hostKey][realmKey][typeKey][subjectKey]\n          )) {\n            const exp = parseInt(expKey, 10);\n            if (now > exp + 1000 * 60) {\n              // purge expired token\n              debugMessage({\n                message: `TokenCacheOps.purgeExpiredTokens: purging expired token ${hostKey}.${realmKey}.${typeKey}.${subjectKey}.${expKey}`,\n                state,\n              });\n              delete tokenCache[hostKey][realmKey][typeKey][subjectKey][expKey];\n            }\n          }\n          if (\n            0 ===\n            Object.keys(tokenCache[hostKey][realmKey][typeKey][subjectKey])\n              .length\n          ) {\n            // purge empty token subjects\n            delete tokenCache[hostKey][realmKey][typeKey][subjectKey];\n          }\n        }\n        if (0 === Object.keys(tokenCache[hostKey][realmKey][typeKey]).length) {\n          // purge empty token types\n          delete tokenCache[hostKey][realmKey][typeKey];\n        }\n      }\n      if (0 === Object.keys(tokenCache[hostKey][realmKey]).length) {\n        // purge empty realms\n        delete tokenCache[hostKey][realmKey];\n      }\n    }\n    if (0 === Object.keys(tokenCache[hostKey]).length) {\n      // purge empty hosts\n      delete tokenCache[hostKey];\n    }\n  }\n  debugMessage({\n    message: `TokenCacheOps.purgeExpiredTokens: end`,\n    state,\n  });\n  return tokenCache;\n}\n\n/**\n * Initialize connection profiles\n *\n * This method is called from app.ts and runs before any of the message handlers are registered.\n * Therefore none of the Console message functions will produce any output.\n * @param {State} state library state\n */\nexport function initTokenCache({ state }: { state: State }) {\n  try {\n    debugMessage({\n      message: `TokenCacheOps.initTokenCache: start`,\n      state,\n    });\n    // create token cache file if it doesn't exist\n    const filename = getTokenCachePath({ state });\n    const folderName = path.dirname(filename);\n    if (!fs.existsSync(filename)) {\n      if (!fs.existsSync(folderName)) {\n        debugMessage({\n          message: `TokenCacheOps.initTokenCache: folder does not exist: ${folderName}, creating...`,\n          state,\n        });\n        fs.mkdirSync(folderName, { recursive: true });\n      }\n      if (!fs.existsSync(filename)) {\n        debugMessage({\n          message: `TokenCacheOps.initTokenCache: file does not exist: ${filename}, creating...`,\n          state,\n        });\n        fs.writeFileSync(\n          filename,\n          JSON.stringify({}, null, fileOptions.indentation)\n        );\n      }\n    }\n    // purge expired tokens\n    else {\n      const data = fs.readFileSync(filename, 'utf8');\n      const tokenCache: TokenCacheInterface = JSON.parse(data);\n      purgeExpiredTokens(tokenCache, state);\n      fs.writeFileSync(filename, stringify(tokenCache));\n    }\n    debugMessage({\n      message: `TokenCacheOps.initTokenCache: end`,\n      state,\n    });\n  } catch (error) {\n    debugMessage({\n      message: `TokenCacheOps.initTokenCache: error initializing cache: ${error}`,\n      state,\n    });\n  }\n}\n\nexport async function hasToken({\n  tokenType,\n  state,\n}: {\n  tokenType: tokenType;\n  state: State;\n}): Promise<boolean> {\n  debugMessage({\n    message: `TokenCacheOps.hasToken: start [tokenType=${tokenType}]`,\n    state,\n  });\n  try {\n    await readToken({ tokenType, state });\n    debugMessage({\n      message: `TokenCacheOps.hasToken: end [has ${tokenType} token: true]`,\n      state,\n    });\n    return true;\n  } catch (error) {\n    debugMessage({\n      message: `TokenCacheOps.hasToken: end [has ${tokenType} token: false]`,\n      state,\n    });\n    return false;\n  }\n}\n\nexport async function hasUserSessionToken({\n  state,\n}: {\n  state: State;\n}): Promise<boolean> {\n  return hasToken({ tokenType: 'userSession', state });\n}\n\nexport async function hasUserBearerToken({\n  state,\n}: {\n  state: State;\n}): Promise<boolean> {\n  return hasToken({ tokenType: 'userBearer', state });\n}\n\nexport async function hasSaBearerToken({\n  state,\n}: {\n  state: State;\n}): Promise<boolean> {\n  return hasToken({ tokenType: 'saBearer', state });\n}\n\nfunction getChecksum(input: string): string {\n  return uuidv5(input, UUIDV5_NAMESPACE);\n}\n\nfunction getHostKey(state: State): string {\n  return uuidv5(state.getHost(), uuidv5.URL);\n}\n\nfunction getRealmKey(state: State): string {\n  // currently frodo only supports sessions and tokens minted in the root realm\n  return uuidv5('/' || state.getRealm(), UUIDV5_NAMESPACE);\n}\n\nfunction getTypeKey(tokenType: tokenType): string {\n  return uuidv5(tokenType, UUIDV5_NAMESPACE);\n}\n\nfunction getSubjectKey(tokenType: tokenType, state: State): string {\n  if (tokenType === 'userSession') {\n    return uuidv5(state.getUsername(), UUIDV5_NAMESPACE);\n  } else if (tokenType === 'userBearer') {\n    return uuidv5(state.getUsername(), UUIDV5_NAMESPACE);\n  } else if (tokenType === 'saBearer') {\n    return uuidv5(state.getServiceAccountId(), UUIDV5_NAMESPACE);\n  }\n}\n\nexport async function readToken({\n  tokenType,\n  state,\n}: {\n  tokenType: tokenType;\n  state: State;\n}): Promise<AccessTokenMetaType | UserSessionMetaType> {\n  try {\n    debugMessage({\n      message: `TokenCacheOps.readToken: start`,\n      state,\n    });\n    const dataProtection = new DataProtection({\n      sessionKey: generateSessionKey(tokenType, state),\n      state,\n    });\n    const filename = getTokenCachePath({ state });\n    const data = fs.readFileSync(filename, 'utf8');\n    const tokenCache: TokenCacheInterface = JSON.parse(data);\n    const hostKey = getHostKey(state);\n    const realmKey = getRealmKey(state);\n    const typeKey = getTypeKey(tokenType);\n    const subjectKey = getSubjectKey(tokenType, state);\n    if (get(tokenCache, [hostKey, realmKey, typeKey, subjectKey])) {\n      const exp = Math.max(\n        ...Object.keys(tokenCache[hostKey][realmKey][typeKey][subjectKey]).map(\n          (expKey) => parseInt(expKey, 10)\n        )\n      );\n      const expKey = String(exp);\n      if (Math.floor((exp - Date.now()) / 1000) > 30) {\n        debugMessage({\n          message: `TokenCacheOps.readToken: found ${tokenType} token in cache [expires in ${Math.floor(\n            (exp - Date.now()) / 1000\n          )}s]`,\n          state,\n        });\n        const token = await dataProtection.decrypt(\n          tokenCache[hostKey][realmKey][typeKey][subjectKey][expKey][tokenKey]\n        );\n        return JSON.parse(token);\n      }\n    }\n  } catch (error) {\n    error.message = `Error searching for ${tokenType} tokens in cache: ${error}`;\n    debugMessage({\n      message: `TokenCacheOps.readToken: ${error.message}: ${error.stack}`,\n      state,\n    });\n    throw error;\n  }\n  const error = new Error(`No ${tokenType} tokens found in cache`);\n  debugMessage({\n    message: `TokenCacheOps.readToken: ${error.message}`,\n    state,\n  });\n  throw error;\n}\n\nexport async function readUserSessionToken({\n  state,\n}: {\n  state: State;\n}): Promise<UserSessionMetaType> {\n  return (await readToken({\n    tokenType: 'userSession',\n    state,\n  })) as UserSessionMetaType;\n}\n\nexport async function readUserBearerToken({\n  state,\n}: {\n  state: State;\n}): Promise<AccessTokenMetaType> {\n  return (await readToken({\n    tokenType: 'userBearer',\n    state,\n  })) as AccessTokenMetaType;\n}\n\nexport async function readSaBearerToken({\n  state,\n}: {\n  state: State;\n}): Promise<AccessTokenMetaType> {\n  return (await readToken({\n    tokenType: 'saBearer',\n    state,\n  })) as AccessTokenMetaType;\n}\n\nfunction generateSessionKey(tokenType: tokenType, state: State) {\n  switch (tokenType) {\n    case 'userSession':\n      return uuidv5(state.getPassword(), UUIDV5_NAMESPACE);\n    case 'userBearer':\n      return uuidv5(state.getPassword(), UUIDV5_NAMESPACE);\n    case 'saBearer':\n      return uuidv5(stringify(state.getServiceAccountJwk()), UUIDV5_NAMESPACE);\n    default:\n      return null;\n  }\n}\n\nexport async function saveUserSessionToken({\n  token,\n  state,\n}: {\n  token: UserSessionMetaType;\n  state: State;\n}): Promise<boolean> {\n  try {\n    debugMessage({\n      message: `TokenCacheOps.saveUserSessionToken: start`,\n      state,\n    });\n    const filename = getTokenCachePath({ state });\n    const data = fs.readFileSync(filename, 'utf8');\n    const tokenCache: TokenCacheInterface = JSON.parse(data);\n    purgeExpiredTokens(tokenCache, state);\n    const hostKey = getHostKey(state);\n    const realmKey = getRealmKey(state);\n    const typeKey = getTypeKey('userSession');\n    const subjectKey = getSubjectKey('userSession', state);\n    const dataProtection = new DataProtection({\n      sessionKey: generateSessionKey('userSession', state),\n      state,\n    });\n    const checksum = getChecksum(stringify(token));\n    const checksums = Object.keys(\n      get(tokenCache, [hostKey, realmKey, typeKey, subjectKey], {})\n    ).map((expKey) =>\n      get(tokenCache, [\n        hostKey,\n        realmKey,\n        typeKey,\n        subjectKey,\n        expKey,\n        checksumKey,\n      ])\n    );\n    if (checksums.includes(checksum)) {\n      debugMessage({\n        message: `TokenCacheOps.saveUserSessionToken: token alreaday in cache`,\n        state,\n      });\n    } else {\n      put(tokenCache, checksum, [\n        hostKey,\n        realmKey,\n        typeKey,\n        subjectKey,\n        `${token.expires}`,\n        checksumKey,\n      ]);\n      put(tokenCache, await dataProtection.encrypt(stringify(token)), [\n        hostKey,\n        realmKey,\n        typeKey,\n        subjectKey,\n        `${token.expires}`,\n        tokenKey,\n      ]);\n      fs.writeFileSync(filename, stringify(tokenCache));\n      debugMessage({\n        message: `TokenCacheOps.saveUserSessionToken: saved token in cache`,\n        state,\n      });\n    }\n    debugMessage({\n      message: `TokenCacheOps.saveUserSessionToken: end`,\n      state,\n    });\n    return true;\n  } catch (error) {\n    debugMessage({\n      message: `TokenCacheOps.saveUserSessionToken: error saving token in cache: ${error}`,\n      state,\n    });\n    debugMessage({\n      message: error.stack,\n      state,\n    });\n    return false;\n  }\n}\n\nexport async function saveUserBearerToken({\n  token,\n  state,\n}: {\n  token: AccessTokenMetaType;\n  state: State;\n}): Promise<boolean> {\n  try {\n    debugMessage({\n      message: `TokenCacheOps.saveUserBearerToken: start`,\n      state,\n    });\n    const filename = getTokenCachePath({ state });\n    const data = fs.readFileSync(filename, 'utf8');\n    const tokenCache: TokenCacheInterface = JSON.parse(data);\n    purgeExpiredTokens(tokenCache, state);\n    const hostKey = getHostKey(state);\n    const realmKey = getRealmKey(state);\n    const typeKey = getTypeKey('userBearer');\n    const subjectKey = getSubjectKey('userBearer', state);\n    const dataProtection = new DataProtection({\n      sessionKey: generateSessionKey('userBearer', state),\n      state,\n    });\n    const checksum = getChecksum(stringify(token));\n    const checksums = Object.keys(\n      get(tokenCache, [hostKey, realmKey, typeKey, subjectKey], {})\n    ).map((expKey) =>\n      get(tokenCache, [\n        hostKey,\n        realmKey,\n        typeKey,\n        subjectKey,\n        expKey,\n        checksumKey,\n      ])\n    );\n    if (checksums.includes(checksum)) {\n      debugMessage({\n        message: `TokenCacheOps.saveUserBearerToken: token alreaday in cache`,\n        state,\n      });\n    } else {\n      put(tokenCache, checksum, [\n        hostKey,\n        realmKey,\n        typeKey,\n        subjectKey,\n        `${token.expires}`,\n        checksumKey,\n      ]);\n      put(tokenCache, await dataProtection.encrypt(stringify(token)), [\n        hostKey,\n        realmKey,\n        typeKey,\n        subjectKey,\n        `${token.expires}`,\n        tokenKey,\n      ]);\n      fs.writeFileSync(filename, stringify(tokenCache));\n      debugMessage({\n        message: `TokenCacheOps.saveUserBearerToken: saved token in cache`,\n        state,\n      });\n    }\n    debugMessage({\n      message: `TokenCacheOps.saveUserBearerToken: end`,\n      state,\n    });\n    return true;\n  } catch (error) {\n    debugMessage({\n      message: `TokenCacheOps.saveUserBearerToken: error saving token in cache: ${error}`,\n      state,\n    });\n    debugMessage({\n      message: error.stack,\n      state,\n    });\n    return false;\n  }\n}\n\nexport async function saveSaBearerToken({\n  token,\n  state,\n}: {\n  token: AccessTokenMetaType;\n  state: State;\n}): Promise<boolean> {\n  try {\n    debugMessage({\n      message: `TokenCacheOps.saveSaBearerToken: start`,\n      state,\n    });\n    const filename = getTokenCachePath({ state });\n    const data = fs.readFileSync(filename, 'utf8');\n    const tokenCache: TokenCacheInterface = JSON.parse(data);\n    purgeExpiredTokens(tokenCache, state);\n    const hostKey = getHostKey(state);\n    const realmKey = getRealmKey(state);\n    const typeKey = getTypeKey('saBearer');\n    const subjectKey = getSubjectKey('saBearer', state);\n    const dataProtection = new DataProtection({\n      sessionKey: generateSessionKey('saBearer', state),\n      state,\n    });\n    const checksum = getChecksum(stringify(token));\n    const checksums = Object.keys(\n      get(tokenCache, [hostKey, realmKey, typeKey, subjectKey], {})\n    ).map((expKey) =>\n      get(tokenCache, [\n        hostKey,\n        realmKey,\n        typeKey,\n        subjectKey,\n        expKey,\n        checksumKey,\n      ])\n    );\n    debugMessage({\n      message: `TokenCacheOps.saveSaBearerToken: checksum=${checksum} checksums=${checksums}`,\n      state,\n    });\n    if (checksums.includes(checksum)) {\n      debugMessage({\n        message: `TokenCacheOps.saveSaBearerToken: token already in cache`,\n        state,\n      });\n    } else {\n      put(tokenCache, checksum, [\n        hostKey,\n        realmKey,\n        typeKey,\n        subjectKey,\n        `${token.expires}`,\n        checksumKey,\n      ]);\n      put(tokenCache, await dataProtection.encrypt(stringify(token)), [\n        hostKey,\n        realmKey,\n        typeKey,\n        subjectKey,\n        `${token.expires}`,\n        tokenKey,\n      ]);\n      fs.writeFileSync(filename, stringify(tokenCache));\n      debugMessage({\n        message: `TokenCacheOps.saveSaBearerToken: saved token in cache`,\n        state,\n      });\n    }\n    debugMessage({\n      message: `TokenCacheOps.saveSaBearerToken: end`,\n      state,\n    });\n    return true;\n  } catch (error) {\n    debugMessage({\n      message: `TokenCacheOps.saveSaBearerToken: error saving token in cache: ${error}`,\n      state,\n    });\n    debugMessage({\n      message: error.stack,\n      state,\n    });\n    return false;\n  }\n}\n\nexport function purge({ state }: { state: State }): TokenCacheInterface {\n  try {\n    const filename = getTokenCachePath({ state });\n    debugMessage({\n      message: `TokenCacheOps.purge: purging expired tokens from existing token cache: ${filename}`,\n      state,\n    });\n    const data = fs.readFileSync(filename, 'utf8');\n    const tokenCache: TokenCacheInterface = JSON.parse(data);\n    const purgedCache = purgeExpiredTokens(tokenCache, state);\n    fs.writeFileSync(filename, stringify(purgedCache));\n    debugMessage({\n      message: `TokenCacheOps.purge: end`,\n      state,\n    });\n    return purgedCache;\n  } catch (error) {\n    debugMessage({\n      message: `TokenCacheOps.purge: error purge cache: ${error}`,\n      state,\n    });\n    return {};\n  }\n}\n\nexport function flush({ state }: { state: State }): boolean {\n  try {\n    debugMessage({\n      message: `TokenCacheOps.flush: start`,\n      state,\n    });\n    const filename = getTokenCachePath({ state });\n    fs.writeFileSync(filename, stringify({}));\n    debugMessage({\n      message: `TokenCacheOps.flush: end`,\n      state,\n    });\n    return true;\n  } catch (error) {\n    debugMessage({\n      message: `TokenCacheOps.flush: error flushing cache: ${error}`,\n      state,\n    });\n    return false;\n  }\n}\n","import util from 'util';\n\nimport { State } from '../shared/State';\nimport { debugMessage } from '../utils/Console';\nimport { getCurrentRealmPath } from '../utils/ForgeRockUtils';\nimport { type IdObjectSkeletonInterface } from './ApiTypes';\nimport { generateAmApi } from './BaseApi';\n\nconst authenticationSettingsURLTemplate =\n  '%s/json%s/realm-config/authentication';\nconst apiVersion = 'resource=1.0';\nconst getApiConfig = () => {\n  return {\n    apiVersion,\n  };\n};\n\nexport type AuthenticationSettingsSkeleton = IdObjectSkeletonInterface & {\n  _id: '';\n  _type: {\n    _id: 'EMPTY';\n    name: 'Core';\n    collection: false;\n  };\n};\n\n/**\n * Get authentication settings\n * @returns {Promise<AuthenticationSettingsSkeleton>} a promise that resolves to an authentication settings object\n */\nexport async function getAuthenticationSettings({\n  state,\n}: {\n  state: State;\n}): Promise<AuthenticationSettingsSkeleton> {\n  debugMessage({\n    message: `AuthenticationSettingsApi.getAuthenticationSettings: start`,\n    state,\n  });\n  const urlString = util.format(\n    authenticationSettingsURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state)\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get(\n    urlString,\n    {\n      withCredentials: true,\n    }\n  );\n  debugMessage({\n    message: `AuthenticationSettingsApi.getAuthenticationSettings: end`,\n    state,\n  });\n  return data;\n}\n\n/**\n * Put authentiction settings\n * @param {AuthenticationSettingsSkeleton} settings authentiction settings object\n * @returns {Promise<AuthenticationSettingsSkeleton>} a promise that resolves to an authentiction settings object\n */\nexport async function putAuthenticationSettings({\n  settings,\n  state,\n}: {\n  settings: AuthenticationSettingsSkeleton;\n  state: State;\n}): Promise<AuthenticationSettingsSkeleton> {\n  debugMessage({\n    message: `AuthenticationSettingsApi.putAuthenticationSettings: start`,\n    state,\n  });\n  const urlString = util.format(\n    authenticationSettingsURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state)\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).put(\n    urlString,\n    settings,\n    {\n      withCredentials: true,\n    }\n  );\n  debugMessage({\n    message: `AuthenticationSettingsApi.putAuthenticationSettings: end`,\n    state,\n  });\n  return data;\n}\n","import {\n  type AuthenticationSettingsSkeleton,\n  getAuthenticationSettings as _getAuthenticationSettings,\n  putAuthenticationSettings as _putAuthenticationSettings,\n} from '../api/AuthenticationSettingsApi';\nimport { State } from '../shared/State';\nimport { debugMessage } from '../utils/Console';\nimport { getMetadata } from '../utils/ExportImportUtils';\nimport { FrodoError } from './FrodoError';\nimport { type ExportMetaData } from './OpsTypes';\n\nexport type AuthenticationSettings = {\n  /**\n   * Read authentication settings\n   * @returns {Promise<AuthenticationSettingsSkeleton>} a promise that resolves an authentication settings object\n   */\n  readAuthenticationSettings(): Promise<AuthenticationSettingsSkeleton>;\n  /**\n   * Update authentication settings\n   * @param {AuthenticationSettingsSkeleton} settings authentication settings data\n   * @returns {Promise<AuthenticationSettingsSkeleton>} a promise that resolves an authentication settings object\n   */\n  updateAuthenticationSettings(\n    settings: AuthenticationSettingsSkeleton\n  ): Promise<AuthenticationSettingsSkeleton>;\n  /**\n   * Export authentication settings\n   * @returns {Promise<AuthenticationSettingsExportInterface>} a promise that resolves to an AuthenticationSettingsExportInterface object\n   */\n  exportAuthenticationSettings(): Promise<AuthenticationSettingsExportInterface>;\n  /**\n   * Import authentication settings\n   * @param {AuthenticationSettingsExportInterface} importData import data\n   */\n  importAuthenticationSettings(\n    importData: AuthenticationSettingsExportInterface\n  ): Promise<AuthenticationSettingsSkeleton>;\n};\n\nexport default (state: State): AuthenticationSettings => {\n  return {\n    async readAuthenticationSettings() {\n      return readAuthenticationSettings({ state });\n    },\n    async updateAuthenticationSettings(\n      settings: AuthenticationSettingsSkeleton\n    ) {\n      return updateAuthenticationSettings({\n        settings,\n        state,\n      });\n    },\n    async exportAuthenticationSettings(): Promise<AuthenticationSettingsExportInterface> {\n      return exportAuthenticationSettings({ state });\n    },\n    async importAuthenticationSettings(\n      importData: AuthenticationSettingsExportInterface\n    ): Promise<AuthenticationSettingsSkeleton> {\n      return importAuthenticationSettings({ importData, state });\n    },\n  };\n};\n\nexport interface AuthenticationSettingsExportInterface {\n  meta?: ExportMetaData;\n  authentication: AuthenticationSettingsSkeleton;\n}\n\n/**\n * Create an empty authentication settings export template\n * @returns {AuthenticationSettingsExportInterface} an empty authentication settings export template\n */\nfunction createAuthenticationSettingsExportTemplate({\n  state,\n}: {\n  state: State;\n}): AuthenticationSettingsExportInterface {\n  return {\n    meta: getMetadata({ state }),\n    authentication: {},\n  } as AuthenticationSettingsExportInterface;\n}\n\n/**\n * Read authentication settings\n * @returns {Promise} a promise that resolves to an object containing an array of authentication settingss\n */\nexport async function readAuthenticationSettings({\n  state,\n}: {\n  state: State;\n}): Promise<AuthenticationSettingsSkeleton> {\n  try {\n    const settings = await _getAuthenticationSettings({ state });\n    return settings;\n  } catch (error) {\n    throw new FrodoError(`Error reading authentication settings`, error);\n  }\n}\n\nexport async function updateAuthenticationSettings({\n  settings,\n  state,\n}: {\n  settings: AuthenticationSettingsSkeleton;\n  state: State;\n}): Promise<AuthenticationSettingsSkeleton> {\n  try {\n    debugMessage({\n      message: `AuthenticationSettingsOps.updateAuthenticationSettings: start`,\n      state,\n    });\n    const response = await _putAuthenticationSettings({\n      settings,\n      state,\n    });\n    debugMessage({\n      message: `AuthenticationSettingsOps.updateAuthenticationSettings: end`,\n      state,\n    });\n    return response;\n  } catch (error) {\n    throw new FrodoError(`Error updating authentication settings`, error);\n  }\n}\n\n/**\n * Export authentication settings\n * @returns {Promise<AuthenticationSettingsExportInterface>} a promise that resolves to a AuthenticationSettingsExportInterface object\n */\nexport async function exportAuthenticationSettings({\n  state,\n}: {\n  state: State;\n}): Promise<AuthenticationSettingsExportInterface> {\n  try {\n    debugMessage({\n      message: `AuthenticationSettingsOps.exportAuthenticationSettings: start`,\n      state,\n    });\n    const settingsData = await readAuthenticationSettings({ state });\n    const exportData = createAuthenticationSettingsExportTemplate({ state });\n    exportData.authentication = settingsData;\n    debugMessage({\n      message: `AuthenticationSettingsOps.exportAuthenticationSettings: end`,\n      state,\n    });\n    return exportData;\n  } catch (error) {\n    throw new FrodoError(`Error exporting authentication settings`, error);\n  }\n}\n\n/**\n * Import authentication settings\n * @param {AuthenticationSettingsExportInterface} importData import data\n * @returns {Promise<AuthenticationSettingsSkeleton>} a promise resolving to a authentication settings object\n */\nexport async function importAuthenticationSettings({\n  importData,\n  state,\n}: {\n  importData: AuthenticationSettingsExportInterface;\n  state: State;\n}): Promise<AuthenticationSettingsSkeleton> {\n  let response = null;\n  try {\n    response = await updateAuthenticationSettings({\n      settings: importData.authentication,\n      state,\n    });\n    return response;\n  } catch (error) {\n    throw new FrodoError(`Error reading authentication settings`, error);\n  }\n}\n","import util from 'util';\n\nimport { State } from '../../shared/State';\nimport { getRealmPath } from '../../utils/ForgeRockUtils';\nimport { deleteDeepByKey } from '../../utils/JsonUtils';\nimport { type IdObjectSkeletonInterface, type PagedResult } from '../ApiTypes';\nimport { generateAmApi } from '../BaseApi';\nimport { type AmServiceType } from '../ServiceApi';\nimport { type SocialIdpSkeleton } from '../SocialIdentityProvidersApi';\n\nconst getAllProviderTypesURLTemplate =\n  '%s/json%s/realm-config/services/SocialIdentityProviders?_action=getAllTypes';\nconst providerByTypeAndIdURLTemplate =\n  '%s/json%s/realm-config/services/SocialIdentityProviders/%s/%s';\nconst getAllProvidersURLTemplate =\n  '%s/json%s/realm-config/services/SocialIdentityProviders?_action=nextdescendents';\nconst getProvidersByTypeURLTemplate =\n  '%s/json%s/realm-config/services/SocialIdentityProviders/%s?_queryFilter=true';\nconst apiVersion = 'protocol=2.1,resource=1.0';\nconst getApiConfig = () => {\n  const configPath = getRealmPath('/');\n  return {\n    path: `${configPath}/realm-config/services/SocialIdentityProviders`,\n    apiVersion,\n  };\n};\n\nexport type AdminFederationConfigSkeleton = IdObjectSkeletonInterface & {\n  groups: {\n    claim: string;\n    mappings: {\n      'super-admins': string[];\n      'tenant-admins': string[];\n    };\n  };\n};\n\n/**\n * Get admin federation provider types\n * @returns {Promise} a promise that resolves to an object containing an array of admin federation provider types\n */\nexport async function getAdminFederationProviderTypes({\n  state,\n}: {\n  state: State;\n}): Promise<PagedResult<AmServiceType>> {\n  const urlString = util.format(\n    getAllProviderTypesURLTemplate,\n    state.getHost(),\n    getRealmPath('/')\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get(\n    urlString,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Get admin federation providers by type\n * @param {String} providerType admin federation provider type\n * @returns {Promise<PagedResult<SocialIdpSkeleton>>} a promise that resolves to an object containing an array of admin federation providers of the requested type\n */\nexport async function getAdminFederationProvidersByType({\n  providerType,\n  state,\n}: {\n  providerType: string;\n  state: State;\n}): Promise<PagedResult<SocialIdpSkeleton>> {\n  const urlString = util.format(\n    getProvidersByTypeURLTemplate,\n    state.getHost(),\n    getRealmPath('/'),\n    providerType\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get(\n    urlString,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Get all admin federation providers\n * @returns {Promise<PagedResult<SocialIdpSkeleton>>} a promise that resolves to an object containing an array of admin federation providers\n */\nexport async function getAdminFederationProviders({\n  state,\n}: {\n  state: State;\n}): Promise<PagedResult<SocialIdpSkeleton>> {\n  const urlString = util.format(\n    getAllProvidersURLTemplate,\n    state.getHost(),\n    getRealmPath('/')\n  );\n  const { data } = await generateAmApi({\n    resource: getApiConfig(),\n    state,\n  }).post(\n    urlString,\n    {},\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Get admin federation provider by type and id\n * @param {*} type admin federation provider type\n * @param {*} id admin federation provider id/name\n * @returns {Promise<SocialIdpSkeleton>} a promise that resolves to an object containing a admin federation provider\n */\nexport async function getProviderByTypeAndId({\n  providerType,\n  providerId,\n  state,\n}: {\n  providerType: string;\n  providerId: string;\n  state: State;\n}): Promise<SocialIdpSkeleton> {\n  const urlString = util.format(\n    providerByTypeAndIdURLTemplate,\n    state.getHost(),\n    getRealmPath('/'),\n    providerType,\n    providerId\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get(\n    urlString,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Get admin federation provider by type and id\n * @param {String} providerType admin federation provider type\n * @param {String} providerId admin federation provider id/name\n * @param {Object} providerData a admin federation provider object\n * @returns {Promise<SocialIdpSkeleton>} a promise that resolves to an object containing a admin federation provider\n */\nexport async function putProviderByTypeAndId({\n  providerType,\n  providerId,\n  providerData,\n  state,\n}: {\n  providerType: string;\n  providerId: string;\n  providerData: SocialIdpSkeleton;\n  state: State;\n}): Promise<SocialIdpSkeleton> {\n  // until we figure out a way to use transport keys in Frodo,\n  // we'll have to drop those encrypted attributes.\n  const cleanData = deleteDeepByKey(providerData, '-encrypted');\n  const urlString = util.format(\n    providerByTypeAndIdURLTemplate,\n    state.getHost(),\n    getRealmPath('/'),\n    providerType,\n    providerId\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).put(\n    urlString,\n    cleanData,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Delete admin federation provider by type and id\n * @param {string} providerId provider type\n * @param {string} providerId provider id\n * @returns {Promise<SocialIdpSkeleton>} a promise that resolves to a admin federation provider\n */\nexport async function deleteProviderByTypeAndId({\n  providerType,\n  providerId,\n  state,\n}: {\n  providerType: string;\n  providerId: string;\n  state: State;\n}): Promise<SocialIdpSkeleton> {\n  const urlString = util.format(\n    providerByTypeAndIdURLTemplate,\n    state.getHost(),\n    getRealmPath('/'),\n    providerType,\n    providerId\n  );\n  const { data } = await generateAmApi({\n    resource: getApiConfig(),\n    state,\n  }).delete(urlString, {\n    withCredentials: true,\n  });\n  return data;\n}\n","import {\n  type AdminFederationConfigSkeleton,\n  deleteProviderByTypeAndId as _deleteProviderByTypeAndId,\n  getAdminFederationProviders as _getAdminFederationProviders,\n  putProviderByTypeAndId as _putProviderByTypeAndId,\n} from '../../api/cloud/AdminFederationProvidersApi';\nimport { getConfigEntity, putConfigEntity } from '../../api/IdmConfigApi';\nimport { SocialIdpSkeleton } from '../../api/SocialIdentityProvidersApi';\nimport { State } from '../../shared/State';\nimport { debugMessage } from '../../utils/Console';\nimport { getMetadata } from '../../utils/ExportImportUtils';\nimport { FrodoError } from '../FrodoError';\nimport { ExportMetaData } from '../OpsTypes';\n\nexport type AdminFederation = {\n  /**\n   * Create an empty idp export template\n   * @returns {AdminFederationExportInterface} an empty idp export template\n   */\n  createAdminFederationExportTemplate(): AdminFederationExportInterface;\n  /**\n   * Read all admin federation providers\n   * @returns {Promise} a promise that resolves to an object containing an array of admin federation providers\n   */\n  readAdminFederationProviders(): Promise<SocialIdpSkeleton[]>;\n  /**\n   * Read admin federation provider\n   * @param {string} providerId social identity provider id/name\n   * @returns {Promise<SocialIdpSkeleton>} a promise that resolves a social admin federation object\n   */\n  readAdminFederationProvider(providerId: string): Promise<SocialIdpSkeleton>;\n  /**\n   * Create admin federation provider\n   * @param {string} providerType social identity provider type\n   * @param {string} providerId social identity provider id/name\n   * @param {SocialIdpSkeleton} providerData social identity provider data\n   * @returns {Promise<SocialIdpSkeleton>} a promise that resolves a social admin federation object\n   */\n  createAdminFederationProvider(\n    providerType: string,\n    providerData: SocialIdpSkeleton,\n    providerId?: string\n  ): Promise<SocialIdpSkeleton>;\n  /**\n   * Update or create admin federation provider\n   * @param {string} providerType social identity provider type\n   * @param {string} providerId social identity provider id/name\n   * @param {SocialIdpSkeleton} providerData social identity provider data\n   * @returns {Promise<SocialIdpSkeleton>} a promise that resolves a social admin federation object\n   */\n  updateAdminFederationProvider(\n    providerType: string,\n    providerId: string,\n    providerData: SocialIdpSkeleton\n  ): Promise<SocialIdpSkeleton>;\n  /**\n   * Delete admin federation provider by id\n   * @param {String} providerId admin federation provider id/name\n   * @returns {Promise} a promise that resolves to an admin federation provider object\n   */\n  deleteAdminFederationProvider(providerId: string): Promise<SocialIdpSkeleton>;\n  /**\n   * Export admin federation provider by id\n   * @param {string} providerId provider id/name\n   * @returns {Promise<AdminFederationExportInterface>} a promise that resolves to a SocialProviderExportInterface object\n   */\n  exportAdminFederationProvider(\n    providerId: string\n  ): Promise<AdminFederationExportInterface>;\n  /**\n   * Export all providers\n   * @returns {Promise<AdminFederationExportInterface>} a promise that resolves to a SocialProviderExportInterface object\n   */\n  exportAdminFederationProviders(): Promise<AdminFederationExportInterface>;\n  /**\n   * Import admin federation provider by id/name\n   * @param {string} providerId provider id/name\n   * @param {AdminFederationExportInterface} importData import data\n   */\n  importAdminFederationProvider(\n    providerId: string,\n    importData: AdminFederationExportInterface\n  ): Promise<SocialIdpSkeleton>;\n  /**\n   * Import first provider\n   * @param {AdminFederationExportInterface} importData import data\n   */\n  importFirstAdminFederationProvider(\n    importData: AdminFederationExportInterface\n  ): Promise<SocialIdpSkeleton>;\n  /**\n   * Import all providers\n   * @param {AdminFederationExportInterface} importData import data\n   */\n  importAdminFederationProviders(\n    importData: AdminFederationExportInterface\n  ): Promise<SocialIdpSkeleton[]>;\n\n  // Deprecated\n\n  /**\n   * Get all admin federation providers\n   * @returns {Promise<SocialIdpSkeleton[]>} a promise that resolves to an object containing an array of admin federation providers\n   * @deprecated since v2.0.0 use {@link AdminFederation.readAdminFederationProviders | readAdminFederationProviders} instead\n   * ```javascript\n   * readAdminFederationProviders(): Promise<SocialIdpSkeleton[]>\n   * ```\n   * @group Deprecated\n   */\n  getAdminFederationProviders(): Promise<SocialIdpSkeleton[]>;\n  /**\n   * Get admin federation provider\n   * @param {String} providerId social identity provider id/name\n   * @returns {Promise} a promise that resolves a social admin federation object\n   * @deprecated since v2.0.0 use {@link AdminFederation.readAdminFederationProvider | readAdminFederationProvider} instead\n   * ```javascript\n   * readAdminFederationProvider(providerId: string): Promise<SocialIdpSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  getAdminFederationProvider(providerId: string): Promise<SocialIdpSkeleton>;\n  /**\n   * Update or create admin federation provider\n   * @param {string} providerType social identity provider type\n   * @param {string} providerId social identity provider id/name\n   * @param {SocialIdpSkeleton} providerData social identity provider data\n   * @returns {Promise<SocialIdpSkeleton>} a promise that resolves a social admin federation object\n   * @deprecated since v2.0.0 use {@link AdminFederation.updateAdminFederationProvider | updateAdminFederationProvider} instead\n   * ```javascript\n   * updateAdminFederationProvider(providerType: string, providerId: string, providerData: SocialIdpSkeleton): Promise<SocialIdpSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  putProviderByTypeAndId(\n    providerType: string,\n    providerId: string,\n    providerData: SocialIdpSkeleton\n  ): Promise<SocialIdpSkeleton>;\n};\n\nexport default (state: State): AdminFederation => {\n  return {\n    createAdminFederationExportTemplate(): AdminFederationExportInterface {\n      return createAdminFederationExportTemplate({ state });\n    },\n    async readAdminFederationProviders(): Promise<SocialIdpSkeleton[]> {\n      return readAdminFederationProviders({ state });\n    },\n    async readAdminFederationProvider(\n      providerId: string\n    ): Promise<SocialIdpSkeleton> {\n      return readAdminFederationProvider({ providerId, state });\n    },\n    async createAdminFederationProvider(\n      providerType: string,\n      providerData: SocialIdpSkeleton,\n      providerId?: string\n    ): Promise<SocialIdpSkeleton> {\n      return createAdminFederationProvider({\n        providerType,\n        providerId,\n        providerData,\n        state,\n      });\n    },\n    async updateAdminFederationProvider(\n      providerType: string,\n      providerId: string,\n      providerData: SocialIdpSkeleton\n    ): Promise<SocialIdpSkeleton> {\n      return updateAdminFederationProvider({\n        providerType,\n        providerId,\n        providerData,\n        state,\n      });\n    },\n    async deleteAdminFederationProvider(\n      providerId: string\n    ): Promise<SocialIdpSkeleton> {\n      return deleteAdminFederationProvider({ providerId, state });\n    },\n    async exportAdminFederationProvider(\n      providerId: string\n    ): Promise<AdminFederationExportInterface> {\n      return exportAdminFederationProvider({ providerId, state });\n    },\n    async exportAdminFederationProviders(): Promise<AdminFederationExportInterface> {\n      return exportAdminFederationProviders({ state });\n    },\n    async importAdminFederationProvider(\n      providerId: string,\n      importData: AdminFederationExportInterface\n    ): Promise<SocialIdpSkeleton> {\n      return importAdminFederationProvider({\n        providerId,\n        importData,\n        state,\n      });\n    },\n    async importFirstAdminFederationProvider(\n      importData: AdminFederationExportInterface\n    ): Promise<SocialIdpSkeleton> {\n      return importFirstAdminFederationProvider({\n        importData,\n        state,\n      });\n    },\n    async importAdminFederationProviders(\n      importData: AdminFederationExportInterface\n    ): Promise<SocialIdpSkeleton[]> {\n      return importAdminFederationProviders({ importData, state });\n    },\n\n    // Deprecated\n\n    async getAdminFederationProviders(): Promise<SocialIdpSkeleton[]> {\n      return readAdminFederationProviders({ state });\n    },\n    async getAdminFederationProvider(\n      providerId: string\n    ): Promise<SocialIdpSkeleton> {\n      return readAdminFederationProvider({ providerId, state });\n    },\n    async putProviderByTypeAndId(\n      providerType: string,\n      providerId: string,\n      providerData: SocialIdpSkeleton\n    ): Promise<SocialIdpSkeleton> {\n      return updateAdminFederationProvider({\n        providerType,\n        providerId,\n        providerData,\n        state,\n      });\n    },\n  };\n};\n\nexport interface AdminFederationExportInterface {\n  meta?: ExportMetaData;\n  config: Record<string, AdminFederationConfigSkeleton>;\n  idp: Record<string, SocialIdpSkeleton>;\n}\n\nconst ADMIN_FED_CONFIG_ID_PREFIX = 'fidc/federation-';\n\n/**\n * Create an empty idp export template\n * @returns {AdminFederationExportInterface} an empty idp export template\n */\nexport function createAdminFederationExportTemplate({\n  state,\n}: {\n  state: State;\n}): AdminFederationExportInterface {\n  return {\n    meta: getMetadata({ state }),\n    config: {},\n    idp: {},\n  } as AdminFederationExportInterface;\n}\n\n/**\n * Get all admin federation providers\n * @returns {Promise<SocialIdpSkeleton[]>} a promise that resolves to an object containing an array of admin federation providers\n */\nexport async function readAdminFederationProviders({\n  state,\n}: {\n  state: State;\n}): Promise<SocialIdpSkeleton[]> {\n  try {\n    const { result } = await _getAdminFederationProviders({ state });\n    return result;\n  } catch (error) {\n    throw new FrodoError(`Error reading admin federation providers.`, error);\n  }\n}\n\n/**\n * Get admin federation provider by id\n * @param {String} providerId social identity provider id/name\n * @returns {Promise<SocialIdpSkeleton>} a promise that resolves a social admin federation object\n */\nexport async function readAdminFederationProvider({\n  providerId,\n  state,\n}: {\n  providerId: string;\n  state: State;\n}): Promise<SocialIdpSkeleton> {\n  const response = await readAdminFederationProviders({ state });\n  const foundProviders = response.filter(\n    (provider) => provider._id === providerId\n  );\n  switch (foundProviders.length) {\n    case 1:\n      return foundProviders[0];\n    case 0:\n      throw new FrodoError(\n        `Admin federation provider '${providerId}' not found`\n      );\n    default:\n      throw new FrodoError(\n        `${foundProviders.length} admin federation providers '${providerId}' found`\n      );\n  }\n}\n\nexport async function createAdminFederationProvider({\n  providerType,\n  providerId,\n  providerData,\n  state,\n}: {\n  providerType: string;\n  providerId: string;\n  providerData: SocialIdpSkeleton;\n  state: State;\n}) {\n  debugMessage({\n    message: `AdminFederationOps.createAdminFederationProvider: start`,\n    state,\n  });\n  try {\n    await readAdminFederationProvider({ providerId, state });\n  } catch (error) {\n    const result = await updateAdminFederationProvider({\n      providerType,\n      providerId,\n      providerData,\n      state,\n    });\n    debugMessage({\n      message: `AdminFederationOps.createAdminFederationProvider: end`,\n      state,\n    });\n    return result;\n  }\n  throw new FrodoError(\n    `Admin federation provider ${providerId} already exists!`\n  );\n}\n\nexport async function updateAdminFederationProvider({\n  providerType,\n  providerId,\n  providerData,\n  state,\n}: {\n  providerType: string;\n  providerId: string;\n  providerData: SocialIdpSkeleton;\n  state: State;\n}): Promise<SocialIdpSkeleton> {\n  debugMessage({\n    message: `AdminFederationOps.putProviderByTypeAndId: start`,\n    state,\n  });\n  try {\n    const response = await _putProviderByTypeAndId({\n      providerType,\n      providerId,\n      providerData,\n      state,\n    });\n    debugMessage({\n      message: `AdminFederationOps.putProviderByTypeAndId: end`,\n      state,\n    });\n    return response;\n  } catch (importError) {\n    if (\n      importError.response?.status === 400 &&\n      importError.response?.data?.message === 'Invalid attribute specified.'\n    ) {\n      const { validAttributes } = importError.response.data.detail;\n      validAttributes.push('_id', '_type');\n      for (const attribute of Object.keys(providerData)) {\n        if (!validAttributes.includes(attribute)) {\n          debugMessage({\n            message: `Removing invalid attribute: ${attribute}`,\n            state,\n          });\n          delete providerData[attribute];\n        }\n      }\n      const response = await _putProviderByTypeAndId({\n        providerType,\n        providerId,\n        providerData,\n        state,\n      });\n      debugMessage({\n        message: `AdminFederationOps.putProviderByTypeAndId: end (after retry)`,\n        state,\n      });\n      return response;\n    } else {\n      // re-throw unhandleable error\n      throw new FrodoError(\n        `Error updating admin federation provider`,\n        importError\n      );\n    }\n  }\n}\n\n/**\n * Delete admin federation provider by id\n * @param {String} providerId admin federation provider id/name\n * @returns {Promise<SocialIdpSkeleton>} a promise that resolves to an admin federation provider object\n */\nexport async function deleteAdminFederationProvider({\n  providerId,\n  state,\n}: {\n  providerId: string;\n  state: State;\n}): Promise<SocialIdpSkeleton> {\n  const response = await readAdminFederationProviders({ state });\n  const foundProviders = response.filter(\n    (provider) => provider._id === providerId\n  );\n  switch (foundProviders.length) {\n    case 1:\n      return await _deleteProviderByTypeAndId({\n        providerType: foundProviders[0]._type._id,\n        providerId: foundProviders[0]._id,\n        state,\n      });\n    case 0:\n      throw new FrodoError(`Provider '${providerId}' not found`);\n    default:\n      throw new FrodoError(\n        `${foundProviders.length} providers '${providerId}' found`\n      );\n  }\n}\n\n/**\n * Export admin federation provider by id\n * @param {string} providerId provider id/name\n * @returns {Promise<AdminFederationExportInterface>} a promise that resolves to a SocialProviderExportInterface object\n */\nexport async function exportAdminFederationProvider({\n  providerId,\n  state,\n}: {\n  providerId: string;\n  state: State;\n}): Promise<AdminFederationExportInterface> {\n  debugMessage({\n    message: `AdminFederationOps.exportAdminFederationProvider: start`,\n    state,\n  });\n  const exportData = createAdminFederationExportTemplate({ state });\n  const errors = [];\n  try {\n    const idpData = await readAdminFederationProvider({ providerId, state });\n    exportData.idp[idpData._id] = idpData;\n    const idpConfig = await getConfigEntity({\n      entityId: `${ADMIN_FED_CONFIG_ID_PREFIX}${providerId}`,\n      state,\n    });\n    exportData.config[idpConfig._id] = idpConfig;\n  } catch (error) {\n    errors.push(error);\n  }\n  if (errors.length) {\n    throw new FrodoError(\n      `Error exporting admin federation provider ${providerId}`,\n      errors\n    );\n  }\n  debugMessage({\n    message: `AdminFederationOps.exportAdminFederationProvider: end`,\n    state,\n  });\n  return exportData;\n}\n\n/**\n * Export all providers\n * @returns {Promise<AdminFederationExportInterface>} a promise that resolves to a SocialProviderExportInterface object\n */\nexport async function exportAdminFederationProviders({\n  state,\n}: {\n  state: State;\n}): Promise<AdminFederationExportInterface> {\n  debugMessage({\n    message: `AdminFederationOps.exportAdminFederationProviders: start`,\n    state,\n  });\n  const exportData = createAdminFederationExportTemplate({ state });\n  const errors = [];\n  try {\n    const allIdpsData = await readAdminFederationProviders({ state });\n    for (const idpData of allIdpsData) {\n      try {\n        exportData.idp[idpData._id] = idpData;\n        const idpConfig = await getConfigEntity({\n          entityId: `${ADMIN_FED_CONFIG_ID_PREFIX}${idpData._id}`,\n          state,\n        });\n        exportData.config[idpConfig._id] = idpConfig;\n      } catch (error) {\n        errors.push(error);\n      }\n    }\n  } catch (error) {\n    errors.push(error);\n  }\n  if (errors.length) {\n    throw new FrodoError(`Error exporting admin federation providers`, errors);\n  }\n  debugMessage({\n    message: `AdminFederationOps.exportAdminFederationProviders: end`,\n    state,\n  });\n  return exportData;\n}\n\n/**\n * Import admin federation provider by id/name\n * @param {string} providerId provider id/name\n * @param {AdminFederationExportInterface} importData import data\n */\nexport async function importAdminFederationProvider({\n  providerId,\n  importData,\n  state,\n}: {\n  providerId: string;\n  importData: AdminFederationExportInterface;\n  state: State;\n}): Promise<SocialIdpSkeleton> {\n  let response = null;\n  const errors = [];\n  const imported = [];\n  for (const idpId of Object.keys(importData.idp)) {\n    if (idpId === providerId) {\n      try {\n        response = await updateAdminFederationProvider({\n          providerType: importData.idp[idpId]._type._id,\n          providerId: idpId,\n          providerData: importData.idp[idpId],\n          state,\n        });\n        const configId = `${ADMIN_FED_CONFIG_ID_PREFIX}${idpId}`;\n        if (importData.config[configId]) {\n          await putConfigEntity({\n            entityId: configId,\n            entityData: importData.config[configId],\n            state,\n          });\n        }\n        imported.push(idpId);\n      } catch (error) {\n        errors.push(error);\n      }\n    }\n  }\n  if (errors.length) {\n    throw new FrodoError(\n      `Error importing admin federation provider ${providerId}`,\n      errors\n    );\n  }\n  if (0 === imported.length) {\n    throw new FrodoError(\n      `Admin federation provider ${providerId} not found in import data!`\n    );\n  }\n  return response;\n}\n\n/**\n * Import first provider\n * @param {AdminFederationExportInterface} importData import data\n */\nexport async function importFirstAdminFederationProvider({\n  importData,\n  state,\n}: {\n  importData: AdminFederationExportInterface;\n  state: State;\n}): Promise<SocialIdpSkeleton> {\n  let response = null;\n  const errors = [];\n  const imported = [];\n  for (const idpId of Object.keys(importData.idp)) {\n    try {\n      response = await updateAdminFederationProvider({\n        providerType: importData.idp[idpId]._type._id,\n        providerId: idpId,\n        providerData: importData.idp[idpId],\n        state,\n      });\n      const configId = `${ADMIN_FED_CONFIG_ID_PREFIX}${idpId}`;\n      if (importData.config[configId]) {\n        await putConfigEntity({\n          entityId: configId,\n          entityData: importData.config[configId],\n          state,\n        });\n      }\n      imported.push(idpId);\n    } catch (error) {\n      errors.push(error);\n    }\n  }\n  if (errors.length) {\n    throw new FrodoError(\n      `Error importing first admin federation provider`,\n      errors\n    );\n  }\n  if (0 === imported.length) {\n    throw new FrodoError(`No admin federation providers found in import data`);\n  }\n  return response;\n}\n\n/**\n * Import all providers\n * @param {AdminFederationExportInterface} importData import data\n */\nexport async function importAdminFederationProviders({\n  importData,\n  state,\n}: {\n  importData: AdminFederationExportInterface;\n  state: State;\n}): Promise<SocialIdpSkeleton[]> {\n  const response = [];\n  const errors = [];\n  for (const idpId of Object.keys(importData.idp)) {\n    try {\n      response.push(\n        await updateAdminFederationProvider({\n          providerType: importData.idp[idpId]._type._id,\n          providerId: idpId,\n          providerData: importData.idp[idpId],\n          state,\n        })\n      );\n      const configId = `${ADMIN_FED_CONFIG_ID_PREFIX}${idpId}`;\n      if (importData.config[configId]) {\n        await putConfigEntity({\n          entityId: configId,\n          entityData: importData.config[configId],\n          state,\n        });\n      }\n    } catch (error) {\n      errors.push(error);\n    }\n  }\n  if (errors.length) {\n    throw new FrodoError(`Error importing admin federation providers`, errors);\n  }\n  return response;\n}\n","import util from 'util';\n\nimport { State } from '../../shared/State';\nimport { getHostBaseUrl } from '../../utils/ForgeRockUtils';\nimport {\n  type NoIdObjectSkeletonInterface,\n  type PagedResult,\n} from '../ApiTypes';\nimport { generateLogApi, generateLogKeysApi } from '../BaseApi';\n\nconst logsTailURLTemplate = '%s/monitoring/logs/tail?source=%s';\nconst logsFetchURLTemplate =\n  '%s/monitoring/logs?source=%s&beginTime=%s&endTime=%s';\nconst logsSourcesURLTemplate = '%s/monitoring/logs/sources';\nconst logsCreateAPIKeyAndSecretURLTemplate = '%s/keys?_action=create';\nconst logsGetAPIKeysURLTemplate = '%s/keys';\nconst logsAPIKeyURLTemplate = '%s/keys/%s';\n\nexport type LogApiKey = {\n  name: string;\n  api_key_id: string;\n  api_key_secret?: string;\n  created_at: string;\n};\n\nexport type LogEventPayloadSkeleton = NoIdObjectSkeletonInterface & {\n  context: string;\n  level: string;\n  logger: string;\n  mdc: {\n    transactionId: string;\n  };\n  message: string;\n  thread: string;\n  timestamp: string;\n  transactionId: string;\n};\n\nexport type LogEventSkeleton = NoIdObjectSkeletonInterface & {\n  payload: string | LogEventPayloadSkeleton;\n  timestamp: string;\n  type: string;\n  source: string;\n};\n\n/**\n * Get log API key\n * @returns {Promise<PagedResult<LogApiKey>>} a promise resolving to a log api key object\n */\nexport async function getLogApiKey({\n  keyId,\n  state,\n}: {\n  keyId: string;\n  state: State;\n}): Promise<LogApiKey> {\n  const urlString = util.format(\n    logsAPIKeyURLTemplate,\n    getHostBaseUrl(state.getHost()),\n    keyId\n  );\n  const { data } = await generateLogKeysApi({ state }).get(urlString);\n  return data;\n}\n\n/**\n * Get available API keys\n * @returns {Promise<PagedResult<LogApiKey>>} a promise resolving to a paged log api key results object\n */\nexport async function getLogApiKeys({\n  state,\n}: {\n  state: State;\n}): Promise<PagedResult<LogApiKey>> {\n  const urlString = util.format(\n    logsGetAPIKeysURLTemplate,\n    getHostBaseUrl(state.getHost())\n  );\n  const { data } = await generateLogKeysApi({ state }).get(urlString);\n  return data;\n}\n\n/**\n * Get available log sources\n * @returns {Promise<PagedResult<string>>} a promise resolving to a paged string results object\n */\nexport async function getSources({\n  state,\n}: {\n  state: State;\n}): Promise<PagedResult<string>> {\n  const urlString = util.format(\n    logsSourcesURLTemplate,\n    getHostBaseUrl(state.getHost())\n  );\n  const { data } = await generateLogApi({ state }).get(urlString);\n  return data;\n}\n\n/**\n * Validate log API key\n * @param {string} keyId log api key id\n * @param {string} secret log api secret\n * @returns {Promise<boolean>} a promise resolving to true if the key is valid, false otherwise\n */\nexport async function isLogApiKeyValid({\n  keyId,\n  secret,\n  state,\n}: {\n  keyId: string;\n  secret: string;\n  state: State;\n}): Promise<boolean> {\n  try {\n    const requestOverride = {\n      headers: {\n        'X-API-Key': keyId,\n        'X-API-Secret': secret,\n      },\n    };\n    const urlString = util.format(\n      logsSourcesURLTemplate,\n      getHostBaseUrl(state.getHost())\n    );\n    await generateLogApi({ requestOverride, state }).get(urlString);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Create API key\n * @param {keyName: string, state: State} params keyName, state\n * @returns {Promise<LogApiKey>} new API key and secret\n */\nexport async function createLogApiKey({\n  keyName,\n  state,\n}: {\n  keyName: string;\n  state: State;\n}): Promise<LogApiKey> {\n  const urlString = util.format(\n    logsCreateAPIKeyAndSecretURLTemplate,\n    getHostBaseUrl(state.getHost())\n  );\n  const { data } = await generateLogKeysApi({ state }).post(urlString, {\n    name: keyName,\n  });\n  return data;\n}\n\n/**\n * Delete log API key\n * @param {string} keyId key id\n * @returns {Promise<unknown>} a promise that resolves to a log api key object\n */\nexport async function deleteLogApiKey({\n  keyId,\n  state,\n}: {\n  keyId: string;\n  state: State;\n}): Promise<unknown> {\n  const urlString = util.format(\n    logsAPIKeyURLTemplate,\n    getHostBaseUrl(state.getHost()),\n    keyId\n  );\n  const { data } = await generateLogKeysApi({ state }).delete(urlString, {\n    withCredentials: true,\n  });\n  return data;\n}\n\n/**\n * Tail logs\n * @param {string} source log source(s) to tail\n * @param {string} cookie paged results cookie\n * @returns {Promise<PagedResult<LogEventSkeleton>>} promise resolving to paged log event result\n */\nexport async function tail({\n  source,\n  cookie,\n  state,\n}: {\n  source: string;\n  cookie: string;\n  state: State;\n}): Promise<PagedResult<LogEventSkeleton>> {\n  let urlString = util.format(\n    logsTailURLTemplate,\n    getHostBaseUrl(state.getHost()),\n    encodeURIComponent(source)\n  );\n  if (cookie) {\n    urlString += `&_pagedResultsCookie=${encodeURIComponent(cookie)}`;\n  }\n  const { data } = await generateLogApi({ state }).get(urlString);\n  return data as PagedResult<LogEventSkeleton>;\n}\n\n/**\n * Fetch logs\n * @param {string} source log source(s) to tail\n * @param {string} startTs start timestamp\n * @param {string} endTs end timestamp\n * @param {string} cookie paged results cookie\n * @returns {Promise<PagedResult<LogEventSkeleton>>} promise resolving to paged log event result\n */\nexport async function fetch({\n  source,\n  startTs,\n  endTs,\n  cookie,\n  state,\n}: {\n  source: string;\n  startTs: string;\n  endTs: string;\n  cookie: string;\n  state: State;\n}): Promise<PagedResult<LogEventSkeleton>> {\n  let urlString = util.format(\n    logsFetchURLTemplate,\n    getHostBaseUrl(state.getHost()),\n    encodeURIComponent(source),\n    startTs,\n    endTs\n  );\n  if (cookie) {\n    urlString += `&_pagedResultsCookie=${encodeURIComponent(cookie)}`;\n  }\n  const { data } = await generateLogApi({\n    state,\n    requestOverride: { timeout: 60000 },\n  }).get(urlString);\n  return data as PagedResult<LogEventSkeleton>;\n}\n","import { type PagedResult } from '../../api/ApiTypes';\nimport {\n  createLogApiKey as _createLogApiKey,\n  deleteLogApiKey as _deleteLogApiKey,\n  fetch as _fetch,\n  getLogApiKey as _getLogApiKey,\n  getLogApiKeys as _getLogApiKeys,\n  getSources as _getSources,\n  isLogApiKeyValid as _isLogApiKeyValid,\n  type LogApiKey,\n  type LogEventPayloadSkeleton,\n  type LogEventSkeleton,\n  tail as _tail,\n} from '../../api/cloud/LogApi';\nimport { State } from '../../shared/State';\nimport { FrodoError } from '../FrodoError';\n\nexport type Log = {\n  /**\n   * Get default noise filter\n   * @returns {string[]} array of default event types and loggers to be filtered out\n   */\n  getDefaultNoiseFilter(): string[];\n  /**\n   * Resolve log level to an array of effective log levels\n   * @param level string or numeric log level: 'FATAL', 'ERROR', 'WARN', 'INFO', 'DEBUG', 'TRACE', 'ALL', 0, 1, 2, 3, 4\n   * @returns {string[]} array of effective log levels\n   */\n  resolveLevel(level: string | number): string[];\n  /**\n   * Resolve a log event's level\n   * @param {object} log log event\n   * @returns {string} log level\n   */\n  resolvePayloadLevel(log: LogEventSkeleton): string;\n  /**\n   * Get available log sources\n   * @returns {Promise<string[]>} promise resolving to an array of available log sources\n   */\n  getLogSources(): Promise<string[]>;\n  /**\n   * Get log api key\n   * @param {string} keyId key id\n   * @returns {Promise<LogApiKey>} promise resolving to a LogApiKey objects\n   */\n  getLogApiKey(keyId: string): Promise<LogApiKey>;\n  /**\n   * Validate log api key and secret\n   * @param {string} keyId log api key id\n   * @param {string} secret log api secret\n   * @returns {Promise<boolean>} a promise resolving to true if the key is valid, false otherwise\n   */\n  isLogApiKeyValid(keyId: string, secret: string): Promise<boolean>;\n  /**\n   * Get log api keys\n   * @returns {Promise<LogApiKey[]>} promise resolving to an array of LogApiKey objects\n   */\n  getLogApiKeys(): Promise<LogApiKey[]>;\n  /**\n   * Create log api key\n   * @param {string} keyName human-readable key name\n   * @returns {Promise<LogApiKey>} a promise resolving to an object containing the log api key and secret\n   */\n  createLogApiKey(keyName: string): Promise<LogApiKey>;\n  /**\n   * Delete log api key\n   * @param {string} keyId key id\n   * @returns {Promise<LogApiKey>} a promise resolving to an object containing the log api key\n   */\n  deleteLogApiKey(keyId: string): Promise<LogApiKey>;\n  /**\n   * Delete all log api keys\n   * @returns {Promise<LogApiKey>} a promise resolving to an array of log api key objects\n   */\n  deleteLogApiKeys(): Promise<LogApiKey[]>;\n  /**\n   * Tail logs\n   * @param {string} source log source(s) to tail\n   * @param {string} cookie paged results cookie\n   * @returns {Promise<PagedResult<LogEventSkeleton>>} promise resolving to paged log event result\n   */\n  tail(source: string, cookie: string): Promise<PagedResult<LogEventSkeleton>>;\n  /**\n   * Fetch logs\n   * @param {string} source log source(s) to tail\n   * @param {string} startTs start timestamp\n   * @param {string} endTs end timestamp\n   * @param {string} cookie paged results cookie\n   * @returns {Promise<PagedResult<LogEventSkeleton>>} promise resolving to paged log event result\n   */\n  fetch(\n    source: string,\n    startTs: string,\n    endTs: string,\n    cookie: string\n  ): Promise<PagedResult<LogEventSkeleton>>;\n};\n\nexport default (state: State): Log => {\n  return {\n    getDefaultNoiseFilter(): string[] {\n      return getDefaultNoiseFilter();\n    },\n    resolveLevel(level: string | number): string[] {\n      return resolveLevel(level);\n    },\n    resolvePayloadLevel(log: LogEventSkeleton): string {\n      return resolvePayloadLevel(log);\n    },\n    async getLogSources() {\n      return getLogSources({ state });\n    },\n    async getLogApiKey(keyId: string): Promise<LogApiKey> {\n      return getLogApiKey({ keyId, state });\n    },\n    async isLogApiKeyValid(keyId: string, secret: string): Promise<boolean> {\n      return isLogApiKeyValid({ keyId, secret, state });\n    },\n    async getLogApiKeys(): Promise<LogApiKey[]> {\n      return getLogApiKeys({ state });\n    },\n    async createLogApiKey(keyName: string): Promise<LogApiKey> {\n      return createLogApiKey({ keyName, state });\n    },\n    async deleteLogApiKey(keyId: string): Promise<LogApiKey> {\n      return deleteLogApiKey({ keyId, state });\n    },\n    async deleteLogApiKeys(): Promise<LogApiKey[]> {\n      return deleteLogApiKeys({ state });\n    },\n    tail(\n      source: string,\n      cookie: string\n    ): Promise<PagedResult<LogEventSkeleton>> {\n      return tail({ source, cookie, state });\n    },\n    async fetch(\n      source: string,\n      startTs: string,\n      endTs: string,\n      cookie: string\n    ): Promise<PagedResult<LogEventSkeleton>> {\n      return fetch({ source, startTs, endTs, cookie, state });\n    },\n  };\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst unfilterableNoise = [\n  'text/plain', // Unfortunately, it is impossible to filter out those without excluding IDM script logging as well\n];\n\nconst miscNoise = [\n  'com.iplanet.dpro.session.operations.ServerSessionOperationStrategy',\n  'com.iplanet.dpro.session.SessionIDFactory',\n  'com.iplanet.dpro.session.share.SessionEncodeURL',\n  'com.iplanet.services.naming.WebtopNaming',\n  'com.iplanet.sso.providers.dpro.SSOProviderImpl',\n  'com.sun.identity.authentication.AuthContext',\n  'com.sun.identity.authentication.client.AuthClientUtils',\n  'com.sun.identity.authentication.config.AMAuthConfigType',\n  'com.sun.identity.authentication.config.AMAuthenticationManager',\n  'com.sun.identity.authentication.config.AMAuthLevelManager',\n  'com.sun.identity.authentication.config.AMConfiguration',\n  'com.sun.identity.authentication.jaas.LoginContext',\n  'com.sun.identity.authentication.modules.application.Application',\n  'com.sun.identity.authentication.server.AuthContextLocal',\n  'com.sun.identity.authentication.service.AMLoginContext',\n  'com.sun.identity.authentication.service.AuthContextLookup',\n  'com.sun.identity.authentication.service.AuthD',\n  'com.sun.identity.authentication.service.AuthUtils',\n  'com.sun.identity.authentication.service.DSAMECallbackHandler',\n  'com.sun.identity.authentication.service.LoginState',\n  'com.sun.identity.authentication.spi.AMLoginModule',\n  'com.sun.identity.delegation.DelegationEvaluatorImpl',\n  'com.sun.identity.idm.plugins.internal.AgentsRepo',\n  'com.sun.identity.idm.server.IdCachedServicesImpl',\n  'com.sun.identity.idm.server.IdRepoPluginsCache',\n  'com.sun.identity.idm.server.IdServicesImpl',\n  'com.sun.identity.log.spi.ISDebug',\n  'com.sun.identity.shared.encode.CookieUtils',\n  'com.sun.identity.sm.ldap.SMSLdapObject',\n  'com.sun.identity.sm.CachedSMSEntry',\n  'com.sun.identity.sm.CachedSubEntries',\n  'com.sun.identity.sm.DNMapper',\n  'com.sun.identity.sm.ServiceConfigImpl',\n  'com.sun.identity.sm.ServiceConfigManagerImpl',\n  'com.sun.identity.sm.SMSEntry',\n  'com.sun.identity.sm.SMSUtils',\n  'com.sun.identity.sm.SmsWrapperObject',\n  'oauth2',\n  'org.apache.http.client.protocol.RequestAuthCache',\n  'org.apache.http.impl.conn.PoolingHttpClientConnectionManager',\n  'org.apache.http.impl.nio.client.InternalHttpAsyncClient',\n  'org.apache.http.impl.nio.client.InternalIODispatch',\n  'org.apache.http.impl.nio.client.MainClientExec',\n  'org.apache.http.impl.nio.conn.ManagedNHttpClientConnectionImpl',\n  'org.apache.http.impl.nio.conn.PoolingNHttpClientConnectionManager',\n  'org.forgerock.audit.AuditServiceImpl',\n  'org.forgerock.oauth2.core.RealmOAuth2ProviderSettings',\n  'org.forgerock.openam.authentication.service.JAASModuleDetector',\n  'org.forgerock.openam.authentication.service.LoginContextFactory',\n  'org.forgerock.openam.blacklist.BloomFilterBlacklist',\n  'org.forgerock.openam.blacklist.CTSBlacklist',\n  'org.forgerock.openam.core.realms.impl.CachingRealmLookup',\n  'org.forgerock.openam.core.rest.authn.RestAuthCallbackHandlerManager',\n  'org.forgerock.openam.core.rest.authn.trees.AuthTrees',\n  'org.forgerock.openam.cors.CorsFilter',\n  'org.forgerock.openam.cts.CTSPersistentStoreImpl',\n  'org.forgerock.openam.cts.impl.CoreTokenAdapter',\n  'org.forgerock.openam.cts.impl.queue.AsyncResultHandler',\n  'org.forgerock.openam.cts.reaper.ReaperDeleteOnQueryResultHandler',\n  'org.forgerock.openam.headers.DisableSameSiteCookiesFilter',\n  'org.forgerock.openam.idrepo.ldap.DJLDAPv3Repo',\n  'org.forgerock.openam.rest.CsrfFilter',\n  'org.forgerock.openam.rest.restAuthenticationFilter',\n  'org.forgerock.openam.rest.fluent.CrestLoggingFilter',\n  'org.forgerock.openam.session.cts.CtsOperations',\n  'org.forgerock.openam.session.stateless.StatelessSessionManager',\n  'org.forgerock.openam.sm.datalayer.impl.ldap.ExternalLdapConfig',\n  'org.forgerock.openam.sm.datalayer.impl.ldap.LdapQueryBuilder',\n  'org.forgerock.openam.sm.datalayer.impl.SeriesTaskExecutor',\n  'org.forgerock.openam.sm.datalayer.impl.SeriesTaskExecutorThread',\n  'org.forgerock.openam.sm.datalayer.providers.LdapConnectionFactoryProvider',\n  'org.forgerock.openam.sm.file.ConfigFileSystemHandler',\n  'org.forgerock.openam.social.idp.SocialIdentityProviders',\n  'org.forgerock.openam.utils.ClientUtils',\n  'org.forgerock.opendj.ldap.CachedConnectionPool',\n  'org.forgerock.opendj.ldap.LoadBalancer',\n  'org.forgerock.secrets.keystore.KeyStoreSecretStore',\n  'org.forgerock.secrets.propertyresolver.PropertyResolverSecretStore',\n  'org.forgerock.secrets.SecretsProvider',\n];\n\nconst journeysNoise = [\n  'org.forgerock.openam.auth.trees.engine.AuthTreeExecutor',\n];\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst journeys = [\n  'org.forgerock.openam.auth.nodes.SelectIdPNode',\n  'org.forgerock.openam.auth.nodes.ValidatedPasswordNode',\n  'org.forgerock.openam.auth.nodes.ValidatedUsernameNode',\n  'org.forgerock.openam.auth.trees.engine.AuthTreeExecutor',\n];\n\nconst samlNoise = [\n  'com.sun.identity.cot.COTCache',\n  'com.sun.identity.plugin.configuration.impl.ConfigurationInstanceImpl',\n  'com.sun.identity.saml2.meta.SAML2MetaCache',\n  'com.sun.identity.saml2.profile.CacheCleanUpRunnable',\n  'org.apache.xml.security.keys.KeyInfo',\n  'org.apache.xml.security.signature.XMLSignature',\n  'org.apache.xml.security.utils.SignerOutputStream',\n  'org.apache.xml.security.utils.resolver.ResourceResolver',\n  'org.apache.xml.security.utils.resolver.implementations.ResolverFragment',\n  'org.apache.xml.security.algorithms.JCEMapper',\n  'org.apache.xml.security.algorithms.implementations.SignatureBaseRSA',\n  'org.apache.xml.security.algorithms.SignatureAlgorithm',\n  'org.apache.xml.security.utils.ElementProxy',\n  'org.apache.xml.security.transforms.Transforms',\n  'org.apache.xml.security.utils.DigesterOutputStream',\n  'org.apache.xml.security.signature.Reference',\n  'org.apache.xml.security.signature.Manifest',\n];\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst saml = [\n  'jsp.saml2.spAssertionConsumer',\n  'com.sun.identity.saml.common.SAMLUtils',\n  'com.sun.identity.saml2.common.SAML2Utils',\n  'com.sun.identity.saml2.meta.SAML2MetaManager',\n  'com.sun.identity.saml2.xmlsig.FMSigProvider',\n];\n\nconst noise = miscNoise.concat(samlNoise).concat(journeysNoise);\n\nconst numLogLevelMap = {\n  0: ['SEVERE', 'ERROR', 'FATAL'],\n  1: ['WARNING', 'WARN', 'CONFIG'],\n  2: ['INFO', 'INFORMATION'],\n  3: ['DEBUG', 'FINE', 'FINER', 'FINEST'],\n  4: ['ALL'],\n};\n\nconst logLevelMap = {\n  SEVERE: ['SEVERE', 'ERROR', 'FATAL'],\n  ERROR: ['SEVERE', 'ERROR', 'FATAL'],\n  FATAL: ['SEVERE', 'ERROR', 'FATAL'],\n  WARN: ['SEVERE', 'ERROR', 'FATAL', 'WARNING', 'WARN', 'CONFIG'],\n  WARNING: ['SEVERE', 'ERROR', 'FATAL', 'WARNING', 'WARN', 'CONFIG'],\n  CONFIG: ['SEVERE', 'ERROR', 'FATAL', 'WARNING', 'WARN', 'CONFIG'],\n  INFO: [\n    'SEVERE',\n    'ERROR',\n    'FATAL',\n    'WARNING',\n    'WARN',\n    'CONFIG',\n    'INFO',\n    'INFORMATION',\n  ],\n  INFORMATION: [\n    'SEVERE',\n    'ERROR',\n    'FATAL',\n    'WARNING',\n    'WARN',\n    'CONFIG',\n    'INFO',\n    'INFORMATION',\n  ],\n  DEBUG: [\n    'SEVERE',\n    'ERROR',\n    'FATAL',\n    'WARNING',\n    'WARN',\n    'CONFIG',\n    'INFO',\n    'INFORMATION',\n    'DEBUG',\n    'FINE',\n    'FINER',\n    'FINEST',\n  ],\n  FINE: [\n    'SEVERE',\n    'ERROR',\n    'FATAL',\n    'WARNING',\n    'WARN',\n    'CONFIG',\n    'INFO',\n    'INFORMATION',\n    'DEBUG',\n    'FINE',\n    'FINER',\n    'FINEST',\n  ],\n  FINER: [\n    'SEVERE',\n    'ERROR',\n    'FATAL',\n    'WARNING',\n    'WARN',\n    'CONFIG',\n    'INFO',\n    'INFORMATION',\n    'DEBUG',\n    'FINE',\n    'FINER',\n    'FINEST',\n  ],\n  FINEST: [\n    'SEVERE',\n    'ERROR',\n    'FATAL',\n    'WARNING',\n    'WARN',\n    'CONFIG',\n    'INFO',\n    'INFORMATION',\n    'DEBUG',\n    'FINE',\n    'FINER',\n    'FINEST',\n  ],\n  ALL: ['ALL'],\n};\n\n/**\n * Get default noise filter\n * @returns {string[]} array of default event types and loggers to be filtered out\n */\nexport function getDefaultNoiseFilter(): string[] {\n  return noise;\n}\n\n/**\n * Resolve log level to an array of effective log levels\n * @param level string or numeric log level: 'FATAL', 'ERROR', 'WARN', 'INFO', 'DEBUG', 'TRACE', 'ALL', 0, 1, 2, 3, 4\n * @returns {string[]} array of effective log levels\n */\nexport function resolveLevel(level: string | number): string[] {\n  if (Number.isNaN(parseInt(level as string, 10))) {\n    return logLevelMap[level];\n  }\n  return logLevelMap[numLogLevelMap[level as number][0]];\n}\n\n/**\n * Resolve a log event's level\n * @param {object} log log event\n * @returns {string} log level\n */\nexport function resolvePayloadLevel(log: LogEventSkeleton): string {\n  // It seems that the undesirable 'text/plain' logs start with a date, not a LEVEL\n  // Therefore, for those, this function returns null, and thus filters out the undesirable\n  try {\n    return log.type !== 'text/plain'\n      ? (log.payload as LogEventPayloadSkeleton).level\n      : (log.payload as string).match(/^([^:]*):/)[1];\n  } catch (e) {\n    // Fail-safe for no group match\n    return null;\n  }\n}\n\n/**\n * Get available log sources\n * @returns {Promise<string[]>} promise resolving to an array of available log sources\n */\nexport async function getLogSources({ state }: { state: State }) {\n  try {\n    const { result } = await _getSources({ state });\n    return result;\n  } catch (error) {\n    throw new FrodoError(`Error getting log sources`, error);\n  }\n}\n\n/**\n * Get log API key\n * @returns {Promise<PagedResult<LogApiKey>>} a promise resolving to a log api key object\n */\nexport async function getLogApiKey({\n  keyId,\n  state,\n}: {\n  keyId: string;\n  state: State;\n}): Promise<LogApiKey> {\n  try {\n    return _getLogApiKey({ keyId, state });\n  } catch (error) {\n    throw new FrodoError(`Error getting log api key ${keyId}`, error);\n  }\n}\n\n/**\n * Validate log API key\n * @param {string} keyId log api key id\n * @param {string} secret log api secret\n * @returns {Promise<boolean>} a promise resolving to true if the key is valid, false otherwise\n */\nexport async function isLogApiKeyValid({\n  keyId,\n  secret,\n  state,\n}: {\n  keyId: string;\n  secret: string;\n  state: State;\n}): Promise<boolean> {\n  try {\n    return _isLogApiKeyValid({ keyId, secret, state });\n  } catch (error) {\n    throw new FrodoError(`Error validating log api key ${keyId}`, error);\n  }\n}\n\n/**\n * Get log api keys\n * @returns {Promise<LogApiKey[]>} promise resolving to an array of LogApiKey objects\n */\nexport async function getLogApiKeys({\n  state,\n}: {\n  state: State;\n}): Promise<LogApiKey[]> {\n  try {\n    const { result } = await _getLogApiKeys({ state });\n    return result;\n  } catch (error) {\n    throw new FrodoError(`Error getting log api keys`, error);\n  }\n}\n\n/**\n * Create API key\n * @param {keyName: string, state: State} params keyName, state\n * @returns {Promise<LogApiKey>} new API key and secret\n */\nexport async function createLogApiKey({\n  keyName,\n  state,\n}: {\n  keyName: string;\n  state: State;\n}): Promise<LogApiKey> {\n  try {\n    return _createLogApiKey({ keyName, state });\n  } catch (error) {\n    throw new FrodoError(`Error creating log api key ${keyName}`, error);\n  }\n}\n\n/**\n * Delete key\n */\nexport async function deleteLogApiKey({\n  keyId,\n  state,\n}: {\n  keyId: string;\n  state: State;\n}): Promise<LogApiKey> {\n  try {\n    const key = await getLogApiKey({ keyId, state });\n    await _deleteLogApiKey({ keyId, state });\n    return key;\n  } catch (error) {\n    throw new FrodoError(`Error deleting log api key ${keyId}`, error);\n  }\n}\n\n/**\n * Delete all keys\n */\nexport async function deleteLogApiKeys({\n  state,\n}: {\n  state: State;\n}): Promise<LogApiKey[]> {\n  const responses = [];\n  const errors = [];\n  try {\n    const keys = await getLogApiKeys({ state });\n    for (const key of keys) {\n      try {\n        await deleteLogApiKey({\n          keyId: key.api_key_id,\n          state,\n        });\n        responses.push(key);\n      } catch (error) {\n        errors.push(error);\n      }\n    }\n  } catch (error) {\n    errors.push(error);\n  }\n  if (errors.length) {\n    throw new FrodoError(`Error deleting log api keys`, errors);\n  }\n  return responses;\n}\n\n/**\n * Tail logs\n * @param {string} source log source(s) to tail\n * @param {string} cookie paged results cookie\n * @returns {Promise<PagedResult<LogEventSkeleton>>} promise resolving to paged log event result\n */\nexport async function tail({\n  source,\n  cookie,\n  state,\n}: {\n  source: string;\n  cookie: string;\n  state: State;\n}): Promise<PagedResult<LogEventSkeleton>> {\n  try {\n    return _tail({ source, cookie, state });\n  } catch (error) {\n    throw new FrodoError(`Error tailing logs`, error);\n  }\n}\n\n/**\n * Fetch logs\n * @param {string} source log source(s) to tail\n * @param {string} startTs start timestamp\n * @param {string} endTs end timestamp\n * @param {string} cookie paged results cookie\n * @returns {Promise<PagedResult<LogEventSkeleton>>} promise resolving to paged log event result\n */\nexport async function fetch({\n  source,\n  startTs,\n  endTs,\n  cookie,\n  state,\n}: {\n  source: string;\n  startTs: string;\n  endTs: string;\n  cookie: string;\n  state: State;\n}): Promise<PagedResult<LogEventSkeleton>> {\n  try {\n    return _fetch({ source, startTs, endTs, cookie, state });\n  } catch (error) {\n    throw new FrodoError(`Error fetching logs`, error);\n  }\n}\n","import {\n  createNewVersionOfSecret as _createNewVersionOfSecret,\n  deleteSecret as _deleteSecret,\n  deleteVersionOfSecret as _deleteVersionOfSecret,\n  getSecret as _getSecret,\n  getSecrets as _getSecrets,\n  getSecretVersions as _getSecretVersions,\n  getVersionOfSecret as _getVersionOfSecret,\n  putSecret as _putSecret,\n  SecretSkeleton,\n  setSecretDescription as _setSecretDescription,\n  setStatusOfVersionOfSecret as _setStatusOfVersionOfSecret,\n  VersionOfSecretSkeleton,\n  VersionOfSecretStatus,\n} from '../../api/cloud/SecretsApi';\nimport { State } from '../../shared/State';\nimport { decode, encode, isBase64Encoded } from '../../utils/Base64Utils';\nimport {\n  createProgressIndicator,\n  debugMessage,\n  stopProgressIndicator,\n  updateProgressIndicator,\n} from '../../utils/Console';\nimport { getMetadata } from '../../utils/ExportImportUtils';\nimport { FrodoError } from '../FrodoError';\nimport { ExportMetaData } from '../OpsTypes';\n\nexport type Secret = {\n  /**\n   * Read all secrets\n   * @returns {Promise<SecretSkeleton[]>} a promise that resolves to an array of secrets\n   */\n  readSecrets(): Promise<SecretSkeleton[]>;\n  /**\n   * Read secret\n   * @param secretId secret id/name\n   * @returns {Promise<SecretSkeleton>} a promise that resolves to a secret\n   */\n  readSecret(secretId: string): Promise<SecretSkeleton>;\n  /**\n   * Export secret. The response can be saved to file as is.\n   * @param secretId secret id/name\n   * @returns {Promise<SecretsExportInterface>} Promise resolving to a SecretsExportInterface object.\n   */\n  exportSecret(secretId): Promise<SecretsExportInterface>;\n  /**\n   * Export all secrets\n   * @returns {Promise<SecretsExportInterface>} Promise resolving to an SecretsExportInterface object.\n   */\n  exportSecrets(): Promise<SecretsExportInterface>;\n  /**\n   * Create secret\n   * @param {string} secretId secret id/name\n   * @param {string} value secret value\n   * @param {string} description secret description\n   * @param {string} encoding secret encoding (only `generic` is supported)\n   * @param {boolean} useInPlaceholders flag indicating if the secret can be used in placeholders\n   * @returns {Promise<SecretSkeleton>} a promise that resolves to a secret\n   */\n  createSecret(\n    secretId: string,\n    value: string,\n    description: string,\n    encoding?: string,\n    useInPlaceholders?: boolean\n  ): Promise<SecretSkeleton>;\n  /**\n   * Update secret description\n   * @param {string} secretId secret id/name\n   * @param {string} description secret description\n   * @returns {Promise<any>} a promise that resolves to an empty string\n   */\n  updateSecretDescription(secretId: string, description: string): Promise<any>;\n  /**\n   * Delete secret\n   * @param {string} secretId secret id/name\n   * @returns {Promise<SecretSkeleton>} a promise that resolves to a secret object\n   */\n  deleteSecret(secretId: string): Promise<SecretSkeleton>;\n  /**\n   * Read versions of secret\n   * @param {string} secretId secret id/name\n   * @returns {Promise<VersionOfSecretSkeleton[]>} a promise that resolves to an array of secret versions\n   */\n  readVersionsOfSecret(secretId: string): Promise<VersionOfSecretSkeleton[]>;\n  /**\n   * Create version of secret\n   * @param {string} secretId secret id/name\n   * @param {string} value secret value\n   * @returns {Promise<VersionOfSecretSkeleton>} a promise that resolves to a version object\n   */\n  createVersionOfSecret(\n    secretId: string,\n    value: string\n  ): Promise<VersionOfSecretSkeleton>;\n  /**\n   * Read version of secret\n   * @param {string} secretId secret id/name\n   * @param {string} version secret version\n   * @returns {Promise<VersionOfSecretSkeleton>} a promise that resolves to a version object\n   */\n  readVersionOfSecret(\n    secretId: string,\n    version: string\n  ): Promise<VersionOfSecretSkeleton>;\n  /**\n   * Enable a version of a secret\n   * @param {string} secretId secret id/name\n   * @param {string} version secret version\n   * @returns {Promise<VersionOfSecretSkeleton>} a promise that resolves to a status object\n   */\n  enableVersionOfSecret(\n    secretId: string,\n    version: string\n  ): Promise<VersionOfSecretSkeleton>;\n  /**\n   * Disable a version of a secret\n   * @param {string} secretId secret id/name\n   * @param {string} version secret version\n   * @returns {Promise<VersionOfSecretSkeleton>} a promise that resolves to a status object\n   */\n  disableVersionOfSecret(\n    secretId: string,\n    version: string\n  ): Promise<VersionOfSecretSkeleton>;\n  /**\n   * Delete version of secret\n   * @param {string} secretId secret id/name\n   * @param {string} version secret version\n   * @returns {Promise<VersionOfSecretSkeleton>} a promise that resolves to a version object\n   */\n  deleteVersionOfSecret(\n    secretId: string,\n    version: string\n  ): Promise<VersionOfSecretSkeleton>;\n\n  // Deprecated\n\n  /**\n   * Get all secrets\n   * @returns {Promise<any[]>} a promise that resolves to an array of secrets\n   * @deprecated since v2.0.0 use {@link Secret.readSecrets | readSecrets} instead\n   * ```javascript\n   * readSecrets(): Promise<SecretSkeleton[]>\n   * ```\n   * @group Deprecated\n   */\n  getSecrets(): Promise<SecretSkeleton[]>;\n  /**\n   * Get secret\n   * @param secretId secret id/name\n   * @returns {Promise<SecretSkeleton>} a promise that resolves to a secret\n   * @deprecated since v2.0.0 use {@link Secret.readSecret | readSecret} instead\n   * ```javascript\n   * readSecret(secretId: string): Promise<any>\n   * ```\n   * @group Deprecated\n   */\n  getSecret(secretId: string): Promise<SecretSkeleton>;\n  /**\n   * Create secret\n   * @param {string} secretId secret id/name\n   * @param {string} value secret value\n   * @param {string} description secret description\n   * @param {string} encoding secret encoding (only `generic` is supported)\n   * @param {boolean} useInPlaceholders flag indicating if the secret can be used in placeholders\n   * @returns {Promise<SecretSkeleton>} a promise that resolves to a secret\n   * @deprecated since v2.0.0 use {@link Secret.createSecret | createSecret} instead\n   * ```javascript\n   * createSecret(secretId: string, value: string, description: string, encoding?: string, useInPlaceholders?: boolean): Promise<any>\n   * ```\n   * @group Deprecated\n   */\n  putSecret(\n    secretId: string,\n    value: string,\n    description: string,\n    encoding?: string,\n    useInPlaceholders?: boolean\n  ): Promise<SecretSkeleton>;\n  /**\n   * Set secret description\n   * @param {string} secretId secret id/name\n   * @param {string} description secret description\n   * @returns {Promise<any>} a promise that resolves to an empty string\n   * @deprecated since v2.0.0 use {@link Secret.updateSecretDescription | updateSecretDescription} instead\n   * ```javascript\n   * updateSecretDescription(secretId: string, description: string): Promise<any>\n   * ```\n   * @group Deprecated\n   */\n  setSecretDescription(secretId: string, description: string): Promise<any>;\n  /**\n   * Get secret versions\n   * @param {string} secretId secret id/name\n   * @returns {Promise<VersionOfSecretSkeleton[]>} a promise that resolves to an array of secret versions\n   * @deprecated since v2.0.0 use {@link Secret.readVersionsOfSecret | readVersionsOfSecret} instead\n   * ```javascript\n   * readVersionsOfSecret(secretId: string): Promise<any>\n   * ```\n   * @group Deprecated\n   */\n  getSecretVersions(secretId: string): Promise<VersionOfSecretSkeleton[]>;\n  /**\n   * Create new secret version\n   * @param {string} secretId secret id/name\n   * @param {string} value secret value\n   * @returns {Promise<VersionOfSecretSkeleton>} a promise that resolves to a version object\n   * @deprecated since v2.0.0 use {@link Secret.createVersionOfSecret | createVersionOfSecret} instead\n   * ```javascript\n   * createVersionOfSecret(secretId: string, value: string): Promise<any>\n   * ```\n   * @group Deprecated\n   */\n  createNewVersionOfSecret(\n    secretId: string,\n    value: string\n  ): Promise<VersionOfSecretSkeleton>;\n  /**\n   * Get version of secret\n   * @param {string} secretId secret id/name\n   * @param {string} version secret version\n   * @returns {Promise<VersionOfSecretSkeleton>} a promise that resolves to a version object\n   * @deprecated since v2.0.0 use {@link Secret.readVersionOfSecret | readVersionOfSecret} instead\n   * ```javascript\n   * readVersionOfSecret(secretId: string, version: string): Promise<any>\n   * ```\n   * @group Deprecated\n   */\n  getVersionOfSecret(\n    secretId: string,\n    version: string\n  ): Promise<VersionOfSecretSkeleton>;\n  /**\n   * Update the status of a version of a secret\n   * @param {string} secretId secret id/name\n   * @param {string} version secret version\n   * @param {VersionOfSecretStatus} status status\n   * @returns {Promise<VersionOfSecretSkeleton>} a promise that resolves to a status object\n   * @deprecated since v2.0.0 use {@link Secret.enableVersionOfSecret | enableVersionOfSecret} or {@link Secret.disableVersionOfSecret | disableVersionOfSecret} instead\n   * ```javascript\n   * enableVersionOfSecret(secretId: string, version: string): Promise<any>\n   * disableVersionOfSecret(secretId: string, version: string): Promise<any>\n   * ```\n   * @group Deprecated\n   */\n  setStatusOfVersionOfSecret(\n    secretId: string,\n    version: string,\n    status: VersionOfSecretStatus\n  ): Promise<VersionOfSecretSkeleton>;\n};\n\nexport default (state: State): Secret => {\n  return {\n    async readSecrets() {\n      return readSecrets({ state });\n    },\n    async readSecret(secretId: string) {\n      return readSecret({ secretId, state });\n    },\n    async exportSecret(secretId: string): Promise<SecretsExportInterface> {\n      return exportSecret({ secretId, state });\n    },\n    async exportSecrets(): Promise<SecretsExportInterface> {\n      return exportSecrets({ state });\n    },\n    async createSecret(\n      secretId: string,\n      value: string,\n      description: string,\n      encoding = 'generic',\n      useInPlaceholders = true\n    ) {\n      return createSecret({\n        secretId,\n        value,\n        description,\n        encoding,\n        useInPlaceholders,\n        state,\n      });\n    },\n    async updateSecretDescription(secretId: string, description: string) {\n      return _setSecretDescription({ secretId, description, state });\n    },\n    async deleteSecret(secretId: string) {\n      return _deleteSecret({ secretId, state });\n    },\n    async readVersionsOfSecret(secretId: string) {\n      return _getSecretVersions({ secretId, state });\n    },\n    async createVersionOfSecret(secretId: string, value: string) {\n      return createVersionOfSecret({ secretId, value, state });\n    },\n    async readVersionOfSecret(secretId: string, version: string) {\n      return _getVersionOfSecret({ secretId, version, state });\n    },\n    async enableVersionOfSecret(secretId: string, version: string) {\n      return enableVersionOfSecret({\n        secretId,\n        version,\n        state,\n      });\n    },\n    async disableVersionOfSecret(secretId: string, version: string) {\n      return disableVersionOfSecret({\n        secretId,\n        version,\n        state,\n      });\n    },\n    async deleteVersionOfSecret(secretId: string, version: string) {\n      return _deleteVersionOfSecret({ secretId, version, state });\n    },\n\n    // Deprecated\n\n    async getSecrets() {\n      return readSecrets({ state });\n    },\n    async getSecret(secretId: string) {\n      return _getSecret({ secretId, state });\n    },\n    async putSecret(\n      secretId: string,\n      value: string,\n      description: string,\n      encoding = 'generic',\n      useInPlaceholders = true\n    ) {\n      return _putSecret({\n        secretId,\n        value: getEncodedValue(value, encoding, state),\n        description,\n        encoding,\n        useInPlaceholders,\n        state,\n      });\n    },\n    async setSecretDescription(secretId: string, description: string) {\n      return _setSecretDescription({ secretId, description, state });\n    },\n    async getSecretVersions(secretId: string) {\n      return _getSecretVersions({ secretId, state });\n    },\n    async createNewVersionOfSecret(secretId: string, value: string) {\n      return _createNewVersionOfSecret({ secretId, value, state });\n    },\n    async getVersionOfSecret(secretId: string, version: string) {\n      return _getVersionOfSecret({ secretId, version, state });\n    },\n    async setStatusOfVersionOfSecret(\n      secretId: string,\n      version: string,\n      status: VersionOfSecretStatus\n    ) {\n      return _setStatusOfVersionOfSecret({\n        secretId,\n        version,\n        status,\n        state,\n      });\n    },\n  };\n};\n\nexport interface SecretsExportInterface {\n  meta?: ExportMetaData;\n  secrets: Record<string, SecretSkeleton>;\n}\n\nfunction getEncodedValue(\n  value: string,\n  encoding: string,\n  state: State\n): string {\n  let finalValue: string = '';\n  debugMessage({ message: `SecretsOps.getEncodedValue: start`, state });\n  if (encoding === 'pem') {\n    if (isBase64Encoded(value)) {\n      finalValue = value; // this means the PEM is already b64 encoded\n    } else {\n      finalValue = encode(value); // the PEM is unencoded, we need to encode\n    }\n  } else if (encoding === 'base64hmac') {\n    if (isBase64Encoded(decode(value))) {\n      finalValue = value; // the value is already doubly b64 encoded key\n    } else {\n      finalValue = encode(value); // value is b64 encoded key, need to encode before creating secret\n    }\n  } else {\n    finalValue = encode(value);\n  }\n  debugMessage({\n    message: `SecretsOps.getEncodedValue: finalValue: ${finalValue}`,\n    state,\n  });\n  return finalValue;\n}\n\nexport function createSecretsExportTemplate({\n  state,\n}: {\n  state: State;\n}): SecretsExportInterface {\n  return {\n    meta: getMetadata({ state }),\n    secrets: {},\n  } as SecretsExportInterface;\n}\n\nexport async function exportSecret({\n  secretId,\n  state,\n}: {\n  secretId: string;\n  state: State;\n}): Promise<SecretsExportInterface> {\n  try {\n    debugMessage({ message: `SecretsOps.exportSecret: start`, state });\n    const exportData = createSecretsExportTemplate({ state });\n    const secret = await _getSecret({ secretId, state });\n    exportData.secrets[secret._id] = secret;\n    debugMessage({ message: `VariablesOps.exportSecret: end`, state });\n    return exportData;\n  } catch (error) {\n    throw new FrodoError(`Error exporting secret ${secretId}`, error);\n  }\n}\n\nexport async function exportSecrets({\n  state,\n}: {\n  state: State;\n}): Promise<SecretsExportInterface> {\n  let indicatorId: string;\n  try {\n    debugMessage({ message: `SecretsOps.exportSecrets: start`, state });\n    const exportData = createSecretsExportTemplate({ state });\n    const secrets = await readSecrets({ state });\n    indicatorId = createProgressIndicator({\n      total: secrets.length,\n      message: 'Exporting secrets...',\n      state,\n    });\n    for (const secret of secrets) {\n      updateProgressIndicator({\n        id: indicatorId,\n        message: `Exporting secret ${secret._id}`,\n        state,\n      });\n      exportData.secrets[secret._id] = secret;\n    }\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Exported ${secrets.length} secrets.`,\n      state,\n    });\n    debugMessage({ message: `SecretsOps.exportSecrets: end`, state });\n    return exportData;\n  } catch (error) {\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Error exporting secrets`,\n      status: 'fail',\n      state,\n    });\n    throw new FrodoError(`Error exporting secrets`, error);\n  }\n}\n\nexport async function enableVersionOfSecret({\n  secretId,\n  version,\n  state,\n}: {\n  secretId: string;\n  version: string;\n  state: State;\n}) {\n  try {\n    return _setStatusOfVersionOfSecret({\n      secretId,\n      version,\n      status: 'ENABLED',\n      state,\n    });\n  } catch (error) {\n    throw new FrodoError(\n      `Error enabling version ${version} of secret ${secretId}`,\n      error\n    );\n  }\n}\n\nexport async function disableVersionOfSecret({\n  secretId,\n  version,\n  state,\n}: {\n  secretId: string;\n  version: string;\n  state: State;\n}) {\n  try {\n    return _setStatusOfVersionOfSecret({\n      secretId,\n      version,\n      status: 'DISABLED',\n      state,\n    });\n  } catch (error) {\n    throw new FrodoError(\n      `Error disabling version ${version} of secret ${secretId}`,\n      error\n    );\n  }\n}\n\nexport async function readSecret({\n  secretId,\n  state,\n}: {\n  secretId: string;\n  state: State;\n}): Promise<SecretSkeleton> {\n  try {\n    return await _getSecret({ secretId, state });\n  } catch (error) {\n    throw new FrodoError(`Error reading secret ${secretId}`, error);\n  }\n}\n\nexport async function readSecrets({\n  state,\n}: {\n  state: State;\n}): Promise<SecretSkeleton[]> {\n  try {\n    const { result } = await _getSecrets({ state });\n    return result;\n  } catch (error) {\n    throw new FrodoError(`Error reading secrets`, error);\n  }\n}\n\nexport async function createSecret({\n  secretId,\n  value,\n  description,\n  encoding = 'generic',\n  useInPlaceholders = true,\n  state,\n}: {\n  secretId: string;\n  value: string;\n  description: string;\n  encoding: string;\n  useInPlaceholders: boolean;\n  state: State;\n}) {\n  try {\n    return _putSecret({\n      secretId,\n      value: getEncodedValue(value, encoding, state),\n      description,\n      encoding,\n      useInPlaceholders,\n      state,\n    });\n  } catch (error) {\n    throw new FrodoError(`Error creating secret ${secretId}`, error);\n  }\n}\n\nexport async function createVersionOfSecret({\n  secretId,\n  value,\n  state,\n}: {\n  secretId: string;\n  value: string;\n  state: State;\n}) {\n  try {\n    // first get the secret encoding\n    let secret: SecretSkeleton = null;\n    secret = await readSecret({ secretId, state });\n    // now create the new version (using encoding to calculate the correctly encoded value)\n    return _createNewVersionOfSecret({\n      secretId,\n      value: getEncodedValue(value, secret.encoding, state),\n      state,\n    });\n  } catch (error) {\n    throw new FrodoError(\n      `Error creating new version of secret ${secretId}`,\n      error\n    );\n  }\n}\n\nexport async function deleteSecret({\n  secretId,\n  state,\n}: {\n  secretId: string;\n  state: State;\n}) {\n  try {\n    return _deleteSecret({ secretId, state });\n  } catch (error) {\n    throw new FrodoError(`Error deleting secret ${secretId}`, error);\n  }\n}\n\nexport async function readVersionOfSecret({\n  secretId,\n  version,\n  state,\n}: {\n  secretId: string;\n  version: string;\n  state: State;\n}) {\n  try {\n    return _getVersionOfSecret({ secretId, version, state });\n  } catch (error) {\n    throw new FrodoError(\n      `Error deleting version ${version} of secret ${secretId}`,\n      error\n    );\n  }\n}\n\nexport async function readVersionsOfSecret({\n  secretId,\n  state,\n}: {\n  secretId: string;\n  state: State;\n}) {\n  try {\n    return _getSecretVersions({ secretId, state });\n  } catch (error) {\n    throw new FrodoError(`Error reading secret ${secretId}`, error);\n  }\n}\n\nexport async function updateSecretDescription({\n  secretId,\n  description,\n  state,\n}: {\n  secretId: string;\n  description: string;\n  state: State;\n}) {\n  try {\n    return _setSecretDescription({\n      secretId,\n      description,\n      state,\n    });\n  } catch (error) {\n    throw new FrodoError(\n      `Error updating description of secret ${secretId}`,\n      error\n    );\n  }\n}\n","import util from 'util';\n\nimport { State } from '../../shared/State';\nimport { getHostBaseUrl } from '../../utils/ForgeRockUtils';\nimport { generateEnvApi } from '../BaseApi';\n\nconst startupURLTemplate = '%s/environment/startup';\nconst startupInitiateRestartURLTemplate = `${startupURLTemplate}?_action=restart`;\n\nconst apiVersion = 'protocol=1.0,resource=1.0';\nconst getApiConfig = () => ({\n  path: `/environment/startup`,\n  apiVersion,\n});\n\nexport enum RestartStatus {\n  restarting = 'restarting',\n  ready = 'ready',\n}\n\n/**\n * Get status\n * @returns {Promise<RestartStatus>} a promise that resolves to a string indicating status\n */\nexport async function getStatus({\n  state,\n}: {\n  state: State;\n}): Promise<RestartStatus> {\n  const urlString = util.format(\n    startupURLTemplate,\n    getHostBaseUrl(state.getHost())\n  );\n  const { data } = await generateEnvApi({\n    resource: getApiConfig(),\n    state,\n  }).get(urlString, {\n    withCredentials: true,\n  });\n  return data.restartStatus;\n}\n\n/**\n * Initiate restart\n * @returns {Promise<string>} a promise that resolves to a string indicating status\n */\nexport async function initiateRestart({\n  state,\n}: {\n  state: State;\n}): Promise<RestartStatus> {\n  const restartStatus = await getStatus({ state });\n  if (restartStatus === RestartStatus.ready) {\n    const urlString = util.format(\n      startupInitiateRestartURLTemplate,\n      getHostBaseUrl(state.getHost())\n    );\n    const { data } = await generateEnvApi({\n      resource: getApiConfig(),\n      state,\n    }).post(urlString, null, {\n      withCredentials: true,\n    });\n    return data.restartStatus;\n  }\n  throw new Error(`Not ready! Current status: ${restartStatus}`);\n}\n","import util from 'util';\n\nimport { State } from '../../shared/State';\nimport { encode } from '../../utils/Base64Utils';\nimport { getHostBaseUrl } from '../../utils/ForgeRockUtils';\nimport { IdObjectSkeletonInterface, PagedResult } from '../ApiTypes';\nimport { generateEnvApi } from '../BaseApi';\n\nconst variablesListURLTemplate = '%s/environment/variables';\nconst variableURLTemplate = '%s/environment/variables/%s';\nconst variableSetDescriptionURLTemplate = `${variableURLTemplate}?_action=setDescription`;\n\nconst apiVersion = 'protocol=1.0,resource=1.0';\nconst getApiConfig = () => {\n  return {\n    apiVersion,\n  };\n};\n\n/**\n * Variable types\n *\n * @summary\n * You can use the expressionType parameter to set a type when you create an ESV variable.\n * This lets Identity Cloud correctly transform the value of the ESV\n * to match the configuration property type when substituting it into configuration.\n *\n * The type is set when the ESV is created, and cannot be modified after creation.\n * If you do not specify a type, it will default to string.\n *\n * Before the expressionType parameter was introduced, it was only possible to set types\n * from within configuration, using expression level syntax; for example,\n * {\"$int\": \"&{esv.journey.ldap.port|1389}\"}.\n * The expressionType parameter supplements this expression level syntax and allows the\n * ESV type to be identified without inspecting configuration.\n *\n * @see\n * {@link https://backstage.forgerock.com/docs/idcloud/latest/tenants/esvs.html#variable_types | ForgeRock Documentation}\n */\nexport type VariableExpressionType =\n  | 'array'\n  | 'base64encodedinlined'\n  | 'bool'\n  | 'int'\n  | 'keyvaluelist'\n  | 'list'\n  | 'number'\n  | 'object'\n  | 'string';\n\n/**\n * Variable object skeleton\n */\nexport type VariableSkeleton = IdObjectSkeletonInterface & {\n  valueBase64: string;\n  description?: string;\n  loaded?: boolean;\n  lastChangedBy?: string;\n  lastChangeDate?: string;\n  expressionType?: VariableExpressionType;\n};\n\n/**\n * Get all variables\n * @returns {Promise<PagedResult<VariableSkeleton>>} a promise that resolves to an array of variable objects\n */\nexport async function getVariables({\n  state,\n}: {\n  state: State;\n}): Promise<PagedResult<VariableSkeleton>> {\n  const urlString = util.format(\n    variablesListURLTemplate,\n    getHostBaseUrl(state.getHost())\n  );\n  const { data } = await generateEnvApi({\n    resource: getApiConfig(),\n    state,\n  }).get(urlString, {\n    withCredentials: true,\n  });\n  return data;\n}\n\n/**\n * Get variable by id/name\n * @param {string} variableId variable id/name\n * @returns {Promise<VariableSkeleton>} a promise that resolves to a variable object\n */\nexport async function getVariable({\n  variableId,\n  state,\n}: {\n  variableId: string;\n  state: State;\n}): Promise<VariableSkeleton> {\n  const urlString = util.format(\n    variableURLTemplate,\n    getHostBaseUrl(state.getHost()),\n    variableId\n  );\n  const { data } = await generateEnvApi({\n    resource: getApiConfig(),\n    state,\n  }).get(urlString, {\n    withCredentials: true,\n  });\n  return data;\n}\n\n/**\n * Create or update variable by id/name\n * @param {string} variableId variable id/name\n * @param {string} value variable value\n * @param {string} description variable description\n * @returns {Promise<unknown>} a promise that resolves to a variable object\n */\nexport async function putVariable({\n  variableId,\n  value,\n  description = '',\n  expressionType = 'string',\n  state,\n}: {\n  variableId: string;\n  value: string;\n  description?: string;\n  expressionType?: VariableExpressionType;\n  state: State;\n}): Promise<VariableSkeleton> {\n  const variableData: VariableSkeleton = {\n    valueBase64: encode(value),\n    description,\n    expressionType,\n  };\n  const urlString = util.format(\n    variableURLTemplate,\n    getHostBaseUrl(state.getHost()),\n    variableId\n  );\n  const { data } = await generateEnvApi({\n    resource: getApiConfig(),\n    state,\n  }).put(urlString, variableData, {\n    withCredentials: true,\n  });\n  return data;\n}\n\n/**\n * Set variable description\n * @param {string} variableId variable id/name\n * @param {string} description variable description\n * @returns {Promise<any>} a promise that resolves to an empty string.\n */\nexport async function setVariableDescription({\n  variableId,\n  description,\n  state,\n}: {\n  variableId: string;\n  description: string;\n  state: State;\n}): Promise<any> {\n  const urlString = util.format(\n    variableSetDescriptionURLTemplate,\n    getHostBaseUrl(state.getHost()),\n    variableId\n  );\n  const { data } = await generateEnvApi({\n    resource: getApiConfig(),\n    state,\n  }).post(urlString, { description }, { withCredentials: true });\n  return data;\n}\n\n/**\n * Delete variable by id/name\n * @param {string} variableId variable id/name\n * @returns {Promise<VariableSkeleton>} a promise that resolves to a variable object\n */\nexport async function deleteVariable({\n  variableId,\n  state,\n}: {\n  variableId: string;\n  state: State;\n}): Promise<VariableSkeleton> {\n  const urlString = util.format(\n    variableURLTemplate,\n    getHostBaseUrl(state.getHost()),\n    variableId\n  );\n  const { data } = await generateEnvApi({\n    resource: getApiConfig(),\n    state,\n  }).delete(urlString, {\n    withCredentials: true,\n  });\n  return data;\n}\n","import {\n  deleteVariable as _deleteVariable,\n  getVariable as _getVariable,\n  getVariables as _getVariables,\n  putVariable as _putVariable,\n  setVariableDescription as _setVariableDescription,\n  VariableExpressionType,\n  VariableSkeleton,\n} from '../../api/cloud/VariablesApi';\nimport { State } from '../../shared/State';\nimport { decode } from '../../utils/Base64Utils';\nimport {\n  createProgressIndicator,\n  debugMessage,\n  stopProgressIndicator,\n  updateProgressIndicator,\n} from '../../utils/Console';\nimport { getMetadata } from '../../utils/ExportImportUtils';\nimport { FrodoError } from '../FrodoError';\nimport { ExportMetaData } from '../OpsTypes';\n\nexport type Variable = {\n  /**\n   * Read variable by id/name\n   * @param {string} variableId variable id/name\n   * @returns {Promise<VariableSkeleton>} a promise that resolves to a variable object\n   */\n  readVariable(variableId: string): Promise<VariableSkeleton>;\n  /**\n   * Read all variables\n   * @returns {Promise<VariableSkeleton[]>} a promise that resolves to an array of variable objects\n   */\n  readVariables(): Promise<VariableSkeleton[]>;\n  /**\n   * Export variable. The response can be saved to file as is.\n   * @param variableId variable id/name\n   * @param noDecode Do not include decoded variable value in export\n   * @returns {Promise<VariablesExportInterface>} Promise resolving to a VariablesExportInterface object.\n   */\n  exportVariable(\n    variableId: string,\n    noDecode: boolean\n  ): Promise<VariablesExportInterface>;\n  /**\n   * Export all variables\n   * @param noDecode Do not include decoded variable value in export\n   * @returns {Promise<VariablesExportInterface>} Promise resolving to an VariablesExportInterface object.\n   */\n  exportVariables(noDecode: boolean): Promise<VariablesExportInterface>;\n  /**\n   * Create variable\n   * @param {string} variableId variable id/name\n   * @param {string} value variable value\n   * @param {string} description variable description\n   * @param {VariableExpressionType} expressionType type of the value\n   * @returns {Promise<VariableSkeleton>} a promise that resolves to a variable object\n   */\n  createVariable(\n    variableId: string,\n    value: string,\n    description: string,\n    expressionType?: VariableExpressionType\n  ): Promise<VariableSkeleton>;\n  /**\n   * Update or create variable\n   * @param {string} variableId variable id/name\n   * @param {string} value variable value\n   * @param {string} description variable description\n   * @param {VariableExpressionType} expressionType type of the value\n   * @returns {Promise<VariableSkeleton>} a promise that resolves to a variable object\n   */\n  updateVariable(\n    variableId: string,\n    value: string,\n    description: string,\n    expressionType?: VariableExpressionType\n  ): Promise<VariableSkeleton>;\n  /**\n   * Update variable description\n   * @param {string} variableId variable id/name\n   * @param {string} description variable description\n   * @returns {Promise<VariableSkeleton>} a promise that resolves to a status object\n   */\n  updateVariableDescription(\n    variableId: string,\n    description: string\n  ): Promise<VariableSkeleton>;\n  /**\n   * Delete variable by id/name\n   * @param {string} variableId variable id/name\n   * @returns {Promise<VariableSkeleton>} a promise that resolves to a variable object\n   */\n  deleteVariable(variableId: string): Promise<VariableSkeleton>;\n\n  // Deprecated\n\n  /**\n   * Get variable by id/name\n   * @param {string} variableId variable id/name\n   * @returns {Promise<VariableSkeleton>} a promise that resolves to a variable object\n   * @deprecated since v2.0.0 use {@link Variable.readVariable | readVariable} instead\n   * ```javascript\n   * readVariable(variableId: string): Promise<VariableSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  getVariable(variableId: string): Promise<VariableSkeleton>;\n  /**\n   * Get all variables\n   * @returns {Promise<VariableSkeleton[]>} a promise that resolves to an array of variable objects\n   * @deprecated since v2.0.0 use {@link Variable.readVariables | readVariables} instead\n   * ```javascript\n   * readVariables(): Promise<VariableSkeleton[]>\n   * ```\n   * @group Deprecated\n   */\n  getVariables(): Promise<VariableSkeleton[]>;\n  /**\n   * Create variable\n   * @param {string} variableId variable id/name\n   * @param {string} value variable value\n   * @param {string} description variable description\n   * @param {VariableExpressionType} expressionType type of the value\n   * @returns {Promise<VariableSkeleton>} a promise that resolves to a variable object\n   * @deprecated since v2.0.0 use {@link Variable.createVariable | createVariable} instead\n   * ```javascript\n   * createVariable(variableId: string, value: string, description: string, expressionType?: VariableExpressionType): Promise<VariableSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  putVariable(\n    variableId: string,\n    value: string,\n    description: string,\n    expressionType?: VariableExpressionType\n  ): Promise<VariableSkeleton>;\n  /**\n   * Set variable description\n   * @param {string} variableId variable id/name\n   * @param {string} description variable description\n   * @returns {Promise<any>} a promise that resolves to an empty string\n   * @deprecated since v2.0.0 use {@link Variable.updateVariableDescription | updateVariableDescription} instead\n   * ```javascript\n   * updateVariableDescription(variableId: string, description: string): Promise<any>\n   * ```\n   * @group Deprecated\n   */\n  setVariableDescription(variableId: string, description: string): Promise<any>;\n};\n\nexport default (state: State): Variable => {\n  return {\n    readVariable(variableId: string): Promise<VariableSkeleton> {\n      return readVariable({ variableId, state });\n    },\n    readVariables(): Promise<VariableSkeleton[]> {\n      return readVariables({ state });\n    },\n    async exportVariable(\n      variableId: string,\n      noDecode: boolean\n    ): Promise<VariablesExportInterface> {\n      return exportVariable({ variableId, noDecode, state });\n    },\n    exportVariables(noDecode: boolean): Promise<VariablesExportInterface> {\n      return exportVariables({ noDecode, state });\n    },\n    createVariable(\n      variableId: string,\n      value: string,\n      description: string,\n      expressionType: VariableExpressionType = 'string'\n    ): Promise<VariableSkeleton> {\n      return createVariable({\n        variableId,\n        value,\n        description,\n        expressionType,\n        state,\n      });\n    },\n    updateVariable(\n      variableId: string,\n      value: string,\n      description: string,\n      expressionType: VariableExpressionType = 'string'\n    ): Promise<VariableSkeleton> {\n      return updateVariable({\n        variableId,\n        value,\n        description,\n        expressionType,\n        state,\n      });\n    },\n    updateVariableDescription(\n      variableId: string,\n      description: string\n    ): Promise<any> {\n      return updateVariableDescription({\n        variableId,\n        description,\n        state,\n      });\n    },\n    deleteVariable(variableId: string): Promise<VariableSkeleton> {\n      return deleteVariable({ variableId, state });\n    },\n\n    // Deprecated\n\n    getVariable(variableId: string): Promise<VariableSkeleton> {\n      return readVariable({ variableId, state });\n    },\n    getVariables(): Promise<VariableSkeleton[]> {\n      return readVariables({ state });\n    },\n    putVariable(\n      variableId: string,\n      value: string,\n      description: string,\n      expressionType: VariableExpressionType = 'string'\n    ): Promise<VariableSkeleton> {\n      return updateVariable({\n        variableId,\n        value,\n        description,\n        expressionType,\n        state,\n      });\n    },\n    setVariableDescription(\n      variableId: string,\n      description: string\n    ): Promise<any> {\n      return updateVariableDescription({\n        variableId,\n        description,\n        state,\n      });\n    },\n  };\n};\n\nexport interface VariablesExportInterface {\n  meta?: ExportMetaData;\n  variables: Record<string, VariableSkeleton>;\n}\n\nexport function createVariablesExportTemplate({\n  state,\n}: {\n  state: State;\n}): VariablesExportInterface {\n  return {\n    meta: getMetadata({ state }),\n    variables: {},\n  } as VariablesExportInterface;\n}\n\nexport async function readVariable({\n  variableId,\n  state,\n}: {\n  variableId: string;\n  state: State;\n}): Promise<VariableSkeleton> {\n  try {\n    return _getVariable({ variableId, state });\n  } catch (error) {\n    throw new FrodoError(`Error reading variable ${variableId}`, error);\n  }\n}\n\nexport async function readVariables({\n  state,\n}: {\n  state: State;\n}): Promise<VariableSkeleton[]> {\n  try {\n    return (await _getVariables({ state })).result;\n  } catch (error) {\n    throw new FrodoError(`Error reading variables`, error);\n  }\n}\n\nexport async function exportVariable({\n  variableId,\n  noDecode,\n  state,\n}: {\n  variableId: string;\n  noDecode: boolean;\n  state: State;\n}): Promise<VariablesExportInterface> {\n  try {\n    debugMessage({ message: `VariablesOps.exportVariable: start`, state });\n    const exportData = createVariablesExportTemplate({ state });\n    const variable = await _getVariable({ variableId, state });\n    if (!noDecode) {\n      variable.value = decode(variable.valueBase64);\n    }\n    exportData.variables[variable._id] = variable;\n    debugMessage({ message: `VariablesOps.exportVariable: end`, state });\n    return exportData;\n  } catch (error) {\n    throw new FrodoError(`Error exporting variable ${variableId}`, error);\n  }\n}\n\nexport async function exportVariables({\n  noDecode,\n  state,\n}: {\n  noDecode: boolean;\n  state: State;\n}): Promise<VariablesExportInterface> {\n  try {\n    debugMessage({ message: `VariablesOps.exportVariables: start`, state });\n    const exportData = createVariablesExportTemplate({ state });\n    const variables = await readVariables({ state });\n    const indicatorId = createProgressIndicator({\n      total: variables.length,\n      message: 'Exporting variables...',\n      state,\n    });\n    for (const variable of variables) {\n      updateProgressIndicator({\n        id: indicatorId,\n        message: `Exporting variable ${variable._id}`,\n        state,\n      });\n      if (!noDecode) {\n        variable.value = decode(variable.valueBase64);\n      }\n      exportData.variables[variable._id] = variable;\n    }\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Exported ${variables.length} variables.`,\n      state,\n    });\n    debugMessage({ message: `VariablesOps.exportVariables: end`, state });\n    return exportData;\n  } catch (error) {\n    throw new FrodoError(`Error exporting variables`, error);\n  }\n}\n\nexport async function createVariable({\n  variableId,\n  value,\n  description,\n  expressionType,\n  state,\n}: {\n  variableId: string;\n  value: string;\n  description?: string;\n  expressionType?: VariableExpressionType;\n  state: State;\n}): Promise<VariableSkeleton> {\n  debugMessage({\n    message: `VariablesOps.createVariable: start`,\n    state,\n  });\n  try {\n    await _getVariable({ variableId, state });\n  } catch (error) {\n    try {\n      const result = await _putVariable({\n        variableId,\n        value,\n        description,\n        expressionType,\n        state,\n      });\n      debugMessage({\n        message: `VariablesOps.createVariable: end`,\n        state,\n      });\n      return result;\n    } catch (error) {\n      throw new FrodoError(`Error creating variable ${variableId}`, error);\n    }\n  }\n  throw new FrodoError(`Variable ${variableId} already exists`);\n}\n\nexport async function updateVariable({\n  variableId,\n  value,\n  description,\n  expressionType,\n  state,\n}: {\n  variableId: string;\n  value: string;\n  description?: string;\n  expressionType?: VariableExpressionType;\n  state: State;\n}): Promise<VariableSkeleton> {\n  try {\n    return _putVariable({\n      variableId,\n      value,\n      description,\n      expressionType,\n      state,\n    });\n  } catch (error) {\n    throw new FrodoError(`Error updating variable ${variableId}`, error);\n  }\n}\n\nexport async function updateVariableDescription({\n  variableId,\n  description,\n  state,\n}: {\n  variableId: string;\n  description: string;\n  state: State;\n}): Promise<any> {\n  try {\n    return _setVariableDescription({\n      variableId,\n      description,\n      state,\n    });\n  } catch (error) {\n    throw new FrodoError(\n      `Error updating description of variable ${variableId}`,\n      error\n    );\n  }\n}\n\nexport async function deleteVariable({\n  variableId,\n  state,\n}: {\n  variableId: string;\n  state: State;\n}): Promise<VariableSkeleton> {\n  try {\n    return _deleteVariable({ variableId, state });\n  } catch (error) {\n    throw new FrodoError(`Error deleting variable ${variableId}`, error);\n  }\n}\n","import {\n  getStatus,\n  initiateRestart,\n  RestartStatus,\n} from '../../api/cloud/StartupApi';\nimport { State } from '../../shared/State';\nimport {\n  createProgressIndicator,\n  stopProgressIndicator,\n  updateProgressIndicator,\n} from '../../utils/Console';\nimport { readSecrets } from './SecretsOps';\nimport { readVariables } from './VariablesOps';\n\nexport type Startup = {\n  /**\n   * Check for updates that need applying\n   * @returns {Promise<Updates>} true if there are updates that need to be applied, false otherwise\n   */\n  checkForUpdates(): Promise<Updates>;\n  /**\n   * Apply updates\n   * @param {boolean} wait wait for the operation to complete or not\n   * @param {number} timeout timeout in milliseconds\n   * @returns {Promise<boolean>} true if successful, false otherwise\n   */\n  applyUpdates(wait: boolean, timeout?: number): Promise<boolean>;\n};\n\nexport default (state: State): Startup => {\n  return {\n    /**\n     * Check for updates that need applying\n     * @returns {Promise<Updates>} true if there are updates that need to be applied, false otherwise\n     */\n    async checkForUpdates(): Promise<Updates> {\n      return checkForUpdates({ state });\n    },\n\n    /**\n     * Apply updates\n     * @param {boolean} wait wait for the operation to complete or not\n     * @param {number} timeout timeout in milliseconds\n     * @returns {Promise<boolean>} true if successful, false otherwise\n     */\n    async applyUpdates(wait: boolean, timeout: number = 10 * 60 * 1000) {\n      return applyUpdates({\n        wait,\n        timeout,\n        state,\n      });\n    },\n  };\n};\n\n/**\n * Updates that need to be applied.\n */\nexport interface Updates {\n  /**\n   * Array of secrets that need applying\n   */\n  secrets?: unknown[];\n  /**\n   * Array of variables that need applying\n   */\n  variables?: unknown[];\n}\n\n/**\n * Check for updates that need applying\n * @returns {Promise<boolean>} true if there are updates that need to be applied, false otherwise\n */\nexport async function checkForUpdates({\n  state,\n}: {\n  state: State;\n}): Promise<Updates> {\n  const updates: Updates = { secrets: [], variables: [] };\n  const indicatorId = createProgressIndicator({\n    total: undefined,\n    message: `Checking for updates to apply...`,\n    type: 'indeterminate',\n    state,\n  });\n  try {\n    updates.secrets = (await readSecrets({ state })).filter(\n      (secret) => !secret.loaded\n    );\n    updates.variables = (await readVariables({ state })).filter(\n      (variable) => !variable.loaded\n    );\n  } catch (error) {\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Error: ${error.response.data.code} - ${error.response.data.message}`,\n      status: 'fail',\n      state,\n    });\n  }\n  const updateCount = updates.secrets?.length + updates.variables?.length || 0;\n  if (updateCount > 0) {\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `${updateCount} update(s) need to be applied`,\n      status: 'success',\n      state,\n    });\n  } else {\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `No updates need to be applied`,\n      status: 'success',\n      state,\n    });\n  }\n  return updates;\n}\n\n/**\n * Apply updates\n * @param {boolean} wait wait for the operation to complete or not\n * @param {number} timeout timeout in milliseconds\n * @returns {Promise<boolean>} true if successful, false otherwise\n */\nexport async function applyUpdates({\n  wait,\n  timeout = 10 * 60 * 1000,\n  state,\n}: {\n  wait: boolean;\n  timeout?: number;\n  state: State;\n}) {\n  const indicatorId = createProgressIndicator({\n    total: undefined,\n    message: `Applying updates...`,\n    type: 'indeterminate',\n    state,\n  });\n  try {\n    let status = await initiateRestart({ state });\n    if (wait) {\n      const start = new Date().getTime();\n      let runtime = 0;\n      let errors = 0;\n      const maxErrors = 3;\n      while (\n        status !== RestartStatus.ready &&\n        start + timeout > new Date().getTime()\n      ) {\n        await new Promise((resolve) => setTimeout(resolve, 5000));\n        try {\n          status = await getStatus({ state });\n\n          // reset errors after successful status call\n          if (errors) errors = 0;\n\n          runtime = new Date().getTime() - start;\n          updateProgressIndicator({\n            id: indicatorId,\n            message: `${status} (${Math.round(runtime / 1000)}s)`,\n            state,\n          });\n        } catch (error) {\n          errors++;\n          if (errors > maxErrors) {\n            throw error;\n          }\n          runtime = new Date().getTime() - start;\n          updateProgressIndicator({\n            id: indicatorId,\n            message: `${\n              error.message\n            } - retry ${errors}/${maxErrors} (${Math.round(runtime / 1000)}s)`,\n            state,\n          });\n        }\n      }\n      if (runtime < timeout) {\n        stopProgressIndicator({\n          id: indicatorId,\n          message: `Updates applied in ${Math.round(\n            runtime / 1000\n          )}s with final status: ${status}`,\n          status: 'success',\n          state,\n        });\n        return true;\n      } else {\n        stopProgressIndicator({\n          id: indicatorId,\n          message: `Updates timed out after ${Math.round(\n            runtime / 1000\n          )}s with final status: ${status}`,\n          status: 'warn',\n          state,\n        });\n        return false;\n      }\n    } else {\n      stopProgressIndicator({\n        id: indicatorId,\n        message: `Updates are being applied. Changes may take up to 10 minutes to propagate, during which time you will not be able to make further updates.`,\n        status: 'success',\n        state,\n      });\n      return true;\n    }\n  } catch (error) {\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Error: ${error.response?.data?.code || error} - ${error.response\n        ?.data?.message}`,\n      status: 'fail',\n      state,\n    });\n    return false;\n  }\n}\n","import { IdObjectSkeletonInterface } from '../api/ApiTypes';\nimport {\n  deleteConfigEntity,\n  getConfigEntity,\n  putConfigEntity,\n} from '../api/IdmConfigApi';\nimport { State } from '../shared/State';\nimport {\n  createProgressIndicator,\n  debugMessage,\n  stopProgressIndicator,\n  updateProgressIndicator,\n} from '../utils/Console';\nimport { getMetadata } from '../utils/ExportImportUtils';\nimport { FrodoError } from './FrodoError';\nimport { readConfigEntitiesByType } from './IdmConfigOps';\nimport { ExportMetaData } from './OpsTypes';\n\nexport type EmailTemplate = {\n  /**\n   * Email template type key used to build the IDM id: 'emailTemplate/<id>'\n   */\n  EMAIL_TEMPLATE_TYPE: string;\n  /**\n   * Create an empty email template export template\n   * @returns {EmailTemplateExportInterface} an empty email template export template\n   */\n  createEmailTemplateExportTemplate(): EmailTemplateExportInterface;\n  /**\n   * Get all email templates\n   * @returns {Promise<EmailTemplateSkeleton[]>} a promise that resolves to an array of email template objects\n   */\n  readEmailTemplates(): Promise<EmailTemplateSkeleton[]>;\n  /**\n   * Get email template\n   * @param {string} templateId id/name of the email template without the type prefix\n   * @returns {Promise<EmailTemplateSkeleton>} a promise that resolves an email template object\n   */\n  readEmailTemplate(templateId: string): Promise<EmailTemplateSkeleton>;\n  /**\n   * Export all email templates. The response can be saved to file as is.\n   * @returns {Promise<EmailTemplateExportInterface>} Promise resolving to a EmailTemplateExportInterface object.\n   */\n  exportEmailTemplates(): Promise<EmailTemplateExportInterface>;\n  /**\n   * Create email template\n   * @param {string} templateId id/name of the email template without the type prefix\n   * @param {EmailTemplateSkeleton} templateData email template object\n   * @returns {Promise<EmailTemplateSkeleton>} a promise that resolves to an email template object\n   */\n  createEmailTemplate(\n    templateId: string,\n    templateData: EmailTemplateSkeleton\n  ): Promise<EmailTemplateSkeleton>;\n  /**\n   * Update or create email template\n   * @param {string} templateId id/name of the email template without the type prefix\n   * @param {EmailTemplateSkeleton} templateData email template object\n   * @returns {Promise<EmailTemplateSkeleton>} a promise that resolves to an email template object\n   */\n  updateEmailTemplate(\n    templateId: string,\n    templateData: EmailTemplateSkeleton\n  ): Promise<EmailTemplateSkeleton>;\n  /**\n   * Import all email templates\n   * @param {EmailTemplateExportInterface} importData import data\n   * @returns {Promise<IdObjectSkeletonInterface[]>} a promise resolving to an array of email template objects\n   */\n  importEmailTemplates(\n    importData: EmailTemplateExportInterface\n  ): Promise<EmailTemplateSkeleton[]>;\n  /**\n   * Delete all email templates\n   * @returns {Promise<EmailTemplateSkeleton[]>} a promise that resolves to an array of email template objects\n   */\n  deleteEmailTemplates(): Promise<EmailTemplateSkeleton[]>;\n  /**\n   * Delete email template\n   * @param {string} templateId id/name of the email template without the type prefix 'emailTemplate/'\n   * @returns {Promise<EmailTemplateSkeleton>} a promise that resolves an email template object\n   */\n  deleteEmailTemplate(templateId: string): Promise<EmailTemplateSkeleton>;\n\n  // Deprecated\n\n  /**\n   * Get all email templates\n   * @returns {Promise<EmailTemplateSkeleton[]>} a promise that resolves to an array of email template objects\n   * @deprecated since v2.0.0 use {@link EmailTemplate.readEmailTemplates | readEmailTemplates} instead\n   * ```javascript\n   * readEmailTemplates(): Promise<EmailTemplateSkeleton[]>\n   * ```\n   * @group Deprecated\n   */\n  getEmailTemplates(): Promise<EmailTemplateSkeleton[]>;\n  /**\n   * Get email template\n   * @param {string} templateId id/name of the email template without the type prefix\n   * @returns {Promise<EmailTemplateSkeleton>} a promise that resolves an email template object\n   * @deprecated since v2.0.0 use {@link EmailTemplate.readEmailTemplate | readEmailTemplate} instead\n   * ```javascript\n   * readEmailTemplate(templateId: string): Promise<EmailTemplateSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  getEmailTemplate(templateId: string): Promise<EmailTemplateSkeleton>;\n  /**\n   * Put email template\n   * @param {string} templateId id/name of the email template without the type prefix\n   * @param {Object} templateData email template object\n   * @returns {Promise<EmailTemplateSkeleton>} a promise that resolves to an email template object\n   * @deprecated since v2.0.0 use {@link EmailTemplate.updateEmailTemplate | updateEmailTemplate} or {@link EmailTemplate.createEmailTemplate | createEmailTemplate} instead\n   * ```javascript\n   * updateEmailTemplate(templateId: string, templateData: EmailTemplateSkeleton): Promise<EmailTemplateSkeleton>\n   * createEmailTemplate(templateId: string, templateData: EmailTemplateSkeleton): Promise<EmailTemplateSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  putEmailTemplate(\n    templateId: string,\n    templateData: EmailTemplateSkeleton\n  ): Promise<EmailTemplateSkeleton>;\n};\n\nexport default (state: State): EmailTemplate => {\n  return {\n    EMAIL_TEMPLATE_TYPE,\n    createEmailTemplateExportTemplate(): EmailTemplateExportInterface {\n      return createEmailTemplateExportTemplate({ state });\n    },\n    async readEmailTemplates(): Promise<any> {\n      return readEmailTemplates({ state });\n    },\n    async readEmailTemplate(templateId: string): Promise<any> {\n      return readEmailTemplate({ templateId, state });\n    },\n    async exportEmailTemplates(): Promise<EmailTemplateExportInterface> {\n      return exportEmailTemplates({ state });\n    },\n    async createEmailTemplate(\n      templateId: string,\n      templateData: EmailTemplateSkeleton\n    ): Promise<any> {\n      return createEmailTemplate({ templateId, templateData, state });\n    },\n    async updateEmailTemplate(\n      templateId: string,\n      templateData: EmailTemplateSkeleton\n    ): Promise<any> {\n      return updateEmailTemplate({ templateId, templateData, state });\n    },\n    importEmailTemplates(\n      importData: EmailTemplateExportInterface\n    ): Promise<EmailTemplateSkeleton[]> {\n      return importEmailTemplates({ importData, state });\n    },\n    async deleteEmailTemplates(): Promise<EmailTemplateSkeleton[]> {\n      return deleteEmailTemplates({ state });\n    },\n    async deleteEmailTemplate(\n      templateId: string\n    ): Promise<EmailTemplateSkeleton> {\n      return deleteEmailTemplate({ templateId, state });\n    },\n\n    // Deprecated\n\n    async getEmailTemplates() {\n      return readEmailTemplates({ state });\n    },\n    async getEmailTemplate(templateId: string) {\n      return readEmailTemplate({ templateId, state });\n    },\n    async putEmailTemplate(\n      templateId: string,\n      templateData: EmailTemplateSkeleton\n    ) {\n      return updateEmailTemplate({ templateId, templateData, state });\n    },\n  };\n};\n\n/**\n * Email template type key used to build the IDM id: 'emailTemplate/<id>'\n */\nexport const EMAIL_TEMPLATE_TYPE = 'emailTemplate';\n\nexport type EmailTemplateSkeleton = IdObjectSkeletonInterface & {\n  defaultLocale?: string;\n  displayName?: string;\n  enabled?: boolean;\n  from: string;\n  subject: Record<string, string>;\n  message?: Record<string, string>;\n  html?: Record<string, string>;\n};\n\nexport interface EmailTemplateExportInterface {\n  meta?: ExportMetaData;\n  emailTemplate: Record<string, EmailTemplateSkeleton>;\n}\n\nexport function createEmailTemplateExportTemplate({\n  state,\n}: {\n  state: State;\n}): EmailTemplateExportInterface {\n  return {\n    meta: getMetadata({ state }),\n    emailTemplate: {},\n  } as EmailTemplateExportInterface;\n}\n\n/**\n * Get all email templates\n * @returns {Promise<EmailTemplateSkeleton[]>} a promise that resolves to an array of email template objects\n */\nexport async function readEmailTemplates({\n  state,\n}: {\n  state: State;\n}): Promise<EmailTemplateSkeleton[]> {\n  try {\n    const templates = await readConfigEntitiesByType({\n      type: EMAIL_TEMPLATE_TYPE,\n      state,\n    });\n    return templates as EmailTemplateSkeleton[];\n  } catch (error) {\n    throw new FrodoError(`Error reading email templates`, error);\n  }\n}\n\n/**\n * Get email template\n * @param {string} templateId id/name of the email template without the type prefix\n * @returns {Promise<EmailTemplateSkeleton>} a promise that resolves an email template object\n */\nexport async function readEmailTemplate({\n  templateId,\n  state,\n}: {\n  templateId: string;\n  state: State;\n}): Promise<EmailTemplateSkeleton> {\n  try {\n    return getConfigEntity({\n      entityId: `${EMAIL_TEMPLATE_TYPE}/${templateId}`,\n      state,\n    });\n  } catch (error) {\n    throw new FrodoError(`Error reading email template ${templateId}`, error);\n  }\n}\n\n/**\n * Export all email templates. The response can be saved to file as is.\n * @returns {Promise<EmailTemplateExportInterface>} Promise resolving to a EmailTemplateExportInterface object.\n */\nexport async function exportEmailTemplates({\n  state,\n}: {\n  state: State;\n}): Promise<EmailTemplateExportInterface> {\n  try {\n    debugMessage({\n      message: `EmailTemplateOps.exportEmailTemplates: start`,\n      state,\n    });\n    const exportData = createEmailTemplateExportTemplate({ state });\n    const emailTemplates = await readEmailTemplates({ state });\n    const indicatorId = createProgressIndicator({\n      total: emailTemplates.length,\n      message: 'Exporting email templates...',\n      state,\n    });\n    for (const emailTemplate of emailTemplates) {\n      const templateId = emailTemplate._id.replace(\n        `${EMAIL_TEMPLATE_TYPE}/`,\n        ''\n      );\n      updateProgressIndicator({\n        id: indicatorId,\n        message: `Exporting email template ${templateId}`,\n        state,\n      });\n      exportData.emailTemplate[templateId] = emailTemplate;\n    }\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Exported ${emailTemplates.length} email templates.`,\n      state,\n    });\n    debugMessage({\n      message: `EmailTemplateOps.exportEmailTemplates: end`,\n      state,\n    });\n    return exportData;\n  } catch (error) {\n    throw new FrodoError(`Error exporting email templates`, error);\n  }\n}\n\n/**\n * Create email template\n * @param {string} templateId id/name of the email template without the type prefix\n * @param {EmailTemplateSkeleton} templateData email template object\n * @returns {Promise<EmailTemplateSkeleton>} a promise that resolves to an email template object\n */\nexport async function createEmailTemplate({\n  templateId,\n  templateData,\n  state,\n}: {\n  templateId: string;\n  templateData: EmailTemplateSkeleton;\n  state: State;\n}): Promise<EmailTemplateSkeleton> {\n  debugMessage({\n    message: `EmailTemplateOps.createEmailTemplate: start`,\n    state,\n  });\n  try {\n    await readEmailTemplate({\n      templateId,\n      state,\n    });\n  } catch (error) {\n    try {\n      const result = await putConfigEntity({\n        entityId: `${EMAIL_TEMPLATE_TYPE}/${templateId}`,\n        entityData: templateData,\n        state,\n      });\n      debugMessage({\n        message: `EmailTemplateOps.createEmailTemplate: end`,\n        state,\n      });\n      return result as EmailTemplateSkeleton;\n    } catch (error) {\n      throw new FrodoError(\n        `Error creating email template ${templateId}`,\n        error\n      );\n    }\n  }\n  throw new Error(`Email template ${templateId} already exists!`);\n}\n\n/**\n * Update or create email template\n * @param {string} templateId id/name of the email template without the type prefix\n * @param {EmailTemplateSkeleton} templateData email template object\n * @returns {Promise<EmailTemplateSkeleton>} a promise that resolves to an email template object\n */\nexport async function updateEmailTemplate({\n  templateId,\n  templateData,\n  state,\n}: {\n  templateId: string;\n  templateData: EmailTemplateSkeleton;\n  state: State;\n}): Promise<EmailTemplateSkeleton> {\n  try {\n    return putConfigEntity({\n      entityId: `${EMAIL_TEMPLATE_TYPE}/${templateId}`,\n      entityData: templateData,\n      state,\n    });\n  } catch (error) {\n    throw new FrodoError(`Error updting email template ${templateId}`, error);\n  }\n}\n\n/**\n * Import email templates.\n * @param {EmailTemplateExportInterface} importData email template import data.\n * @returns {Promise<SocialIdpSkeleton[]>} a promise resolving to an array of email template objects\n */\nexport async function importEmailTemplates({\n  importData,\n  state,\n}: {\n  importData: EmailTemplateExportInterface;\n  state: State;\n}): Promise<EmailTemplateSkeleton[]> {\n  debugMessage({\n    message: `EmailTemplateOps.importEmailTemplates: start`,\n    state,\n  });\n  const response = [];\n  const errors = [];\n  for (const templateId of Object.keys(importData.emailTemplate)) {\n    try {\n      debugMessage({\n        message: `EmailTemplateOps.importEmailTemplates: ${templateId}`,\n        state,\n      });\n      response.push(\n        await updateEmailTemplate({\n          templateId,\n          templateData: importData.emailTemplate[templateId],\n          state,\n        })\n      );\n    } catch (e) {\n      errors.push(e);\n    }\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(`Error importing email templates`, errors);\n  }\n  debugMessage({\n    message: `EmailTemplateOps.importEmailTemplates: end`,\n    state,\n  });\n  return response;\n}\n\n/**\n * Delete all email templates\n * @returns {Promise<EmailTemplateSkeleton[]>} a promise that resolves to an array of email template objects\n */\nexport async function deleteEmailTemplates({\n  state,\n}: {\n  state: State;\n}): Promise<EmailTemplateSkeleton[]> {\n  const errors: Error[] = [];\n  try {\n    debugMessage({\n      message: `EmailTemplateOps.deleteEmailTemplates: start`,\n      state,\n    });\n    const result: EmailTemplateSkeleton[] = [];\n    const templates = await readEmailTemplates({ state });\n    for (const template of templates) {\n      try {\n        debugMessage({\n          message: `EmailTemplateOps.deleteEmailTemplates: '${template['_id']}'`,\n          state,\n        });\n        result.push(\n          await deleteConfigEntity({\n            entityId: template['_id'],\n            state,\n          })\n        );\n      } catch (error) {\n        errors.push(error);\n      }\n    }\n    if (errors.length > 0) {\n      throw new FrodoError(`Error deleting email templates`, errors);\n    }\n    debugMessage({\n      message: `EmailTemplateOps.deleteEmailTemplates: end`,\n      state,\n    });\n    return result;\n  } catch (error) {\n    // re-throw previously caught errors\n    if (errors.length > 0) {\n      throw error;\n    }\n    throw new FrodoError(`Error deleting email templates`, error);\n  }\n}\n\n/**\n * Delete email template\n * @param {string} templateId id/name of the email template without the type prefix 'emailTemplate/'\n * @returns {Promise<EmailTemplateSkeleton>} a promise that resolves an email template object\n */\nexport async function deleteEmailTemplate({\n  templateId,\n  state,\n}: {\n  templateId: string;\n  state: State;\n}): Promise<EmailTemplateSkeleton> {\n  try {\n    return deleteConfigEntity({\n      entityId: `${EMAIL_TEMPLATE_TYPE}/${templateId}`,\n      state,\n    });\n  } catch (error) {\n    throw new FrodoError(`Error deleting email template ${templateId}`, error);\n  }\n}\n","import util from 'util';\n\nimport { State } from '../shared/State';\nimport { getCurrentRealmPath } from '../utils/ForgeRockUtils';\nimport { deleteDeepByKey } from '../utils/JsonUtils';\nimport {\n  type IdObjectSkeletonInterface,\n  type NoIdObjectSkeletonInterface,\n  type PagedResult,\n} from './ApiTypes';\nimport { generateAmApi } from './BaseApi';\nimport { type AmServiceType } from './ServiceApi';\n\nconst getAllProviderTypesURLTemplate =\n  '%s/json%s/realm-config/services/SocialIdentityProviders?_action=getAllTypes';\nconst providerByTypeAndIdURLTemplate =\n  '%s/json%s/realm-config/services/SocialIdentityProviders/%s/%s';\nconst getAllProvidersURLTemplate =\n  '%s/json%s/realm-config/services/SocialIdentityProviders?_action=nextdescendents';\nconst getProvidersByTypeURLTemplate =\n  '%s/json%s/realm-config/services/SocialIdentityProviders/%s?_queryFilter=true';\nconst apiVersion = 'protocol=2.1,resource=1.0';\nconst getApiConfig = () => {\n  return {\n    apiVersion,\n  };\n};\n\nexport type SocialIdpSkeleton = IdObjectSkeletonInterface & {\n  _type: AmServiceType;\n  enabled: boolean;\n  transform: string;\n};\n\n/**\n * Get social identity provider types\n * @returns {Promise} a promise that resolves to an object containing an array of social identity provider types\n */\nexport async function getSocialIdentityProviderTypes({\n  state,\n}: {\n  state: State;\n}) {\n  const urlString = util.format(\n    getAllProviderTypesURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state)\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get(\n    urlString,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Get social identity providers by type\n * @param {String} type social identity provider type\n * @returns {Promise} a promise that resolves to an object containing an array of social identity providers of the requested type\n */\nexport async function getSocialIdentityProvidersByType({\n  type,\n  state,\n}: {\n  type: string;\n  state: State;\n}) {\n  const urlString = util.format(\n    getProvidersByTypeURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    type\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get(\n    urlString,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Get all social identity providers\n * @returns {Promise<PagedResult<SocialIdpSkeleton>>} a promise that resolves to an object containing an array of social identity providers\n */\nexport async function getSocialIdentityProviders({\n  state,\n}: {\n  state: State;\n}): Promise<PagedResult<SocialIdpSkeleton>> {\n  const urlString = util.format(\n    getAllProvidersURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state)\n  );\n  const { data } = await generateAmApi({\n    resource: getApiConfig(),\n    state,\n  }).post(\n    urlString,\n    {},\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Get social identity provider by type and id\n * @param {string} type social identity provider type\n * @param {string} id social identity provider id/name\n * @returns {Promise} a promise that resolves to an object containing a social identity provider\n */\nexport async function getProviderByTypeAndId({\n  type,\n  id,\n  state,\n}: {\n  type: string;\n  id: string;\n  state: State;\n}) {\n  const urlString = util.format(\n    providerByTypeAndIdURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    type,\n    id\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get(\n    urlString,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Get social identity provider by type and id\n * @param {String} type social identity provider type\n * @param {String} id social identity provider id/name\n * @param {Object} providerData a social identity provider object\n * @returns {Promise} a promise that resolves to an object containing a social identity provider\n */\nexport async function putProviderByTypeAndId({\n  type,\n  id,\n  providerData,\n  state,\n}: {\n  type: string;\n  id: string;\n  providerData: SocialIdpSkeleton | NoIdObjectSkeletonInterface;\n  state: State;\n}) {\n  // until we figure out a way to use transport keys in Frodo,\n  // we'll have to drop those encrypted attributes.\n  const cleanData = deleteDeepByKey(providerData, '-encrypted');\n  const urlString = util.format(\n    providerByTypeAndIdURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    type,\n    id\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).put(\n    urlString,\n    cleanData,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Delete social identity provider by type and id\n * @param {string} providerId provider type\n * @param {string} providerId provider id\n * @returns {Promise<unknown>} a promise that resolves to a social identity provider\n */\nexport async function deleteProviderByTypeAndId({\n  type,\n  providerId,\n  state,\n}: {\n  type: string;\n  providerId: string;\n  state: State;\n}) {\n  const urlString = util.format(\n    providerByTypeAndIdURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    type,\n    providerId\n  );\n  const { data } = await generateAmApi({\n    resource: getApiConfig(),\n    state,\n  }).delete(urlString, {\n    withCredentials: true,\n  });\n  return data;\n}\n","import { type NoIdObjectSkeletonInterface } from '../api/ApiTypes';\nimport { getScript, type ScriptSkeleton } from '../api/ScriptApi';\nimport {\n  deleteProviderByTypeAndId,\n  getSocialIdentityProviders as _getSocialIdentityProviders,\n  putProviderByTypeAndId as _putProviderByTypeAndId,\n  type SocialIdpSkeleton,\n} from '../api/SocialIdentityProvidersApi';\nimport { State } from '../shared/State';\nimport {\n  createProgressIndicator,\n  debugMessage,\n  printMessage,\n  stopProgressIndicator,\n  updateProgressIndicator,\n} from '../utils/Console';\nimport {\n  convertBase64TextToArray,\n  convertTextArrayToBase64,\n  getMetadata,\n} from '../utils/ExportImportUtils';\nimport { FrodoError } from './FrodoError';\nimport { type ExportMetaData } from './OpsTypes';\nimport { updateScript } from './ScriptOps';\n\nexport type Idp = {\n  /**\n   * Read all social identity providers\n   * @returns {Promise<SocialIdpSkeleton[]>} a promise that resolves to an array of social identity providers\n   */\n  readSocialIdentityProviders(): Promise<SocialIdpSkeleton[]>;\n  /**\n   * Read social identity provider\n   * @param {string} providerId identity provider id/name\n   * @returns {Promise<SocialIdpSkeleton>} a promise that resolves a social identity provider object\n   */\n  readSocialIdentityProvider(providerId: string): Promise<SocialIdpSkeleton>;\n  /**\n   * Create social identity provider\n   * @param {string} providerType identity provider type\n   * @param {string} providerId identity provider id/name\n   * @param {SocialIdpSkeleton} providerData identity provider data\n   * @returns {Promise<SocialIdpSkeleton>} a promise that resolves a social identity provider object\n   */\n  createSocialIdentityProvider(\n    providerType: string,\n    providerId: string,\n    providerData: SocialIdpSkeleton\n  ): Promise<SocialIdpSkeleton>;\n  /**\n   * Update or create social identity provider\n   * @param {string} providerType identity provider type\n   * @param {string} providerId identity provider id/name\n   * @param {SocialIdpSkeleton} providerData identity provider data\n   * @returns {Promise<SocialIdpSkeleton>} a promise that resolves a social identity provider object\n   */\n  updateSocialIdentityProvider(\n    providerType: string,\n    providerId: string,\n    providerData: SocialIdpSkeleton\n  ): Promise<SocialIdpSkeleton>;\n  /**\n   * Delete all social identity providers\n   * @returns {Promise<SocialIdpSkeleton[]>} a promise that resolves to an array of social identity provider objects\n   */\n  deleteSocialIdentityProviders(): Promise<SocialIdpSkeleton[]>;\n  /**\n   * Delete social identity provider\n   * @param {string} providerId social identity provider id/name\n   * @returns {Promise<SocialIdpSkeleton>} a promise that resolves a social identity provider object\n   */\n  deleteSocialIdentityProvider(providerId: string): Promise<SocialIdpSkeleton>;\n  /**\n   * Export social identity provider\n   * @param {string} providerId provider id/name\n   * @returns {Promise<SocialProviderExportInterface>} a promise that resolves to a SocialProviderExportInterface object\n   */\n  exportSocialIdentityProvider(\n    providerId: string\n  ): Promise<SocialProviderExportInterface>;\n  /**\n   * Export all social identity providers\n   * @param {SocialIdentityProviderExportOptions} options export options\n   * @returns {Promise<SocialProviderExportInterface>} a promise that resolves to a SocialProviderExportInterface object\n   */\n  exportSocialIdentityProviders(\n    options?: SocialIdentityProviderExportOptions\n  ): Promise<SocialProviderExportInterface>;\n  /**\n   * Import social identity provider\n   * @param {string} providerId provider id/name\n   * @param {SocialProviderExportInterface} importData import data\n   * @param {SocialIdentityProviderImportOptions} options import options\n   * @returns {Promise<SocialIdpSkeleton>} a promise resolving to a social identity provider object\n   */\n  importSocialIdentityProvider(\n    providerId: string,\n    importData: SocialProviderExportInterface,\n    options: SocialIdentityProviderImportOptions\n  ): Promise<SocialIdpSkeleton>;\n  /**\n   * Import first social identity provider\n   * @param {SocialProviderExportInterface} importData import data\n   * @param {SocialIdentityProviderImportOptions} options import options\n   * @returns {Promise<SocialIdpSkeleton>} a promise resolving to a social identity provider object\n   */\n  importFirstSocialIdentityProvider(\n    importData: SocialProviderExportInterface,\n    options: SocialIdentityProviderImportOptions\n  ): Promise<SocialIdpSkeleton>;\n  /**\n   * Import all social identity providers\n   * @param {SocialProviderExportInterface} importData import data\n   * @param {SocialIdentityProviderImportOptions} options import options\n   * @returns {Promise<SocialIdpSkeleton[]>} a promise resolving to an array of social identity provider objects\n   */\n  importSocialIdentityProviders(\n    importData: SocialProviderExportInterface,\n    options: SocialIdentityProviderImportOptions\n  ): Promise<SocialIdpSkeleton[]>;\n\n  // Deprecated\n\n  /**\n   * Get all social identity providers\n   * @returns {Promise<SocialIdpSkeleton[]>} a promise that resolves to an array of social identity providers\n   * @deprecated since v2.0.0 use {@link Idp.readSocialIdentityProviders | readSocialIdentityProviders} instead\n   * ```javascript\n   * readSocialIdentityProviders(): Promise<SocialIdpSkeleton[]>\n   * ```\n   * @group Deprecated\n   */\n  getSocialIdentityProviders(): Promise<SocialIdpSkeleton[]>;\n  /**\n   * Get social identity provider by id\n   * @param {string} providerId identity provider id/name\n   * @returns {Promise<SocialIdpSkeleton>} a promise that resolves a social identity provider object\n   * @deprecated since v2.0.0 use {@link Idp.readSocialIdentityProvider | readSocialIdentityProvider} instead\n   * ```javascript\n   * readSocialIdentityProvider(providerId: string): Promise<SocialIdpSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  getSocialProvider(providerId: string): Promise<SocialIdpSkeleton>;\n  /**\n   * Update or create identity provider\n   * @param {string} providerType identity provider type\n   * @param {string} providerId identity provider id/name\n   * @param {SocialIdpSkeleton} providerData identity provider data\n   * @returns {Promise<SocialIdpSkeleton>} a promise that resolves a social identity provider object\n   * @deprecated since v2.0.0 use {@link Idp.updateSocialIdentityProvider | updateSocialIdentityProvider} or {@link Idp.createSocialIdentityProvider | createSocialIdentityProvider} instead\n   * ```javascript\n   * updateSocialIdentityProvider(providerType: string, providerId: string, providerData: SocialIdpSkeleton): Promise<SocialIdpSkeleton>\n   * createSocialIdentityProvider(providerType: string, providerId: string, providerData: SocialIdpSkeleton): Promise<SocialIdpSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  putProviderByTypeAndId(\n    providerType: string,\n    providerId: string,\n    providerData: SocialIdpSkeleton\n  ): Promise<SocialIdpSkeleton>;\n  /**\n   * Delete social identity provider\n   * @param {string} providerId social identity provider id/name\n   * @returns {Promise<SocialIdpSkeleton>} a promise that resolves to a social identity provider object\n   * @deprecated since v2.0.0 use {@link Idp.deleteSocialIdentityProvider | deleteSocialIdentityProvider} instead\n   * ```javascript\n   * deleteSocialIdentityProvider(providerId: string): Promise<SocialIdpSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  deleteSocialProvider(providerId: string): Promise<SocialIdpSkeleton>;\n  /**\n   * Export social identity provider\n   * @param {string} providerId provider id/name\n   * @returns {Promise<SocialProviderExportInterface>} a promise that resolves to a SocialProviderExportInterface object\n   * @deprecated since v2.0.0 use {@link Idp.exportSocialIdentityProvider | exportSocialIdentityProvider} instead\n   * ```javascript\n   * exportSocialIdentityProvider(providerId: string): Promise<SocialProviderExportInterface>\n   * ```\n   * @group Deprecated\n   */\n  exportSocialProvider(\n    providerId: string\n  ): Promise<SocialProviderExportInterface>;\n  /**\n   * Export all social identity providers\n   * @returns {Promise<SocialProviderExportInterface>} a promise that resolves to a SocialProviderExportInterface object\n   * @deprecated since v2.0.0 use {@link Idp.exportSocialIdentityProviders | exportSocialIdentityProviders} instead\n   * ```javascript\n   * exportSocialIdentityProviders(): Promise<SocialProviderExportInterface[]>\n   * ```\n   * @group Deprecated\n   */\n  exportSocialProviders(): Promise<SocialProviderExportInterface>;\n  /**\n   * Import social identity provider\n   * @param {string} providerId provider id/name\n   * @param {SocialProviderExportInterface} importData import data\n   * @deprecated since v2.0.0 use {@link Idp.importSocialIdentityProvider | importSocialIdentityProvider} instead\n   * ```javascript\n   * importSocialIdentityProvider(providerId: string, importData: SocialProviderExportInterface): Promise<SocialIdpSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  importSocialProvider(\n    providerId: string,\n    importData: SocialProviderExportInterface\n  ): Promise<boolean>;\n  /**\n   * Import first social identity provider\n   * @param {SocialProviderExportInterface} importData import data\n   * @deprecated since v2.0.0 use {@link Idp.importFirstSocialIdentityProvider | importFirstSocialIdentityProvider} instead\n   * ```javascript\n   * importFirstSocialIdentityProvider(importData: SocialProviderExportInterface): Promise<SocialIdpSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  importFirstSocialProvider(\n    importData: SocialProviderExportInterface\n  ): Promise<boolean>;\n  /**\n   * Import all social identity providers\n   * @param {SocialProviderExportInterface} importData import data\n   * @deprecated since v2.0.0 use {@link Idp.importFirstSocialIdentityProviders | importFirstSocialIdentityProviders} instead\n   * ```javascript\n   * importFirstSocialIdentityProviders(importData: SocialProviderExportInterface): Promise<SocialIdpSkeleton[]>\n   * ```\n   * @group Deprecated\n   */\n  importSocialProviders(\n    importData: SocialProviderExportInterface\n  ): Promise<boolean>;\n};\n\nexport default (state: State): Idp => {\n  return {\n    async readSocialIdentityProviders() {\n      return readSocialIdentityProviders({ state });\n    },\n    async readSocialIdentityProvider(providerId: string) {\n      return readSocialIdentityProvider({ providerId, state });\n    },\n    async createSocialIdentityProvider(\n      providerType: string,\n      providerId: string,\n      providerData: SocialIdpSkeleton\n    ) {\n      return createSocialIdentityProvider({\n        providerType,\n        providerId,\n        providerData,\n        state,\n      });\n    },\n    async updateSocialIdentityProvider(\n      providerType: string,\n      providerId: string,\n      providerData: SocialIdpSkeleton\n    ) {\n      return updateSocialIdentityProvider({\n        providerType,\n        providerId,\n        providerData,\n        state,\n      });\n    },\n    async deleteSocialIdentityProviders(): Promise<SocialIdpSkeleton[]> {\n      return deleteSocialIdentityProviders({ state });\n    },\n    async deleteSocialIdentityProvider(\n      providerId: string\n    ): Promise<SocialIdpSkeleton> {\n      return deleteSocialIdentityProvider({ providerId, state });\n    },\n    async exportSocialIdentityProvider(\n      providerId: string\n    ): Promise<SocialProviderExportInterface> {\n      return exportSocialIdentityProvider({ providerId, state });\n    },\n    async exportSocialIdentityProviders(\n      options: SocialIdentityProviderExportOptions = {\n        deps: true,\n        useStringArrays: true,\n      }\n    ): Promise<SocialProviderExportInterface> {\n      return exportSocialIdentityProviders({ options, state });\n    },\n    async importSocialIdentityProvider(\n      providerId: string,\n      importData: SocialProviderExportInterface,\n      options: SocialIdentityProviderImportOptions = { deps: true }\n    ): Promise<SocialIdpSkeleton> {\n      return importSocialIdentityProvider({\n        providerId,\n        importData,\n        options,\n        state,\n      });\n    },\n    async importFirstSocialIdentityProvider(\n      importData: SocialProviderExportInterface,\n      options: SocialIdentityProviderImportOptions = { deps: true }\n    ): Promise<SocialIdpSkeleton> {\n      return importFirstSocialIdentityProvider({ importData, options, state });\n    },\n    async importSocialIdentityProviders(\n      importData: SocialProviderExportInterface,\n      options: SocialIdentityProviderImportOptions = { deps: true }\n    ): Promise<SocialIdpSkeleton[]> {\n      return importSocialIdentityProviders({ importData, options, state });\n    },\n\n    // Deprecated\n\n    async getSocialIdentityProviders() {\n      return readSocialIdentityProviders({ state });\n    },\n    async getSocialProvider(providerId: string) {\n      return readSocialIdentityProvider({ providerId, state });\n    },\n    async putProviderByTypeAndId(\n      providerType: string,\n      providerId: string,\n      providerData: SocialIdpSkeleton\n    ) {\n      return updateSocialIdentityProvider({\n        providerType,\n        providerId,\n        providerData,\n        state,\n      });\n    },\n    async deleteSocialProvider(providerId: string): Promise<SocialIdpSkeleton> {\n      return deleteSocialIdentityProvider({ providerId, state });\n    },\n    async exportSocialProvider(\n      providerId: string\n    ): Promise<SocialProviderExportInterface> {\n      return exportSocialIdentityProvider({ providerId, state });\n    },\n    async exportSocialProviders(): Promise<SocialProviderExportInterface> {\n      return exportSocialIdentityProviders({ state });\n    },\n    async importSocialProvider(\n      providerId: string,\n      importData: SocialProviderExportInterface\n    ): Promise<boolean> {\n      return importSocialProvider({ providerId, importData, state });\n    },\n    async importFirstSocialProvider(\n      importData: SocialProviderExportInterface\n    ): Promise<boolean> {\n      return importFirstSocialProvider({ importData, state });\n    },\n    async importSocialProviders(\n      importData: SocialProviderExportInterface\n    ): Promise<boolean> {\n      return importSocialProviders({ importData, state });\n    },\n  };\n};\n\n/**\n * Social identity provider export options\n */\nexport interface SocialIdentityProviderExportOptions {\n  /**\n   * Use string arrays to store multi-line text in scripts.\n   */\n  useStringArrays: boolean;\n  /**\n   * Include any dependencies (scripts).\n   */\n  deps: boolean;\n}\n\n/**\n * Social identity provider import options\n */\nexport interface SocialIdentityProviderImportOptions {\n  /**\n   * Include any dependencies (scripts).\n   */\n  deps: boolean;\n}\n\nexport interface SocialProviderExportInterface {\n  meta?: ExportMetaData;\n  script: Record<string, ScriptSkeleton>;\n  idp: Record<string, SocialIdpSkeleton>;\n}\n\n/**\n * Create an empty idp export template\n * @returns {SocialProviderExportInterface} an empty idp export template\n */\nfunction createIdpExportTemplate({\n  state,\n}: {\n  state: State;\n}): SocialProviderExportInterface {\n  return {\n    meta: getMetadata({ state }),\n    script: {},\n    idp: {},\n  } as SocialProviderExportInterface;\n}\n\n/**\n * Get all social identity providers\n * @returns {Promise} a promise that resolves to an object containing an array of social identity providers\n */\nexport async function readSocialIdentityProviders({\n  state,\n}: {\n  state: State;\n}): Promise<SocialIdpSkeleton[]> {\n  try {\n    const { result } = await _getSocialIdentityProviders({ state });\n    return result;\n  } catch (error) {\n    throw new FrodoError(`Error reading providers`, error);\n  }\n}\n\n/**\n * Read social identity provider\n * @param {string} providerId social identity provider id/name\n * @returns {Promise<SocialIdpSkeleton>} a promise that resolves a social identity provider object\n */\nexport async function readSocialIdentityProvider({\n  providerId,\n  state,\n}: {\n  providerId: string;\n  state: State;\n}): Promise<SocialIdpSkeleton> {\n  try {\n    const response = await readSocialIdentityProviders({ state });\n    const foundProviders = response.filter(\n      (provider) => provider._id === providerId\n    );\n    switch (foundProviders.length) {\n      case 1:\n        return foundProviders[0];\n      case 0:\n        throw new FrodoError(`Not found`);\n      default:\n        throw new FrodoError(`Multiple providers found`);\n    }\n  } catch (error) {\n    throw new FrodoError(`Error reading provider ${providerId}`, error);\n  }\n}\n\nexport async function createSocialIdentityProvider({\n  providerType,\n  providerId,\n  providerData,\n  state,\n}: {\n  providerType: string;\n  providerId: string;\n  providerData: SocialIdpSkeleton | NoIdObjectSkeletonInterface;\n  state: State;\n}): Promise<SocialIdpSkeleton> {\n  debugMessage({\n    message: `IdpOps.createSocialIdentityProvider: start`,\n    state,\n  });\n  try {\n    await readSocialIdentityProvider({ providerId, state });\n  } catch (error) {\n    try {\n      const result = await updateSocialIdentityProvider({\n        providerType,\n        providerId,\n        providerData,\n        state,\n      });\n      debugMessage({\n        message: `IdpOps.createSocialIdentityProvider: end`,\n        state,\n      });\n      return result;\n    } catch (error) {\n      throw new FrodoError(`Error creating provider ${providerId}`, error);\n    }\n  }\n  throw new FrodoError(`Provider ${providerId} already exists`);\n}\n\nexport async function updateSocialIdentityProvider({\n  providerType,\n  providerId,\n  providerData,\n  state,\n}: {\n  providerType: string;\n  providerId: string;\n  providerData: SocialIdpSkeleton | NoIdObjectSkeletonInterface;\n  state: State;\n}): Promise<SocialIdpSkeleton> {\n  debugMessage({\n    message: `IdpOps.updateSocialIdentityProvider: start`,\n    state,\n  });\n  try {\n    const response = await _putProviderByTypeAndId({\n      type: providerType,\n      id: providerId,\n      providerData,\n      state,\n    });\n    debugMessage({\n      message: `IdpOps.updateSocialIdentityProvider: end`,\n      state,\n    });\n    return response;\n  } catch (error) {\n    if (\n      error.response?.status === 400 &&\n      error.response?.data?.message === 'Invalid attribute specified.'\n    ) {\n      const { validAttributes } = error.response.data.detail;\n      validAttributes.push('_id', '_type');\n      for (const attribute of Object.keys(providerData)) {\n        if (!validAttributes.includes(attribute)) {\n          if (state.getVerbose())\n            printMessage({\n              message: `\\nRemoving invalid attribute: ${attribute}`,\n              type: 'warn',\n              newline: false,\n              state,\n            });\n          delete providerData[attribute];\n        }\n      }\n      if (state.getVerbose())\n        printMessage({ message: '\\n', type: 'warn', newline: false, state });\n      const response = await _putProviderByTypeAndId({\n        type: providerType,\n        id: providerId,\n        providerData,\n        state,\n      });\n      debugMessage({\n        message: `IdpOps.updateSocialIdentityProvider: end (after retry)`,\n        state,\n      });\n      return response;\n    } else {\n      // unhandleable error\n      throw new FrodoError(`Error updating provider ${providerId}`, error);\n    }\n  }\n}\n\n/**\n * Delete all social identity providers\n * @returns {Promise<SocialIdpSkeleton[]>} a promise that resolves to an array of social identity provider objects\n */\nexport async function deleteSocialIdentityProviders({\n  state,\n}: {\n  state: State;\n}): Promise<SocialIdpSkeleton[]> {\n  debugMessage({\n    message: `IdpOps.deleteSocialProviders: start`,\n    state,\n  });\n  const result: SocialIdpSkeleton[] = [];\n  const errors = [];\n  try {\n    const providers = await readSocialIdentityProviders({ state });\n    for (const provider of providers) {\n      try {\n        debugMessage({\n          message: `IdpOps.deleteSocialProviders: '${provider._id}'`,\n          state,\n        });\n        result.push(\n          await deleteSocialIdentityProvider({\n            providerId: provider._id,\n            state,\n          })\n        );\n      } catch (error) {\n        errors.push(error);\n      }\n    }\n    if (errors.length > 0) {\n      throw new FrodoError(`Error deleting providers`, errors);\n    }\n    debugMessage({\n      message: `IdpOps.deleteSocialProviders: end`,\n      state,\n    });\n    return result;\n  } catch (error) {\n    // re-throw previously caught errors\n    if (errors.length > 0) {\n      throw error;\n    }\n    throw new FrodoError(`Error deleting providers`, error);\n  }\n}\n\n/**\n * Delete social identity provider by id\n * @param {String} providerId social identity provider id/name\n * @returns {Promise} a promise that resolves a social identity provider object\n */\nexport async function deleteSocialIdentityProvider({\n  providerId,\n  state,\n}: {\n  providerId: string;\n  state: State;\n}): Promise<SocialIdpSkeleton> {\n  try {\n    const response = await readSocialIdentityProviders({ state });\n    const foundProviders = response.filter(\n      (provider) => provider._id === providerId\n    );\n    switch (foundProviders.length) {\n      case 1:\n        return await deleteProviderByTypeAndId({\n          type: foundProviders[0]._type._id,\n          providerId: foundProviders[0]._id,\n          state,\n        });\n      case 0:\n        throw new Error(`Not found`);\n      default:\n        throw new Error(`Multiple providers found`);\n    }\n  } catch (error) {\n    throw new FrodoError(`Error deleting provider ${providerId}`, error);\n  }\n}\n\n/**\n * Export social provider by id\n * @param {string} providerId provider id/name\n * @returns {Promise<SocialProviderExportInterface>} a promise that resolves to a SocialProviderExportInterface object\n */\nexport async function exportSocialIdentityProvider({\n  providerId,\n  state,\n}: {\n  providerId: string;\n  state: State;\n}): Promise<SocialProviderExportInterface> {\n  try {\n    debugMessage({ message: `IdpOps.exportSocialProvider: start`, state });\n    const idpData = await readSocialIdentityProvider({ providerId, state });\n    const exportData = createIdpExportTemplate({ state });\n    exportData.idp[idpData._id] = idpData;\n    if (idpData.transform) {\n      try {\n        const scriptData = await getScript({\n          scriptId: idpData.transform,\n          state,\n        });\n        scriptData.script = convertBase64TextToArray(scriptData.script);\n        exportData.script[idpData.transform] = scriptData;\n      } catch (error) {\n        throw new FrodoError(`Error reading script ${idpData.transform}`);\n      }\n    }\n    debugMessage({ message: `IdpOps.exportSocialProvider: end`, state });\n    return exportData;\n  } catch (error) {\n    throw new FrodoError(`Error exporting provider ${providerId}`, error);\n  }\n}\n\n/**\n * Export all providers\n * @returns {Promise<SocialProviderExportInterface>} a promise that resolves to a SocialProviderExportInterface object\n */\nexport async function exportSocialIdentityProviders({\n  options = { deps: true, useStringArrays: true },\n  state,\n}: {\n  options?: SocialIdentityProviderExportOptions;\n  state: State;\n}): Promise<SocialProviderExportInterface> {\n  const errors: Error[] = [];\n  let indicatorId: string;\n  try {\n    const exportData = createIdpExportTemplate({ state });\n    const allIdpsData = await readSocialIdentityProviders({ state });\n    indicatorId = createProgressIndicator({\n      total: allIdpsData.length,\n      message: 'Exporting providers',\n      state,\n    });\n    for (const idpData of allIdpsData) {\n      try {\n        updateProgressIndicator({\n          id: indicatorId,\n          message: `Exporting provider ${idpData._id}`,\n          state,\n        });\n        exportData.idp[idpData._id] = idpData;\n        if (options.deps && idpData.transform) {\n          const scriptData = await getScript({\n            scriptId: idpData.transform,\n            state,\n          });\n          if (options.useStringArrays) {\n            scriptData.script = convertBase64TextToArray(scriptData.script);\n          }\n          exportData.script[idpData.transform] = scriptData;\n        }\n      } catch (error) {\n        errors.push(error);\n      }\n    }\n    if (errors.length > 0) {\n      throw new FrodoError(`Error exporting dependencies`, errors);\n    }\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `${allIdpsData.length} providers exported.`,\n      state,\n    });\n    return exportData;\n  } catch (error) {\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Error exporting providers`,\n      status: 'fail',\n      state,\n    });\n    throw new FrodoError(`Error exporting providers`, error);\n  }\n}\n\n/**\n * Import social identity provider\n * @param {string} providerId provider id/name\n * @param {SocialProviderExportInterface} importData import data\n * @param {SocialIdentityProviderImportOptions} options import options\n * @returns {Promise<SocialIdpSkeleton>} a promise resolving to a social identity provider object\n */\nexport async function importSocialIdentityProvider({\n  providerId,\n  importData,\n  options = { deps: true },\n  state,\n}: {\n  providerId: string;\n  importData: SocialProviderExportInterface;\n  options?: SocialIdentityProviderImportOptions;\n  state: State;\n}): Promise<SocialIdpSkeleton> {\n  let response = null;\n  const errors = [];\n  const imported = [];\n  for (const idpId of Object.keys(importData.idp)) {\n    if (idpId === providerId) {\n      try {\n        if (options.deps && importData.idp[idpId].transform) {\n          try {\n            const scriptId = importData.idp[idpId].transform as string;\n            const scriptData = importData.script[scriptId as string];\n            if (scriptId && scriptData) {\n              scriptData.script = convertTextArrayToBase64(\n                scriptData.script as string[]\n              );\n              await updateScript({ scriptId, scriptData, state });\n            }\n          } catch (error) {\n            errors.push(error);\n          }\n        }\n        response = await updateSocialIdentityProvider({\n          providerType: importData.idp[idpId]._type._id,\n          providerId: idpId,\n          providerData: importData.idp[idpId],\n          state,\n        });\n        imported.push(idpId);\n      } catch (error) {\n        errors.push(error);\n      }\n    }\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(`Error importing provider ${providerId}`, errors);\n  }\n  if (0 === imported.length) {\n    throw new FrodoError(`Provider ${providerId} not found in import data`);\n  }\n  return response;\n}\n\n/**\n * Import first social identity provider\n * @param {SocialProviderExportInterface} importData import data\n * @param {SocialIdentityProviderImportOptions} options import options\n * @returns {Promise<SocialIdpSkeleton>} a promise resolving to a social identity provider object\n */\nexport async function importFirstSocialIdentityProvider({\n  importData,\n  options = { deps: true },\n  state,\n}: {\n  importData: SocialProviderExportInterface;\n  options?: SocialIdentityProviderImportOptions;\n  state: State;\n}): Promise<SocialIdpSkeleton> {\n  let response = null;\n  const errors = [];\n  const imported = [];\n  for (const idpId of Object.keys(importData.idp)) {\n    try {\n      if (options.deps && importData.idp[idpId].transform) {\n        try {\n          const scriptId = importData.idp[idpId].transform as string;\n          const scriptData = importData.script[scriptId as string];\n          if (scriptId && scriptData) {\n            scriptData.script = convertTextArrayToBase64(\n              scriptData.script as string[]\n            );\n            await updateScript({ scriptId, scriptData, state });\n          }\n        } catch (error) {\n          errors.push(error);\n        }\n      }\n      response = await updateSocialIdentityProvider({\n        providerType: importData.idp[idpId]._type._id,\n        providerId: idpId,\n        providerData: importData.idp[idpId],\n        state,\n      });\n      imported.push(idpId);\n    } catch (error) {\n      errors.push(error);\n    }\n    break;\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(`Error importing first provider`, errors);\n  }\n  if (0 === imported.length) {\n    throw new FrodoError(`No providers found in import data`);\n  }\n  return response;\n}\n\n/**\n * Import all social identity providers\n * @param {SocialProviderExportInterface} importData import data\n * @param {SocialIdentityProviderImportOptions} options import options\n * @returns {Promise<SocialIdpSkeleton[]>} a promise resolving to an array of social identity provider objects\n */\nexport async function importSocialIdentityProviders({\n  importData,\n  options = { deps: true },\n  state,\n}: {\n  importData: SocialProviderExportInterface;\n  options?: SocialIdentityProviderImportOptions;\n  state: State;\n}): Promise<SocialIdpSkeleton[]> {\n  const response = [];\n  const errors = [];\n  for (const idpId of Object.keys(importData.idp)) {\n    try {\n      if (options.deps && importData.idp[idpId].transform) {\n        try {\n          const scriptId = importData.idp[idpId].transform as string;\n          const scriptData = { ...importData.script[scriptId as string] };\n          if (scriptId && scriptData) {\n            scriptData.script = convertTextArrayToBase64(\n              scriptData.script as string[]\n            );\n            await updateScript({ scriptId, scriptData, state });\n          }\n        } catch (error) {\n          errors.push(error);\n        }\n      }\n      response.push(\n        await updateSocialIdentityProvider({\n          providerType: importData.idp[idpId]._type._id,\n          providerId: idpId,\n          providerData: importData.idp[idpId],\n          state,\n        })\n      );\n    } catch (error) {\n      errors.push(error);\n    }\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(`Error importing providers`);\n  }\n  return response;\n}\n\n// Deprecated\n\n/**\n * Import provider by id/name\n * @param {string} providerId provider id/name\n * @param {SocialProviderExportInterface} importData import data\n * @returns {Promise<boolean>} a promise resolving to true if successful, false otherwise\n */\nexport async function importSocialProvider({\n  providerId,\n  importData,\n  state,\n}: {\n  providerId: string;\n  importData: SocialProviderExportInterface;\n  state: State;\n}): Promise<boolean> {\n  for (const idpId of Object.keys(importData.idp)) {\n    if (idpId === providerId) {\n      const scriptId = importData.idp[idpId].transform as string;\n      const scriptData = importData.script[scriptId as string];\n      if (scriptId && scriptData) {\n        scriptData.script = convertTextArrayToBase64(\n          scriptData.script as string[]\n        );\n        await updateScript({ scriptId, scriptData, state });\n      }\n      await updateSocialIdentityProvider({\n        providerType: importData.idp[idpId]._type._id,\n        providerId: idpId,\n        providerData: importData.idp[idpId],\n        state,\n      });\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Import first provider\n * @param {SocialProviderExportInterface} importData import data\n * @returns {Promise<boolean>} a promise resolving to true if successful, false otherwise\n */\nexport async function importFirstSocialProvider({\n  importData,\n  state,\n}: {\n  importData: SocialProviderExportInterface;\n  state: State;\n}): Promise<boolean> {\n  for (const idpId of Object.keys(importData.idp)) {\n    const scriptId = importData.idp[idpId].transform as string;\n    const scriptData = importData.script[scriptId as string];\n    if (scriptId && scriptData) {\n      scriptData.script = convertTextArrayToBase64(\n        scriptData.script as string[]\n      );\n      await updateScript({ scriptId, scriptData, state });\n    }\n    await updateSocialIdentityProvider({\n      providerType: importData.idp[idpId]._type._id,\n      providerId: idpId,\n      providerData: importData.idp[idpId],\n      state,\n    });\n    return true;\n  }\n  return false;\n}\n\n/**\n * Import all providers\n * @param {SocialProviderExportInterface} importData import data\n * @returns {Promise<boolean>} a promise resolving to true if successful, false otherwise\n */\nexport async function importSocialProviders({\n  importData,\n  state,\n}: {\n  importData: SocialProviderExportInterface;\n  state: State;\n}): Promise<boolean> {\n  let outcome = true;\n  for (const idpId of Object.keys(importData.idp)) {\n    try {\n      const scriptId = importData.idp[idpId].transform as string;\n      const scriptData = { ...importData.script[scriptId as string] };\n      if (scriptId && scriptData) {\n        scriptData.script = convertTextArrayToBase64(\n          scriptData.script as string[]\n        );\n        await updateScript({ scriptId, scriptData, state });\n      }\n      await updateSocialIdentityProvider({\n        providerType: importData.idp[idpId]._type._id,\n        providerId: idpId,\n        providerData: importData.idp[idpId],\n        state,\n      });\n    } catch (error) {\n      outcome = false;\n    }\n  }\n  return outcome;\n}\n","import axios, { AxiosError } from 'axios';\nimport fs from 'fs';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport {\n  type CircleOfTrustSkeleton,\n  createCircleOfTrust,\n  updateCircleOfTrust,\n} from '../api/CirclesOfTrustApi';\nimport {\n  deleteNode,\n  getNode,\n  type InnerNodeRefSkeletonInterface,\n  type NodeRefSkeletonInterface,\n  type NodeSkeleton,\n  putNode,\n  type StaticNodeRefSkeletonInterface,\n} from '../api/NodeApi';\nimport {\n  createProvider,\n  getProvider,\n  getProviderMetadata,\n  queryProviderStubs,\n  type Saml2ProviderSkeleton,\n  updateProvider,\n} from '../api/Saml2Api';\nimport { getScript, type ScriptSkeleton } from '../api/ScriptApi';\nimport {\n  getSocialIdentityProviders,\n  putProviderByTypeAndId,\n  type SocialIdpSkeleton,\n} from '../api/SocialIdentityProvidersApi';\nimport {\n  deleteTree,\n  getTree,\n  getTrees,\n  putTree,\n  type TreeSkeleton,\n} from '../api/TreeApi';\nimport Constants from '../shared/Constants';\nimport { State } from '../shared/State';\nimport {\n  decode,\n  encode,\n  encodeBase64Url,\n  isBase64Encoded,\n} from '../utils/Base64Utils';\nimport {\n  createProgressIndicator,\n  debugMessage,\n  printMessage,\n  stopProgressIndicator,\n  updateProgressIndicator,\n} from '../utils/Console';\nimport {\n  convertBase64TextToArray,\n  convertTextArrayToBase64,\n  convertTextArrayToBase64Url,\n  findFilesByName,\n  getMetadata,\n  getTypedFilename,\n} from '../utils/ExportImportUtils';\nimport { getCurrentRealmManagedUser } from '../utils/ForgeRockUtils';\nimport { findInArray } from '../utils/JsonUtils';\nimport { readCirclesOfTrust } from './CirclesOfTrustOps';\nimport {\n  type EmailTemplateSkeleton,\n  readEmailTemplate,\n  updateEmailTemplate,\n} from './EmailTemplateOps';\nimport { FrodoError } from './FrodoError';\nimport {\n  findOrphanedNodes as _findOrphanedNodes,\n  isCloudOnlyNode,\n  isCustomNode,\n  isPremiumNode,\n  removeOrphanedNodes as _removeOrphanedNodes,\n} from './NodeOps';\nimport { type ExportMetaData } from './OpsTypes';\nimport { readSaml2ProviderStubs } from './Saml2Ops';\nimport { updateScript } from './ScriptOps';\nimport { readThemes, type ThemeSkeleton, updateThemes } from './ThemeOps';\n\nexport type Journey = {\n  /**\n   * Create an empty single tree export template\n   * @returns {SingleTreeExportInterface} an empty single tree export template\n   */\n  createSingleTreeExportTemplate(): SingleTreeExportInterface;\n  /**\n   * Create an empty multi tree export template\n   * @returns {MultiTreeExportInterface} an empty multi tree export template\n   */\n  createMultiTreeExportTemplate(): MultiTreeExportInterface;\n  /**\n   * Create export data for a tree/journey with all its nodes and dependencies. The export data can be written to a file as is.\n   * @param {string} treeId tree id/name\n   * @param {TreeExportOptions} options export options\n   * @returns {Promise<SingleTreeExportInterface>} a promise that resolves to an object containing the tree and all its nodes and dependencies\n   */\n  exportJourney(\n    treeId: string,\n    options?: TreeExportOptions\n  ): Promise<SingleTreeExportInterface>;\n  /**\n   * Create export data for all trees/journeys with all their nodes and dependencies. The export data can be written to a file as is.\n   * @param {TreeExportOptions} options export options\n   * @returns {Promise<MultiTreeExportInterface>} a promise that resolves to an object containing the trees and all their nodes and dependencies\n   */\n  exportJourneys(\n    options?: TreeExportOptions\n  ): Promise<MultiTreeExportInterface>;\n  /**\n   * Read all journeys without dependencies.\n   * @returns {Promise<TreeSkeleton[]>} a promise that resolves to an array of journey objects\n   */\n  readJourneys(): Promise<TreeSkeleton[]>;\n  /**\n   * Read journey without dependencies.\n   * @param {string} journeyId journey id/name\n   * @returns {Promise<TreeSkeleton>} a promise that resolves to a journey object\n   */\n  readJourney(journeyId: string): Promise<TreeSkeleton>;\n  /**\n   * Create journey without dependencies.\n   * @param {string} journeyId journey id/name\n   * @returns {Promise<TreeSkeleton>} a promise that resolves to a journey object\n   */\n  createJourney(\n    journeyId: string,\n    journeyData: TreeSkeleton\n  ): Promise<TreeSkeleton>;\n  /**\n   * Update journey without dependencies.\n   * @param {string} journeyId journey id/name\n   * @returns {Promise<TreeSkeleton>} a promise that resolves to a journey object\n   */\n  updateJourney(\n    journeyId: string,\n    journeyData: TreeSkeleton\n  ): Promise<TreeSkeleton>;\n  /**\n   * Import journey\n   * @param {SingleTreeExportInterface} treeObject tree object containing tree and all its dependencies\n   * @param {TreeImportOptions} options import options\n   * @returns {Promise<TreeSkeleton>} a promise that resolves to a journey object\n   */\n  importJourney(\n    treeObject: SingleTreeExportInterface,\n    options: TreeImportOptions\n  ): Promise<TreeSkeleton>;\n  /**\n   * Resolve journey dependencies\n   * @param {string[]} installedJorneys Map of installed journeys\n   * @param {Record<string, SingleTreeExportInterface>} journeyMap Map of journeys to resolve dependencies for\n   * @param {string[]} unresolvedJourneys Map to hold the names of unresolved journeys and their dependencies\n   * @param {string[]} resolvedJourneys Array to hold the names of resolved journeys\n   * @param {int} index Depth of recursion\n   */\n  resolveDependencies(\n    installedJorneys: any,\n    journeyMap: any,\n    unresolvedJourneys: any,\n    resolvedJourneys: any,\n    index?: number\n  ): Promise<void>;\n  /**\n   * Import journeys\n   * @param {MultiTreeExportInterface} importData map of trees object\n   * @param {TreeImportOptions} options import options\n   */\n  importJourneys(\n    importData: MultiTreeExportInterface,\n    options: TreeImportOptions\n  ): Promise<TreeSkeleton[]>;\n  /**\n   * Get the node reference obbject for a node object. Node reference objects\n   * are used in a tree flow definition and within page nodes to reference\n   * nodes. Among other things, node references contain all the non-configuration\n   * meta data that exists for readaility, like the x/y coordinates of the node\n   * and the display name chosen by the tree designer. The dislay name is the\n   * only intuitive link between the graphical representation of the tree and\n   * the node configurations that make up the tree.\n   * @param nodeObj node object to retrieve the node reference object for\n   * @param singleTreeExport tree export with or without dependencies\n   * @returns {NodeRefSkeletonInterface | InnerNodeRefSkeletonInterface} node reference object\n   */\n  getNodeRef(\n    nodeObj: NodeSkeleton,\n    singleTreeExport: SingleTreeExportInterface\n  ): NodeRefSkeletonInterface | InnerNodeRefSkeletonInterface;\n  /**\n   * Default tree export resolver used to resolve a tree id/name to a full export\n   * w/o dependencies of that tree from a platform instance.\n   * @param {string} treeId id/name of the tree to resolve\n   * @returns {TreeExportResolverInterface} tree export\n   */\n  onlineTreeExportResolver: TreeExportResolverInterface;\n  /**\n   * Tree export resolver used to resolve a tree id/name to a full export\n   * of that tree from individual `treename.journey.json` export files.\n   * @param {string} treeId id/name of the tree to resolve\n   * @returns {TreeExportResolverInterface} tree export\n   */\n  fileByIdTreeExportResolver: TreeExportResolverInterface;\n  /**\n   * Factory that creates a tree export resolver used to resolve a tree id\n   * to a full export of that tree from a multi-tree export file.\n   * @param {string} file multi-tree export file\n   * @returns {TreeExportResolverInterface} tree export resolver\n   */\n  createFileParamTreeExportResolver(file: string): TreeExportResolverInterface;\n  /**\n   * Get tree dependencies (all descendent inner trees)\n   * @param {SingleTreeExportInterface} treeExport single tree export\n   * @param {string[]} resolvedTreeIds list of tree ids wich have already been resolved\n   * @param {TreeExportResolverInterface} resolveTreeExport tree export resolver callback function\n   * @returns {Promise<TreeDependencyMapInterface>} a promise that resolves to a tree dependency map\n   */\n  getTreeDescendents(\n    treeExport: SingleTreeExportInterface,\n    resolveTreeExport: TreeExportResolverInterface,\n    resolvedTreeIds?: string[]\n  ): Promise<TreeDependencyMapInterface>;\n  /**\n   * Analyze if a journey contains any custom nodes considering the detected or the overridden version.\n   * @param {SingleTreeExportInterface} journey Journey/tree configuration object\n   * @returns {boolean} True if the journey/tree contains any custom nodes, false otherwise.\n   */\n  isCustomJourney(journey: SingleTreeExportInterface): boolean;\n  /**\n   * Analyze if a journey contains any premium nodes considering the detected or the overridden version.\n   * @param {SingleTreeExportInterface} journey Journey/tree configuration object\n   * @returns {boolean} True if the journey/tree contains any custom nodes, false otherwise.\n   */\n  isPremiumJourney(journey: SingleTreeExportInterface): boolean;\n  /**\n   * Analyze if a journey contains any cloud-only nodes considering the detected or the overridden version.\n   * @param {SingleTreeExportInterface} journey Journey/tree configuration object\n   * @returns {boolean} True if the journey/tree contains any cloud-only nodes, false otherwise.\n   */\n  isCloudOnlyJourney(journey: SingleTreeExportInterface): boolean;\n  /**\n   * Get a journey's classifications, which can be one or multiple of:\n   * - standard: can run on any instance of a ForgeRock platform\n   * - cloud: utilize nodes, which are exclusively available in the ForgeRock Identity Cloud\n   * - premium: utilizes nodes, which come at a premium\n   * - custom: utilizes nodes not included in the ForgeRock platform release\n   * @param {SingleTreeExportInterface} journey journey export data\n   * @returns {JourneyClassificationType[]} an array of one or multiple classifications\n   */\n  getJourneyClassification(\n    journey: SingleTreeExportInterface\n  ): JourneyClassificationType[];\n  /**\n   * Delete a journey\n   * @param {string} journeyId journey id/name\n   * @param {Object} options deep=true also delete all the nodes and inner nodes, verbose=true print verbose info\n   */\n  deleteJourney(\n    journeyId: string,\n    options: {\n      deep: boolean;\n      verbose: boolean;\n      progress?: boolean;\n    }\n  ): Promise<DeleteJourneyStatus>;\n  /**\n   * Delete all journeys\n   * @param {Object} options deep=true also delete all the nodes and inner nodes, verbose=true print verbose info\n   */\n  deleteJourneys(options: {\n    deep: boolean;\n    verbose: boolean;\n  }): Promise<DeleteJourneysStatus>;\n  /**\n   * Enable a journey\n   * @param journeyId journey id/name\n   * @returns {Promise<TreeSkeleton>} the updated tree/journey object\n   */\n  enableJourney(journeyId: string): Promise<TreeSkeleton>;\n  /**\n   * Disable a journey\n   * @param journeyId journey id/name\n   * @returns {Promise<TreeSkeleton>} the updated tree/journey object\n   */\n  disableJourney(journeyId: string): Promise<TreeSkeleton>;\n\n  // Deprecated\n\n  /**\n   * Get all the journeys/trees without all their nodes and dependencies.\n   * @returns {Promise<TreeSkeleton[]>} a promise that resolves to an array of journey objects\n   * @deprecated since v2.0.0 use {@link Journey.readJourneys | readJourneys} instead\n   * ```javascript\n   * readJourneys(): Promise<TreeSkeleton[]>\n   * ```\n   * @group Deprecated\n   */\n  getJourneys(): Promise<TreeSkeleton[]>;\n  /**\n   * Get a journey/tree without all its nodes and dependencies.\n   * @param {string} journeyId journey id/name\n   * @returns {Promise<TreeSkeleton>} a promise that resolves to a journey object\n   * @deprecated since v2.0.0 use {@link Journey.readJourney | readJourney} instead\n   * ```javascript\n   * readJourney(journeyId: string): Promise<TreeSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  getJourney(journeyId: string): Promise<TreeSkeleton>;\n  /**\n   * Import journeys\n   * @param {MultiTreeExportInterface} importData map of trees object\n   * @param {TreeImportOptions} options import options\n   * @deprecated since v2.0.0 use {@link Journey.importJourneys | importJourneys} instead\n   * ```javascript\n   * importJourneys(importData: MultiTreeExportInterface, options: TreeImportOptions): Promise<TreeSkeleton[]>\n   * ```\n   * @group Deprecated\n   */\n  importAllJourneys(\n    importData: MultiTreeExportInterface,\n    options: TreeImportOptions\n  ): Promise<TreeSkeleton[]>;\n  /**\n   * Find all node configuration objects that are no longer referenced by any tree\n   * @returns {Promise<NodeSkeleton[]>} a promise that resolves to an array of orphaned nodes\n   * @deprecated since v2.0.0 use {@link Node.findOrphanedNodes | findOrphanedNodes} in the {@link Node} module instead\n   * @group Deprecated\n   */\n  findOrphanedNodes(): Promise<NodeSkeleton[]>;\n  /**\n   * Remove orphaned nodes\n   * @param {NodeSkeleton[]} orphanedNodes Pass in an array of orphaned node configuration objects to remove\n   * @returns {Promise<NodeSkeleton[]>} a promise that resolves to an array nodes that encountered errors deleting\n   * @deprecated since v2.0.0 use {@link Node.removeOrphanedNodes | removeOrphanedNodes} in the {@link Node} module instead\n   * @group Deprecated\n   */\n  removeOrphanedNodes(orphanedNodes: NodeSkeleton[]): Promise<NodeSkeleton[]>;\n};\n\nexport default (state: State): Journey => {\n  return {\n    createSingleTreeExportTemplate(): SingleTreeExportInterface {\n      return createSingleTreeExportTemplate({ state });\n    },\n    createMultiTreeExportTemplate(): MultiTreeExportInterface {\n      return createMultiTreeExportTemplate({ state });\n    },\n    async exportJourney(\n      treeId: string,\n      options: TreeExportOptions = {\n        useStringArrays: true,\n        deps: true,\n        coords: true,\n      }\n    ): Promise<SingleTreeExportInterface> {\n      return exportJourney({ journeyId: treeId, options, state });\n    },\n    async exportJourneys(\n      options: TreeExportOptions = {\n        useStringArrays: true,\n        deps: true,\n        coords: true,\n      }\n    ): Promise<MultiTreeExportInterface> {\n      return exportJourneys({ options, state });\n    },\n    async readJourneys(): Promise<TreeSkeleton[]> {\n      return readJourneys({ state });\n    },\n    async readJourney(journeyId: string): Promise<TreeSkeleton> {\n      return readJourney({ journeyId, state });\n    },\n    async createJourney(\n      journeyId: string,\n      journeyData: TreeSkeleton\n    ): Promise<TreeSkeleton> {\n      return createJourney({ journeyId, journeyData, state });\n    },\n    async updateJourney(\n      journeyId: string,\n      journeyData: TreeSkeleton\n    ): Promise<TreeSkeleton> {\n      return updateJourney({ journeyId, journeyData, state });\n    },\n    async importJourney(\n      treeObject: SingleTreeExportInterface,\n      options: TreeImportOptions\n    ): Promise<TreeSkeleton> {\n      return importJourney({ importData: treeObject, options, state });\n    },\n    async resolveDependencies(\n      installedJorneys,\n      journeyMap,\n      unresolvedJourneys,\n      resolvedJourneys,\n      index = -1\n    ) {\n      return resolveDependencies(\n        installedJorneys,\n        journeyMap,\n        unresolvedJourneys,\n        resolvedJourneys,\n        index\n      );\n    },\n    async importJourneys(\n      treesMap: MultiTreeExportInterface,\n      options: TreeImportOptions\n    ): Promise<TreeSkeleton[]> {\n      return importJourneys({ importData: treesMap, options, state });\n    },\n    getNodeRef(\n      nodeObj: NodeSkeleton,\n      singleTreeExport: SingleTreeExportInterface\n    ): NodeRefSkeletonInterface | InnerNodeRefSkeletonInterface {\n      return getNodeRef(nodeObj, singleTreeExport);\n    },\n    onlineTreeExportResolver,\n    fileByIdTreeExportResolver,\n    createFileParamTreeExportResolver(\n      file: string\n    ): TreeExportResolverInterface {\n      return createFileParamTreeExportResolver(file, state);\n    },\n    async getTreeDescendents(\n      treeExport: SingleTreeExportInterface,\n      resolveTreeExport: TreeExportResolverInterface,\n      resolvedTreeIds: string[] = []\n    ): Promise<TreeDependencyMapInterface> {\n      return getTreeDescendents({\n        treeExport,\n        resolveTreeExport,\n        resolvedTreeIds,\n        state,\n      });\n    },\n    isCustomJourney(journey: SingleTreeExportInterface) {\n      return isCustomJourney({ journey, state });\n    },\n    isPremiumJourney(journey: SingleTreeExportInterface) {\n      return isPremiumJourney(journey);\n    },\n    isCloudOnlyJourney(journey: SingleTreeExportInterface) {\n      return isCloudOnlyJourney(journey);\n    },\n    getJourneyClassification(\n      journey: SingleTreeExportInterface\n    ): JourneyClassificationType[] {\n      return getJourneyClassification({ journey, state });\n    },\n    async deleteJourney(\n      journeyId: string,\n      options: { deep: boolean; verbose: boolean; progress?: boolean }\n    ) {\n      return deleteJourney({ journeyId, options, state });\n    },\n    async deleteJourneys(options: { deep: boolean; verbose: boolean }) {\n      return deleteJourneys({ options, state });\n    },\n    async enableJourney(journeyId: string): Promise<TreeSkeleton> {\n      return enableJourney({ journeyId, state });\n    },\n    async disableJourney(journeyId: string): Promise<TreeSkeleton> {\n      return disableJourney({ journeyId, state });\n    },\n\n    // Deprecated\n\n    async getJourneys(): Promise<TreeSkeleton[]> {\n      return readJourneys({ state });\n    },\n    async getJourney(journeyId: string): Promise<TreeSkeleton> {\n      return readJourney({ journeyId, state });\n    },\n    async importAllJourneys(\n      treesMap: MultiTreeExportInterface,\n      options: TreeImportOptions\n    ): Promise<TreeSkeleton[]> {\n      return importJourneys({ importData: treesMap, options, state });\n    },\n    async findOrphanedNodes(): Promise<NodeSkeleton[]> {\n      return _findOrphanedNodes({ state });\n    },\n    async removeOrphanedNodes(\n      orphanedNodes: NodeSkeleton[]\n    ): Promise<NodeSkeleton[]> {\n      return _removeOrphanedNodes({ orphanedNodes, state });\n    },\n  };\n};\n\n/**\n * Tree export options\n */\nexport interface TreeExportOptions {\n  /**\n   * Where applicable, use string arrays to store multi-line text (e.g. scripts).\n   */\n  useStringArrays: boolean;\n  /**\n   * Include any dependencies (scripts, email templates, SAML entity providers and circles of trust, social identity providers, themes).\n   */\n  deps: boolean;\n  /**\n   * Include x and y coordinate positions of the journey/tree nodes.\n   */\n  coords: boolean;\n}\n\n/**\n * Tree import options\n */\nexport interface TreeImportOptions {\n  /**\n   * Generate new UUIDs for all nodes during import.\n   */\n  reUuid: boolean;\n  /**\n   * Include any dependencies (scripts, email templates, SAML entity providers and circles of trust, social identity providers, themes).\n   */\n  deps: boolean;\n}\n\nexport interface SingleTreeExportInterface {\n  meta?: ExportMetaData;\n  innerNodes?: Record<string, NodeSkeleton>;\n  innernodes?: Record<string, NodeSkeleton>;\n  nodes: Record<string, NodeSkeleton>;\n  scripts: Record<string, ScriptSkeleton>;\n  emailTemplates: Record<string, EmailTemplateSkeleton>;\n  socialIdentityProviders: Record<string, SocialIdpSkeleton>;\n  themes: ThemeSkeleton[];\n  saml2Entities: Record<string, Saml2ProviderSkeleton>;\n  circlesOfTrust: Record<string, CircleOfTrustSkeleton>;\n  tree: TreeSkeleton;\n}\n\nexport interface MultiTreeExportInterface {\n  meta?: ExportMetaData;\n  trees: Record<string, SingleTreeExportInterface>;\n}\n\nexport type JourneyClassificationType =\n  | 'standard'\n  | 'custom'\n  | 'cloud'\n  | 'premium';\n\nexport enum JourneyClassification {\n  STANDARD = 'standard',\n  CUSTOM = 'custom',\n  CLOUD = 'cloud',\n  PREMIUM = 'premium',\n}\n\nexport interface TreeDependencyMapInterface {\n  [k: string]: TreeDependencyMapInterface[];\n}\n\nexport interface TreeExportResolverInterface {\n  (treeId: string, state: State): Promise<SingleTreeExportInterface>;\n}\n\nconst containerNodes = ['PageNode', 'CustomPageNode'];\n\nconst scriptedNodesConditions = {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  ClientScriptNode: (_nodeConfig: NodeSkeleton): boolean => {\n    return true;\n  },\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  ConfigProviderNode: (_nodeConfig: NodeSkeleton): boolean => {\n    return true;\n  },\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  DeviceMatchNode: (nodeConfig: NodeSkeleton): boolean => {\n    return nodeConfig.useScript;\n  },\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  ScriptedDecisionNode: (_nodeConfig: NodeSkeleton): boolean => {\n    return true;\n  },\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  SocialProviderHandlerNode: (_nodeConfig: NodeSkeleton): boolean => {\n    return true;\n  },\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  CustomScriptNode: (_nodeConfig: NodeSkeleton): boolean => {\n    return true;\n  },\n};\n\nexport function hasScriptDependency(nodeConfig: NodeSkeleton): boolean {\n  if (Object.keys(scriptedNodesConditions).includes(nodeConfig._type._id)) {\n    const handler: any = scriptedNodesConditions[nodeConfig._type._id];\n    return handler(nodeConfig);\n  }\n  return false;\n}\n\nconst emailTemplateNodes = ['EmailSuspendNode', 'EmailTemplateNode'];\n\nconst emptyScriptPlaceholder = '[Empty]';\n\n/**\n * Create an empty single tree export template\n * @returns {SingleTreeExportInterface} an empty single tree export template\n */\nfunction createSingleTreeExportTemplate({\n  state,\n}: {\n  state: State;\n}): SingleTreeExportInterface {\n  return {\n    meta: getMetadata({ state }),\n    innerNodes: {},\n    nodes: {},\n    scripts: {},\n    emailTemplates: {},\n    socialIdentityProviders: {},\n    themes: [],\n    saml2Entities: {},\n    circlesOfTrust: {},\n    tree: {},\n  } as SingleTreeExportInterface;\n}\n\n/**\n * Create an empty multi tree export template\n * @returns {MultiTreeExportInterface} an empty multi tree export template\n */\nfunction createMultiTreeExportTemplate({\n  state,\n}: {\n  state: State;\n}): MultiTreeExportInterface {\n  return {\n    meta: getMetadata({ state }),\n    trees: {},\n  } as MultiTreeExportInterface;\n}\n\n/**\n * Updates coordinates of the nodes in a tree to the same as the nodes on the server if the nodes on the tree do not exist.\n * @param {TreeSkeleton} tree The tree being imported\n * @param {string} nodesAttributeName The name (key) of the attribute on the tree that has nodes\n * @param {TreeSkeleton} serverTree The current tree on the server\n * @returns {TreeSkeleton} The current tree on the server\n */\nexport async function updateCoordinates({\n  tree,\n  nodesAttributeName,\n  serverTree,\n  state,\n}: {\n  tree: TreeSkeleton;\n  nodesAttributeName: string;\n  serverTree: TreeSkeleton | null;\n  state: State;\n}): Promise<TreeSkeleton | null> {\n  const nodeEntries = Object.entries(\n    tree[nodesAttributeName] as\n      | NodeRefSkeletonInterface\n      | StaticNodeRefSkeletonInterface\n  ).filter(\n    ([, nodeInfo]) => nodeInfo.x === undefined || nodeInfo.y === undefined\n  );\n  if (nodeEntries.length === 0) {\n    return serverTree;\n  }\n  if (serverTree === null) {\n    try {\n      serverTree = await getTree({ id: tree._id, state: state });\n    } catch (e) {\n      if (!axios.isAxiosError(e) || (e as AxiosError).response.status !== 404) {\n        throw e;\n      }\n    }\n  }\n  nodeEntries.forEach(([nodeId, nodeInfo]) => {\n    const coords =\n      serverTree == undefined ||\n      serverTree[nodesAttributeName] == undefined ||\n      serverTree[nodesAttributeName][nodeId] == undefined\n        ? {\n            x: 0,\n            y: 0,\n          }\n        : serverTree[nodesAttributeName][nodeId];\n    nodeInfo.x =\n      nodeInfo.x === undefined\n        ? coords.x == undefined\n          ? 0\n          : coords.x\n        : nodeInfo.x;\n    nodeInfo.y =\n      nodeInfo.y === undefined\n        ? coords.y == undefined\n          ? 0\n          : coords.y\n        : nodeInfo.y;\n  });\n  return serverTree;\n}\n\n/**\n * Helper to get all SAML2 dependencies for a given node object\n * @param {Object} nodeObject node object\n * @param {[Object]} allProviders array of all saml2 providers objects\n * @param {[Object]} allCirclesOfTrust array of all circle of trust objects\n * @returns {Promise} a promise that resolves to an object containing a saml2 dependencies\n */\nasync function getSaml2NodeDependencies(\n  nodeObject: any,\n  allProviders: any[],\n  allCirclesOfTrust: any[],\n  state: State\n) {\n  const samlProperties = ['metaAlias', 'idpEntityId'];\n  const saml2EntityPromises = [];\n  const saml2Entities = [];\n  let circlesOfTrust = [];\n  let saml2NodeDependencies = {\n    saml2Entities,\n    circlesOfTrust,\n  };\n  const errors = [];\n  for (const samlProperty of samlProperties) {\n    // In the following line nodeObject[samlProperty] will look like '/alpha/iSPAzure'.\n    const entityId =\n      samlProperty === 'metaAlias'\n        ? nodeObject[samlProperty].split('/').pop()\n        : nodeObject[samlProperty];\n    const entity = findInArray(allProviders, { entityId });\n    if (entity) {\n      try {\n        const providerResponse = await getProvider({\n          location: entity.location,\n          entityId64: entity._id,\n          state,\n        });\n        /**\n         * Adding entityLocation here to the entityResponse because the import tool\n         * needs to know whether the saml2 entity is remote or not (this will be removed\n         * from the config before importing see updateSaml2Entity and createSaml2Entity functions).\n         * Importing a remote saml2 entity is a slightly different request (see createSaml2Entity).\n         */\n        providerResponse.entityLocation = entity.location;\n\n        if (entity.location === 'remote') {\n          // get the xml representation of this entity and add it to the entityResponse;\n          const metaDataResponse = await getProviderMetadata({\n            entityId: providerResponse.entityId,\n            state,\n          });\n          providerResponse.base64EntityXML = encodeBase64Url(metaDataResponse);\n        }\n        saml2EntityPromises.push(providerResponse);\n      } catch (error) {\n        error.message = `Error reading saml2 dependencies: ${\n          error.response?.data?.message || error.message\n        }`;\n        errors.push(error);\n      }\n    }\n  }\n  try {\n    const saml2EntitiesPromisesResults = await Promise.all(saml2EntityPromises);\n    for (const saml2Entity of saml2EntitiesPromisesResults) {\n      if (saml2Entity) {\n        saml2Entities.push(saml2Entity);\n      }\n    }\n    const samlEntityIds = saml2Entities.map(\n      (saml2EntityConfig) => `${saml2EntityConfig.entityId}|saml2`\n    );\n    circlesOfTrust = allCirclesOfTrust.filter((circleOfTrust) => {\n      let hasEntityId = false;\n      for (const trustedProvider of circleOfTrust.trustedProviders) {\n        if (!hasEntityId && samlEntityIds.includes(trustedProvider)) {\n          hasEntityId = true;\n        }\n      }\n      return hasEntityId;\n    });\n    saml2NodeDependencies = {\n      saml2Entities,\n      circlesOfTrust,\n    };\n  } catch (error) {\n    error.message = `Error reading saml2 dependencies: ${\n      error.response?.data?.message || error.message\n    }`;\n    errors.push(error);\n  }\n  if (errors.length) {\n    const errorMessages = errors.map((error) => error.message).join('\\n');\n    throw new Error(`Saml2 dependencies error:\\n${errorMessages}`);\n  }\n  return saml2NodeDependencies;\n}\n\n/**\n * Create export data for a tree/journey with all its nodes and dependencies. The export data can be written to a file as is.\n * @param {string} journeyId journey id/name\n * @param {TreeExportOptions} options export options\n * @returns {Promise<SingleTreeExportInterface>} a promise that resolves to an object containing the tree and all its nodes and dependencies\n */\nexport async function exportJourney({\n  journeyId,\n  options = {\n    useStringArrays: true,\n    deps: true,\n    coords: true,\n  },\n  state,\n}: {\n  journeyId: string;\n  options?: TreeExportOptions;\n  state: State;\n}): Promise<SingleTreeExportInterface> {\n  debugMessage({\n    message: `JourneyOps.exportJourney: start [journey=${journeyId}]`,\n    state,\n  });\n  const exportData = createSingleTreeExportTemplate({ state });\n  const errors = [];\n  try {\n    const treeObject = await getTree({ id: journeyId, state });\n    const { useStringArrays, deps, coords } = options;\n    const verbose = state.getVerbose();\n\n    if (verbose)\n      printMessage({\n        message: `- ${treeObject._id}`,\n        type: 'info',\n        newline: false,\n        state,\n      });\n\n    // Process tree\n    if (verbose) printMessage({ message: '\\n  - Flow', newline: false, state });\n    exportData.tree = treeObject;\n    if (verbose && treeObject.identityResource)\n      printMessage({\n        message: `\\n    - identityResource: ${treeObject.identityResource}`,\n        type: 'info',\n        newline: false,\n        state,\n      });\n    if (verbose)\n      printMessage({\n        message: `\\n    - Done`,\n        newline: false,\n        type: 'info',\n        state,\n      });\n\n    const nodePromises = [];\n    const scriptPromises = [];\n    const emailTemplatePromises = [];\n    const innerNodePromises = [];\n    const saml2ConfigPromises = [];\n    let socialProviderPromise = null;\n    let themePromise = null;\n    if (\n      deps &&\n      state.getDeploymentType() !== Constants.CLASSIC_DEPLOYMENT_TYPE_KEY\n    ) {\n      themePromise = readThemes({ state });\n    }\n\n    let allSaml2Providers = null;\n    let allCirclesOfTrust = null;\n    let filteredSocialProviders = null;\n    const themes = [];\n\n    // get all the nodes\n    for (const [nodeId, nodeInfo] of Object.entries(treeObject.nodes)) {\n      nodePromises.push(\n        getNode({ nodeId, nodeType: nodeInfo['nodeType'], state })\n      );\n      if (!coords) {\n        delete nodeInfo['x'];\n        delete nodeInfo['y'];\n      }\n    }\n    if (!coords) {\n      for (const [, nodeInfo] of Object.entries(treeObject.staticNodes)) {\n        delete nodeInfo['x'];\n        delete nodeInfo['y'];\n      }\n    }\n    if (verbose && nodePromises.length > 0)\n      printMessage({ message: '\\n  - Nodes:', newline: false, state });\n    const nodeObjects = await Promise.all(nodePromises);\n\n    // iterate over every node in tree\n    for (const nodeObject of nodeObjects) {\n      const nodeId = nodeObject._id;\n      const nodeType = nodeObject._type._id;\n      if (verbose)\n        printMessage({\n          message: `\\n    - ${nodeId} (${nodeType})`,\n          type: 'info',\n          newline: false,\n          state,\n        });\n      exportData.nodes[nodeObject._id] = nodeObject;\n\n      // handle script node types\n      if (\n        deps &&\n        hasScriptDependency(nodeObject) &&\n        nodeObject.script !== emptyScriptPlaceholder\n      ) {\n        scriptPromises.push(getScript({ scriptId: nodeObject.script, state }));\n      }\n\n      // frodo supports email templates in platform deployments\n      if (\n        (deps &&\n          state.getDeploymentType() === Constants.CLOUD_DEPLOYMENT_TYPE_KEY) ||\n        state.getDeploymentType() === Constants.FORGEOPS_DEPLOYMENT_TYPE_KEY\n      ) {\n        if (emailTemplateNodes.includes(nodeType)) {\n          try {\n            const emailTemplate = await readEmailTemplate({\n              templateId: nodeObject.emailTemplateName,\n              state,\n            });\n            emailTemplatePromises.push(emailTemplate);\n          } catch (error) {\n            error.message = `Error reading email template ${\n              nodeObject.emailTemplateName\n            }: ${error.response?.data?.message || error.message}`;\n            errors.push(error);\n          }\n        }\n      }\n\n      // handle SAML2 node dependencies\n      if (deps && nodeType === 'product-Saml2Node') {\n        if (!allSaml2Providers) {\n          try {\n            allSaml2Providers = await readSaml2ProviderStubs({ state });\n          } catch (error) {\n            errors.push(new FrodoError(`Error reading saml2 providers`, error));\n          }\n        }\n        if (!allCirclesOfTrust) {\n          try {\n            allCirclesOfTrust = await readCirclesOfTrust({ state });\n          } catch (error) {\n            errors.push(\n              new FrodoError(`Error reading circles of trust`, error)\n            );\n          }\n        }\n        saml2ConfigPromises.push(\n          getSaml2NodeDependencies(\n            nodeObject,\n            allSaml2Providers,\n            allCirclesOfTrust,\n            state\n          )\n        );\n      }\n\n      // If this is a SocialProviderHandlerNode get each enabled social identity provider.\n      if (\n        deps &&\n        !socialProviderPromise &&\n        nodeType === 'SocialProviderHandlerNode'\n      ) {\n        socialProviderPromise = getSocialIdentityProviders({ state });\n      }\n\n      // If this is a SelectIdPNode and filteredProviters is not already set to empty array set filteredSocialProviers.\n      if (deps && !filteredSocialProviders && nodeType === 'SelectIdPNode') {\n        filteredSocialProviders = filteredSocialProviders || [];\n        for (const filteredProvider of nodeObject.filteredProviders) {\n          if (!filteredSocialProviders.includes(filteredProvider)) {\n            filteredSocialProviders.push(filteredProvider);\n          }\n        }\n      }\n\n      // get inner nodes (nodes inside container nodes)\n      if (containerNodes.includes(nodeType)) {\n        for (const innerNode of nodeObject.nodes) {\n          innerNodePromises.push(\n            getNode({\n              nodeId: innerNode._id,\n              nodeType: innerNode.nodeType,\n              state,\n            })\n          );\n        }\n        // frodo supports themes in platform deployments\n        if (\n          (deps &&\n            state.getDeploymentType() ===\n              Constants.CLOUD_DEPLOYMENT_TYPE_KEY) ||\n          state.getDeploymentType() === Constants.FORGEOPS_DEPLOYMENT_TYPE_KEY\n        ) {\n          let themeId = false;\n\n          if (nodeObject.stage) {\n            // see if themeId is part of the stage object\n            try {\n              themeId = JSON.parse(nodeObject.stage).themeId;\n            } catch (e) {\n              themeId = false;\n            }\n            // if the page node's themeId is set the \"old way\" set themeId accordingly\n            if (!themeId && nodeObject.stage.indexOf('themeId=') === 0) {\n              // eslint-disable-next-line prefer-destructuring\n              themeId = nodeObject.stage.split('=')[1];\n            }\n          }\n\n          if (themeId) {\n            if (!themes.includes(themeId)) themes.push(themeId);\n          }\n        }\n      }\n    }\n\n    // Process inner nodes\n    if (verbose && innerNodePromises.length > 0)\n      printMessage({ message: '\\n  - Inner nodes:', newline: false, state });\n    try {\n      const settledPromises = await Promise.allSettled(innerNodePromises);\n      for (const settledPromise of settledPromises) {\n        if (settledPromise.status === 'fulfilled' && settledPromise.value) {\n          const innerNodeObject = settledPromise.value as NodeSkeleton;\n          const innerNodeId = innerNodeObject._id;\n          const innerNodeType = innerNodeObject._type._id;\n          if (verbose)\n            printMessage({\n              message: `\\n    - ${innerNodeId} (${innerNodeType})`,\n              type: 'info',\n              newline: false,\n              state,\n            });\n          exportData.innerNodes[innerNodeId] = innerNodeObject;\n\n          // handle script node types\n          if (deps && hasScriptDependency(innerNodeObject)) {\n            scriptPromises.push(\n              getScript({ scriptId: innerNodeObject.script, state })\n            );\n          }\n\n          // frodo supports email templates in platform deployments\n          if (\n            (deps &&\n              state.getDeploymentType() ===\n                Constants.CLOUD_DEPLOYMENT_TYPE_KEY) ||\n            state.getDeploymentType() === Constants.FORGEOPS_DEPLOYMENT_TYPE_KEY\n          ) {\n            if (emailTemplateNodes.includes(innerNodeType)) {\n              try {\n                const emailTemplate = await readEmailTemplate({\n                  templateId: innerNodeObject.emailTemplateName,\n                  state,\n                });\n                emailTemplatePromises.push(emailTemplate);\n              } catch (error) {\n                errors.push(\n                  new FrodoError(`Error reading email template`, error)\n                );\n              }\n            }\n          }\n\n          // handle SAML2 node dependencies\n          if (deps && innerNodeType === 'product-Saml2Node') {\n            if (!allSaml2Providers) {\n              try {\n                allSaml2Providers = await readSaml2ProviderStubs({ state });\n              } catch (error) {\n                errors.push(\n                  new FrodoError(`Error reading saml2 providers`, error)\n                );\n              }\n            }\n            if (!allCirclesOfTrust) {\n              try {\n                allCirclesOfTrust = await readCirclesOfTrust({ state });\n              } catch (error) {\n                errors.push(\n                  new FrodoError(`Error reading circles of trust`, error)\n                );\n              }\n            }\n            saml2ConfigPromises.push(\n              getSaml2NodeDependencies(\n                innerNodeObject,\n                allSaml2Providers,\n                allCirclesOfTrust,\n                state\n              )\n            );\n          }\n\n          // If this is a SocialProviderHandlerNode get each enabled social identity provider.\n          if (\n            deps &&\n            !socialProviderPromise &&\n            innerNodeType === 'SocialProviderHandlerNode'\n          ) {\n            socialProviderPromise = getSocialIdentityProviders({ state });\n          }\n\n          // If this is a SelectIdPNode and filteredProviters is not already set to empty array set filteredSocialProviers.\n          if (\n            deps &&\n            !filteredSocialProviders &&\n            innerNodeType === 'SelectIdPNode' &&\n            innerNodeObject.filteredProviders\n          ) {\n            filteredSocialProviders = filteredSocialProviders || [];\n            for (const filteredProvider of innerNodeObject.filteredProviders) {\n              if (!filteredSocialProviders.includes(filteredProvider)) {\n                filteredSocialProviders.push(filteredProvider);\n              }\n            }\n          }\n        } else if (settledPromise.status === 'rejected') {\n          errors.push(new FrodoError(settledPromise.reason));\n        }\n      }\n    } catch (error) {\n      errors.push(new FrodoError(`Error reading inner nodes`, error));\n    }\n\n    // Process email templates\n    if (verbose && emailTemplatePromises.length > 0)\n      printMessage({\n        message: '\\n  - Email templates:',\n        newline: false,\n        state,\n      });\n    try {\n      const settledEmailTemplatePromises = await Promise.allSettled(\n        emailTemplatePromises\n      );\n      for (const settledPromise of settledEmailTemplatePromises) {\n        if (settledPromise.status === 'fulfilled' && settledPromise.value) {\n          if (verbose)\n            printMessage({\n              message: `\\n    - ${settledPromise.value._id.split('/')[1]}${\n                settledPromise.value.displayName\n                  ? ` (${settledPromise.value.displayName})`\n                  : ''\n              }`,\n              type: 'info',\n              newline: false,\n              state,\n            });\n          exportData.emailTemplates[settledPromise.value._id.split('/')[1]] =\n            settledPromise.value;\n        }\n      }\n    } catch (error) {\n      errors.push(new FrodoError(`Error reading email templates`, error));\n    }\n\n    // Process SAML2 providers and circles of trust\n    try {\n      const saml2NodeDependencies = await Promise.all(saml2ConfigPromises);\n      for (const saml2NodeDependency of saml2NodeDependencies) {\n        if (saml2NodeDependency) {\n          if (verbose)\n            printMessage({\n              message: '\\n  - SAML2 entity providers:',\n              newline: false,\n              state,\n            });\n          for (const saml2Entity of saml2NodeDependency.saml2Entities) {\n            if (verbose)\n              printMessage({\n                message: `\\n    - ${saml2Entity.entityLocation} ${saml2Entity.entityId}`,\n                type: 'info',\n                newline: false,\n                state,\n              });\n            exportData.saml2Entities[saml2Entity._id] = saml2Entity;\n          }\n          if (verbose)\n            printMessage({\n              message: '\\n  - SAML2 circles of trust:',\n              newline: false,\n              state,\n            });\n          for (const circleOfTrust of saml2NodeDependency.circlesOfTrust) {\n            if (verbose)\n              printMessage({\n                message: `\\n    - ${circleOfTrust._id}`,\n                type: 'info',\n                newline: false,\n                state,\n              });\n            exportData.circlesOfTrust[circleOfTrust._id] = circleOfTrust;\n          }\n        }\n      }\n    } catch (error) {\n      errors.push(new FrodoError(`Error reading saml2 dependencies`, error));\n    }\n\n    // Process socialIdentityProviders\n    try {\n      const socialProviders = await Promise.resolve(socialProviderPromise);\n      if (socialProviders) {\n        if (verbose)\n          printMessage({\n            message: '\\n  - OAuth2/OIDC (social) identity providers:',\n            newline: false,\n            state,\n          });\n        for (const socialProvider of socialProviders.result) {\n          // If the list of socialIdentityProviders needs to be filtered based on the\n          // filteredProviders property of a SelectIdPNode do it here.\n          if (\n            socialProvider &&\n            (!filteredSocialProviders ||\n              filteredSocialProviders.length === 0 ||\n              filteredSocialProviders.includes(socialProvider._id))\n          ) {\n            if (verbose)\n              printMessage({\n                message: `\\n    - ${socialProvider._id}`,\n                type: 'info',\n                newline: false,\n                state,\n              });\n            scriptPromises.push(\n              getScript({ scriptId: socialProvider.transform, state })\n            );\n            exportData.socialIdentityProviders[socialProvider._id] =\n              socialProvider;\n          }\n        }\n      }\n    } catch (error) {\n      errors.push(\n        new FrodoError(`Error reading social identity providers`, error)\n      );\n    }\n\n    // Process scripts\n    if (verbose && scriptPromises.length > 0)\n      printMessage({ message: '\\n  - Scripts:', newline: false, state });\n    try {\n      const scriptObjects = await Promise.all(scriptPromises);\n      for (const scriptObject of scriptObjects) {\n        if (scriptObject) {\n          if (verbose)\n            printMessage({\n              message: `\\n    - ${scriptObject._id} (${scriptObject.name})`,\n              type: 'info',\n              newline: false,\n              state,\n            });\n          scriptObject.script = useStringArrays\n            ? convertBase64TextToArray(scriptObject.script)\n            : JSON.stringify(decode(scriptObject.script));\n          exportData.scripts[scriptObject._id] = scriptObject;\n        }\n      }\n    } catch (error) {\n      errors.push(new FrodoError(`Error reading scripts`, error));\n    }\n\n    // Process themes\n    if (themePromise) {\n      if (verbose)\n        printMessage({ message: '\\n  - Themes:', newline: false, state });\n      try {\n        const themePromiseResults = await Promise.resolve(themePromise);\n        for (const themeObject of themePromiseResults) {\n          if (\n            themeObject &&\n            // has the theme been specified by id or name in a page node?\n            (themes.includes(themeObject._id) ||\n              themes.includes(themeObject.name) ||\n              // has this journey been linked to a theme?\n              themeObject.linkedTrees?.includes(treeObject._id))\n          ) {\n            if (verbose)\n              printMessage({\n                message: `\\n    - ${themeObject._id} (${themeObject.name})`,\n                type: 'info',\n                newline: false,\n                state,\n              });\n            exportData.themes.push(themeObject);\n          }\n        }\n      } catch (error) {\n        errors.push(new FrodoError(`Error reading themes`, error));\n      }\n    }\n    if (verbose)\n      printMessage({\n        message: `\\n`,\n        type: 'info',\n        newline: false,\n        state,\n      });\n  } catch (error) {\n    errors.push(error);\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(`Error exporting journey ${journeyId}`, errors);\n  }\n  debugMessage({\n    message: `JourneyOps.exportJourney: end [journey=${journeyId}]`,\n    state,\n  });\n  return exportData;\n}\n\n/**\n * Create export data for all trees/journeys with all their nodes and dependencies. The export data can be written to a file as is.\n * @param {TreeExportOptions} options export options\n * @returns {Promise<MultiTreeExportInterface>} a promise that resolves to an object containing the trees and all their nodes and dependencies\n */\nexport async function exportJourneys({\n  options = {\n    useStringArrays: true,\n    deps: true,\n    coords: true,\n  },\n  state,\n}: {\n  options?: TreeExportOptions;\n  state: State;\n}): Promise<MultiTreeExportInterface> {\n  const errors: Error[] = [];\n  let indicatorId: string;\n  try {\n    const trees = await readJourneys({ state });\n    const multiTreeExport = createMultiTreeExportTemplate({ state });\n    indicatorId = createProgressIndicator({\n      total: trees.length,\n      message: 'Exporting journeys...',\n      state,\n    });\n    for (const tree of trees) {\n      try {\n        updateProgressIndicator({\n          id: indicatorId,\n          message: `Exporting journey ${tree._id}`,\n          state,\n        });\n        const exportData: SingleTreeExportInterface = await exportJourney({\n          journeyId: tree._id,\n          options,\n          state,\n        });\n        delete exportData.meta;\n        multiTreeExport.trees[tree._id] = exportData;\n      } catch (error) {\n        errors.push(error);\n      }\n    }\n    if (errors.length > 0) {\n      throw new FrodoError(`Error exporting journeys`, errors);\n    }\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Exported ${trees.length} journeys.`,\n      state,\n    });\n    return multiTreeExport;\n  } catch (error) {\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Error exporting journeys.`,\n      status: 'fail',\n      state,\n    });\n    // re-throw previously caught errors\n    if (errors.length > 0) {\n      throw error;\n    }\n    throw new FrodoError(`Error exporting journeys`, error);\n  }\n}\n\n/**\n * Get all the journeys/trees without all their nodes and dependencies.\n * @returns {Promise<TreeSkeleton[]>} a promise that resolves to an array of journey objects\n */\nexport async function readJourneys({\n  state,\n}: {\n  state: State;\n}): Promise<TreeSkeleton[]> {\n  try {\n    const { result } = await getTrees({ state });\n    result.sort((a, b) => a._id.localeCompare(b._id));\n    return result;\n  } catch (error) {\n    throw new FrodoError(`Error reading journeys`, error);\n  }\n}\n\n/**\n * Get a journey/tree without all its nodes and dependencies.\n * @param {string} journeyId journey id/name\n * @returns {Promise<TreeSkeleton>} a promise that resolves to a journey object\n */\nexport async function readJourney({\n  journeyId,\n  state,\n}: {\n  journeyId: string;\n  state: State;\n}): Promise<TreeSkeleton> {\n  try {\n    const response = await getTree({ id: journeyId, state });\n    return response;\n  } catch (error) {\n    throw new FrodoError(`Error reading journey ${journeyId}`, error);\n  }\n}\n\n/**\n * Create journey without dependencies.\n * @param {string} journeyId journey id/name\n * @returns {Promise<TreeSkeleton>} a promise that resolves to a journey object\n */\nexport async function createJourney({\n  journeyId,\n  journeyData,\n  state,\n}: {\n  journeyId: string;\n  journeyData: TreeSkeleton;\n  state: State;\n}): Promise<TreeSkeleton> {\n  debugMessage({ message: `JourneyOps.createJourney: start`, state });\n  try {\n    await readJourney({ journeyId, state });\n  } catch (error) {\n    try {\n      const result = await putTree({\n        treeId: journeyId,\n        treeData: journeyData,\n        state,\n      });\n      debugMessage({ message: `JourneyOps.createJourney: end`, state });\n      return result;\n    } catch (error) {\n      throw new FrodoError(`Error creating journey ${journeyId}`, error);\n    }\n  }\n  throw new FrodoError(`Journey ${journeyId} already exists!`);\n}\n\n/**\n * Update or create journey without dependencies.\n * @param {string} journeyId journey id/name\n * @returns {Promise<TreeSkeleton>} a promise that resolves to a journey object\n */\nexport async function updateJourney({\n  journeyId,\n  journeyData,\n  state,\n}: {\n  journeyId: string;\n  journeyData: TreeSkeleton;\n  state: State;\n}): Promise<TreeSkeleton> {\n  try {\n    const response = await putTree({\n      treeId: journeyId,\n      treeData: journeyData,\n      state,\n    });\n    return response;\n  } catch (error) {\n    throw new FrodoError(`Error updating journey ${journeyId}`, error);\n  }\n}\n\n/**\n * Import a tree with all dependencies from a `SingleTreeExportInterface` object (typically read from a file)\n * @param {SingleTreeExportInterface} treeObject tree object containing tree and all its dependencies\n * @param {TreeImportOptions} options import options\n * @returns {Promise<TreeSkeleton>} a promise that resolves to true if no errors occurred during import\n */\nexport async function importJourney({\n  importData,\n  options,\n  state,\n}: {\n  importData: SingleTreeExportInterface;\n  options: TreeImportOptions;\n  state: State;\n}): Promise<TreeSkeleton> {\n  let response = null;\n  const errors = [];\n  const imported = [];\n\n  try {\n    const { reUuid, deps } = options;\n    const verbose = state.getVerbose();\n    if (verbose)\n      printMessage({\n        message: `- ${importData.tree._id}\\n`,\n        type: 'info',\n        newline: false,\n        state,\n      });\n    let newUuid = '';\n    const uuidMap: { [k: string]: string } = {};\n    const treeId = importData.tree._id;\n\n    // Process scripts\n    if (\n      deps &&\n      importData.scripts &&\n      Object.entries(importData.scripts).length > 0\n    ) {\n      if (verbose)\n        printMessage({ message: '  - Scripts:', newline: false, state });\n      for (const [scriptId, scriptObject] of Object.entries(\n        importData.scripts\n      )) {\n        if (verbose)\n          printMessage({\n            message: `\\n    - ${scriptId} (${scriptObject['name']})`,\n            type: 'info',\n            newline: false,\n            state,\n          });\n        // is the script stored as an array of strings or just b64 blob?\n        if (Array.isArray(scriptObject['script'])) {\n          scriptObject['script'] = convertTextArrayToBase64(\n            scriptObject['script']\n          );\n        } else if (!isBase64Encoded(scriptObject['script'])) {\n          scriptObject['script'] = encode(JSON.parse(scriptObject['script']));\n        }\n        try {\n          await updateScript({ scriptId, scriptData: scriptObject, state });\n        } catch (error) {\n          errors.push(\n            new FrodoError(\n              `Error importing script ${scriptObject['name']} (${scriptId}) in journey ${treeId}`,\n              error\n            )\n          );\n        }\n        if (verbose) printMessage({ message: '', state });\n      }\n    }\n\n    // Process email templates\n    if (\n      deps &&\n      importData.emailTemplates &&\n      Object.entries(importData.emailTemplates).length > 0\n    ) {\n      if (verbose)\n        printMessage({\n          message: '\\n  - Email templates:',\n          newline: false,\n          state,\n        });\n      for (const [templateId, templateData] of Object.entries(\n        importData.emailTemplates\n      )) {\n        if (verbose)\n          printMessage({\n            message: `\\n    - ${templateId}`,\n            type: 'info',\n            newline: false,\n            state,\n          });\n        try {\n          await updateEmailTemplate({ templateId, templateData, state });\n        } catch (error) {\n          errors.push(new FrodoError(`Error importing email templates`, error));\n        }\n        if (verbose) printMessage({ message: '', state });\n      }\n    }\n\n    // Process themes\n    if (deps && importData.themes && importData.themes.length > 0) {\n      if (verbose)\n        printMessage({ message: '\\n  - Themes:', newline: false, state });\n      const themes: Record<string, ThemeSkeleton> = {};\n      for (const theme of importData.themes) {\n        if (verbose)\n          printMessage({\n            message: `\\n    - ${theme['_id']} (${theme['name']})`,\n            type: 'info',\n            newline: false,\n            state,\n          });\n        themes[theme['_id']] = theme;\n      }\n      try {\n        await updateThemes({ themeMap: themes, state });\n      } catch (error) {\n        errors.push(new FrodoError(`Error importing themes`, error));\n      }\n    }\n\n    // Process social providers\n    if (\n      deps &&\n      importData.socialIdentityProviders &&\n      Object.entries(importData.socialIdentityProviders).length > 0\n    ) {\n      if (verbose)\n        printMessage({\n          message: '\\n  - OAuth2/OIDC (social) identity providers:',\n          newline: false,\n          state,\n        });\n      for (const [providerId, providerData] of Object.entries(\n        importData.socialIdentityProviders\n      )) {\n        if (verbose)\n          printMessage({\n            message: `\\n    - ${providerId}`,\n            type: 'info',\n            newline: false,\n            state,\n          });\n        try {\n          await putProviderByTypeAndId({\n            type: providerData['_type']['_id'],\n            id: providerId,\n            providerData,\n            state,\n          });\n        } catch (error) {\n          if (\n            error.response?.status === 500 &&\n            error.response?.data?.message ===\n              'Unable to update SMS config: Data validation failed for the attribute, Redirect after form post URL'\n          ) {\n            providerData['redirectAfterFormPostURI'] = '';\n            try {\n              await putProviderByTypeAndId({\n                type: providerData['_type']['_id'],\n                id: providerId,\n                providerData,\n                state,\n              });\n            } catch (importError2) {\n              throw new FrodoError(\n                `Error importing provider ${providerId} in journey ${treeId}`,\n                importError2\n              );\n            }\n          } else {\n            errors.push(\n              new FrodoError(\n                `Error importing provider ${providerId} in journey ${treeId}`,\n                error\n              )\n            );\n          }\n        }\n      }\n    }\n\n    // Process saml providers\n    if (\n      deps &&\n      importData.saml2Entities &&\n      Object.entries(importData.saml2Entities).length > 0\n    ) {\n      if (verbose)\n        printMessage({\n          message: '\\n  - SAML2 entity providers:',\n          newline: false,\n          state,\n        });\n      for (const [, providerData] of Object.entries(importData.saml2Entities)) {\n        delete providerData['_rev'];\n        const entityId = providerData['entityId'];\n        const entityLocation = providerData['entityLocation'];\n        if (verbose)\n          printMessage({\n            message: `\\n    - ${entityLocation} ${entityId}`,\n            type: 'info',\n            newline: false,\n            state,\n          });\n        let metaData = null;\n        if (entityLocation === 'remote') {\n          if (Array.isArray(providerData['base64EntityXML'])) {\n            metaData = convertTextArrayToBase64Url(\n              providerData['base64EntityXML']\n            );\n          } else {\n            metaData = providerData['base64EntityXML'];\n          }\n        }\n        delete providerData['entityLocation'];\n        delete providerData['base64EntityXML'];\n        // create the provider if it doesn't already exist, or just update it\n        if (\n          (\n            await queryProviderStubs({\n              filter: `entityId eq '${entityId}'`,\n              fields: ['location'],\n              state,\n            })\n          ).resultCount === 0\n        ) {\n          try {\n            await createProvider({\n              location: entityLocation,\n              providerData,\n              metaData,\n              state,\n            });\n          } catch (error) {\n            errors.push(\n              new FrodoError(`Error creating provider ${entityId}`, error)\n            );\n          }\n        } else {\n          try {\n            await updateProvider({\n              location: entityLocation,\n              providerData,\n              state,\n            });\n          } catch (error) {\n            errors.push(\n              new FrodoError(`Error updating provider ${entityId}`, error)\n            );\n          }\n        }\n      }\n    }\n\n    // Process circles of trust\n    if (\n      deps &&\n      importData.circlesOfTrust &&\n      Object.entries(importData.circlesOfTrust).length > 0\n    ) {\n      if (verbose)\n        printMessage({\n          message: '\\n  - SAML2 circles of trust:',\n          newline: false,\n          state,\n        });\n      for (const [cotId, cotData] of Object.entries(\n        importData.circlesOfTrust\n      )) {\n        delete cotData['_rev'];\n        if (verbose)\n          printMessage({\n            message: `\\n    - ${cotId}`,\n            type: 'info',\n            newline: false,\n            state,\n          });\n        try {\n          await createCircleOfTrust({ cotData, state });\n        } catch (error) {\n          if (\n            error.response?.status === 409 ||\n            error.response?.status === 500\n          ) {\n            try {\n              await updateCircleOfTrust({ cotId, cotData, state });\n            } catch (updateCotErr) {\n              errors.push(\n                new FrodoError(\n                  `Error updating circle of trust ${cotId}`,\n                  updateCotErr\n                )\n              );\n            }\n          } else {\n            errors.push(\n              new FrodoError(`Error creating circle of trust ${cotId}`, error)\n            );\n          }\n        }\n      }\n    }\n\n    // Process inner nodes\n    let innerNodes = {};\n    if (\n      importData.innerNodes &&\n      Object.entries(importData.innerNodes).length > 0\n    ) {\n      innerNodes = importData.innerNodes;\n    }\n    // old export file format\n    else if (\n      importData.innernodes &&\n      Object.entries(importData.innernodes).length > 0\n    ) {\n      innerNodes = importData.innernodes;\n    }\n    if (Object.entries(innerNodes).length > 0) {\n      if (verbose)\n        printMessage({\n          message: '\\n  - Inner nodes:',\n          type: 'text',\n          newline: false,\n          state,\n        });\n      for (const [innerNodeId, innerNodeData] of Object.entries(innerNodes)) {\n        delete innerNodeData['_rev'];\n        const nodeType = innerNodeData['_type']['_id'];\n        if (!reUuid) {\n          newUuid = innerNodeId;\n        } else {\n          newUuid = uuidv4();\n          uuidMap[innerNodeId] = newUuid;\n        }\n        innerNodeData['_id'] = newUuid;\n\n        if (verbose)\n          printMessage({\n            message: `\\n    - ${newUuid}${reUuid ? '*' : ''} (${nodeType})`,\n            type: 'info',\n            newline: false,\n            state,\n          });\n\n        // If the node has an identityResource config setting\n        // and the identityResource ends in 'user'\n        // and the node's identityResource is the same as the tree's identityResource\n        // change it to the current realm managed user identityResource otherwise leave it alone.\n        if (\n          innerNodeData['identityResource'] &&\n          innerNodeData['identityResource'].endsWith('user') &&\n          innerNodeData['identityResource'] === importData.tree.identityResource\n        ) {\n          innerNodeData['identityResource'] =\n            `managed/${getCurrentRealmManagedUser({\n              state,\n            })}`;\n          if (verbose)\n            printMessage({\n              message: `\\n      - identityResource: ${innerNodeData['identityResource']}`,\n              type: 'info',\n              newline: false,\n              state,\n            });\n        }\n        try {\n          await putNode({\n            nodeId: newUuid,\n            nodeType,\n            nodeData: innerNodeData as NodeSkeleton,\n            state,\n          });\n        } catch (nodeImportError) {\n          if (\n            nodeImportError.response?.status === 400 &&\n            nodeImportError.response?.data?.message ===\n              'Data validation failed for the attribute, Script'\n          ) {\n            errors.push(\n              new FrodoError(\n                `Missing script ${\n                  innerNodeData['script']\n                } referenced by inner node ${innerNodeId}${\n                  innerNodeId === newUuid ? '' : ` [${newUuid}]`\n                } (${innerNodeData['_type']['_id']}) in journey ${treeId}`,\n                nodeImportError\n              )\n            );\n          } else if (\n            nodeImportError.response?.status === 400 &&\n            nodeImportError.response?.data?.message ===\n              'Invalid attribute specified.'\n          ) {\n            const { validAttributes } = nodeImportError.response.data.detail;\n            validAttributes.push('_id');\n            for (const attribute of Object.keys(innerNodeData)) {\n              if (!validAttributes.includes(attribute)) {\n                if (verbose)\n                  printMessage({\n                    message: `\\n      - Removing invalid attribute: ${attribute}`,\n                    type: 'warn',\n                    newline: false,\n                    state,\n                  });\n                delete innerNodeData[attribute];\n              }\n            }\n            try {\n              await putNode({\n                nodeId: newUuid,\n                nodeType,\n                nodeData: innerNodeData as NodeSkeleton,\n                state,\n              });\n            } catch (nodeImportError2) {\n              errors.push(\n                new FrodoError(\n                  `Error importing node ${innerNodeId}${\n                    innerNodeId === newUuid ? '' : ` [${newUuid}]`\n                  } in journey ${treeId}`,\n                  nodeImportError2\n                )\n              );\n            }\n          } else {\n            errors.push(\n              new FrodoError(\n                `Error importing inner node ${innerNodeId}${\n                  innerNodeId === newUuid ? '' : ` [${newUuid}]`\n                } in journey ${treeId}`,\n                nodeImportError\n              )\n            );\n          }\n        }\n        if (verbose) printMessage({ message: '', state });\n      }\n    }\n\n    // Process nodes\n    if (importData.nodes && Object.entries(importData.nodes).length > 0) {\n      if (verbose)\n        printMessage({ message: '\\n  - Nodes:', newline: false, state });\n      // eslint-disable-next-line prefer-const\n      for (let [nodeId, nodeData] of Object.entries(importData.nodes)) {\n        delete nodeData['_rev'];\n        const nodeType = nodeData['_type']['_id'];\n        if (!reUuid) {\n          newUuid = nodeId;\n        } else {\n          newUuid = uuidv4();\n          uuidMap[nodeId] = newUuid;\n        }\n        nodeData['_id'] = newUuid;\n\n        if (nodeType === 'PageNode' && reUuid) {\n          for (const [, inPageNodeData] of Object.entries(nodeData['nodes'])) {\n            const currentId = inPageNodeData['_id'];\n            nodeData = JSON.parse(\n              JSON.stringify(nodeData).replaceAll(currentId, uuidMap[currentId])\n            );\n          }\n        }\n\n        if (verbose)\n          printMessage({\n            message: `\\n    - ${newUuid}${reUuid ? '*' : ''} (${nodeType})`,\n            type: 'info',\n            newline: false,\n            state,\n          });\n\n        // If the node has an identityResource config setting\n        // and the identityResource ends in 'user'\n        // and the node's identityResource is the same as the tree's identityResource\n        // change it to the current realm managed user identityResource otherwise leave it alone.\n        if (\n          nodeData.identityResource &&\n          nodeData.identityResource.endsWith('user') &&\n          nodeData.identityResource === importData.tree.identityResource\n        ) {\n          nodeData['identityResource'] = `managed/${getCurrentRealmManagedUser({\n            state,\n          })}`;\n          if (verbose)\n            printMessage({\n              message: `\\n      - identityResource: ${nodeData['identityResource']}`,\n              type: 'info',\n              newline: false,\n              state,\n            });\n        }\n        try {\n          await putNode({ nodeId: newUuid, nodeType, nodeData, state });\n        } catch (nodeImportError) {\n          if (\n            nodeImportError.response?.status === 400 &&\n            nodeImportError.response?.data?.message ===\n              'Data validation failed for the attribute, Script'\n          ) {\n            errors.push(\n              new FrodoError(\n                `Missing script ${\n                  nodeData['script']\n                } referenced by node ${nodeId}${\n                  nodeId === newUuid ? '' : ` [${newUuid}]`\n                } (${nodeData['_type']['_id']}) in journey ${treeId}`,\n                nodeImportError\n              )\n            );\n          } else if (\n            nodeImportError.response?.status === 400 &&\n            nodeImportError.response?.data?.message ===\n              'Invalid attribute specified.'\n          ) {\n            const { validAttributes } = nodeImportError.response.data.detail;\n            validAttributes.push('_id');\n            for (const attribute of Object.keys(nodeData)) {\n              if (!validAttributes.includes(attribute)) {\n                if (verbose)\n                  printMessage({\n                    message: `\\n      - Removing invalid attribute: ${attribute}`,\n                    type: 'warn',\n                    newline: false,\n                    state,\n                  });\n                delete nodeData[attribute];\n              }\n            }\n            try {\n              await putNode({ nodeId: newUuid, nodeType, nodeData, state });\n            } catch (nodeImportError2) {\n              errors.push(\n                new FrodoError(\n                  `Error importing node ${nodeId}${\n                    nodeId === newUuid ? '' : ` [${newUuid}]`\n                  } in journey ${treeId}`,\n                  nodeImportError2\n                )\n              );\n            }\n          } else {\n            errors.push(\n              new FrodoError(\n                `Error importing node ${nodeId}${\n                  nodeId === newUuid ? '' : ` [${newUuid}]`\n                } in journey ${treeId}`,\n                nodeImportError\n              )\n            );\n          }\n        }\n        if (verbose) printMessage({ message: '', state });\n      }\n    }\n\n    // Process tree\n    if (verbose) printMessage({ message: '\\n  - Flow', newline: false, state });\n\n    if (reUuid) {\n      let journeyText = JSON.stringify(importData.tree, null, 2);\n      for (const [oldId, newId] of Object.entries(uuidMap)) {\n        journeyText = journeyText.replaceAll(oldId, newId);\n      }\n      importData.tree = JSON.parse(journeyText);\n    }\n\n    // If the tree has an identityResource config setting\n    // and the identityResource ends in 'user'\n    // Set the identityResource for the tree to the selected resource.\n    if (\n      (importData.tree.identityResource &&\n        (importData.tree['identityResource'] as string).endsWith('user')) ||\n      state.getDeploymentType() === Constants.CLOUD_DEPLOYMENT_TYPE_KEY ||\n      state.getDeploymentType() === Constants.FORGEOPS_DEPLOYMENT_TYPE_KEY\n    ) {\n      importData.tree.identityResource = `managed/${getCurrentRealmManagedUser({\n        state,\n      })}`;\n      if (verbose)\n        printMessage({\n          message: `\\n    - identityResource: ${importData.tree.identityResource}`,\n          type: 'info',\n          newline: false,\n          state,\n        });\n    }\n\n    // Process tree nodes\n    const serverTreeObject = await updateCoordinates({\n      tree: importData.tree,\n      nodesAttributeName: 'nodes',\n      serverTree: null,\n      state: state,\n    });\n    // Process tree static nodes\n    await updateCoordinates({\n      tree: importData.tree,\n      nodesAttributeName: 'staticNodes',\n      serverTree: serverTreeObject,\n      state: state,\n    });\n\n    delete importData.tree._rev;\n    try {\n      response = await putTree({\n        treeId,\n        treeData: importData.tree,\n        state,\n      });\n      imported.push(treeId);\n      if (verbose)\n        printMessage({\n          message: `\\n    - Done`,\n          type: 'info',\n          newline: true,\n          state,\n        });\n    } catch (importError) {\n      if (\n        importError.response?.status === 400 &&\n        importError.response?.data?.message === 'Invalid attribute specified.'\n      ) {\n        const { validAttributes } = importError.response.data.detail;\n        validAttributes.push('_id');\n        for (const attribute of Object.keys(importData.tree)) {\n          if (!validAttributes.includes(attribute)) {\n            if (verbose)\n              printMessage({\n                message: `\\n    - Removing invalid attribute: ${attribute}`,\n                type: 'warn',\n                newline: false,\n                state,\n              });\n            delete importData.tree[attribute];\n          }\n        }\n        try {\n          response = await putTree({\n            treeId,\n            treeData: importData.tree,\n            state,\n          });\n          imported.push(treeId);\n          if (verbose)\n            printMessage({\n              message: `\\n    - Done`,\n              type: 'info',\n              newline: true,\n              state,\n            });\n        } catch (importError2) {\n          errors.push(\n            new FrodoError(\n              `Error importing journey flow ${treeId}`,\n              importError2\n            )\n          );\n        }\n      } else {\n        errors.push(\n          new FrodoError(`Error importing journey flow ${treeId}`, importError)\n        );\n      }\n    }\n  } catch (error) {\n    errors.push(error);\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(`Error importing journey`, errors);\n  }\n  if (0 === imported.length) {\n    throw new FrodoError(`No journey found in import data`);\n  }\n  return response;\n}\n\n/**\n * Resolve inner tree dependencies\n * @param {string[]} existingJorneys Array of existing journey names\n * @param {MultiTreeExportInterface} candidateJourneys Map of journeys to resolve dependencies for\n * @param {{ [k: string]: string[] }} unresolvedJourneys Map of unresolved journey names and their dependencies\n * @param {string[]} resolvedJourneys Array of resolved journey names\n * @param {number} index Depth of recursion\n * @returns {Promise<{unresolvedJourneys: { [k: string]: string[] }; resolvedJourneys: string[];}>} a promise resolving to a dependency status object\n */\nexport async function resolveInnerTreeDependencies({\n  existingJorneys,\n  candidateJourneys,\n  unresolvedJourneys,\n  resolvedJourneys,\n  index = -1,\n}: {\n  existingJorneys: string[];\n  candidateJourneys: MultiTreeExportInterface;\n  unresolvedJourneys?: { [k: string]: string[] };\n  resolvedJourneys?: string[];\n  index?: number;\n}): Promise<{\n  unresolvedJourneys: { [k: string]: string[] };\n  resolvedJourneys: string[];\n}> {\n  let before = -1;\n  let after = index;\n  if (index !== -1) {\n    before = index;\n  }\n\n  for (const tree in candidateJourneys) {\n    if ({}.hasOwnProperty.call(candidateJourneys, tree)) {\n      const dependencies = [];\n      for (const node in candidateJourneys[tree].nodes) {\n        if (\n          candidateJourneys[tree].nodes[node]._type._id ===\n          'InnerTreeEvaluatorNode'\n        ) {\n          dependencies.push(candidateJourneys[tree].nodes[node].tree);\n        }\n      }\n      let allResolved = true;\n      for (const dependency of dependencies) {\n        if (\n          !resolvedJourneys.includes(dependency) &&\n          !existingJorneys.includes(dependency)\n        ) {\n          allResolved = false;\n        }\n      }\n      if (allResolved) {\n        if (resolvedJourneys.indexOf(tree) === -1) resolvedJourneys.push(tree);\n        delete unresolvedJourneys[tree];\n      } else {\n        unresolvedJourneys[tree] = dependencies;\n      }\n    }\n  }\n  after = Object.keys(unresolvedJourneys).length;\n  if (index !== -1 && after === before) {\n    // This is the end, no progress was made since the last recursion\n    return {\n      unresolvedJourneys,\n      resolvedJourneys,\n    };\n  } else if (after > 0) {\n    resolveInnerTreeDependencies({\n      existingJorneys: existingJorneys,\n      candidateJourneys: candidateJourneys,\n      unresolvedJourneys,\n      resolvedJourneys,\n      index: after,\n    });\n  }\n}\n\n/**\n * Resolve journey dependencies\n * @param {string[]} installedJorneys Map of installed journeys\n * @param {Record<string, SingleTreeExportInterface>} journeyMap Map of journeys to resolve dependencies for\n * @param {string[]} unresolvedJourneys Map to hold the names of unresolved journeys and their dependencies\n * @param {string[]} resolvedJourneys Array to hold the names of resolved journeys\n * @param {number} index Depth of recursion\n */\nexport async function resolveDependencies(\n  installedJorneys: string[],\n  journeyMap: Record<string, SingleTreeExportInterface>,\n  unresolvedJourneys: { [k: string]: string[] },\n  resolvedJourneys: string[],\n  index = -1\n) {\n  let before = -1;\n  let after = index;\n  if (index !== -1) {\n    before = index;\n  }\n\n  for (const tree in journeyMap) {\n    if ({}.hasOwnProperty.call(journeyMap, tree)) {\n      const dependencies = [];\n      for (const node in journeyMap[tree].nodes) {\n        if (\n          journeyMap[tree].nodes[node]._type._id === 'InnerTreeEvaluatorNode'\n        ) {\n          dependencies.push(journeyMap[tree].nodes[node].tree);\n        }\n      }\n      let allResolved = true;\n      for (const dependency of dependencies) {\n        if (\n          !resolvedJourneys.includes(dependency) &&\n          !installedJorneys.includes(dependency)\n        ) {\n          allResolved = false;\n        }\n      }\n      if (allResolved) {\n        if (resolvedJourneys.indexOf(tree) === -1) resolvedJourneys.push(tree);\n        // remove from unresolvedJourneys array\n        // for (let i = 0; i < unresolvedJourneys.length; i += 1) {\n        //   if (unresolvedJourneys[i] === tree) {\n        //     unresolvedJourneys.splice(i, 1);\n        //     i -= 1;\n        //   }\n        // }\n        delete unresolvedJourneys[tree];\n        // } else if (!unresolvedJourneys.includes(tree)) {\n      } else {\n        // unresolvedJourneys.push(tree);\n        unresolvedJourneys[tree] = dependencies;\n      }\n    }\n  }\n  after = Object.keys(unresolvedJourneys).length;\n  if (index !== -1 && after === before) {\n    // This is the end, no progress was made since the last recursion\n    // printMessage(\n    //   `Journeys with unresolved dependencies: ${unresolvedJourneys}`,\n    //   'error'\n    // );\n  } else if (after > 0) {\n    resolveDependencies(\n      installedJorneys,\n      journeyMap,\n      unresolvedJourneys,\n      resolvedJourneys,\n      after\n    );\n  }\n}\n\n/**\n * Import journeys\n * @param {MultiTreeExportInterface} importData map of trees object\n * @param {TreeImportOptions} options import options\n */\nexport async function importJourneys({\n  importData,\n  options,\n  state,\n}: {\n  importData: MultiTreeExportInterface;\n  options: TreeImportOptions;\n  state: State;\n}): Promise<TreeSkeleton[]> {\n  const response = [];\n  const errors = [];\n  const installedJourneys = (await readJourneys({ state })).map((x) => x._id);\n  const unresolvedJourneys: {\n    [k: string]: string[];\n  } = {};\n  const resolvedJourneys = [];\n  let indicatorId = createProgressIndicator({\n    total: undefined,\n    message: 'Resolving dependencies',\n    type: 'indeterminate',\n    state,\n  });\n  await resolveDependencies(\n    installedJourneys,\n    importData.trees,\n    unresolvedJourneys,\n    resolvedJourneys\n  );\n  if (Object.keys(unresolvedJourneys).length === 0) {\n    // no unresolved journeys\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Resolved all dependencies.`,\n      status: 'success',\n      state,\n    });\n  } else {\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `${\n        Object.keys(unresolvedJourneys).length\n      } journeys with unresolved dependencies`,\n      status: 'fail',\n      state,\n    });\n    const message: string[] = [\n      `${\n        Object.keys(unresolvedJourneys).length\n      } journeys with unresolved dependencies:`,\n    ];\n    for (const journey of Object.keys(unresolvedJourneys)) {\n      message.push(`  - ${journey} requires ${unresolvedJourneys[journey]}`);\n    }\n    throw new FrodoError(message.join('\\n'));\n  }\n  indicatorId = createProgressIndicator({\n    total: resolvedJourneys.length,\n    message: 'Importing',\n    state,\n  });\n  for (const tree of resolvedJourneys) {\n    try {\n      response.push(\n        await importJourney({\n          importData: importData.trees[tree],\n          options,\n          state,\n        })\n      );\n      updateProgressIndicator({ id: indicatorId, message: `${tree}`, state });\n    } catch (error) {\n      errors.push(error);\n    }\n  }\n  if (errors.length > 0) {\n    stopProgressIndicator({\n      id: indicatorId,\n      message: 'Error importing journeys',\n      state,\n    });\n    throw new FrodoError(`Error importing journeys`, errors);\n  }\n  stopProgressIndicator({\n    id: indicatorId,\n    message: 'Finished importing journeys',\n    state,\n  });\n  return response;\n}\n\n/**\n * Get the node reference obbject for a node object. Node reference objects\n * are used in a tree flow definition and within page nodes to reference\n * nodes. Among other things, node references contain all the non-configuration\n * meta data that exists for readaility, like the x/y coordinates of the node\n * and the display name chosen by the tree designer. The dislay name is the\n * only intuitive link between the graphical representation of the tree and\n * the node configurations that make up the tree.\n * @param nodeObj node object to retrieve the node reference object for\n * @param singleTreeExport tree export with or without dependencies\n * @returns {NodeRefSkeletonInterface | InnerNodeRefSkeletonInterface} node reference object\n */\nexport function getNodeRef(\n  nodeObj: NodeSkeleton,\n  singleTreeExport: SingleTreeExportInterface\n): NodeRefSkeletonInterface | InnerNodeRefSkeletonInterface {\n  if (singleTreeExport.tree.nodes[nodeObj._id]) {\n    return singleTreeExport.tree.nodes[nodeObj._id];\n  } else {\n    for (const node of Object.values(singleTreeExport.nodes)) {\n      if (containerNodes.includes(node._type._id)) {\n        for (const nodeRef of node.nodes) {\n          if (nodeRef._id === nodeObj._id) {\n            return nodeRef;\n          }\n        }\n      }\n    }\n  }\n  return undefined;\n}\n\n/**\n * Default tree export resolver used to resolve a tree id/name to a full export\n * w/o dependencies of that tree from a platform instance.\n * @param {string} treeId id/name of the tree to resolve\n * @returns {TreeExportResolverInterface} tree export\n */\nexport const onlineTreeExportResolver: TreeExportResolverInterface =\n  async function (treeId: string, state: State) {\n    debugMessage({ message: `onlineTreeExportResolver(${treeId})`, state });\n    return await exportJourney({\n      journeyId: treeId,\n      options: {\n        deps: false,\n        useStringArrays: false,\n        coords: true,\n      },\n      state,\n    });\n  };\n\n/**\n * Tree export resolver used to resolve a tree id/name to a full export\n * of that tree from individual `treename.journey.json` export files.\n * @param {string} treeId id/name of the tree to resolve\n * @returns {TreeExportResolverInterface} tree export\n */\nexport const fileByIdTreeExportResolver: TreeExportResolverInterface =\n  async function (\n    treeId: string,\n    state: State\n  ): Promise<SingleTreeExportInterface> {\n    debugMessage({ message: `fileByIdTreeExportResolver(${treeId})`, state });\n    let treeExport = createSingleTreeExportTemplate({ state });\n    const files = findFilesByName(getTypedFilename(`${treeId}`, 'journey'));\n    try {\n      const file = files.pop();\n      const jsonData = JSON.parse(fs.readFileSync(file, 'utf8'));\n      debugMessage({\n        message: `fileByIdTreeExportResolver: resolved '${treeId}' to ${file}`,\n        state,\n      });\n      // did we resolve the tree we were asked to resolved?\n      if (jsonData.tree?._id === treeId) {\n        treeExport = jsonData;\n      }\n      // check if this is a file with multiple trees and get journey by id\n      else if (jsonData.trees && jsonData.trees[treeId]) {\n        treeExport = jsonData.trees[treeId];\n      }\n    } catch (error) {\n      throw new FrodoError(`Unable to resolve '${treeId}' to a file`, error);\n    }\n    return treeExport;\n  };\n\n/**\n * Factory that creates a tree export resolver used to resolve a tree id\n * to a full export of that tree from a multi-tree export file.\n * @param {string} file multi-tree export file\n * @returns {TreeExportResolverInterface} tree export resolver\n */\nexport function createFileParamTreeExportResolver(\n  file: string,\n  state: State\n): TreeExportResolverInterface {\n  const fileParamTreeExportResolver: TreeExportResolverInterface =\n    async function (treeId: string) {\n      debugMessage({\n        message: `fileParamTreeExportResolver(${treeId})`,\n        state,\n      });\n      let treeExport: SingleTreeExportInterface =\n        createSingleTreeExportTemplate({ state });\n      try {\n        const jsonData = JSON.parse(fs.readFileSync(file, 'utf8'));\n        // did we resolve the tree we were asked to resolved?\n        if (jsonData.tree?._id === treeId) {\n          treeExport = jsonData;\n        }\n        // check if this is a file with multiple trees and get journey by id\n        else if (jsonData.trees && jsonData.trees[treeId]) {\n          treeExport = jsonData.trees[treeId];\n        }\n        // fall back to fileByIdTreeExportResolver\n        else {\n          treeExport = await fileByIdTreeExportResolver(treeId, state);\n        }\n      } catch (error) {\n        debugMessage({ message: error.message, state });\n      }\n      return treeExport;\n    };\n  debugMessage({ message: `fileParamTreeExportResolver: file=${file}`, state });\n  return fileParamTreeExportResolver;\n}\n\n/**\n * Get tree dependencies (all descendent inner trees)\n * @param {SingleTreeExportInterface} treeExport single tree export\n * @param {string[]} resolvedTreeIds list of tree ids wich have already been resolved\n * @param {TreeExportResolverInterface} resolveTreeExport tree export resolver callback function\n * @returns {Promise<TreeDependencyMapInterface>} a promise that resolves to a tree dependency map\n */\nexport async function getTreeDescendents({\n  treeExport,\n  resolveTreeExport = onlineTreeExportResolver,\n  resolvedTreeIds = [],\n  state,\n}: {\n  treeExport: SingleTreeExportInterface;\n  resolveTreeExport: TreeExportResolverInterface;\n  resolvedTreeIds: string[];\n  state: State;\n}): Promise<TreeDependencyMapInterface> {\n  const treeId = treeExport.tree._id + '';\n  debugMessage({\n    message: `getTreeDependencies(${treeId}, [${resolvedTreeIds.join(', ')}])`,\n    state,\n  });\n  if (!resolvedTreeIds.includes(treeId)) {\n    resolvedTreeIds.push(treeId);\n  }\n  const treeDependencyMap: TreeDependencyMapInterface = {\n    [treeId]: [],\n  };\n  const dependencies: TreeDependencyMapInterface[] = [];\n  for (const [nodeId, node] of Object.entries(treeExport.tree.nodes)) {\n    let innerTreeId: string;\n    try {\n      if (node.nodeType === 'InnerTreeEvaluatorNode') {\n        innerTreeId = treeExport.nodes[nodeId].tree;\n        if (!resolvedTreeIds.includes(innerTreeId)) {\n          const innerTreeExport = await resolveTreeExport(innerTreeId, state);\n          debugMessage({\n            message: `resolved inner tree: ${innerTreeExport.tree._id}`,\n            state,\n          });\n          // resolvedTreeIds.push(innerTreeId);\n          dependencies.push(\n            await getTreeDescendents({\n              treeExport: innerTreeExport,\n              resolveTreeExport,\n              resolvedTreeIds,\n              state,\n            })\n          );\n        }\n      }\n    } catch (error) {\n      if (innerTreeId) {\n        const unresolvableMap: TreeDependencyMapInterface = {\n          [innerTreeId]: [],\n        };\n        dependencies.push(unresolvableMap);\n      }\n    }\n  }\n  treeDependencyMap[treeId] = dependencies;\n  return treeDependencyMap;\n}\n\n/**\n * Analyze if a journey contains any custom nodes considering the detected or the overridden version.\n * @param {SingleTreeExportInterface} journey Journey/tree configuration object\n * @returns {boolean} True if the journey/tree contains any custom nodes, false otherwise.\n */\nexport function isCustomJourney({\n  journey,\n  state,\n}: {\n  journey: SingleTreeExportInterface;\n  state: State;\n}): boolean {\n  debugMessage({ message: `JourneyOps.isCustomJourney: start`, state });\n  const nodeList = Object.values(journey.nodes).concat(\n    Object.values(journey.innerNodes)\n  );\n  for (const node of nodeList) {\n    if (isCustomNode({ nodeType: node['_type']['_id'], state })) {\n      debugMessage({\n        message: `JourneyOps.isCustomJourney: Custom node: ${node['_type']['_id']}`,\n        state,\n      });\n      return true;\n    }\n  }\n  debugMessage({ message: `JourneyOps.isCustomJourney: end [false]`, state });\n  return false;\n}\n\n/**\n * Analyze if a journey contains any premium nodes considering the detected or the overridden version.\n * @param {SingleTreeExportInterface} journey Journey/tree configuration object\n * @returns {boolean} True if the journey/tree contains any custom nodes, false otherwise.\n */\nexport function isPremiumJourney(journey: SingleTreeExportInterface): boolean {\n  const nodeList = Object.values(journey.nodes).concat(\n    Object.values(journey.innerNodes)\n  );\n  for (const node of nodeList) {\n    if (isPremiumNode(node['_type']['_id'])) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Analyze if a journey contains any cloud-only nodes considering the detected or the overridden version.\n * @param {SingleTreeExportInterface} journey Journey/tree configuration object\n * @returns {boolean} True if the journey/tree contains any cloud-only nodes, false otherwise.\n */\nexport function isCloudOnlyJourney(\n  journey: SingleTreeExportInterface\n): boolean {\n  const nodeList = Object.values(journey.nodes).concat(\n    Object.values(journey.innerNodes)\n  );\n  for (const node of nodeList) {\n    if (isCloudOnlyNode(node['_type']['_id'])) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Get a journey's classifications, which can be one or multiple of:\n * - standard: can run on any instance of a ForgeRock platform\n * - cloud: utilize nodes, which are exclusively available in the ForgeRock Identity Cloud\n * - premium: utilizes nodes, which come at a premium\n * - custom: utilizes nodes not included in the ForgeRock platform release\n * @param {SingleTreeExportInterface} journey journey export data\n * @returns {JourneyClassification[]} an array of one or multiple classifications\n */\nexport function getJourneyClassification({\n  journey,\n  state,\n}: {\n  journey: SingleTreeExportInterface;\n  state: State;\n}): JourneyClassificationType[] {\n  const classifications: JourneyClassification[] = [];\n  const premium = isPremiumJourney(journey);\n  const custom = isCustomJourney({ journey, state });\n  const cloud = isCloudOnlyJourney(journey);\n  if (custom) {\n    classifications.push(JourneyClassification.CUSTOM);\n  } else if (cloud) {\n    classifications.push(JourneyClassification.CLOUD);\n  } else {\n    classifications.push(JourneyClassification.STANDARD);\n  }\n  if (premium) classifications.push(JourneyClassification.PREMIUM);\n  return classifications;\n}\n\nexport type DeleteJourneyStatus = {\n  status: string;\n  nodes: { status?: string };\n};\n\n/**\n * Delete a journey\n * @param {string} journeyId journey id/name\n * @param {Object} options deep=true also delete all the nodes and inner nodes, verbose=true print verbose info\n */\nexport async function deleteJourney({\n  journeyId,\n  options,\n  state,\n}: {\n  journeyId: string;\n  options: { deep: boolean; verbose: boolean; progress?: boolean };\n  state: State;\n}): Promise<DeleteJourneyStatus> {\n  const { deep, verbose } = options;\n  const progress = !('progress' in options) ? true : options.progress;\n  const status: DeleteJourneyStatus = { status: 'unknown', nodes: {} };\n  let indicatorId: string;\n  if (progress)\n    indicatorId = createProgressIndicator({\n      total: undefined,\n      message: `Deleting ${journeyId}...`,\n      type: 'indeterminate',\n      state,\n    });\n  if (progress && verbose) stopProgressIndicator({ id: indicatorId, state });\n  return deleteTree({ treeId: journeyId, state })\n    .then(async (deleteTreeResponse) => {\n      status['status'] = 'success';\n      const nodePromises = [];\n      if (verbose)\n        printMessage({\n          message: `Deleted ${journeyId} (tree)`,\n          type: 'info',\n          state,\n        });\n      if (deep) {\n        for (const [nodeId, nodeObject] of Object.entries(\n          deleteTreeResponse.nodes\n        )) {\n          // delete inner nodes (nodes inside container nodes)\n          if (containerNodes.includes(nodeObject['nodeType'])) {\n            try {\n              const containerNode = await getNode({\n                nodeId,\n                nodeType: nodeObject['nodeType'],\n                state,\n              });\n              if (verbose)\n                printMessage({\n                  message: `Read ${nodeId} (${nodeObject['nodeType']}) from ${journeyId}`,\n                  type: 'info',\n                  state,\n                });\n              for (const innerNodeObject of containerNode.nodes) {\n                nodePromises.push(\n                  deleteNode({\n                    nodeId: innerNodeObject._id,\n                    nodeType: innerNodeObject.nodeType,\n                    state,\n                  })\n                    .then((response2) => {\n                      status.nodes[innerNodeObject._id] = { status: 'success' };\n                      if (verbose)\n                        printMessage({\n                          message: `Deleted ${innerNodeObject._id} (${innerNodeObject.nodeType}) from ${journeyId}`,\n                          type: 'info',\n                          state,\n                        });\n                      return response2;\n                    })\n                    .catch((error) => {\n                      status.nodes[innerNodeObject._id] = {\n                        status: 'error',\n                        error,\n                      };\n                      if (verbose)\n                        printMessage({\n                          message: `Error deleting inner node ${innerNodeObject._id} (${innerNodeObject.nodeType}) from ${journeyId}: ${error}`,\n                          type: 'error',\n                          state,\n                        });\n                    })\n                );\n              }\n              // finally delete the container node\n              nodePromises.push(\n                deleteNode({\n                  nodeId: containerNode._id,\n                  nodeType: containerNode['_type']['_id'],\n                  state,\n                })\n                  .then((response2) => {\n                    status.nodes[containerNode._id] = { status: 'success' };\n                    if (verbose)\n                      printMessage({\n                        message: `Deleted ${containerNode._id} (${containerNode['_type']['_id']}) from ${journeyId}`,\n                        type: 'info',\n                        state,\n                      });\n                    return response2;\n                  })\n                  .catch((error) => {\n                    if (\n                      error?.response?.data?.code === 500 &&\n                      error.response.data.message ===\n                        'Unable to read SMS config: Node did not exist'\n                    ) {\n                      status.nodes[containerNode._id] = { status: 'success' };\n                      if (verbose)\n                        printMessage({\n                          message: `Deleted ${containerNode._id} (${containerNode['_type']['_id']}) from ${journeyId}`,\n                          type: 'info',\n                          state,\n                        });\n                    } else {\n                      status.nodes[containerNode._id] = {\n                        status: 'error',\n                        error,\n                      };\n                      if (verbose)\n                        printMessage({\n                          message: `Error deleting container node ${containerNode._id} (${containerNode['_type']['_id']}) from ${journeyId}: ${error.response.data.message}`,\n                          type: 'error',\n                          state,\n                        });\n                    }\n                  })\n              );\n            } catch (error) {\n              if (verbose)\n                printMessage({\n                  message: `Error getting container node ${nodeId} (${nodeObject['nodeType']}) from ${journeyId}: ${error}`,\n                  type: 'error',\n                  state,\n                });\n            }\n          } else {\n            // delete the node\n            nodePromises.push(\n              deleteNode({ nodeId, nodeType: nodeObject['nodeType'], state })\n                .then((response) => {\n                  status.nodes[nodeId] = { status: 'success' };\n                  if (verbose)\n                    printMessage({\n                      message: `Deleted ${nodeId} (${nodeObject['nodeType']}) from ${journeyId}`,\n                      type: 'info',\n                      state,\n                    });\n                  return response;\n                })\n                .catch((error) => {\n                  status.nodes[nodeId] = { status: 'error', error };\n                  if (verbose)\n                    printMessage({\n                      message: `Error deleting node ${nodeId} (${nodeObject['nodeType']}) from ${journeyId}: ${error}`,\n                      type: 'error',\n                      state,\n                    });\n                })\n            );\n          }\n        }\n      }\n      // wait until all the node calls are complete\n      await Promise.allSettled(nodePromises);\n\n      // report status\n      if (progress) {\n        let nodeCount = 0;\n        let errorCount = 0;\n        for (const node of Object.keys(status.nodes)) {\n          nodeCount += 1;\n          if (status.nodes[node].status === 'error') errorCount += 1;\n        }\n        if (errorCount === 0) {\n          stopProgressIndicator({\n            id: indicatorId,\n            message: `Deleted ${journeyId} and ${\n              nodeCount - errorCount\n            }/${nodeCount} nodes.`,\n            status: 'success',\n            state,\n          });\n        } else {\n          stopProgressIndicator({\n            id: indicatorId,\n            message: `Deleted ${journeyId} and ${\n              nodeCount - errorCount\n            }/${nodeCount} nodes.`,\n            status: 'fail',\n            state,\n          });\n        }\n      }\n      return status;\n    })\n    .catch((error) => {\n      status['status'] = 'error';\n      status['error'] = error;\n      stopProgressIndicator({\n        id: indicatorId,\n        message: `Error deleting ${journeyId}.`,\n        status: 'fail',\n        state,\n      });\n      if (verbose)\n        printMessage({\n          message: `Error deleting tree ${journeyId}: ${error}`,\n          type: 'error',\n          state,\n        });\n      return status;\n    });\n}\n\nexport type DeleteJourneysStatus = {\n  [k: string]: DeleteJourneyStatus;\n};\n\n/**\n * Delete all journeys\n * @param {Object} options deep=true also delete all the nodes and inner nodes, verbose=true print verbose info\n */\nexport async function deleteJourneys({\n  options,\n  state,\n}: {\n  options?: {\n    deep: boolean;\n    verbose: boolean;\n  };\n  state: State;\n}) {\n  let indicatorId: string;\n  try {\n    const { verbose } = options;\n    const status: DeleteJourneysStatus = {};\n    const trees = (await getTrees({ state })).result;\n    indicatorId = createProgressIndicator({\n      total: trees.length,\n      message: 'Deleting journeys...',\n      state,\n    });\n    for (const tree of trees) {\n      if (verbose) printMessage({ message: '', state });\n      options['progress'] = false;\n      status[tree._id] = await deleteJourney({\n        journeyId: tree._id,\n        options,\n        state,\n      });\n      updateProgressIndicator({\n        id: indicatorId,\n        message: `${tree._id}`,\n        state,\n      });\n      // introduce a 100ms wait to allow the progress bar to update before the next verbose message prints from the async function\n      if (verbose)\n        // eslint-disable-next-line no-await-in-loop\n        await new Promise((r) => {\n          setTimeout(r, 100);\n        });\n    }\n    let journeyCount = 0;\n    let journeyErrorCount = 0;\n    let nodeCount = 0;\n    let nodeErrorCount = 0;\n    for (const journey of Object.keys(status)) {\n      journeyCount += 1;\n      if (status[journey].status === 'error') journeyErrorCount += 1;\n      for (const node of Object.keys(status[journey].nodes)) {\n        nodeCount += 1;\n        if (status[journey].nodes[node].status === 'error') nodeErrorCount += 1;\n      }\n    }\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Deleted ${\n        journeyCount - journeyErrorCount\n      }/${journeyCount} journeys and ${\n        nodeCount - nodeErrorCount\n      }/${nodeCount} nodes.`,\n      state,\n    });\n    return status;\n  } catch (error) {\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Error deleting journeys`,\n      status: 'fail',\n      state,\n    });\n    throw new FrodoError(`Error deleting journeys`, error);\n  }\n}\n\n/**\n * Enable a journey\n * @param journeyId journey id/name\n * @returns {Promise<TreeSkeleton>} updated tree/journey object\n */\nexport async function enableJourney({\n  journeyId,\n  state,\n}: {\n  journeyId: string;\n  state: State;\n}): Promise<TreeSkeleton> {\n  try {\n    const treeObject = await getTree({ id: journeyId, state });\n    treeObject['enabled'] = true;\n    delete treeObject._rev;\n    const newTreeObject = await putTree({\n      treeId: journeyId,\n      treeData: treeObject,\n      state,\n    });\n    return newTreeObject;\n  } catch (error) {\n    throw new FrodoError(`Error enabling journey ${journeyId}`, error);\n  }\n}\n\n/**\n * Disable a journey\n * @param journeyId journey id/name\n * @returns {Promise<TreeSkeleton>} true if the operation was successful, false otherwise\n */\nexport async function disableJourney({\n  journeyId,\n  state,\n}: {\n  journeyId: string;\n  state: State;\n}): Promise<TreeSkeleton> {\n  try {\n    const treeObject = await getTree({ id: journeyId, state });\n    treeObject['enabled'] = false;\n    delete treeObject._rev;\n    const newTreeObject = await putTree({\n      treeId: journeyId,\n      treeData: treeObject,\n      state,\n    });\n    return newTreeObject;\n  } catch (error) {\n    throw new FrodoError(`Error disabling journey ${journeyId}`, error);\n  }\n}\n","import util from 'util';\n\nimport { State } from '../shared/State';\nimport { getCurrentRealmPath } from '../utils/ForgeRockUtils';\nimport { deleteDeepByKey } from '../utils/JsonUtils';\nimport {\n  type IdObjectSkeletonInterface,\n  type NoIdObjectSkeletonInterface,\n  type PagedResult,\n  type QueryResult,\n} from './ApiTypes';\nimport { generateAmApi } from './BaseApi';\nimport { type AmServiceType } from './ServiceApi';\n\nconst queryAllNodeTypesURLTemplate =\n  '%s/json%s/realm-config/authentication/authenticationtrees/nodes?_action=getAllTypes';\nconst queryAllNodesByTypeURLTemplate =\n  '%s/json%s/realm-config/authentication/authenticationtrees/nodes/%s?_queryFilter=true';\nconst queryAllNodesURLTemplate =\n  '%s/json%s/realm-config/authentication/authenticationtrees/nodes?_action=nextdescendents';\nconst nodeURLTemplate =\n  '%s/json%s/realm-config/authentication/authenticationtrees/nodes/%s/%s';\nconst createNodeURLTemplate =\n  '%s/json%s/realm-config/authentication/authenticationtrees/nodes/%s?_action=create';\n\nconst apiVersion = 'protocol=2.1,resource=1.0';\nconst getNodeApiConfig = () => {\n  return {\n    apiVersion,\n  };\n};\n\nexport interface NodeRefSkeletonInterface {\n  connections: Record<string, string>;\n  displayName: string;\n  nodeType: string;\n  x: number;\n  y: number;\n}\n\nexport interface StaticNodeRefSkeletonInterface {\n  x: number;\n  y: number;\n}\n\nexport interface InnerNodeRefSkeletonInterface {\n  _id: string;\n  displayName: string;\n  nodeType: string;\n}\n\nexport type NodeSkeleton = IdObjectSkeletonInterface & {\n  _type: AmServiceType;\n  nodes?: InnerNodeRefSkeletonInterface[];\n  tree?: string;\n  identityResource?: string;\n  script?: string;\n  emailTemplateName?: string;\n  filteredProviders?: string[];\n  useScript?: boolean;\n};\n\nexport type NodeTypeSkeleton = IdObjectSkeletonInterface & {\n  name: string;\n  collection: boolean;\n  tags: string[];\n  metadata: {\n    tags: string[];\n    [k: string]: string | number | boolean | string[];\n  };\n  help: string;\n};\n\n/**\n * Get all node types\n * @returns {Promise<QueryResult<NodeTypeSkeleton>>} a promise that resolves to an array of node type objects\n */\nexport async function getNodeTypes({\n  state,\n}: {\n  state: State;\n}): Promise<QueryResult<NodeTypeSkeleton>> {\n  const urlString = util.format(\n    queryAllNodeTypesURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state)\n  );\n  const { data } = await generateAmApi({\n    resource: getNodeApiConfig(),\n    state,\n  }).post(\n    urlString,\n    {},\n    {\n      withCredentials: true,\n      headers: { 'Accept-Encoding': 'gzip, deflate, br' },\n    }\n  );\n  return data;\n}\n\n/**\n * Get all nodes\n * @returns {Promise} a promise that resolves to an object containing an array of node objects\n */\nexport async function getNodes({\n  state,\n}: {\n  state: State;\n}): Promise<QueryResult<NodeSkeleton>> {\n  const urlString = util.format(\n    queryAllNodesURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state)\n  );\n  const { data } = await generateAmApi({\n    resource: getNodeApiConfig(),\n    state,\n  }).post(\n    urlString,\n    {},\n    {\n      withCredentials: true,\n      headers: { 'Accept-Encoding': 'gzip, deflate, br' },\n    }\n  );\n  return data;\n}\n\n/**\n * Get all nodes by type\n * @param {string} nodeType node type\n * @returns {Promise<PagedResult<NodeSkeleton>>} a promise that resolves to an object containing an array of node objects of the requested type\n */\nexport async function getNodesByType({\n  nodeType,\n  state,\n}: {\n  nodeType: string;\n  state: State;\n}): Promise<PagedResult<NodeSkeleton>> {\n  const urlString = util.format(\n    queryAllNodesByTypeURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    nodeType\n  );\n  const { data } = await generateAmApi({\n    resource: getNodeApiConfig(),\n    state,\n  }).get(urlString, {\n    withCredentials: true,\n  });\n  return data;\n}\n\n/**\n * Get node by uuid and type\n * @param {string} nodeId node uuid\n * @param {string} nodeType node type\n * @returns {Promise<NodeSkeleton>} a promise that resolves to a node object\n */\nexport async function getNode({\n  nodeId,\n  nodeType,\n  state,\n}: {\n  nodeId: string;\n  nodeType: string;\n  state: State;\n}): Promise<NodeSkeleton> {\n  const urlString = util.format(\n    nodeURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    nodeType,\n    nodeId\n  );\n  const { data } = await generateAmApi({\n    resource: getNodeApiConfig(),\n    state,\n  }).get(urlString, {\n    withCredentials: true,\n  });\n  return data;\n}\n\n/**\n * Create node by type\n * @param {string} nodeType node type\n * @param {object} nodeData node object\n * @returns {Promise<NodeSkeleton>} a promise that resolves to a node object\n */\nexport async function createNode({\n  nodeType,\n  nodeData,\n  state,\n}: {\n  nodeType: string;\n  nodeData: NodeSkeleton;\n  state: State;\n}): Promise<NodeSkeleton> {\n  const urlString = util.format(\n    createNodeURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    nodeType\n  );\n  const { data } = await generateAmApi({\n    resource: getNodeApiConfig(),\n    state,\n  }).post(urlString, nodeData, {\n    withCredentials: true,\n    headers: { 'Accept-Encoding': 'gzip, deflate, br' },\n  });\n  return data;\n}\n\n/**\n * Put node by uuid and type\n * @param {string} nodeId node uuid\n * @param {string} nodeType node type\n * @param {object} nodeData node object\n * @returns {Promise} a promise that resolves to an object containing a node object\n */\nexport async function putNode({\n  nodeId,\n  nodeType,\n  nodeData,\n  state,\n}: {\n  nodeId: string;\n  nodeType: string;\n  nodeData: NodeSkeleton | NoIdObjectSkeletonInterface;\n  state: State;\n}) {\n  // until we figure out a way to use transport keys in Frodo,\n  // we'll have to drop those encrypted attributes.\n  const cleanData = deleteDeepByKey(nodeData, '-encrypted');\n  const urlString = util.format(\n    nodeURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    nodeType,\n    nodeId\n  );\n  const { data } = await generateAmApi({\n    resource: getNodeApiConfig(),\n    state,\n  }).put(urlString, cleanData, {\n    withCredentials: true,\n  });\n  return data;\n}\n\n/**\n * Delete node by uuid and type\n * @param {String} nodeId node uuid\n * @param {String} nodeType node type\n * @returns {Promise} a promise that resolves to an object containing a node object\n */\nexport async function deleteNode({\n  nodeId,\n  nodeType,\n  state,\n}: {\n  nodeId: string;\n  nodeType: string;\n  state: State;\n}) {\n  const urlString = util.format(\n    nodeURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    nodeType,\n    nodeId\n  );\n  const { data } = await generateAmApi({\n    resource: getNodeApiConfig(),\n    state,\n  }).delete(urlString, {\n    withCredentials: true,\n  });\n  return data;\n}\n","import util from 'util';\n\nimport { State } from '../shared/State';\nimport { getCurrentRealmPath } from '../utils/ForgeRockUtils';\nimport type { IdObjectSkeletonInterface } from './ApiTypes';\nimport { generateAmApi } from './BaseApi';\nimport { type NodeRefSkeletonInterface } from './NodeApi';\n\nconst treeByIdURLTemplate =\n  '%s/json%s/realm-config/authentication/authenticationtrees/trees/%s';\nconst queryAllTreesURLTemplate =\n  '%s/json%s/realm-config/authentication/authenticationtrees/trees?_queryFilter=true';\n\nconst apiVersion = 'protocol=2.1,resource=1.0';\nconst getTreeApiConfig = () => {\n  return {\n    apiVersion,\n  };\n};\n\nexport interface UiConfigInterface {\n  categories: string;\n}\n\nexport type TreeSkeleton = IdObjectSkeletonInterface & {\n  entryNodeId: string;\n  nodes: Record<string, NodeRefSkeletonInterface>;\n  identityResource?: string;\n  uiConfig?: UiConfigInterface;\n  enabled?: boolean;\n  innerTreeOnly?: boolean;\n};\n\n/**\n * Get all trees\n * @returns {Promise<unknown[]>} a promise that resolves to an array of tree objects\n */\nexport async function getTrees({ state }: { state: State }) {\n  const urlString = util.format(\n    queryAllTreesURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state)\n  );\n  const { data } = await generateAmApi({\n    resource: getTreeApiConfig(),\n    state,\n  }).get(urlString, {\n    withCredentials: true,\n  });\n  return data;\n}\n\n/**\n * Get tree by id/name\n * @param {String} id tree id/name\n * @returns {Promise} a promise that resolves to a tree object\n */\nexport async function getTree({ id, state }: { id: string; state: State }) {\n  const urlString = util.format(\n    treeByIdURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    id\n  );\n  const { data } = await generateAmApi({\n    resource: getTreeApiConfig(),\n    state,\n  }).get(urlString, {\n    withCredentials: true,\n  });\n  return data;\n}\n\n/**\n * Put tree by id/name\n * @param {String} treeId tree id/name\n * @param {Object} treeData tree object\n * @returns {Promise} a promise that resolves to a tree object\n */\nexport async function putTree({\n  treeId,\n  treeData,\n  state,\n}: {\n  treeId: string;\n  treeData: TreeSkeleton | string;\n  state: State;\n}): Promise<TreeSkeleton> {\n  const urlString = util.format(\n    treeByIdURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    treeId\n  );\n  const { data } = await generateAmApi({\n    resource: getTreeApiConfig(),\n    state,\n  }).put(urlString, treeData, {\n    withCredentials: true,\n  });\n  return data;\n}\n\n/**\n * Delete tree by id/name\n * @param {String} treeId tree id/name\n * @returns {Promise} a promise that resolves to a tree object\n */\nexport async function deleteTree({\n  treeId,\n  state,\n}: {\n  treeId: string;\n  state: State;\n}) {\n  const urlString = util.format(\n    treeByIdURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    treeId\n  );\n  const { data } = await generateAmApi({\n    resource: getTreeApiConfig(),\n    state,\n  }).delete(urlString, {\n    withCredentials: true,\n  });\n  return data;\n}\n","import {\n  createNode as _createNode,\n  deleteNode as _deleteNode,\n  getNode as _getNode,\n  getNodes as _getNodes,\n  getNodesByType as _getNodesByType,\n  getNodeTypes as _getNodeTypes,\n  type NodeSkeleton,\n  type NodeTypeSkeleton,\n  putNode as _putNode,\n} from '../api/NodeApi';\nimport { getTrees } from '../api/TreeApi';\nimport Constants from '../shared/Constants';\nimport { State } from '../shared/State';\nimport {\n  createProgressIndicator,\n  printError,\n  stopProgressIndicator,\n  updateProgressIndicator,\n} from '../utils/Console';\nimport { FrodoError } from './FrodoError';\n\nexport type Node = {\n  /**\n   * Read all node types\n   * @returns {Promise<any>} a promise that resolves to an array of node type objects\n   */\n  readNodeTypes(): Promise<any>;\n  /**\n   * Read all nodes\n   * @returns {Promise<NodeSkeleton[]>} a promise that resolves to an object containing an array of node objects\n   */\n  readNodes(): Promise<NodeSkeleton[]>;\n  /**\n   * Read all nodes by type\n   * @param {string} nodeType node type\n   * @returns {Promise<NodeSkeleton[]>} a promise that resolves to an object containing an array of node objects of the requested type\n   */\n  readNodesByType(nodeType: string): Promise<NodeSkeleton[]>;\n  /**\n   * Read node by uuid and type\n   * @param {string} nodeId node uuid\n   * @param {string} nodeType node type\n   * @returns {Promise<NodeSkeleton>} a promise that resolves to a node object\n   */\n  readNode(nodeId: string, nodeType: string): Promise<NodeSkeleton>;\n  /**\n   * Create node by type\n   * @param {string} nodeType node type\n   * @param {NodeSkeleton} nodeData node object\n   * @returns {Promise<NodeSkeleton>} a promise that resolves to an object containing a node object\n   */\n  createNode(nodeType: string, nodeData: NodeSkeleton): Promise<NodeSkeleton>;\n  /**\n   * Update or create node by uuid and type\n   * @param {string} nodeId node uuid\n   * @param {string} nodeType node type\n   * @param {NodeSkeleton} nodeData node object\n   * @returns {Promise<NodeSkeleton>} a promise that resolves to an object containing a node object\n   */\n  updateNode(\n    nodeId: string,\n    nodeType: string,\n    nodeData: NodeSkeleton\n  ): Promise<NodeSkeleton>;\n  /**\n   * Delete node by uuid and type\n   * @param {string} nodeId node uuid\n   * @param {string} nodeType node type\n   * @returns {Promise<NodeSkeleton>} a promise that resolves to an object containing a node object\n   */\n  deleteNode(nodeId: string, nodeType: string): Promise<NodeSkeleton>;\n  /**\n   * Find all node configuration objects that are no longer referenced by any tree\n   * @returns {Promise<NodeSkeleton[]>} a promise that resolves to an array of orphaned nodes\n   */\n  findOrphanedNodes(): Promise<NodeSkeleton[]>;\n  /**\n   * Remove orphaned nodes\n   * @param {NodeSkeleton[]} orphanedNodes Pass in an array of orphaned node configuration objects to remove\n   * @returns {Promise<NodeSkeleton[]>} a promise that resolves to an array nodes that encountered errors deleting\n   */\n  removeOrphanedNodes(orphanedNodes: NodeSkeleton[]): Promise<NodeSkeleton[]>;\n  /**\n   * Analyze if a node type is premium.\n   * @param {string} nodeType Node type\n   * @returns {boolean} True if the node type is premium, false otherwise.\n   */\n  isPremiumNode(nodeType: string): boolean;\n  /**\n   * Analyze if a node type is a cloud-only node.\n   * @param {string} nodeType Node type\n   * @returns {boolean} True if the node type is cloud-only, false otherwise.\n   */\n  isCloudOnlyNode(nodeType: string): boolean;\n  /**\n   * Analyze if a node type is a cloud-excluded node. Cloud excluded nodes are OOTB nodes in self-hosted AM deployments but have been excluded in cloud.\n   * @param {string} nodeType node type.\n   * @returns {boolean} True if node type is cloud-excluded, false otherwise.\n   */\n  isCloudExcludedNode(nodeType: string): boolean;\n  /**\n   * Analyze if a node type has been deprecated\n   * @param {string} nodeType node type.\n   * @returns {boolean} True if node type is deprecated, false otherwise.\n   */\n  isDeprecatedNode(nodeType: string): boolean;\n  /**\n   * Analyze if a node is custom.\n   * @param {string} nodeType Node type\n   * @returns {boolean} True if the node type is custom, false otherwise.\n   */\n  isCustomNode(nodeType: string): boolean;\n  /**\n   * Get a node's classifications, which can be one or multiple of:\n   * - standard: can run on any instance of a ForgeRock platform\n   * - cloud: utilize nodes, which are exclusively available in the ForgeRock Identity Cloud\n   * - premium: utilizes nodes, which come at a premium\n   * @param {string} nodeType Node type\n   * @returns {NodeClassificationType[]} an array of one or multiple classifications\n   */\n  getNodeClassification(nodeType: string): NodeClassificationType[];\n};\n\nexport default (state: State): Node => {\n  return {\n    readNodeTypes(): Promise<any> {\n      return readNodeTypes({ state });\n    },\n    async readNodes(): Promise<NodeSkeleton[]> {\n      return readNodes({ state });\n    },\n    async readNodesByType(nodeType: string): Promise<NodeSkeleton[]> {\n      return readNodesByType({ nodeType, state });\n    },\n    async readNode(nodeId: string, nodeType: string): Promise<NodeSkeleton> {\n      return readNode({ nodeId, nodeType, state });\n    },\n    async createNode(\n      nodeType: string,\n      nodeData: NodeSkeleton\n    ): Promise<NodeSkeleton> {\n      return createNode({ nodeType, nodeData, state });\n    },\n    async updateNode(\n      nodeId: string,\n      nodeType: string,\n      nodeData: NodeSkeleton\n    ): Promise<NodeSkeleton> {\n      return updateNode({ nodeId, nodeType, nodeData, state });\n    },\n    async deleteNode(nodeId: string, nodeType: string): Promise<NodeSkeleton> {\n      return deleteNode({ nodeId, nodeType, state });\n    },\n    async findOrphanedNodes(): Promise<NodeSkeleton[]> {\n      return findOrphanedNodes({ state });\n    },\n    async removeOrphanedNodes(\n      orphanedNodes: NodeSkeleton[]\n    ): Promise<NodeSkeleton[]> {\n      return removeOrphanedNodes({ orphanedNodes, state });\n    },\n    isPremiumNode(nodeType: string): boolean {\n      return isPremiumNode(nodeType);\n    },\n    isCloudOnlyNode(nodeType: string): boolean {\n      return isCloudOnlyNode(nodeType);\n    },\n    isCloudExcludedNode(nodeType: string): boolean {\n      return isCloudExcludedNode({ nodeType, state });\n    },\n    isDeprecatedNode(nodeType: string): boolean {\n      return isDeprecatedNode({ nodeType, state });\n    },\n    isCustomNode(nodeType: string): boolean {\n      return isCustomNode({ nodeType, state });\n    },\n    getNodeClassification(nodeType: string): NodeClassificationType[] {\n      return getNodeClassification({ nodeType, state });\n    },\n  };\n};\n\nexport type NodeClassificationType =\n  | 'standard'\n  | 'custom'\n  | 'cloud'\n  | 'excluded'\n  | 'premium'\n  | 'deprecated';\n\nexport enum NodeClassification {\n  STANDARD = 'standard',\n  CUSTOM = 'custom',\n  CLOUD = 'cloud',\n  EXCLUDED = 'excluded',\n  PREMIUM = 'premium',\n  DEPRECATED = 'deprecated',\n}\n\nconst containerNodes = ['PageNode', 'CustomPageNode'];\n\n/**\n * Read all node types\n * @returns {Promise<NodeTypeSkeleton[]>} a promise that resolves to an array of node type objects\n */\nexport async function readNodeTypes({\n  state,\n}: {\n  state: State;\n}): Promise<NodeTypeSkeleton[]> {\n  try {\n    const { result } = await _getNodeTypes({ state });\n    return result;\n  } catch (error) {\n    throw new FrodoError(`Error reading node types`, error);\n  }\n}\n\n/**\n * Get all nodes\n * @returns {Promise<NodeSkeleton[]>} a promise that resolves to an object containing an array of node objects\n */\nexport async function readNodes({\n  state,\n}: {\n  state: State;\n}): Promise<NodeSkeleton[]> {\n  try {\n    const { result } = await _getNodes({ state });\n    return result;\n  } catch (error) {\n    throw new FrodoError(`Error reading nodes`, error);\n  }\n}\n\n/**\n * Read all nodes by type\n * @param {string} nodeType node type\n * @returns {Promise<NodeSkeleton[]>} a promise that resolves to an object containing an array of node objects of the requested type\n */\nexport async function readNodesByType({\n  nodeType,\n  state,\n}: {\n  nodeType: string;\n  state: State;\n}): Promise<NodeSkeleton[]> {\n  try {\n    const { result } = await _getNodesByType({ nodeType, state });\n    return result;\n  } catch (error) {\n    throw new FrodoError(`Error reading ${nodeType} nodes`, error);\n  }\n}\n\n/**\n * Read node\n * @param {String} nodeId node uuid\n * @param {String} nodeType node type\n * @returns {Promise} a promise that resolves to a node object\n */\nexport async function readNode({\n  nodeId,\n  nodeType,\n  state,\n}: {\n  nodeId: string;\n  nodeType: string;\n  state: State;\n}): Promise<NodeSkeleton> {\n  try {\n    return _getNode({ nodeId, nodeType, state });\n  } catch (error) {\n    throw new FrodoError(`Error reading ${nodeType} node ${nodeId}`, error);\n  }\n}\n\n/**\n * Create node\n * @param {string} nodeId node uuid\n * @param {string} nodeType node type\n * @param {NodeSkeleton} nodeData node object\n * @returns {Promise<NodeSkeleton>} a promise that resolves to an object containing a node object\n */\nexport async function createNode({\n  nodeId,\n  nodeType,\n  nodeData,\n  state,\n}: {\n  nodeId?: string;\n  nodeType: string;\n  nodeData: NodeSkeleton;\n  state: State;\n}): Promise<NodeSkeleton> {\n  try {\n    if (nodeId) {\n      try {\n        await readNode({ nodeId, nodeType, state });\n      } catch (error) {\n        const result = await updateNode({ nodeId, nodeType, nodeData, state });\n        return result;\n      }\n      throw new FrodoError(`Node ${nodeId} already exists!`);\n    }\n    return _createNode({ nodeType, nodeData, state });\n  } catch (error) {\n    throw new FrodoError(`Error creating ${nodeType} node ${nodeId}`, error);\n  }\n}\n\n/**\n * Put node by uuid and type\n * @param {string} nodeId node uuid\n * @param {string} nodeType node type\n * @param {object} nodeData node object\n * @returns {Promise} a promise that resolves to an object containing a node object\n */\nexport async function updateNode({\n  nodeId,\n  nodeType,\n  nodeData,\n  state,\n}: {\n  nodeId: string;\n  nodeType: string;\n  nodeData: NodeSkeleton;\n  state: State;\n}): Promise<NodeSkeleton> {\n  try {\n    return _putNode({ nodeId, nodeType, nodeData, state });\n  } catch (error) {\n    throw new FrodoError(`Error updating ${nodeType} node ${nodeId}`, error);\n  }\n}\n\n/**\n * Delete node by uuid and type\n * @param {String} nodeId node uuid\n * @param {String} nodeType node type\n * @returns {Promise} a promise that resolves to an object containing a node object\n */\nexport async function deleteNode({\n  nodeId,\n  nodeType,\n  state,\n}: {\n  nodeId: string;\n  nodeType: string;\n  state: State;\n}): Promise<NodeSkeleton> {\n  try {\n    return _deleteNode({ nodeId, nodeType, state });\n  } catch (error) {\n    throw new FrodoError(`Error deleting ${nodeType} node ${nodeId}`, error);\n  }\n}\n\n/**\n * Find all node configuration objects that are no longer referenced by any tree\n * @returns {Promise<unknown[]>} a promise that resolves to an array of orphaned nodes\n */\nexport async function findOrphanedNodes({\n  state,\n}: {\n  state: State;\n}): Promise<NodeSkeleton[]> {\n  const allNodes = [];\n  const orphanedNodes = [];\n  let types = [];\n  const allJourneys = (await getTrees({ state })).result;\n  let errorMessage = '';\n  const errorTypes = [];\n\n  const indicatorId = createProgressIndicator({\n    total: undefined,\n    message: `Counting total nodes...`,\n    type: 'indeterminate',\n    state,\n  });\n  try {\n    types = (await _getNodeTypes({ state })).result;\n  } catch (error) {\n    throw new FrodoError(`Error retrieving all available node types`, error);\n  }\n  for (const type of types) {\n    try {\n      const nodes = (await _getNodesByType({ nodeType: type._id, state }))\n        .result;\n      for (const node of nodes) {\n        allNodes.push(node);\n        updateProgressIndicator({\n          id: indicatorId,\n          message: `${allNodes.length} total nodes${errorMessage}`,\n          state,\n        });\n      }\n    } catch (error) {\n      errorTypes.push(type._id);\n      errorMessage = ` (Skipped type(s): ${errorTypes})`['yellow'];\n      updateProgressIndicator({\n        id: indicatorId,\n        message: `${allNodes.length} total nodes${errorMessage}`,\n        state,\n      });\n    }\n  }\n  if (errorTypes.length > 0) {\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `${allNodes.length} total nodes${errorMessage}`,\n      state,\n      status: 'warn',\n    });\n  } else {\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `${allNodes.length} total nodes`,\n      status: 'success',\n      state,\n    });\n  }\n\n  const indicatorId2 = createProgressIndicator({\n    total: undefined,\n    message: 'Counting active nodes...',\n    type: 'indeterminate',\n    state,\n  });\n  const activeNodes = [];\n  for (const journey of allJourneys) {\n    for (const nodeId in journey.nodes) {\n      if ({}.hasOwnProperty.call(journey.nodes, nodeId)) {\n        activeNodes.push(nodeId);\n        updateProgressIndicator({\n          id: indicatorId2,\n          message: `${activeNodes.length} active nodes`,\n          state,\n        });\n        const node = journey.nodes[nodeId];\n        if (containerNodes.includes(node.nodeType)) {\n          const containerNode = await _getNode({\n            nodeId,\n            nodeType: node.nodeType,\n            state,\n          });\n          for (const innerNode of containerNode.nodes) {\n            activeNodes.push(innerNode._id);\n            updateProgressIndicator({\n              id: indicatorId2,\n              message: `${activeNodes.length} active nodes`,\n              state,\n            });\n          }\n        }\n      }\n    }\n  }\n  stopProgressIndicator({\n    id: indicatorId2,\n    message: `${activeNodes.length} active nodes`,\n    status: 'success',\n    state,\n  });\n\n  const indicatorId3 = createProgressIndicator({\n    total: undefined,\n    message: 'Calculating orphaned nodes...',\n    type: 'indeterminate',\n    state,\n  });\n  const diff = allNodes.filter((x) => !activeNodes.includes(x._id));\n  for (const orphanedNode of diff) {\n    orphanedNodes.push(orphanedNode);\n  }\n  stopProgressIndicator({\n    id: indicatorId3,\n    message: `${orphanedNodes.length} orphaned nodes`,\n    status: 'success',\n    state,\n  });\n  return orphanedNodes;\n}\n\n/**\n * Remove orphaned nodes\n * @param {NodeSkeleton[]} orphanedNodes Pass in an array of orphaned node configuration objects to remove\n * @returns {Promise<NodeSkeleton[]>} a promise that resolves to an array nodes that encountered errors deleting\n */\nexport async function removeOrphanedNodes({\n  orphanedNodes,\n  state,\n}: {\n  orphanedNodes: NodeSkeleton[];\n  state: State;\n}): Promise<NodeSkeleton[]> {\n  const errorNodes = [];\n  const indicatorId = createProgressIndicator({\n    total: orphanedNodes.length,\n    message: 'Removing orphaned nodes...',\n    state,\n  });\n  for (const node of orphanedNodes) {\n    updateProgressIndicator({\n      id: indicatorId,\n      message: `Removing ${node['_id']}...`,\n      state,\n    });\n    try {\n      await deleteNode({\n        nodeId: node['_id'],\n        nodeType: node['_type']['_id'],\n        state,\n      });\n    } catch (deleteError) {\n      errorNodes.push(node);\n      printError(deleteError);\n    }\n  }\n  stopProgressIndicator({\n    id: indicatorId,\n    message: `Removed ${orphanedNodes.length} orphaned nodes.`,\n    state,\n  });\n  return errorNodes;\n}\n\nconst OOTB_NODE_TYPES_7 = [\n  'AcceptTermsAndConditionsNode',\n  'AccountActiveDecisionNode',\n  'AccountLockoutNode',\n  'AgentDataStoreDecisionNode',\n  'AnonymousSessionUpgradeNode',\n  'AnonymousUserNode',\n  'AttributeCollectorNode',\n  'AttributePresentDecisionNode',\n  'AttributeValueDecisionNode',\n  'AuthLevelDecisionNode',\n  'ChoiceCollectorNode',\n  'ConsentNode',\n  'CookiePresenceDecisionNode',\n  'CreateObjectNode',\n  'CreatePasswordNode',\n  'DataStoreDecisionNode',\n  'DeviceGeoFencingNode',\n  'DeviceLocationMatchNode',\n  'DeviceMatchNode',\n  'DeviceProfileCollectorNode',\n  'DeviceSaveNode',\n  'DeviceTamperingVerificationNode',\n  'DisplayUserNameNode',\n  'EmailSuspendNode',\n  'EmailTemplateNode',\n  'IdentifyExistingUserNode',\n  'IncrementLoginCountNode',\n  'InnerTreeEvaluatorNode',\n  'IotAuthenticationNode',\n  'IotRegistrationNode',\n  'KbaCreateNode',\n  'KbaDecisionNode',\n  'KbaVerifyNode',\n  'LdapDecisionNode',\n  'LoginCountDecisionNode',\n  'MessageNode',\n  'MetadataNode',\n  'MeterNode',\n  'ModifyAuthLevelNode',\n  'OneTimePasswordCollectorDecisionNode',\n  'OneTimePasswordGeneratorNode',\n  'OneTimePasswordSmsSenderNode',\n  'OneTimePasswordSmtpSenderNode',\n  'PageNode',\n  'PasswordCollectorNode',\n  'PatchObjectNode',\n  'PersistentCookieDecisionNode',\n  'PollingWaitNode',\n  'product-CertificateCollectorNode',\n  'product-CertificateUserExtractorNode',\n  'product-CertificateValidationNode',\n  'product-KerberosNode',\n  'product-ReCaptchaNode',\n  'product-Saml2Node',\n  'product-WriteFederationInformationNode',\n  'ProfileCompletenessDecisionNode',\n  'ProvisionDynamicAccountNode',\n  'ProvisionIdmAccountNode',\n  'PushAuthenticationSenderNode',\n  'PushResultVerifierNode',\n  'QueryFilterDecisionNode',\n  'RecoveryCodeCollectorDecisionNode',\n  'RecoveryCodeDisplayNode',\n  'RegisterLogoutWebhookNode',\n  'RemoveSessionPropertiesNode',\n  'RequiredAttributesDecisionNode',\n  'RetryLimitDecisionNode',\n  'ScriptedDecisionNode',\n  'SelectIdPNode',\n  'SessionDataNode',\n  'SetFailureUrlNode',\n  'SetPersistentCookieNode',\n  'SetSessionPropertiesNode',\n  'SetSuccessUrlNode',\n  'SocialFacebookNode',\n  'SocialGoogleNode',\n  'SocialNode',\n  'SocialOAuthIgnoreProfileNode',\n  'SocialOpenIdConnectNode',\n  'SocialProviderHandlerNode',\n  'TermsAndConditionsDecisionNode',\n  'TimerStartNode',\n  'TimerStopNode',\n  'TimeSinceDecisionNode',\n  'UsernameCollectorNode',\n  'ValidatedPasswordNode',\n  'ValidatedUsernameNode',\n  'WebAuthnAuthenticationNode',\n  'WebAuthnDeviceStorageNode',\n  'WebAuthnRegistrationNode',\n  'ZeroPageLoginNode',\n];\n\nconst DEPRECATED_NODE_TYPES_7 = [];\n\nconst OOTB_NODE_TYPES_7_1 = [\n  'GetAuthenticatorAppNode',\n  'MultiFactorRegistrationOptionsNode',\n  'OptOutMultiFactorAuthenticationNode',\n  'PushRegistrationNode',\n].concat(OOTB_NODE_TYPES_7);\n\nconst DEPRECATED_NODE_TYPES_7_1 = [].concat(DEPRECATED_NODE_TYPES_7);\n\nconst OOTB_NODE_TYPES_7_2 = [\n  'ConfigProviderNode',\n  'DebugNode',\n  'OathRegistrationNode',\n  'OathTokenVerifierNode',\n  'PassthroughAuthenticationNode',\n  'product-CaptchaNode',\n  'PushWaitNode',\n  'SetCustomCookieNode',\n].concat(OOTB_NODE_TYPES_7_1);\n\nconst DEPRECATED_NODE_TYPES_7_2 = ['product-ReCaptchaNode'].concat(\n  DEPRECATED_NODE_TYPES_7_1\n);\n\nconst OOTB_NODE_TYPES_7_3 = [\n  'CombinedMultiFactorRegistrationNode',\n  'OathDeviceStorageNode',\n  'OidcNode',\n].concat(OOTB_NODE_TYPES_7_2);\n\nconst DEPRECATED_NODE_TYPES_7_3 = [].concat(DEPRECATED_NODE_TYPES_7_2);\n\nconst OOTB_NODE_TYPES_7_4 = ['QueryParameterNode'].concat(OOTB_NODE_TYPES_7_3);\n\nconst DEPRECATED_NODE_TYPES_7_4 = [].concat(DEPRECATED_NODE_TYPES_7_3);\n\nconst OOTB_NODE_TYPES_7_5 = [\n  'DeviceBindingNode',\n  'DeviceBindingStorageNode',\n  'DeviceSigningVerifierNode',\n].concat(OOTB_NODE_TYPES_7_4);\n\nconst DEPRECATED_NODE_TYPES_7_5 = ['SocialProviderHandlerNode'].concat(\n  DEPRECATED_NODE_TYPES_7_4\n);\n\n// move above 7 release nodes once 8 becomes a release version\nconst OOTB_NODE_TYPES_8 = [].concat(OOTB_NODE_TYPES_7_5);\n\n// move above 7 release nodes once 8 becomes a release version\nconst DEPRECATED_NODE_TYPES_8 = [].concat(DEPRECATED_NODE_TYPES_7_5);\n\nconst OOTB_NODE_TYPES_6_5 = [\n  'AbstractSocialAuthLoginNode',\n  'AccountLockoutNode',\n  'AgentDataStoreDecisionNode',\n  'AnonymousUserNode',\n  'AuthLevelDecisionNode',\n  'ChoiceCollectorNode',\n  'CookiePresenceDecisionNode',\n  'CreatePasswordNode',\n  'DataStoreDecisionNode',\n  'InnerTreeEvaluatorNode',\n  'LdapDecisionNode',\n  'MessageNode',\n  'MetadataNode',\n  'MeterNode',\n  'ModifyAuthLevelNode',\n  'OneTimePasswordCollectorDecisionNode',\n  'OneTimePasswordGeneratorNode',\n  'OneTimePasswordSmsSenderNode',\n  'OneTimePasswordSmtpSenderNode',\n  'PageNode',\n  'PasswordCollectorNode',\n  'PersistentCookieDecisionNode',\n  'PollingWaitNode',\n  'ProvisionDynamicAccountNode',\n  'ProvisionIdmAccountNode',\n  'PushAuthenticationSenderNode',\n  'PushResultVerifierNode',\n  'RecoveryCodeCollectorDecisionNode',\n  'RecoveryCodeDisplayNode',\n  'RegisterLogoutWebhookNode',\n  'RemoveSessionPropertiesNode',\n  'RetryLimitDecisionNode',\n  'ScriptedDecisionNode',\n  'SessionDataNode',\n  'SetFailureUrlNode',\n  'SetPersistentCookieNode',\n  'SetSessionPropertiesNode',\n  'SetSuccessUrlNode',\n  'SocialFacebookNode',\n  'SocialGoogleNode',\n  'SocialNode',\n  'SocialOAuthIgnoreProfileNode',\n  'SocialOpenIdConnectNode',\n  'TimerStartNode',\n  'TimerStopNode',\n  'UsernameCollectorNode',\n  'WebAuthnAuthenticationNode',\n  'WebAuthnRegistrationNode',\n  'ZeroPageLoginNode',\n];\n\nconst OOTB_NODE_TYPES_6 = [\n  'AbstractSocialAuthLoginNode',\n  'AccountLockoutNode',\n  'AgentDataStoreDecisionNode',\n  'AnonymousUserNode',\n  'AuthLevelDecisionNode',\n  'ChoiceCollectorNode',\n  'CookiePresenceDecisionNode',\n  'CreatePasswordNode',\n  'DataStoreDecisionNode',\n  'InnerTreeEvaluatorNode',\n  'LdapDecisionNode',\n  'MessageNode',\n  'MetadataNode',\n  'MeterNode',\n  'ModifyAuthLevelNode',\n  'OneTimePasswordCollectorDecisionNode',\n  'OneTimePasswordGeneratorNode',\n  'OneTimePasswordSmsSenderNode',\n  'OneTimePasswordSmtpSenderNode',\n  'PageNode',\n  'PasswordCollectorNode',\n  'PersistentCookieDecisionNode',\n  'PollingWaitNode',\n  'ProvisionDynamicAccountNode',\n  'ProvisionIdmAccountNode',\n  'PushAuthenticationSenderNode',\n  'PushResultVerifierNode',\n  'RecoveryCodeCollectorDecisionNode',\n  'RecoveryCodeDisplayNode',\n  'RegisterLogoutWebhookNode',\n  'RemoveSessionPropertiesNode',\n  'RetryLimitDecisionNode',\n  'ScriptedDecisionNode',\n  'SessionDataNode',\n  'SetFailureUrlNode',\n  'SetPersistentCookieNode',\n  'SetSessionPropertiesNode',\n  'SetSuccessUrlNode',\n  'SocialFacebookNode',\n  'SocialGoogleNode',\n  'SocialNode',\n  'SocialOAuthIgnoreProfileNode',\n  'SocialOpenIdConnectNode',\n  'TimerStartNode',\n  'TimerStopNode',\n  'UsernameCollectorNode',\n  'WebAuthnAuthenticationNode',\n  'WebAuthnRegistrationNode',\n  'ZeroPageLoginNode',\n];\n\nconst CLOUD_EXCLUDED_NODE_TYPES = [\n  'CreatePasswordNode',\n  'ProvisionDynamicAccountNode',\n  'ProvisionIdmAccountNode',\n  'SocialFacebookNode',\n  'SocialGoogleNode',\n  'SocialNode',\n  'SocialOAuthIgnoreProfileNode',\n  'SocialOpenIdConnectNode',\n];\n\nconst CLOUD_ONLY_NODE_TYPES = [\n  'IdentityStoreDecisionNode',\n  'AutonomousAccessSignalNode',\n  'AutonomousAccessDecisionNode',\n  'AutonomousAccessResultNode',\n];\n\nconst PREMIUM_NODE_TYPES = [\n  'AutonomousAccessSignalNode',\n  'AutonomousAccessDecisionNode',\n  'AutonomousAccessResultNode',\n];\n\n/**\n * Analyze if a node is a premium node.\n * @param {string} nodeType Node type\n * @returns {boolean} True if the node type is premium, false otherwise.\n */\nexport function isPremiumNode(nodeType: string): boolean {\n  return PREMIUM_NODE_TYPES.includes(nodeType);\n}\n\n/**\n * Analyze if a node is a cloud-only node.\n * @param {string} nodeType Node type\n * @returns {boolean} True if the node type is cloud-only, false otherwise.\n */\nexport function isCloudOnlyNode(nodeType: string): boolean {\n  return CLOUD_ONLY_NODE_TYPES.includes(nodeType);\n}\n\n/**\n * Analyze if a node is a cloud-excluded node. Cloud excluded nodes are OOTB nodes in self-hosted AM deployments but have been excluded in cloud.\n * @param {{string, State}} param0 object containing node type and state.\n * @returns {boolean} True if node type is cloud-excluded, false otherwise.\n */\nexport function isCloudExcludedNode({\n  nodeType,\n  state,\n}: {\n  nodeType: string;\n  state: State;\n}): boolean {\n  return (\n    state.getDeploymentType() === Constants.CLOUD_DEPLOYMENT_TYPE_KEY &&\n    CLOUD_EXCLUDED_NODE_TYPES.includes(nodeType)\n  );\n}\n\n/**\n * Analyze if node has been deprecated\n * @param {{string, State}} param0 object containing node type and state.\n * @returns {boolean} True if node type is deprecated, false otherwise.\n */\nexport function isDeprecatedNode({\n  nodeType,\n  state,\n}: {\n  nodeType: string;\n  state: State;\n}): boolean {\n  let deprecatedNodeTypes = [];\n  switch (state.getAmVersion()) {\n    case '8.0.0':\n      deprecatedNodeTypes = DEPRECATED_NODE_TYPES_8.slice(0);\n      break;\n    case '7.1.0':\n    case '7.1.1':\n    case '7.1.2':\n    case '7.1.3':\n    case '7.1.4':\n      deprecatedNodeTypes = DEPRECATED_NODE_TYPES_7_1.slice(0);\n      break;\n    case '7.2.0':\n    case '7.2.1':\n      deprecatedNodeTypes = DEPRECATED_NODE_TYPES_7_2.slice(0);\n      break;\n    case '7.3.0':\n      deprecatedNodeTypes = DEPRECATED_NODE_TYPES_7_3.slice(0);\n      break;\n    case '7.4.0':\n      deprecatedNodeTypes = DEPRECATED_NODE_TYPES_7_4.slice(0);\n      break;\n    case '7.5.0':\n      deprecatedNodeTypes = DEPRECATED_NODE_TYPES_7_5.slice(0);\n      break;\n    case '7.0.0':\n    case '7.0.1':\n    case '7.0.2':\n      deprecatedNodeTypes = DEPRECATED_NODE_TYPES_7.slice(0);\n      break;\n    default:\n      return false;\n  }\n  return deprecatedNodeTypes.includes(nodeType);\n}\n\n/**\n * Analyze if a node is custom.\n * @param {string} nodeType Node type\n * @returns {boolean} True if the node type is custom, false otherwise.\n */\nexport function isCustomNode({\n  nodeType,\n  state,\n}: {\n  nodeType: string;\n  state: State;\n}): boolean {\n  let ootbNodeTypes = [];\n  switch (state.getAmVersion()) {\n    case '8.0.0':\n      ootbNodeTypes = OOTB_NODE_TYPES_8.slice(0);\n      break;\n    case '7.1.0':\n    case '7.1.1':\n    case '7.1.2':\n    case '7.1.3':\n    case '7.1.4':\n      ootbNodeTypes = OOTB_NODE_TYPES_7_1.slice(0);\n      break;\n    case '7.2.0':\n    case '7.2.1':\n      ootbNodeTypes = OOTB_NODE_TYPES_7_2.slice(0);\n      break;\n    case '7.3.0':\n      ootbNodeTypes = OOTB_NODE_TYPES_7_3.slice(0);\n      break;\n    case '7.4.0':\n      ootbNodeTypes = OOTB_NODE_TYPES_7_4.slice(0);\n      break;\n    case '7.5.0':\n      ootbNodeTypes = OOTB_NODE_TYPES_7_5.slice(0);\n      break;\n    case '7.0.0':\n    case '7.0.1':\n    case '7.0.2':\n      ootbNodeTypes = OOTB_NODE_TYPES_7.slice(0);\n      break;\n    case '6.5.3':\n    case '6.5.2.3':\n    case '6.5.2.2':\n    case '6.5.2.1':\n    case '6.5.2':\n    case '6.5.1':\n    case '6.5.0.2':\n    case '6.5.0.1':\n      ootbNodeTypes = OOTB_NODE_TYPES_6_5.slice(0);\n      break;\n    case '6.0.0.7':\n    case '6.0.0.6':\n    case '6.0.0.5':\n    case '6.0.0.4':\n    case '6.0.0.3':\n    case '6.0.0.2':\n    case '6.0.0.1':\n    case '6.0.0':\n      ootbNodeTypes = OOTB_NODE_TYPES_6.slice(0);\n      break;\n    default:\n      return true;\n  }\n  return (\n    !ootbNodeTypes.includes(nodeType) &&\n    !isPremiumNode(nodeType) &&\n    !isCloudOnlyNode(nodeType)\n  );\n}\n\n/**\n * Get a node's classifications, which can be one or multiple of:\n * - standard: can run on any instance of a ForgeRock platform\n * - cloud: utilize nodes, which are exclusively available in the ForgeRock Identity Cloud\n * - premium: utilizes nodes, which come at a premium\n * @param {string} nodeType Node type\n * @returns {NodeClassification[]} an array of one or multiple classifications\n */\nexport function getNodeClassification({\n  nodeType,\n  state,\n}: {\n  nodeType: string;\n  state: State;\n}): NodeClassificationType[] {\n  const classifications: NodeClassificationType[] = [];\n  const premium = isPremiumNode(nodeType);\n  const custom = isCustomNode({ nodeType, state });\n  const cloud = isCloudOnlyNode(nodeType);\n  const excluded = isCloudExcludedNode({ nodeType, state });\n  const deprecated = isDeprecatedNode({ nodeType, state });\n  if (custom) {\n    classifications.push(NodeClassification.CUSTOM);\n  } else if (cloud) {\n    classifications.push(NodeClassification.CLOUD);\n  } else if (excluded) {\n    classifications.push(NodeClassification.EXCLUDED);\n  } else {\n    classifications.push(NodeClassification.STANDARD);\n  }\n  if (premium) classifications.push(NodeClassification.PREMIUM);\n  if (deprecated) classifications.push(NodeClassification.DEPRECATED);\n  return classifications;\n}\n","import { v4 as uuidv4 } from 'uuid';\n\nimport { type IdObjectSkeletonInterface } from '../api/ApiTypes';\nimport { getConfigEntity, putConfigEntity } from '../api/IdmConfigApi';\nimport { State } from '../shared/State';\nimport {\n  createProgressIndicator,\n  debugMessage,\n  stopProgressIndicator,\n  updateProgressIndicator,\n} from '../utils/Console';\nimport { getMetadata } from '../utils/ExportImportUtils';\nimport { getCurrentRealmName } from '../utils/ForgeRockUtils';\nimport { FrodoError } from './FrodoError';\nimport { ExportMetaData } from './OpsTypes';\n\nexport type ThemeSkeleton = IdObjectSkeletonInterface & {\n  name: string;\n  isDefault: boolean;\n  linkedTrees: string[];\n};\n\nexport type UiThemeRealmObject = IdObjectSkeletonInterface & {\n  name: string;\n  realm: Map<string, ThemeSkeleton[]>;\n};\n\nexport const THEMEREALM_ID = 'ui/themerealm';\n\nexport type Theme = {\n  /**\n   * Create an empty theme export template\n   * @returns {ThemeExportInterface} an empty theme export template\n   */\n  createThemeExportTemplate(): ThemeExportInterface;\n  /**\n   * Read all themes\n   * @param {string} realm realm name\n   * @returns {Promise<ThemeSkeleton[]>} a promise that resolves to an array of themes\n   */\n  readThemes(): Promise<ThemeSkeleton[]>;\n  /**\n   * Read theme by id\n   * @param {string} themeId theme id\n   * @param {string} realm realm name\n   * @returns {Promise<ThemeSkeleton>} a promise that resolves to a theme object\n   */\n  readTheme(themeId: string, realm?: string): Promise<ThemeSkeleton>;\n  /**\n   * Read theme by name\n   * @param {string} themeName theme name\n   * @param {string} realm realm name\n   * @returns {Promise<ThemeSkeleton>} a promise that resolves to a theme object\n   */\n  readThemeByName(themeName: string, realm?: string): Promise<ThemeSkeleton>;\n  /**\n   * Export all themes. The response can be saved to file as is.\n   * @returns {Promise<ThemeExportInterface>} Promise resolving to a ThemeExportInterface object.\n   */\n  exportThemes(): Promise<ThemeExportInterface>;\n  /**\n   * Update theme\n   * @param {ThemeSkeleton} themeData theme object\n   * @param {string} themeId theme id\n   * @param {string} realm realm name\n   * @returns {Promise<ThemeSkeleton>} a promise that resolves to a theme object\n   */\n  createTheme(\n    themeData: ThemeSkeleton,\n    themeId?: string,\n    realm?: string\n  ): Promise<ThemeSkeleton>;\n  /**\n   * Update theme\n   * @param {string} themeId theme id\n   * @param {ThemeSkeleton} themeData theme object\n   * @param {string} realm realm name\n   * @returns {Promise<ThemeSkeleton>} a promise that resolves to a theme object\n   */\n  updateTheme(\n    themeId: string,\n    themeData: ThemeSkeleton,\n    realm?: string\n  ): Promise<ThemeSkeleton>;\n  /**\n   * Update theme by name\n   * @param {String} themeName theme name\n   * @param {ThemeSkeleton} themeData theme object\n   * @param {string} realm realm name\n   * @returns {Promise<ThemeSkeleton>} a promise that resolves to a theme object\n   */\n  updateThemeByName(\n    themeName: string,\n    themeData: ThemeSkeleton,\n    realm?: string\n  ): Promise<ThemeSkeleton>;\n  /**\n   * Update all themes\n   * @param {Map<string, ThemeSkeleton>} allThemesData themes object containing all themes for all realms\n   * @param {string} realm realm name\n   * @returns {Promise<Map<string, ThemeSkeleton>>} a promise that resolves to a themes object\n   */\n  updateThemes(\n    themeMap: Record<string, ThemeSkeleton>\n  ): Promise<Record<string, ThemeSkeleton>>;\n  /**\n   * Import themes\n   * @param {ThemeExportInterface} importData import data\n   * @returns {Promise<ThemeSkeleton[]>} a promise resolving to an array of theme objects\n   */\n  importThemes(importData: ThemeExportInterface): Promise<ThemeSkeleton[]>;\n  /**\n   * Delete theme by id\n   * @param {string} themeId theme id\n   * @param {string} realm realm name\n   * @returns {Promise<ThemeSkeleton>} a promise that resolves to a themes object\n   */\n  deleteTheme(themeId: string, realm?: string): Promise<ThemeSkeleton>;\n  /**\n   * Delete theme by name\n   * @param {string} themeName theme name\n   * @param {string} realm realm name\n   * @returns {Promise<ThemeSkeleton>} a promise that resolves to a themes object\n   */\n  deleteThemeByName(themeName: string, realm?: string): Promise<ThemeSkeleton>;\n  /**\n   * Delete all themes\n   * @param {string} realm realm name\n   * @returns {Promise<ThemeSkeleton[]>} a promise that resolves to an array of themes\n   */\n  deleteThemes(realm?: string): Promise<ThemeSkeleton[]>;\n\n  // Deprecated\n\n  /**\n   * Get all themes\n   * @param {string} realm realm name\n   * @returns {Promise<ThemeSkeleton[]>} a promise that resolves to an array of themes\n   * @deprecated since v2.0.0 use {@link Theme.readThemes | readThemes} instead\n   * ```javascript\n   * readThemes(): Promise<ThemeSkeleton[]>\n   * ```\n   * @group Deprecated\n   */\n  getThemes(): Promise<ThemeSkeleton[]>;\n  /**\n   * Get theme by id\n   * @param {string} themeId theme id\n   * @param {string} realm realm name\n   * @returns {Promise<ThemeSkeleton>} a promise that resolves to a theme object\n   * @deprecated since v2.0.0 use {@link Theme.readTheme | readTheme} instead\n   * ```javascript\n   * readTheme(themeId: string, realm?: string): Promise<ThemeSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  getTheme(themeId: string, realm?: string): Promise<ThemeSkeleton>;\n  /**\n   * Get theme by name\n   * @param {string} themeName theme name\n   * @param {string} realm realm name\n   * @returns {Promise<ThemeSkeleton>} a promise that resolves to a theme object\n   * @deprecated since v2.0.0 use {@link Theme.readThemeByName | readThemeByName} instead\n   * ```javascript\n   * readThemeByName(themeName: string, realm?: string): Promise<ThemeSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  getThemeByName(themeName: string, realm?: string): Promise<ThemeSkeleton>;\n  /**\n   * Put theme by id\n   * @param {string} themeId theme id\n   * @param {ThemeSkeleton} themeData theme object\n   * @param {string} realm realm name\n   * @returns {Promise<ThemeSkeleton>} a promise that resolves to a theme object\n   * @deprecated since v2.0.0 use {@link Theme.updateTheme | updateTheme} or {@link Theme.createTheme | createTheme} instead\n   * ```javascript\n   * updateTheme(themeId: string, themeData: ThemeSkeleton, realm?: string): Promise<ThemeSkeleton>\n   * createTheme(themeData: ThemeSkeleton, themeId?: string, realm?: string): Promise<ThemeSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  putTheme(\n    themeId: string,\n    themeData: ThemeSkeleton,\n    realm?: string\n  ): Promise<ThemeSkeleton>;\n  /**\n   * Put theme by name\n   * @param {String} themeName theme name\n   * @param {ThemeSkeleton} themeData theme object\n   * @param {string} realm realm name\n   * @returns {Promise<ThemeSkeleton>} a promise that resolves to a theme object\n   * @deprecated since v2.0.0 use {@link Theme.updateThemeByName | updateThemeByName} instead\n   * ```javascript\n   * updateThemeByName(themeName: string, themeData: ThemeSkeleton, realm?: string): Promise<ThemeSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  putThemeByName(\n    themeName: string,\n    themeData: ThemeSkeleton,\n    realm?: string\n  ): Promise<ThemeSkeleton>;\n  /**\n   * Put all themes\n   * @param {Map<string, ThemeSkeleton>} allThemesData themes object containing all themes for all realms\n   * @param {string} realm realm name\n   * @returns {Promise<Map<string, ThemeSkeleton>>} a promise that resolves to a themes object\n   * @deprecated since v2.0.0 use {@link Theme.updateThemes | updateThemes} instead\n   * ```javascript\n   * updateThemes(themeMap: Map<string, ThemeSkeleton>): Promise<Map<string, ThemeSkeleton>>\n   * ```\n   * @group Deprecated\n   */\n  putThemes(\n    themeMap: Record<string, ThemeSkeleton>\n  ): Promise<Record<string, ThemeSkeleton>>;\n};\n\nexport default (state: State): Theme => {\n  return {\n    createThemeExportTemplate(): ThemeExportInterface {\n      return createThemeExportTemplate({ state });\n    },\n    async readThemes(): Promise<ThemeSkeleton[]> {\n      return readThemes({ state });\n    },\n    async readTheme(\n      themeId: string,\n      realm: string = state.getRealm()\n    ): Promise<ThemeSkeleton> {\n      return readTheme({ themeId, realm, state });\n    },\n    async readThemeByName(\n      themeName: string,\n      realm: string = state.getRealm()\n    ): Promise<ThemeSkeleton> {\n      return readThemeByName({ themeName, realm, state });\n    },\n    async exportThemes(): Promise<ThemeExportInterface> {\n      return exportThemes({ state });\n    },\n    async createTheme(\n      themeData: ThemeSkeleton,\n      themeId?: string,\n      realm?: string\n    ): Promise<ThemeSkeleton> {\n      return createTheme({ themeId, themeData, realm, state });\n    },\n    async updateTheme(\n      themeId: string,\n      themeData: ThemeSkeleton,\n      realm: string = state.getRealm()\n    ): Promise<ThemeSkeleton> {\n      return updateTheme({ themeId, themeData, realm, state });\n    },\n    async updateThemeByName(\n      themeName: string,\n      themeData: ThemeSkeleton,\n      realm: string = state.getRealm()\n    ): Promise<ThemeSkeleton> {\n      return updateThemeByName({ themeName, themeData, realm, state });\n    },\n    async updateThemes(\n      themeMap: Record<string, ThemeSkeleton>\n    ): Promise<Record<string, ThemeSkeleton>> {\n      return updateThemes({ themeMap, state });\n    },\n    async importThemes(\n      importData: ThemeExportInterface\n    ): Promise<ThemeSkeleton[]> {\n      return importThemes({ importData, state });\n    },\n    async deleteTheme(\n      themeId: string,\n      realm: string = state.getRealm()\n    ): Promise<ThemeSkeleton> {\n      return deleteTheme({ themeId, realm, state });\n    },\n    async deleteThemeByName(\n      themeName: string,\n      realm: string = state.getRealm()\n    ): Promise<ThemeSkeleton> {\n      return deleteThemeByName({ themeName, realm, state });\n    },\n    async deleteThemes(\n      realm: string = state.getRealm()\n    ): Promise<ThemeSkeleton[]> {\n      return deleteThemes({ realm, state });\n    },\n\n    // Deprecated\n\n    async getThemes(): Promise<ThemeSkeleton[]> {\n      return readThemes({ state });\n    },\n    async getTheme(\n      themeId: string,\n      realm: string = state.getRealm()\n    ): Promise<ThemeSkeleton> {\n      return readTheme({ themeId, realm, state });\n    },\n    async getThemeByName(\n      themeName: string,\n      realm: string = state.getRealm()\n    ): Promise<ThemeSkeleton> {\n      return readThemeByName({ themeName, realm, state });\n    },\n    async putTheme(\n      themeId: string,\n      themeData: ThemeSkeleton,\n      realm: string = state.getRealm()\n    ): Promise<ThemeSkeleton> {\n      return updateTheme({ themeId, themeData, realm, state });\n    },\n    async putThemeByName(\n      themeName: string,\n      themeData: ThemeSkeleton,\n      realm: string = state.getRealm()\n    ): Promise<ThemeSkeleton> {\n      return updateThemeByName({ themeName, themeData, realm, state });\n    },\n    async putThemes(\n      themeMap: Record<string, ThemeSkeleton>\n    ): Promise<Record<string, ThemeSkeleton>> {\n      return updateThemes({ themeMap, state });\n    },\n  };\n};\n\nexport interface ThemeExportInterface {\n  meta?: ExportMetaData;\n  theme: Record<string, ThemeSkeleton>;\n}\n\n/**\n * Create an empty theme export template\n * @returns {ThemeExportInterface} an empty theme export template\n */\nexport function createThemeExportTemplate({\n  state,\n}: {\n  state: State;\n}): ThemeExportInterface {\n  return {\n    meta: getMetadata({ state }),\n    theme: {},\n  } as ThemeExportInterface;\n}\n\n/**\n * Get realm themes\n * @param {UiThemeRealmObject} themes object containing themes\n * @param {string} realm realm name\n * @returns {ThemeSkeleton[]} array of theme pertaining to the current realm\n */\nfunction getRealmThemes({\n  themes,\n  realm,\n}: {\n  themes: UiThemeRealmObject;\n  realm: string;\n}): ThemeSkeleton[] {\n  if (themes.realm && themes.realm[realm]) {\n    return themes.realm[realm];\n  }\n  return [];\n}\n\n/**\n * Read all themes\n * @param {string} realm realm name\n * @returns {Promise<ThemeSkeleton[]>} a promise that resolves to an array of themes\n */\nexport async function readThemes({\n  realm = null,\n  state,\n}: {\n  realm?: string;\n  state: State;\n}): Promise<ThemeSkeleton[]> {\n  try {\n    realm = realm ? realm : getCurrentRealmName(state);\n    const themes = await getConfigEntity({ entityId: THEMEREALM_ID, state });\n    return getRealmThemes({ themes, realm });\n  } catch (error) {\n    throw new FrodoError(`Error reading themes`, error);\n  }\n}\n\n/**\n * Read theme by id\n * @param {string} themeId theme id\n * @param {string} realm realm name\n * @returns {Promise<ThemeSkeleton>} a promise that resolves to a theme object\n */\nexport async function readTheme({\n  themeId,\n  realm,\n  state,\n}: {\n  themeId: string;\n  realm?: string;\n  state: State;\n}): Promise<ThemeSkeleton> {\n  try {\n    realm ? realm : getCurrentRealmName(state);\n    const themes = await getConfigEntity({ entityId: THEMEREALM_ID, state });\n    const found = getRealmThemes({ themes, realm }).filter(\n      (theme) => theme._id === themeId\n    );\n    if (found.length === 1) {\n      return found[0];\n    }\n    if (found.length > 1) {\n      throw new FrodoError(\n        `Multiple themes with id '${themeId}' found in realm '${realm}'!`\n      );\n    }\n    throw new FrodoError(\n      `Theme with id '${themeId}' not found in realm '${realm}'!`\n    );\n  } catch (error) {\n    throw new FrodoError(`Error reading theme ${themeId}`, error);\n  }\n}\n\n/**\n * Read theme by name\n * @param {string} themeName theme name\n * @param {string} realm realm name\n * @returns {Promise<ThemeSkeleton>} a promise that resolves to a theme object\n */\nexport async function readThemeByName({\n  themeName,\n  realm,\n  state,\n}: {\n  themeName: string;\n  realm?: string;\n  state: State;\n}): Promise<ThemeSkeleton> {\n  try {\n    realm ? realm : getCurrentRealmName(state);\n    const themes = await getConfigEntity({ entityId: THEMEREALM_ID, state });\n    const found = getRealmThemes({ themes, realm }).filter(\n      (theme) => theme.name === themeName\n    );\n    if (found.length === 1) {\n      return found[0];\n    }\n    if (found.length > 1) {\n      throw new Error(\n        `Multiple themes with the name '${themeName}' found in realm '${realm}'!`\n      );\n    }\n    throw new Error(`Theme '${themeName}' not found in realm '${realm}'!`);\n  } catch (error) {\n    throw new FrodoError(`Error reading theme ${themeName}`, error);\n  }\n}\n\n/**\n * Export all themes. The response can be saved to file as is.\n * @returns {Promise<ThemeExportInterface>} Promise resolving to a ThemeExportInterface object.\n */\nexport async function exportThemes({\n  state,\n}: {\n  state: State;\n}): Promise<ThemeExportInterface> {\n  let indicatorId: string;\n  try {\n    debugMessage({ message: `ThemeOps.exportThemes: start`, state });\n    const exportData = createThemeExportTemplate({ state });\n    const themes = await readThemes({ state });\n    indicatorId = createProgressIndicator({\n      total: themes.length,\n      message: 'Exporting themes...',\n      state,\n    });\n    for (const theme of themes) {\n      if (!theme._id) theme._id = uuidv4();\n      updateProgressIndicator({\n        id: indicatorId,\n        message: `Exporting theme ${theme.name}`,\n        state,\n      });\n      exportData.theme[theme._id] = theme;\n    }\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Exported ${themes.length} themes.`,\n      state,\n    });\n    debugMessage({ message: `ThemeOps.exportThemes: end`, state });\n    return exportData;\n  } catch (error) {\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Error exporting themes.`,\n      status: 'fail',\n      state,\n    });\n    throw new FrodoError(`Error reading themes`, error);\n  }\n}\n\n/**\n * Create theme\n * @param {string} themeId theme id\n * @param {ThemeSkeleton} themeData theme object\n * @param {string} realm realm name\n * @returns {Promise<ThemeSkeleton>} a promise that resolves to a theme object\n */\nexport async function createTheme({\n  themeData,\n  themeId,\n  realm,\n  state,\n}: {\n  themeData: ThemeSkeleton;\n  themeId?: string;\n  realm?: string;\n  state: State;\n}): Promise<ThemeSkeleton> {\n  try {\n    await readTheme({ themeId, realm, state });\n  } catch (error) {\n    try {\n      const result = await updateTheme({\n        themeId,\n        themeData,\n        realm,\n        state,\n      });\n      return result;\n    } catch (error) {\n      throw new FrodoError(`Error creating theme ${themeId}`, error);\n    }\n  }\n}\n\n/**\n * Update theme\n * @param {string} themeId theme id\n * @param {ThemeSkeleton} themeData theme object\n * @param {string} realm realm name\n * @returns {Promise<ThemeSkeleton>} a promise that resolves to a theme object\n */\nexport async function updateTheme({\n  themeId,\n  themeData,\n  realm,\n  state,\n}: {\n  themeId: string;\n  themeData: ThemeSkeleton;\n  realm?: string;\n  state: State;\n}): Promise<ThemeSkeleton> {\n  try {\n    realm ? realm : getCurrentRealmName(state);\n    const data = themeData;\n    data._id = themeId;\n    const themes = await getConfigEntity({ entityId: THEMEREALM_ID, state });\n    let isNew = true;\n    const realmThemes = getRealmThemes({ themes, realm }).map((theme) => {\n      if (theme._id === themeId) {\n        isNew = false;\n        return data;\n      }\n      if (data.isDefault) theme.isDefault = false;\n      return theme;\n    });\n    if (isNew) {\n      realmThemes.push(data);\n    }\n    themes.realm[realm] = realmThemes;\n    const found = getRealmThemes({\n      themes: await putConfigEntity({\n        entityId: THEMEREALM_ID,\n        entityData: themes,\n        state,\n      }),\n      realm,\n    }).filter((theme) => theme._id === themeId);\n    if (found.length === 1) {\n      return found[0];\n    }\n    if (found.length > 1) {\n      throw new FrodoError(\n        `Multiple themes with id '${themeId}' found in realm '${realm}'!`\n      );\n    }\n    throw new FrodoError(\n      `Theme with id '${themeId}' not saved in realm '${realm}'!`\n    );\n  } catch (error) {\n    throw new FrodoError(`Error updating theme ${themeId}`, error);\n  }\n}\n\n/**\n * Update theme by name\n * @param {String} themeName theme name\n * @param {ThemeSkeleton} themeData theme object\n * @param {string} realm realm name\n * @returns {Promise<ThemeSkeleton>} a promise that resolves to a theme object\n */\nexport async function updateThemeByName({\n  themeName,\n  themeData,\n  realm,\n  state,\n}: {\n  themeName: string;\n  themeData: ThemeSkeleton;\n  realm?: string;\n  state: State;\n}): Promise<ThemeSkeleton> {\n  try {\n    realm ? realm : getCurrentRealmName(state);\n    const data = themeData;\n    data.name = themeName;\n    const themes = await getConfigEntity({ entityId: THEMEREALM_ID, state });\n    let isNew = true;\n    const realmThemes = getRealmThemes({ themes, realm }).map((theme) => {\n      if (theme.name === themeName) {\n        isNew = false;\n        return data;\n      }\n      if (data.isDefault) theme.isDefault = false;\n      return theme;\n    });\n    if (isNew) {\n      realmThemes.push(data);\n    }\n    themes['realm'][realm] = realmThemes;\n    const found = getRealmThemes({\n      themes: await putConfigEntity({\n        entityId: THEMEREALM_ID,\n        entityData: themes,\n        state,\n      }),\n      realm,\n    }).filter((theme) => theme.name === themeName);\n    if (found.length === 1) {\n      return found[0];\n    }\n    if (found.length > 1) {\n      throw new FrodoError(\n        `Multiple themes '${themeName}' found in realm '${realm}'!`\n      );\n    }\n    throw new FrodoError(`Theme '${themeName}' not saved in realm '${realm}'!`);\n  } catch (error) {\n    throw new FrodoError(`Error updating theme ${themeName}`, error);\n  }\n}\n\n/**\n * Update all themes\n * @param {Map<string, ThemeSkeleton>} allThemesData themes object containing all themes for all realms\n * @param {string} realm realm name\n * @returns {Promise<Map<string, ThemeSkeleton>>} a promise that resolves to a themes object\n */\nexport async function updateThemes({\n  themeMap,\n  realm = null,\n  state,\n}: {\n  themeMap: Record<string, ThemeSkeleton>;\n  realm?: string;\n  state: State;\n}): Promise<Record<string, ThemeSkeleton>> {\n  try {\n    debugMessage({ message: `ThemeApi.putThemes: start`, state });\n    realm = realm ? realm : getCurrentRealmName(state);\n    const themes = await getConfigEntity({ entityId: THEMEREALM_ID, state });\n    const allThemeIDs = Object.keys(themeMap);\n    const existingThemeIDs = [];\n    let defaultThemeId = null;\n    // update existing themes\n    let realmThemes = getRealmThemes({ themes, realm }).map((theme) => {\n      if (themeMap[theme._id]) {\n        debugMessage({\n          message: `Update theme: ${theme._id} - ${theme.name}`,\n          state,\n        });\n        existingThemeIDs.push(theme._id);\n        // remember the id of the last default theme\n        if (themeMap[theme._id].isDefault) defaultThemeId = theme._id;\n        return themeMap[theme._id];\n      }\n      return theme;\n    });\n    const newThemeIDs = allThemeIDs.filter(\n      (id) => !existingThemeIDs.includes(id)\n    );\n    // add new themes\n    newThemeIDs.forEach((themeId) => {\n      debugMessage({\n        message: `Add theme: ${themeMap[themeId]._id} - ${themeMap[themeId].name}`,\n        state,\n      });\n      // remember the id of the last default theme\n      if (themeMap[themeId].isDefault) defaultThemeId = themeId;\n      realmThemes.push(themeMap[themeId]);\n    });\n    // if we imported a default theme, flag all the other themes as not default\n    if (defaultThemeId) {\n      realmThemes = realmThemes.map((theme) => {\n        theme.isDefault = theme._id === defaultThemeId;\n        return theme;\n      });\n    }\n    themes.realm[realm] = realmThemes;\n    const updatedThemes: unknown = new Map(\n      getRealmThemes({\n        themes: await putConfigEntity({\n          entityId: THEMEREALM_ID,\n          entityData: themes,\n          state,\n        }),\n        realm,\n      }).map((theme) => [theme._id, theme])\n    );\n    debugMessage({\n      message: updatedThemes as Record<string, ThemeSkeleton>,\n      state,\n    });\n    debugMessage({ message: `ThemeApi.putThemes: finished`, state });\n    return updatedThemes as Record<string, ThemeSkeleton>;\n  } catch (error) {\n    throw new FrodoError(`Error updating themes`, error);\n  }\n}\n\n/**\n * Import themes\n * @param {ThemeExportInterface} importData import data\n * @param {string} realm realm name\n * @returns {Promise<ThemeSkeleton[]>} a promise resolving to an array of theme objects\n */\nexport async function importThemes({\n  importData,\n  realm = null,\n  state,\n}: {\n  importData: ThemeExportInterface;\n  realm?: string;\n  state: State;\n}): Promise<ThemeSkeleton[]> {\n  try {\n    debugMessage({ message: `ThemeOps.importThemes: start`, state });\n    const map = (await updateThemes({\n      themeMap: importData.theme,\n      realm,\n      state,\n    })) as unknown as Map<string, ThemeSkeleton>;\n    const response = Array.from(map.values());\n    debugMessage({ message: `ThemeOps.importThemes: end`, state });\n    return response;\n  } catch (error) {\n    throw new FrodoError(`Error importing themes`, error);\n  }\n}\n\n/**\n * Delete theme by id\n * @param {string} themeId theme id\n * @param {string} realm realm name\n * @returns {Promise<ThemeSkeleton>} a promise that resolves to a themes object\n */\nexport async function deleteTheme({\n  themeId,\n  realm,\n  state,\n}: {\n  themeId: string;\n  realm?: string;\n  state: State;\n}): Promise<ThemeSkeleton> {\n  try {\n    realm ? realm : getCurrentRealmName(state);\n    const themes = await getConfigEntity({ entityId: THEMEREALM_ID, state });\n    const realmThemes = getRealmThemes({ themes, realm });\n    const deletedThemes: ThemeSkeleton[] = [];\n    const finalThemes = realmThemes.filter((theme) => {\n      if (theme._id !== themeId) {\n        return true;\n      }\n      deletedThemes.push(theme);\n      return false;\n    });\n    if (realmThemes.length === finalThemes.length)\n      throw new FrodoError(`'${themeId}' not found in realm '${realm}'`);\n    themes.realm[realm] = finalThemes;\n    const undeletedThemes = getRealmThemes({\n      themes: await putConfigEntity({\n        entityId: THEMEREALM_ID,\n        entityData: themes,\n        state,\n      }),\n      realm,\n    }).filter((theme) => deletedThemes.includes(theme));\n    if (deletedThemes.length > 0 && undeletedThemes.length === 0) {\n      return deletedThemes[0];\n    }\n    throw new FrodoError(\n      `Theme with id '${undeletedThemes.map(\n        (theme) => theme._id\n      )}' not deleted from realm '${realm}'!`\n    );\n  } catch (error) {\n    throw new FrodoError(`Error deleting theme ${themeId}`, error);\n  }\n}\n\n/**\n * Delete theme by name\n * @param {string} themeName theme name\n * @param {string} realm realm name\n * @returns {Promise<ThemeSkeleton>} a promise that resolves to a themes object\n */\nexport async function deleteThemeByName({\n  themeName,\n  realm,\n  state,\n}: {\n  themeName: string;\n  realm?: string;\n  state: State;\n}): Promise<ThemeSkeleton> {\n  try {\n    realm ? realm : getCurrentRealmName(state);\n    const themes = await getConfigEntity({ entityId: THEMEREALM_ID, state });\n    const realmThemes = getRealmThemes({ themes, realm });\n    const deletedThemes: ThemeSkeleton[] = [];\n    const finalThemes = realmThemes.filter((theme) => {\n      if (theme.name !== themeName) {\n        return true;\n      }\n      deletedThemes.push(theme);\n      return false;\n    });\n    if (realmThemes.length === finalThemes.length)\n      throw new FrodoError(`'${themeName}' not found in realm '${realm}'`);\n    themes.realm[realm] = finalThemes;\n    const undeletedThemes = getRealmThemes({\n      themes: await putConfigEntity({\n        entityId: THEMEREALM_ID,\n        entityData: themes,\n        state,\n      }),\n      realm,\n    }).filter((theme) => deletedThemes.includes(theme));\n    if (deletedThemes.length > 0 && undeletedThemes.length === 0) {\n      return deletedThemes[0];\n    }\n    throw new FrodoError(\n      `Theme(s) with id(s) '${undeletedThemes.map(\n        (theme) => theme._id\n      )}' not deleted from realm '${realm}'!`\n    );\n  } catch (error) {\n    throw new FrodoError(`Error deleting theme ${themeName}`, error);\n  }\n}\n\n/**\n * Delete all themes\n * @param {string} realm realm name\n * @returns {Promise<ThemeSkeleton[]>} a promise that resolves to an array of themes\n */\nexport async function deleteThemes({\n  realm,\n  state,\n}: {\n  realm?: string;\n  state: State;\n}): Promise<ThemeSkeleton[]> {\n  try {\n    realm ? realm : getCurrentRealmName(state);\n    const themes = await getConfigEntity({ entityId: THEMEREALM_ID, state });\n    const realmThemes = themes.realm[realm];\n    if (!realmThemes || realmThemes.length == 0)\n      throw new FrodoError(`No theme configuration found for realm '${realm}'`);\n    const deletedThemes: ThemeSkeleton[] = [];\n    for (const theme of realmThemes) {\n      deletedThemes.push(theme);\n    }\n    themes.realm[realm] = [];\n    await putConfigEntity({\n      entityId: THEMEREALM_ID,\n      entityData: themes,\n      state,\n    });\n    return deletedThemes;\n  } catch (error) {\n    throw new FrodoError(`Error deleting themes`, error);\n  }\n}\n","import util from 'util';\n\nimport { State } from '../shared/State';\nimport { getCurrentRealmPath } from '../utils/ForgeRockUtils';\nimport {\n  type IdObjectSkeletonInterface,\n  type NoIdObjectSkeletonInterface,\n} from './ApiTypes';\nimport { generateAmApi } from './BaseApi';\n\n// const queryAllPoliciesByApplicationURLTemplate =\n//   '%s/json%s/policies?_sortKeys=name&_queryFilter=applicationName+eq+%22%s%22';\nconst queryAllPoliciesURLTemplate = '%s/json%s/policies?_queryFilter=true';\nconst queryPoliciesByPolicySetURLTemplate =\n  '%s/json%s/policies?_queryFilter=applicationName+eq+%22%s%22';\nconst policyURLTemplate = '%s/json%s/policies/%s';\n\nconst apiVersion = 'resource=2.1';\nconst getApiConfig = () => {\n  return {\n    apiVersion,\n  };\n};\n\nexport type PolicyConditionType =\n  | 'Script'\n  | 'AMIdentityMembership'\n  | 'IPv6'\n  | 'IPv4'\n  | 'SimpleTime'\n  | 'LEAuthLevel'\n  | 'LDAPFilter'\n  | 'AuthScheme'\n  | 'Session'\n  | 'AND'\n  | 'AuthenticateToRealm'\n  | 'ResourceEnvIP'\n  | 'Policy'\n  | 'OAuth2Scope'\n  | 'SessionProperty'\n  | 'OR'\n  | 'Transaction'\n  | 'NOT'\n  | 'AuthLevel'\n  | 'AuthenticateToService';\n\nexport type PolicyCondition = NoIdObjectSkeletonInterface & {\n  type: PolicyConditionType;\n  condition?: PolicyCondition;\n  conditions?: PolicyCondition[];\n};\n\nexport type PolicySkeleton = IdObjectSkeletonInterface & {\n  name: string;\n  applicationName: string;\n  condition?: PolicyCondition;\n  resourceTypeUuid: string;\n};\n\n/**\n * Get all policies\n * @returns {Promise} a promise that resolves to an object containing an array of policy objects\n */\nexport async function getPolicies({ state }: { state: State }) {\n  const urlString = util.format(\n    queryAllPoliciesURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state)\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get(\n    urlString,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Get policies by policy set\n * @param {string} policySetId policy set id/name\n * @returns {Promise} a promise that resolves to an object containing an array of policy objects\n */\nexport async function getPoliciesByPolicySet({\n  policySetId,\n  state,\n}: {\n  policySetId: string;\n  state: State;\n}) {\n  const urlString = util.format(\n    queryPoliciesByPolicySetURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    policySetId\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get(\n    urlString,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Get policy\n * @param {String} policyId policy id/name\n * @returns {Promise<PolicySkeleton>} a promise that resolves to a policy object\n */\nexport async function getPolicy({\n  policyId,\n  state,\n}: {\n  policyId: string;\n  state: State;\n}): Promise<PolicySkeleton> {\n  const urlString = util.format(\n    policyURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    policyId\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get(\n    urlString,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Put policy\n * @param {String} policyId policy id/name\n * @param {Object} policyData policy object\n * @returns {Promise} a promise that resolves to a policy object\n */\nexport async function putPolicy({\n  policyId,\n  policyData,\n  state,\n}: {\n  policyId: string;\n  policyData: PolicySkeleton;\n  state: State;\n}) {\n  const urlString = util.format(\n    policyURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    policyId\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).put(\n    urlString,\n    policyData,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Delete policy\n * @param {Object} policyId policy id/name\n * @returns {Promise} a promise that resolves to a policy object\n */\nexport async function deletePolicy({\n  policyId,\n  state,\n}: {\n  policyId: string;\n  state: State;\n}) {\n  const urlString = util.format(\n    policyURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    policyId\n  );\n  const { data } = await generateAmApi({\n    resource: getApiConfig(),\n    state,\n  }).delete(urlString, {\n    withCredentials: true,\n  });\n  return data;\n}\n","import util from 'util';\n\nimport { State } from '../shared/State';\nimport { getCurrentRealmPath } from '../utils/ForgeRockUtils';\nimport { type NoIdObjectSkeletonInterface } from './ApiTypes';\nimport { generateAmApi } from './BaseApi';\n\nconst queryAllResourceTypesURLTemplate =\n  '%s/json%s/resourcetypes?_sortKeys=name&_queryFilter=name+eq+%22%5E(%3F!Delegation%20Service%24).*%22';\nconst queryResourceTypeByNameURLTemplate =\n  '%s/json%s/resourcetypes?_sortKeys=name&_queryFilter=name+eq+%22%s%22+AND+name+eq+%22%5E(%3F!Delegation%20Service%24).*%22';\nconst resourceTypeURLTemplate = '%s/json%s/resourcetypes/%s';\nconst createResourceTypeURLTemplate = '%s/json%s/resourcetypes?_action=create';\n\nconst apiVersion = 'protocol=1.0,resource=1.0';\nconst getApiConfig = () => {\n  return {\n    apiVersion,\n  };\n};\n\nexport type ResourceTypeSkeleton = NoIdObjectSkeletonInterface & {\n  uuid: string;\n  name: string;\n};\n\n/**\n * Get all resource types\n * @returns {Promise} a promise that resolves to an object containing an array of resource type objects\n */\nexport async function getResourceTypes({ state }: { state: State }) {\n  const urlString = util.format(\n    queryAllResourceTypesURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state)\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get(\n    urlString,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Get resource type by uuid\n * @param {String} resourceTypeUuid resource type uuid\n * @returns {Promise} a promise that resolves to a node object\n */\nexport async function getResourceType({\n  resourceTypeUuid,\n  state,\n}: {\n  resourceTypeUuid: string;\n  state: State;\n}) {\n  const urlString = util.format(\n    resourceTypeURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    resourceTypeUuid\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get(\n    urlString,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Get resource type by name\n * @param {string} resourceTypeName resource type name\n * @returns {Promise} a promise that resolves to a node object\n */\nexport async function getResourceTypeByName({\n  resourceTypeName,\n  state,\n}: {\n  resourceTypeName: string;\n  state: State;\n}) {\n  const urlString = util.format(\n    queryResourceTypeByNameURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    resourceTypeName\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get(\n    urlString,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Create resource type by uuid\n * @param {string} resourceTypeUuid resource type uuid\n * @param {Object} resourceTypeData resource type object\n * @returns {Promise<ResourceTypeSkeleton>} a promise that resolves to a resource type object\n */\nexport async function createResourceType({\n  resourceTypeData,\n  state,\n}: {\n  resourceTypeData: ResourceTypeSkeleton;\n  state: State;\n}): Promise<ResourceTypeSkeleton> {\n  const urlString = util.format(\n    createResourceTypeURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state)\n  );\n  const { data } = await generateAmApi({\n    resource: getApiConfig(),\n    state,\n  }).post(urlString, resourceTypeData, {\n    withCredentials: true,\n  });\n  return data;\n}\n\n/**\n * Update resource type by uuid\n * @param {string} resourceTypeUuid resource type uuid\n * @param {ResourceTypeSkeleton} resourceTypeData resource type object\n * @returns {Promise<ResourceTypeSkeleton>} a promise that resolves to a resource type object\n */\nexport async function putResourceType({\n  resourceTypeUuid,\n  resourceTypeData,\n  failIfExists = false,\n  state,\n}: {\n  resourceTypeUuid: string;\n  resourceTypeData: ResourceTypeSkeleton;\n  failIfExists?: boolean;\n  state: State;\n}): Promise<ResourceTypeSkeleton> {\n  const urlString = util.format(\n    resourceTypeURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    resourceTypeUuid\n  );\n  const requestOverride = failIfExists\n    ? { headers: { 'If-None-Match': '*' } }\n    : {};\n  const { data } = await generateAmApi({\n    resource: getApiConfig(),\n    requestOverride,\n    state,\n  }).put(urlString, resourceTypeData, {\n    withCredentials: true,\n  });\n  return data;\n}\n\n/**\n * Delete resource type\n * @param {String} resourceTypeUuid resource type uuid\n * @returns {Promise} a promise that resolves to an object containing a resource type object\n */\nexport async function deleteResourceType({\n  resourceTypeUuid,\n  state,\n}: {\n  resourceTypeUuid: string;\n  state: State;\n}) {\n  const urlString = util.format(\n    resourceTypeURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    resourceTypeUuid\n  );\n  const { data } = await generateAmApi({\n    resource: getApiConfig(),\n    state,\n  }).delete(urlString, {\n    withCredentials: true,\n  });\n  return data;\n}\n","import util from 'util';\n\nimport { State } from '../shared/State';\nimport { getCurrentRealmPath } from '../utils/ForgeRockUtils';\nimport { cloneDeep } from '../utils/JsonUtils';\nimport { type NoIdObjectSkeletonInterface } from './ApiTypes';\nimport { generateAmApi } from './BaseApi';\n\nconst queryAllPolicySetURLTemplate =\n  '%s/json%s/applications?_sortKeys=name&_queryFilter=name+eq+%22%5E(%3F!sunAMDelegationService%24).*%22';\nconst policySetURLTemplate = '%s/json%s/applications/%s';\nconst createApplicationURLTemplate = '%s/json%s/applications/?_action=create';\n\nconst apiVersion = 'protocol=1.0,resource=2.1';\nconst getApiConfig = () => {\n  return {\n    apiVersion,\n  };\n};\n\nexport type PolicySetSkeleton = NoIdObjectSkeletonInterface & {\n  name: string;\n  resourceTypeUuids: string[];\n};\n\n/**\n * Get all policy sets\n * @returns {Promise} a promise that resolves to an object containing an array of policy set objects\n */\nexport async function getPolicySets({ state }: { state: State }) {\n  const urlString = util.format(\n    queryAllPolicySetURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state)\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get(\n    urlString,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Get policy set\n * @param {string} policySetName policy set name\n * @returns {Promise<PolicySetSkeleton>} a promise that resolves to an object containing an array of policy set objects\n */\nexport async function getPolicySet({\n  policySetName,\n  state,\n}: {\n  policySetName: string;\n  state: State;\n}): Promise<PolicySetSkeleton> {\n  const urlString = util.format(\n    policySetURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    policySetName\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get(\n    urlString,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Create a policy set\n * @param {Object} policySetData Object representing an policy set\n * @returns {Promise} a promise that resolves to a policy set object\n */\nexport async function createPolicySet({\n  policySetData,\n  state,\n}: {\n  policySetData: PolicySetSkeleton;\n  state: State;\n}) {\n  const postData = cloneDeep(policySetData);\n  const urlString = util.format(\n    createApplicationURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state)\n  );\n\n  const { data } = await generateAmApi({\n    resource: getApiConfig(),\n    state,\n  }).post(urlString, postData, {\n    withCredentials: true,\n  });\n  return data;\n}\n\n/**\n * Update policy set\n * @param {Object} policySetData Object representing a policy set\n * @returns {Promise} a promise that resolves to a policy set object\n */\nexport async function updatePolicySet({\n  policySetName = undefined,\n  policySetData,\n  state,\n}: {\n  policySetName?: string;\n  policySetData: PolicySetSkeleton;\n  state: State;\n}) {\n  const appData = cloneDeep(policySetData);\n  if (policySetName) appData.name = policySetName;\n  const urlString = util.format(\n    policySetURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    appData.name\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).put(\n    urlString,\n    appData,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Delete policy set\n * @param {Object} policySetName policy set name\n * @returns {Promise} a promise that resolves to a policy set object\n */\nexport async function deletePolicySet({\n  policySetName,\n  state,\n}: {\n  policySetName: string;\n  state: State;\n}) {\n  const urlString = util.format(\n    policySetURLTemplate,\n    state.getHost(),\n    getCurrentRealmPath(state),\n    policySetName\n  );\n  const { data } = await generateAmApi({\n    resource: getApiConfig(),\n    state,\n  }).delete(urlString, {\n    withCredentials: true,\n  });\n  return data;\n}\n","import { type PolicySkeleton } from '../api/PoliciesApi';\nimport {\n  createPolicySet as _createPolicySet,\n  deletePolicySet as _deletePolicySet,\n  getPolicySet as _getPolicySet,\n  getPolicySets as _getPolicySets,\n  updatePolicySet as _updatePolicySet,\n} from '../api/PolicySetApi';\nimport { type PolicySetSkeleton } from '../api/PolicySetApi';\nimport { getResourceType, putResourceType } from '../api/ResourceTypesApi';\nimport { type ResourceTypeSkeleton } from '../api/ResourceTypesApi';\nimport { type ScriptSkeleton } from '../api/ScriptApi';\nimport { State } from '../shared/State';\nimport {\n  createProgressIndicator,\n  debugMessage,\n  stopProgressIndicator,\n  updateProgressIndicator,\n} from '../utils/Console';\nimport {\n  convertBase64TextToArray,\n  getMetadata,\n} from '../utils/ExportImportUtils';\nimport { FrodoError } from './FrodoError';\nimport { ExportMetaData } from './OpsTypes';\nimport {\n  findScriptUuids,\n  getScripts,\n  readPoliciesByPolicySet,\n  updatePolicy,\n} from './PolicyOps';\nimport { updateScript } from './ScriptOps';\n\nexport type PolicySet = {\n  /**\n   * Create policy export template\n   * @returns {PolicySetExportInterface} policy export interface\n   */\n  createPolicySetExportTemplate(): PolicySetExportInterface;\n  /**\n   * Read all policy sets\n   * @returns {Promise<PolicySetSkeleton[]>} a promise that resolves to an array of policy set objects\n   */\n  readPolicySets(): Promise<PolicySetSkeleton[]>;\n  /**\n   * Read policy set\n   * @param {string} policySetName policy set name\n   * @returns {Promise<PolicySetSkeleton>} a promise that resolves to a policy set object\n   */\n  readPolicySet(policySetName: string): Promise<PolicySetSkeleton>;\n  createPolicySet(\n    policySetData: PolicySetSkeleton,\n    policySetName?: string\n  ): Promise<PolicySetSkeleton>;\n  updatePolicySet(\n    policySetData: PolicySetSkeleton,\n    policySetName?: string\n  ): Promise<PolicySetSkeleton>;\n  deletePolicySet(policySetName: string): Promise<PolicySetSkeleton>;\n  /**\n   * Export policy set\n   * @param {string} policySetName policy set name\n   * @param {PolicySetExportOptions} options export options\n   * @returns {Promise<PolicySetExportInterface>} a promise that resolves to an PolicySetExportInterface object\n   */\n  exportPolicySet(\n    policySetName: string,\n    options?: PolicySetExportOptions\n  ): Promise<PolicySetExportInterface>;\n  /**\n   * Export policy sets\n   * @param {PolicySetExportOptions} options export options\n   * @returns {Promise<PolicySetExportInterface>} a promise that resolves to an PolicySetExportInterface object\n   */\n  exportPolicySets(\n    options?: PolicySetExportOptions\n  ): Promise<PolicySetExportInterface>;\n  /**\n   * Import policy set\n   * @param {string} policySetName policy set name\n   * @param {PolicySetExportInterface} importData import data\n   * @param {PolicySetImportOptions} options import options\n   */\n  importPolicySet(\n    policySetName: string,\n    importData: PolicySetExportInterface,\n    options?: PolicySetImportOptions\n  ): Promise<any>;\n  /**\n   * Import first policy set\n   * @param {PolicySetExportInterface} importData import data\n   * @param {PolicySetImportOptions} options import options\n   */\n  importFirstPolicySet(\n    importData: PolicySetExportInterface,\n    options?: PolicySetImportOptions\n  ): Promise<any>;\n  /**\n   * Import policy sets\n   * @param {PolicySetExportInterface} importData import data\n   * @param {PolicySetImportOptions} options import options\n   */\n  importPolicySets(\n    importData: PolicySetExportInterface,\n    options?: PolicySetImportOptions\n  ): Promise<any>;\n\n  // Deprecated\n\n  /**\n   * Get all policy sets\n   * @returns {Promise<PolicySetSkeleton[]>} a promise that resolves to an array of policy set objects\n   * @deprecated since v2.0.0 use {@link Policy.readPolicySets | readPolicySets} instead\n   * ```javascript\n   * readPolicySets(): Promise<PolicySetSkeleton[]>\n   * ```\n   * @group Deprecated\n   */\n  getPolicySets(): Promise<PolicySetSkeleton[]>;\n  /**\n   * Get policy set\n   * @param {string} policySetName policy set name\n   * @returns {Promise<PolicySetSkeleton>} a promise that resolves to a policy set object\n   * @deprecated since v2.0.0 use {@link Policy.readPolicySet | readPolicySet} instead\n   * ```javascript\n   * readPolicySet(policySetName: string): Promise<PolicySetSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  getPolicySet(policySetName: string): Promise<PolicySetSkeleton>;\n};\n\nexport default (state: State): PolicySet => {\n  return {\n    createPolicySetExportTemplate(): PolicySetExportInterface {\n      return createPolicySetExportTemplate({ state });\n    },\n    async readPolicySets(): Promise<PolicySetSkeleton[]> {\n      return readPolicySets({ state });\n    },\n    async readPolicySet(policySetName: string) {\n      return readPolicySet({ policySetName, state });\n    },\n    async createPolicySet(\n      policySetData: PolicySetSkeleton,\n      policySetName = undefined\n    ) {\n      return createPolicySet({ policySetData, policySetName, state });\n    },\n    async updatePolicySet(\n      policySetData: PolicySetSkeleton,\n      policySetName = undefined\n    ) {\n      return updatePolicySet({ policySetData, policySetName, state });\n    },\n    async deletePolicySet(policySetName: string) {\n      return deletePolicySet({ policySetName, state });\n    },\n    async exportPolicySet(\n      policySetName: string,\n      options: PolicySetExportOptions = {\n        deps: true,\n        prereqs: false,\n        useStringArrays: true,\n      }\n    ): Promise<PolicySetExportInterface> {\n      return exportPolicySet({ policySetName, options, state });\n    },\n    async exportPolicySets(\n      options: PolicySetExportOptions = {\n        deps: true,\n        prereqs: false,\n        useStringArrays: true,\n      }\n    ): Promise<PolicySetExportInterface> {\n      return exportPolicySets({ options, state });\n    },\n    async importPolicySet(\n      policySetName: string,\n      importData: PolicySetExportInterface,\n      options: PolicySetImportOptions = { deps: true, prereqs: false }\n    ) {\n      return importPolicySet({\n        policySetName,\n        importData,\n        options,\n        state,\n      });\n    },\n    async importFirstPolicySet(\n      importData: PolicySetExportInterface,\n      options: PolicySetImportOptions = { deps: true, prereqs: false }\n    ) {\n      return importFirstPolicySet({ importData, options, state });\n    },\n    async importPolicySets(\n      importData: PolicySetExportInterface,\n      options: PolicySetImportOptions = { deps: true, prereqs: false }\n    ) {\n      return importPolicySets({ importData, options, state });\n    },\n\n    // Deprecated\n\n    async getPolicySets(): Promise<PolicySetSkeleton[]> {\n      return readPolicySets({ state });\n    },\n    async getPolicySet(policySetName: string) {\n      return _getPolicySet({ policySetName, state });\n    },\n  };\n};\n\nexport interface PolicySetExportInterface {\n  meta?: ExportMetaData;\n  script: Record<string, ScriptSkeleton>;\n  resourcetype: Record<string, ResourceTypeSkeleton>;\n  policy: Record<string, PolicySkeleton>;\n  policyset: Record<string, PolicySetSkeleton>;\n}\n\n/**\n * Application/policy set export options\n */\nexport interface PolicySetExportOptions {\n  /**\n   * Include any dependencies (policies, scripts, resource types).\n   */\n  deps: boolean;\n  /**\n   * Include any prerequisites (policy sets, resource types).\n   */\n  prereqs: boolean;\n  /**\n   * Use string arrays to store multi-line text in scripts.\n   */\n  useStringArrays: boolean;\n}\n\n/**\n * Policy set import options\n */\nexport interface PolicySetImportOptions {\n  /**\n   * Include any dependencies (policies, scripts, resource types).\n   */\n  deps: boolean;\n  /**\n   * Include any prerequisites (policy sets, resource types).\n   */\n  prereqs: boolean;\n}\n\n/**\n * Create an empty export template\n * @returns {PolicySetExportInterface} an empty export template\n */\nexport function createPolicySetExportTemplate({\n  state,\n}: {\n  state: State;\n}): PolicySetExportInterface {\n  return {\n    meta: getMetadata({ state }),\n    script: {},\n    policy: {},\n    resourcetype: {},\n    policyset: {},\n  } as PolicySetExportInterface;\n}\n\n/**\n * Get all policy sets\n * @returns {Promise} a promise that resolves to an array of policy set objects\n */\nexport async function readPolicySets({\n  state,\n}: {\n  state: State;\n}): Promise<PolicySetSkeleton[]> {\n  try {\n    const { result } = await _getPolicySets({ state });\n    return result;\n  } catch (error) {\n    throw new FrodoError(`Error reading policy sets`, error);\n  }\n}\n\nexport async function readPolicySet({\n  policySetName,\n  state,\n}: {\n  policySetName: string;\n  state: State;\n}) {\n  try {\n    const response = await _getPolicySet({ policySetName, state });\n    return response;\n  } catch (error) {\n    throw new FrodoError(`Error reading policy set ${policySetName}`, error);\n  }\n}\n\nexport async function createPolicySet({\n  policySetName = undefined,\n  policySetData,\n  state,\n}: {\n  policySetName?: string;\n  policySetData: PolicySetSkeleton;\n  state: State;\n}) {\n  try {\n    if (!policySetName) {\n      const response = await _createPolicySet({ policySetData, state });\n      return response;\n    }\n    const response = await _updatePolicySet({\n      policySetName,\n      policySetData,\n      state,\n    });\n    return response;\n  } catch (error) {\n    throw new FrodoError(`Error creating policy set ${policySetName}`, error);\n  }\n}\n\nexport async function updatePolicySet({\n  policySetName = undefined,\n  policySetData,\n  state,\n}: {\n  policySetName?: string;\n  policySetData: PolicySetSkeleton;\n  state: State;\n}) {\n  try {\n    const response = await _updatePolicySet({\n      policySetName,\n      policySetData,\n      state,\n    });\n    return response;\n  } catch (error) {\n    throw new FrodoError(`Error updating policy set ${policySetName}`, error);\n  }\n}\n\nexport async function deletePolicySet({\n  policySetName,\n  state,\n}: {\n  policySetName: string;\n  state: State;\n}) {\n  try {\n    const response = await _deletePolicySet({ policySetName, state });\n    return response;\n  } catch (error) {\n    throw new FrodoError(`Error deleting policy set ${policySetName}`, error);\n  }\n}\n\n/**\n * Helper function to export prerequisites of a policy set\n * @param {PolicySetSkeleton} policySetData policy set object\n * @param {PolicySetExportInterface} exportData export data\n */\nasync function exportPolicySetPrerequisites({\n  policySetData,\n  exportData,\n  state,\n}: {\n  policySetData: PolicySetSkeleton;\n  exportData: PolicySetExportInterface;\n  state: State;\n}) {\n  debugMessage({\n    message: `PolicySetOps.exportPolicySetPrerequisites: start [policySet=${policySetData['name']}]`,\n    state,\n  });\n  const errors = [];\n  // resource types\n  for (const resourceTypeUuid of policySetData.resourceTypeUuids) {\n    try {\n      const resourceType = await getResourceType({ resourceTypeUuid, state });\n      exportData.resourcetype[resourceTypeUuid] = resourceType;\n    } catch (error) {\n      errors.push(\n        new FrodoError(\n          `Error retrieving resource type ${resourceTypeUuid} for policy set ${policySetData.name}`,\n          error\n        )\n      );\n    }\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(`Error exporting policy set prerequisites`, errors);\n  }\n  debugMessage({\n    message: `PolicySetOps.exportPolicySetPrerequisites: end`,\n    state,\n  });\n}\n\n/**\n * Helper function to export dependencies of a policy set\n * @param {PolicySetSkeleton} policySetData policy set object\n * @param {PolicySetExportOptions} options export options\n * @param {PolicySetExportInterface} exportData export data\n */\nasync function exportPolicySetDependencies({\n  policySetData,\n  options,\n  exportData,\n  state,\n}: {\n  policySetData: PolicySetSkeleton;\n  options: PolicySetExportOptions;\n  exportData: PolicySetExportInterface;\n  state: State;\n}) {\n  debugMessage({\n    message: `PolicySetOps.exportPolicySetDependencies: start [policySet=${policySetData['name']}]`,\n    state,\n  });\n  const errors = [];\n  // policies\n  try {\n    const policies = await readPoliciesByPolicySet({\n      policySetId: policySetData.name,\n      state,\n    });\n    for (const policy of policies) {\n      exportData.policy[policy.name] = policy;\n      // scripts\n      try {\n        const scripts = await getScripts({ policyData: policy, state });\n        for (const scriptData of scripts) {\n          if (options.useStringArrays) {\n            scriptData.script = convertBase64TextToArray(\n              scriptData.script as string\n            );\n          }\n          exportData.script[scriptData._id] = scriptData;\n        }\n      } catch (error) {\n        errors.push(error);\n      }\n    }\n    if (errors.length > 0) {\n      throw new FrodoError(\n        `Error exporting policy set ${policySetData.name} dependencies`\n      );\n    }\n    debugMessage({\n      message: `PolicySetOps.exportPolicySetDependencies: end`,\n      state,\n    });\n  } catch (error) {\n    // re-throw previously caught error\n    if (errors.length > 0) {\n      throw error;\n    }\n    throw new FrodoError(\n      `Error exporting policy set ${policySetData.name} dependencies`,\n      error\n    );\n  }\n}\n\n/**\n * Export policy set\n * @param {string} policySetName policy set name\n * @param {PolicySetExportOptions} options export options\n * @returns {Promise<PolicySetExportInterface>} a promise that resolves to an PolicySetExportInterface object\n */\nexport async function exportPolicySet({\n  policySetName,\n  options = {\n    deps: true,\n    prereqs: false,\n    useStringArrays: true,\n  },\n  state,\n}: {\n  policySetName: string;\n  options?: PolicySetExportOptions;\n  state: State;\n}): Promise<PolicySetExportInterface> {\n  debugMessage({ message: `PolicySetOps.exportPolicySet: start`, state });\n  const exportData = createPolicySetExportTemplate({ state });\n  const errors = [];\n  try {\n    const policySetData = await _getPolicySet({ policySetName, state });\n    exportData.policyset[policySetData.name] = policySetData;\n    if (options.prereqs) {\n      try {\n        await exportPolicySetPrerequisites({\n          policySetData,\n          exportData,\n          state,\n        });\n      } catch (error) {\n        errors.push(error);\n      }\n    }\n    if (options.deps) {\n      try {\n        await exportPolicySetDependencies({\n          policySetData,\n          options,\n          exportData,\n          state,\n        });\n      } catch (error) {\n        errors.push(error);\n      }\n    }\n    if (errors.length > 0) {\n      throw new FrodoError(\n        `Error exporting policy set ${policySetName}`,\n        errors\n      );\n    }\n    debugMessage({ message: `PolicySetOps.exportPolicySet: end`, state });\n    return exportData;\n  } catch (error) {\n    // re-throw previously caught error\n    if (errors.length > 0) {\n      throw error;\n    }\n    throw new FrodoError(`Error exporting policy set ${policySetName}`, error);\n  }\n}\n\n/**\n * Export policy sets\n * @param {PolicySetExportOptions} options export options\n * @returns {Promise<PolicySetExportInterface>} a promise that resolves to an PolicySetExportInterface object\n */\nexport async function exportPolicySets({\n  options = {\n    deps: true,\n    prereqs: false,\n    useStringArrays: true,\n  },\n  state,\n}: {\n  options: PolicySetExportOptions;\n  state: State;\n}): Promise<PolicySetExportInterface> {\n  debugMessage({ message: `PolicySetOps.exportPolicySet: start`, state });\n  const exportData = createPolicySetExportTemplate({ state });\n  const errors = [];\n  let indicatorId: string;\n  try {\n    const policySets = await readPolicySets({ state });\n    indicatorId = createProgressIndicator({\n      total: policySets.length,\n      message: 'Exporting policy sets...',\n      state,\n    });\n    for (const policySetData of policySets) {\n      updateProgressIndicator({\n        id: indicatorId,\n        message: `Exporting policy set ${policySetData._id}`,\n        state,\n      });\n      exportData.policyset[policySetData.name] = policySetData;\n      if (options.prereqs) {\n        try {\n          await exportPolicySetPrerequisites({\n            policySetData,\n            exportData,\n            state,\n          });\n        } catch (error) {\n          errors.push(error);\n        }\n      }\n      if (options.deps) {\n        try {\n          await exportPolicySetDependencies({\n            policySetData,\n            options,\n            exportData,\n            state,\n          });\n        } catch (error) {\n          errors.push(error);\n        }\n      }\n    }\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Exported ${policySets.length} policy sets.`,\n      state,\n    });\n    if (errors.length > 0) {\n      throw new FrodoError(`Error exporting policy sets`, errors);\n    }\n    debugMessage({ message: `PolicySetOps.exportPolicySet: end`, state });\n    return exportData;\n  } catch (error) {\n    // re-throw previously caught error\n    if (errors.length > 0) {\n      throw error;\n    }\n    throw new FrodoError(`Error exporting policy sets`, error);\n  }\n}\n\n/**\n * Helper function to import prerequisites of a policy set (resource types)\n * @param {PolicySetSkeleton} policySetData policy set data\n * @param {PolicySetExportInterface} exportData export data\n */\nasync function importPolicySetPrerequisites({\n  policySetData,\n  exportData,\n  state,\n}: {\n  policySetData: PolicySetSkeleton;\n  exportData: PolicySetExportInterface;\n  state: State;\n}) {\n  debugMessage({\n    message: `PolicySetOps.importPolicySetHardDependencies: start [policySet=${policySetData['name']}]`,\n    state,\n  });\n  const errors = [];\n  try {\n    // resource types\n    for (const resourceTypeUuid of policySetData.resourceTypeUuids) {\n      if (exportData.resourcetype[resourceTypeUuid]) {\n        try {\n          debugMessage({\n            message: `Importing resource type ${resourceTypeUuid}`,\n            state,\n          });\n          await putResourceType({\n            resourceTypeUuid,\n            resourceTypeData: exportData.resourcetype[resourceTypeUuid],\n            state,\n          });\n        } catch (error) {\n          errors.push(error);\n        }\n      } else {\n        errors.push(\n          new FrodoError(\n            `No resource type definition with id ${resourceTypeUuid} found in import data.`\n          )\n        );\n      }\n    }\n    if (errors.length > 0) {\n      throw new FrodoError(\n        `Error importing hard dependencies for policy set ${policySetData.name}`,\n        errors\n      );\n    }\n    debugMessage({\n      message: `PolicySetOps.importPolicySetHardDependencies: end`,\n      state,\n    });\n  } catch (error) {\n    // re-throw previously caught error\n    if (errors.length > 0) {\n      throw error;\n    }\n    throw new FrodoError(\n      `Error importing hard dependencies for policy set ${policySetData.name}`,\n      error\n    );\n  }\n}\n\n/**\n * Helper function to import dependencies of a policy set (policies and scripts)\n * @param {PolicySetSkeleton} policySetData policy set data\n * @param {PolicySetExportInterface} exportData export data\n */\nasync function importPolicySetDependencies({\n  policySetData,\n  exportData,\n  state,\n}: {\n  policySetData: PolicySetSkeleton;\n  exportData: PolicySetExportInterface;\n  state: State;\n}) {\n  debugMessage({\n    message: `PolicySetOps.importPolicySetSoftDependencies: start [policySet=${policySetData['name']}]`,\n    state,\n  });\n  const errors = [];\n  try {\n    // policies\n    const policies = Object.values(exportData.policy).filter(\n      (policy) => policy.applicationName === policySetData.name\n    );\n    for (const policyData of policies) {\n      try {\n        debugMessage({\n          message: `Importing policy ${policyData._id}`,\n          state,\n        });\n        await updatePolicy({ policyId: policyData._id, policyData, state });\n      } catch (error) {\n        errors.push(\n          new FrodoError(\n            `Error importing policy ${policyData._id} in policy set ${policySetData.name}`,\n            error\n          )\n        );\n      }\n      // scripts\n      const scriptUuids = findScriptUuids(policyData.condition);\n      for (const scriptUuid of scriptUuids) {\n        try {\n          const scriptData = exportData.script[scriptUuid];\n          debugMessage({ message: `Importing script ${scriptUuid}`, state });\n          await updateScript({ scriptId: scriptUuid, scriptData, state });\n        } catch (error) {\n          errors.push(\n            new FrodoError(\n              `Error importing script ${scriptUuid} for policy ${policyData._id} in policy set ${policySetData.name}`,\n              error\n            )\n          );\n        }\n      }\n    }\n    if (errors.length > 0) {\n      throw new FrodoError(\n        `Error importing soft dependencies for policy set ${policySetData.name}`,\n        errors\n      );\n    }\n    debugMessage({\n      message: `PolicySetOps.importPolicySetSoftDependencies: end`,\n      state,\n    });\n  } catch (error) {\n    // re-throw previously caught error\n    if (errors.length > 0) {\n      throw error;\n    }\n    throw new FrodoError(\n      `Error importing soft dependencies for policy set ${policySetData.name}`,\n      error\n    );\n  }\n}\n\n/**\n * Import policy set\n * @param {string} policySetName policy set name\n * @param {PolicySetExportInterface} importData import data\n * @param {PolicySetImportOptions} options import options\n */\nexport async function importPolicySet({\n  policySetName,\n  importData,\n  options = { deps: true, prereqs: false },\n  state,\n}: {\n  policySetName: string;\n  importData: PolicySetExportInterface;\n  options?: PolicySetImportOptions;\n  state: State;\n}) {\n  let response = null;\n  const errors = [];\n  const imported = [];\n  for (const id of Object.keys(importData.policyset)) {\n    if (id === policySetName) {\n      try {\n        const policySetData = importData.policyset[id];\n        delete policySetData._rev;\n        if (options.prereqs) {\n          try {\n            await importPolicySetPrerequisites({\n              policySetData,\n              exportData: importData,\n              state,\n            });\n          } catch (error) {\n            errors.push(error);\n          }\n        }\n        try {\n          response = await _createPolicySet({ policySetData, state });\n          imported.push(id);\n        } catch (error) {\n          if (error.response?.status === 409) {\n            response = await _updatePolicySet({ policySetData, state });\n            imported.push(id);\n          } else throw error;\n        }\n        if (options.deps) {\n          try {\n            await importPolicySetDependencies({\n              policySetData,\n              exportData: importData,\n              state,\n            });\n          } catch (error) {\n            errors.push(error);\n          }\n        }\n      } catch (error) {\n        errors.push(error);\n      }\n    }\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(`Error importing policy set ${policySetName}`, errors);\n  }\n  if (0 === imported.length) {\n    throw new FrodoError(\n      `Policy set ${policySetName} not found in import data`\n    );\n  }\n  return response;\n}\n\n/**\n * Import first policy set\n * @param {PolicySetExportInterface} importData import data\n * @param {PolicySetImportOptions} options import options\n */\nexport async function importFirstPolicySet({\n  importData,\n  options = { deps: true, prereqs: false },\n  state,\n}: {\n  importData: PolicySetExportInterface;\n  options?: PolicySetImportOptions;\n  state: State;\n}) {\n  let response = null;\n  const errors = [];\n  const imported = [];\n  for (const id of Object.keys(importData.policyset)) {\n    try {\n      const policySetData = importData.policyset[id];\n      delete policySetData._provider;\n      delete policySetData._rev;\n      if (options.prereqs) {\n        try {\n          await importPolicySetPrerequisites({\n            policySetData,\n            exportData: importData,\n            state,\n          });\n        } catch (error) {\n          errors.push(error);\n        }\n      }\n      try {\n        response = await _createPolicySet({ policySetData, state });\n        imported.push(id);\n      } catch (error) {\n        if (error.response?.status === 409) {\n          response = await _updatePolicySet({ policySetData, state });\n          imported.push(id);\n        } else throw error;\n      }\n      if (options.deps) {\n        try {\n          await importPolicySetDependencies({\n            policySetData,\n            exportData: importData,\n            state,\n          });\n        } catch (error) {\n          errors.push(error);\n        }\n      }\n    } catch (error) {\n      errors.push(error);\n    }\n    break;\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(`Error importing first policy set`, errors);\n  }\n  if (0 === imported.length) {\n    throw new FrodoError(`No policy sets found in import data`);\n  }\n  return response;\n}\n\n/**\n * Import policy sets\n * @param {PolicySetExportInterface} importData import data\n * @param {PolicySetImportOptions} options import options\n */\nexport async function importPolicySets({\n  importData,\n  options = { deps: true, prereqs: false },\n  state,\n}: {\n  importData: PolicySetExportInterface;\n  options?: PolicySetImportOptions;\n  state: State;\n}) {\n  let response = null;\n  const errors = [];\n  for (const id of Object.keys(importData.policyset)) {\n    try {\n      const policySetData = importData.policyset[id];\n      delete policySetData._rev;\n      if (options.prereqs) {\n        try {\n          await importPolicySetPrerequisites({\n            policySetData,\n            exportData: importData,\n            state,\n          });\n        } catch (error) {\n          errors.push(error);\n        }\n      }\n      try {\n        response = await _createPolicySet({ policySetData, state });\n      } catch (error) {\n        if (error.response?.status === 409) {\n          response = await _updatePolicySet({ policySetData, state });\n        } else throw error;\n      }\n      if (options.deps) {\n        try {\n          await importPolicySetDependencies({\n            policySetData,\n            exportData: importData,\n            state,\n          });\n        } catch (error) {\n          errors.push(error);\n        }\n      }\n    } catch (error) {\n      errors.push(error);\n    }\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(`Error importing policy sets`, errors);\n  }\n  return response;\n}\n","import {\n  createResourceType as _createResourceType,\n  deleteResourceType as _deleteResourceType,\n  getResourceType as _getResourceType,\n  getResourceTypeByName as _getResourceTypeByName,\n  getResourceTypes as _getResourceTypes,\n  putResourceType as _putResourceType,\n  type ResourceTypeSkeleton,\n} from '../api/ResourceTypesApi';\nimport { State } from '../shared/State';\nimport {\n  createProgressIndicator,\n  debugMessage,\n  stopProgressIndicator,\n  updateProgressIndicator,\n} from '../utils/Console';\nimport { getMetadata } from '../utils/ExportImportUtils';\nimport { FrodoError } from './FrodoError';\nimport { ExportMetaData } from './OpsTypes';\n\nexport type ResourceType = {\n  /**\n   * Read resource type\n   * @param resourceTypeUuid resource type uuid\n   * @returns {Promise<ResourceTypeSkeleton>} a promise that resolves to a resource type object\n   */\n  readResourceType(resourceTypeUuid: string): Promise<ResourceTypeSkeleton>;\n  /**\n   * Read all resource types\n   * @returns {Promise<ResourceTypeSkeleton[]>} a promise that resolves to an array of resource type objects\n   */\n  readResourceTypes(): Promise<ResourceTypeSkeleton[]>;\n  /**\n   * Read resource type by name\n   * @param {string} resourceTypeName resource type name\n   * @returns {Promise<ResourceTypeSkeleton>} a promise that resolves to a resource type object\n   */\n  readResourceTypeByName(\n    resourceTypeName: string\n  ): Promise<ResourceTypeSkeleton>;\n  /**\n   * Create resource type\n   * @param resourceTypeData resource type data\n   * @param resourceTypeUuid resource type uuid\n   * @returns {Promise<ResourceTypeSkeleton>} a promise that resolves to a resource type object\n   */\n  createResourceType(\n    resourceTypeData: ResourceTypeSkeleton,\n    resourceTypeUuid?: string\n  ): Promise<ResourceTypeSkeleton>;\n  /**\n   * Update resource type\n   * @param {string} resourceTypeData resource type data\n   * @returns {Promise<ResourceTypeSkeleton>} a promise that resolves to a resource type object\n   */\n  updateResourceType(\n    resourceTypeUuid: string,\n    resourceTypeData: ResourceTypeSkeleton\n  ): Promise<ResourceTypeSkeleton>;\n  /**\n   * Delete resource type\n   * @param {string} resourceTypeUuid resource type uuid\n   * @returns {Promise<ResourceTypeSkeleton>} Promise resolvig to a resource type object\n   */\n  deleteResourceType(resourceTypeUuid: string): Promise<ResourceTypeSkeleton>;\n  /**\n   * Delete resource type by name\n   * @param {string} resourceTypeName resource type name\n   * @returns {Promise<ResourceTypeSkeleton>} Promise resolvig to a resource type object\n   */\n  deleteResourceTypeByName(\n    resourceTypeName: string\n  ): Promise<ResourceTypeSkeleton>;\n  /**\n   * Export resource type\n   * @param {string} resourceTypeUuid resource type uuid\n   * @returns {Promise<ResourceTypeExportInterface>} a promise that resolves to an ResourceTypeExportInterface object\n   */\n  exportResourceType(\n    resourceTypeUuid: string\n  ): Promise<ResourceTypeExportInterface>;\n  /**\n   * Export resource type by name\n   * @param {string} resourceTypeName resource type name\n   * @returns {Promise<ResourceTypeExportInterface>} a promise that resolves to an ResourceTypeExportInterface object\n   */\n  exportResourceTypeByName(\n    resourceTypeName: string\n  ): Promise<ResourceTypeExportInterface>;\n  /**\n   * Export resource types\n   * @returns {Promise<ResourceTypeExportInterface>} a promise that resolves to an ResourceTypeExportInterface object\n   */\n  exportResourceTypes(): Promise<ResourceTypeExportInterface>;\n  /**\n   * Import resource type by uuid\n   * @param {string} resourceTypeUuid client uuid\n   * @param {ResourceTypeExportInterface} importData import data\n   */\n  importResourceType(\n    resourceTypeUuid: string,\n    importData: ResourceTypeExportInterface\n  ): Promise<any>;\n  /**\n   * Import resource type by name\n   * @param {string} resourceTypeName client id\n   * @param {ResourceTypeExportInterface} importData import data\n   */\n  importResourceTypeByName(\n    resourceTypeName: string,\n    importData: ResourceTypeExportInterface\n  ): Promise<any>;\n  /**\n   * Import first resource type\n   * @param {ResourceTypeExportInterface} importData import data\n   */\n  importFirstResourceType(\n    importData: ResourceTypeExportInterface\n  ): Promise<any>;\n  /**\n   * Import resource types\n   * @param {ResourceTypeExportInterface} importData import data\n   */\n  importResourceTypes(importData: ResourceTypeExportInterface): Promise<any[]>;\n\n  // Deprecated\n\n  /**\n   * Get resource type\n   * @param resourceTypeUuid resource type uuid\n   * @returns {Promise<ResourceTypeSkeleton>} a promise that resolves to a resource type object\n   * @deprecated since v2.0.0 use {@link Agent.readResourceType | readResourceType} instead\n   * ```javascript\n   * readResourceType(resourceTypeUuid: string): Promise<ResourceTypeSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  getResourceType(resourceTypeUuid: string): Promise<ResourceTypeSkeleton>;\n  /**\n   * Get all resource types\n   * @returns {Promise<ResourceTypeSkeleton[]>} a promise that resolves to an array of resource type objects\n   * @deprecated since v2.0.0 use {@link Agent.readResourceTypes | readResourceTypes} instead\n   * ```javascript\n   * readResourceTypes(): Promise<ResourceTypeSkeleton[]>\n   * ```\n   * @group Deprecated\n   */\n  getResourceTypes(): Promise<ResourceTypeSkeleton[]>;\n  /**\n   * Get resource type by name\n   * @param {string} resourceTypeName resource type name\n   * @returns {Promise<ResourceTypeSkeleton>} a promise that resolves to a resource type object\n   * @deprecated since v2.0.0 use {@link Agent.readResourceTypeByName | readResourceTypeByName} instead\n   * ```javascript\n   * readResourceTypeByName(resourceTypeName: string): Promise<ResourceTypeSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  getResourceTypeByName(\n    resourceTypeName: string\n  ): Promise<ResourceTypeSkeleton>;\n};\n\nexport default (state: State): ResourceType => {\n  return {\n    async readResourceType(resourceTypeUuid: string) {\n      return readResourceType({ resourceTypeUuid, state });\n    },\n    async readResourceTypes(): Promise<ResourceTypeSkeleton[]> {\n      return readResourceTypes({ state });\n    },\n    async readResourceTypeByName(\n      resourceTypeName: string\n    ): Promise<ResourceTypeSkeleton> {\n      return readResourceTypeByName({ resourceTypeName, state });\n    },\n    async createResourceType(\n      resourceTypeData: ResourceTypeSkeleton,\n      resourceTypeUuid: string = undefined\n    ): Promise<ResourceTypeSkeleton> {\n      return createResourceType({ resourceTypeData, resourceTypeUuid, state });\n    },\n    async updateResourceType(\n      resourceTypeUuid: string,\n      resourceTypeData: ResourceTypeSkeleton\n    ): Promise<ResourceTypeSkeleton> {\n      return updateResourceType({\n        resourceTypeUuid,\n        resourceTypeData,\n        state,\n      });\n    },\n    async deleteResourceType(resourceTypeUuid: string) {\n      return deleteResourceType({ resourceTypeUuid, state });\n    },\n    async deleteResourceTypeByName(\n      resourceTypeName: string\n    ): Promise<ResourceTypeSkeleton> {\n      return deleteResourceTypeByName({ resourceTypeName, state });\n    },\n    async exportResourceType(\n      resourceTypeUuid: string\n    ): Promise<ResourceTypeExportInterface> {\n      return exportResourceType({ resourceTypeUuid, state });\n    },\n    async exportResourceTypeByName(\n      resourceTypeName: string\n    ): Promise<ResourceTypeExportInterface> {\n      return exportResourceTypeByName({ resourceTypeName, state });\n    },\n    async exportResourceTypes(): Promise<ResourceTypeExportInterface> {\n      return exportResourceTypes({ state });\n    },\n    async importResourceType(\n      resourceTypeUuid: string,\n      importData: ResourceTypeExportInterface\n    ) {\n      return importResourceType({\n        resourceTypeUuid,\n        importData,\n        state,\n      });\n    },\n    async importResourceTypeByName(\n      resourceTypeName: string,\n      importData: ResourceTypeExportInterface\n    ) {\n      return importResourceTypeByName({\n        resourceTypeName,\n        importData,\n        state,\n      });\n    },\n    async importFirstResourceType(importData: ResourceTypeExportInterface) {\n      return importFirstResourceType({ importData, state });\n    },\n    async importResourceTypes(importData: ResourceTypeExportInterface) {\n      return importResourceTypes({ importData, state });\n    },\n\n    // Deprecated\n\n    async getResourceType(resourceTypeUuid: string) {\n      return readResourceType({ resourceTypeUuid, state });\n    },\n    async getResourceTypes(): Promise<ResourceTypeSkeleton[]> {\n      return readResourceTypes({ state });\n    },\n    async getResourceTypeByName(\n      resourceTypeName: string\n    ): Promise<ResourceTypeSkeleton> {\n      return readResourceTypeByName({ resourceTypeName, state });\n    },\n  };\n};\n\nexport interface ResourceTypeExportInterface {\n  meta?: ExportMetaData;\n  resourcetype: Record<string, ResourceTypeSkeleton>;\n}\n\n/**\n * Create an empty export template\n * @returns {ResourceTypeExportInterface} an empty export template\n */\nexport function createResourceTypeExportTemplate({\n  state,\n}: {\n  state: State;\n}): ResourceTypeExportInterface {\n  return {\n    meta: getMetadata({ state }),\n    script: {},\n    policy: {},\n    policyset: {},\n    resourcetype: {},\n  } as ResourceTypeExportInterface;\n}\n\nexport async function readResourceType({\n  resourceTypeUuid,\n  state,\n}: {\n  resourceTypeUuid: string;\n  state: State;\n}) {\n  try {\n    const response = await _getResourceType({ resourceTypeUuid, state });\n    return response;\n  } catch (error) {\n    throw new FrodoError(\n      `Error reading resource type ${resourceTypeUuid}`,\n      error\n    );\n  }\n}\n\n/**\n * Get all resource types\n * @returns {Promise} a promise that resolves to an array of resource type objects\n */\nexport async function readResourceTypes({\n  state,\n}: {\n  state: State;\n}): Promise<ResourceTypeSkeleton[]> {\n  try {\n    const { result } = await _getResourceTypes({ state });\n    return result;\n  } catch (error) {\n    throw new FrodoError(`Error reading resource types`, error);\n  }\n}\n\n/**\n * Get resource type by name\n * @param {string} resourceTypeName resource type name\n * @returns {Promise<ResourceTypeSkeleton>} a promise that resolves to a resource type object\n */\nexport async function readResourceTypeByName({\n  resourceTypeName,\n  state,\n}: {\n  resourceTypeName: string;\n  state: State;\n}): Promise<ResourceTypeSkeleton> {\n  try {\n    const { result } = await _getResourceTypeByName({\n      resourceTypeName,\n      state,\n    });\n    switch (result.length) {\n      case 1:\n        return result[0];\n      case 0:\n        throw new FrodoError(\n          `Resource Type with name ${resourceTypeName} does not exist in realm ${state.getRealm()}`\n        );\n      default:\n        throw new FrodoError(\n          `${result.length} resource types '${resourceTypeName}' found`\n        );\n    }\n  } catch (error) {\n    throw new FrodoError(\n      `Error reading resource type ${resourceTypeName}`,\n      error\n    );\n  }\n}\n\n/**\n * Update resource type\n * @param {string} resourceTypeData resource type id\n * @returns {Promise<ResourceTypeSkeleton>} a promise that resolves to a resource type object\n */\nexport async function updateResourceType({\n  resourceTypeUuid,\n  resourceTypeData,\n  state,\n}: {\n  resourceTypeUuid: string;\n  resourceTypeData: ResourceTypeSkeleton;\n  state: State;\n}): Promise<ResourceTypeSkeleton> {\n  try {\n    const response = await _putResourceType({\n      resourceTypeUuid,\n      resourceTypeData,\n      state,\n    });\n    return response;\n  } catch (error) {\n    throw new FrodoError(\n      `Error updating resource type ${resourceTypeUuid}`,\n      error\n    );\n  }\n}\n\nexport async function deleteResourceType({\n  resourceTypeUuid,\n  state,\n}: {\n  resourceTypeUuid: string;\n  state: State;\n}) {\n  try {\n    const response = await _deleteResourceType({ resourceTypeUuid, state });\n    return response;\n  } catch (error) {\n    throw new FrodoError(\n      `Error deleting resource type ${resourceTypeUuid}`,\n      error\n    );\n  }\n}\n\n/**\n * Delete resource type by name\n * @param {string} resourceTypeName resource type name\n * @returns {Promise<ResourceTypeSkeleton>} Promise resolvig to a resource type object\n */\nexport async function deleteResourceTypeByName({\n  resourceTypeName,\n  state,\n}: {\n  resourceTypeName: string;\n  state: State;\n}): Promise<ResourceTypeSkeleton> {\n  try {\n    const resourceTypeUuid = (\n      await readResourceTypeByName({ resourceTypeName, state })\n    ).uuid;\n    const response = await _deleteResourceType({ resourceTypeUuid, state });\n    return response;\n  } catch (error) {\n    throw new FrodoError(\n      `Error deleting resource type ${resourceTypeName}`,\n      error\n    );\n  }\n}\n\n/**\n * Export resource type\n * @param {string} resourceTypeUuid resource type uuid\n * @returns {Promise<ResourceTypeExportInterface>} a promise that resolves to an ResourceTypeExportInterface object\n */\nexport async function exportResourceType({\n  resourceTypeUuid,\n  state,\n}: {\n  resourceTypeUuid: string;\n  state: State;\n}): Promise<ResourceTypeExportInterface> {\n  debugMessage({ message: `ResourceTypeOps.exportResourceType: start`, state });\n  const exportData = createResourceTypeExportTemplate({ state });\n  try {\n    const resourceTypeData = await _getResourceType({\n      resourceTypeUuid,\n      state,\n    });\n    exportData.resourcetype[resourceTypeData.uuid] = resourceTypeData;\n    debugMessage({ message: `ResourceTypeOps.exportResourceType: end`, state });\n    return exportData;\n  } catch (error) {\n    if (error.response?.status === 404) {\n      throw new FrodoError(\n        `Resource type ${resourceTypeUuid} does not exist`,\n        error\n      );\n    } else {\n      throw new FrodoError(\n        `Error exporting resource type ${resourceTypeUuid}`,\n        error\n      );\n    }\n  }\n}\n\n/**\n * Export resource type by name\n * @param {string} resourceTypeName resource type name\n * @returns {Promise<ResourceTypeExportInterface>} a promise that resolves to an ResourceTypeExportInterface object\n */\nexport async function exportResourceTypeByName({\n  resourceTypeName,\n  state,\n}: {\n  resourceTypeName: string;\n  state: State;\n}): Promise<ResourceTypeExportInterface> {\n  debugMessage({\n    message: `ResourceTypeOps.exportResourceTypeByName: start`,\n    state,\n  });\n  const exportData = createResourceTypeExportTemplate({ state });\n  try {\n    const resourceTypeData = await readResourceTypeByName({\n      resourceTypeName,\n      state,\n    });\n    exportData.resourcetype[resourceTypeData.uuid] = resourceTypeData;\n    debugMessage({\n      message: `ResourceTypeOps.exportResourceTypeByName: end`,\n      state,\n    });\n    return exportData;\n  } catch (error) {\n    throw new FrodoError(\n      `Error exporting resource type ${resourceTypeName}`,\n      error\n    );\n  }\n}\n\n/**\n * Export resource types\n * @returns {Promise<ResourceTypeExportInterface>} a promise that resolves to an ResourceTypeExportInterface object\n */\nexport async function exportResourceTypes({\n  state,\n}: {\n  state: State;\n}): Promise<ResourceTypeExportInterface> {\n  debugMessage({ message: `ResourceTypeOps.exportResourceType: start`, state });\n  const exportData = createResourceTypeExportTemplate({ state });\n  let indicatorId: string;\n  try {\n    const resourceTypes = await readResourceTypes({ state });\n    indicatorId = createProgressIndicator({\n      total: resourceTypes.length,\n      message: 'Exporting resource types...',\n      state,\n    });\n    for (const resourceTypeData of resourceTypes) {\n      updateProgressIndicator({\n        id: indicatorId,\n        message: `Exporting resource type ${resourceTypeData._id}`,\n        state,\n      });\n      exportData.resourcetype[resourceTypeData.uuid] = resourceTypeData;\n    }\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Exported ${resourceTypes.length} resource types.`,\n      state,\n    });\n    debugMessage({ message: `ResourceTypeOps.exportResourceType: end`, state });\n    return exportData;\n  } catch (error) {\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Error exporting resource types`,\n      status: 'fail',\n      state,\n    });\n    throw new FrodoError(`Error exporting resource types`, error);\n  }\n}\n\n/**\n * Import resource type by uuid\n * @param {string} resourceTypeUuid client uuid\n * @param {ResourceTypeExportInterface} importData import data\n */\nexport async function importResourceType({\n  resourceTypeUuid,\n  importData,\n  state,\n}: {\n  resourceTypeUuid: string;\n  importData: ResourceTypeExportInterface;\n  state: State;\n}) {\n  let response = null;\n  const errors = [];\n  const imported = [];\n  for (const id of Object.keys(importData.resourcetype)) {\n    if (id === resourceTypeUuid) {\n      try {\n        const resourceTypeData = importData.resourcetype[id];\n        delete resourceTypeData._rev;\n        try {\n          response = await _createResourceType({ resourceTypeData, state });\n        } catch (createError) {\n          if (createError.response?.status === 409)\n            response = await _putResourceType({\n              resourceTypeUuid: id,\n              resourceTypeData,\n              state,\n            });\n          else throw createError;\n        }\n        imported.push(id);\n      } catch (error) {\n        errors.push(error);\n      }\n    }\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(\n      `Error importing resource type ${resourceTypeUuid}`,\n      errors\n    );\n  }\n  if (0 === imported.length) {\n    throw new FrodoError(\n      `Resource type ${resourceTypeUuid} not found in import data`\n    );\n  }\n  return response;\n}\n\n/**\n * Import resource type by name\n * @param {string} resourceTypeName client id\n * @param {ResourceTypeExportInterface} importData import data\n */\nexport async function importResourceTypeByName({\n  resourceTypeName,\n  importData,\n  state,\n}: {\n  resourceTypeName: string;\n  importData: ResourceTypeExportInterface;\n  state: State;\n}) {\n  let response = null;\n  const errors = [];\n  const imported = [];\n  for (const id of Object.keys(importData.resourcetype)) {\n    if (importData.resourcetype[id].name === resourceTypeName) {\n      try {\n        const resourceTypeData = importData.resourcetype[id];\n        delete resourceTypeData._rev;\n        try {\n          response = await _createResourceType({ resourceTypeData, state });\n        } catch (createError) {\n          if (createError.response?.status === 409)\n            response = await _putResourceType({\n              resourceTypeUuid: id,\n              resourceTypeData,\n              state,\n            });\n          else throw createError;\n        }\n        imported.push(id);\n      } catch (error) {\n        errors.push(error);\n      }\n    }\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(\n      `Error importing resource type ${resourceTypeName}`,\n      errors\n    );\n  }\n  if (0 === imported.length) {\n    throw new FrodoError(\n      `Resource type ${resourceTypeName} not found in import data`\n    );\n  }\n  return response;\n}\n\n/**\n * Import first resource type\n * @param {ResourceTypeExportInterface} importData import data\n */\nexport async function importFirstResourceType({\n  importData,\n  state,\n}: {\n  importData: ResourceTypeExportInterface;\n  state: State;\n}) {\n  let response = null;\n  const errors = [];\n  const imported = [];\n  for (const id of Object.keys(importData.resourcetype)) {\n    try {\n      const resourceTypeData = importData.resourcetype[id];\n      delete resourceTypeData._provider;\n      delete resourceTypeData._rev;\n      try {\n        response = await _createResourceType({ resourceTypeData, state });\n      } catch (createError) {\n        if (createError.response?.status === 409)\n          response = await _putResourceType({\n            resourceTypeUuid: id,\n            resourceTypeData,\n            state,\n          });\n        else throw createError;\n      }\n      imported.push(id);\n    } catch (error) {\n      errors.push(error);\n    }\n    break;\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(`Error importing first resource type`, errors);\n  }\n  if (0 === imported.length) {\n    throw new FrodoError(`No resource types found in import data!`);\n  }\n  return response;\n}\n\n/**\n * Import resource types\n * @param {ResourceTypeExportInterface} importData import data\n */\nexport async function importResourceTypes({\n  importData,\n  state,\n}: {\n  importData: ResourceTypeExportInterface;\n  state: State;\n}) {\n  const response = [];\n  const errors = [];\n  for (const id of Object.keys(importData.resourcetype)) {\n    try {\n      const resourceTypeData = importData.resourcetype[id];\n      delete resourceTypeData._rev;\n      try {\n        response.push(await _createResourceType({ resourceTypeData, state }));\n      } catch (createError) {\n        if (createError.response?.status === 409)\n          response.push(\n            await _putResourceType({\n              resourceTypeUuid: id,\n              resourceTypeData,\n              state,\n            })\n          );\n        else throw createError;\n      }\n    } catch (error) {\n      errors.push(error);\n    }\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(`Error importing resource types`, errors);\n  }\n  return response;\n}\n\nexport async function createResourceType({\n  resourceTypeData,\n  resourceTypeUuid,\n  state,\n}: {\n  resourceTypeData: ResourceTypeSkeleton;\n  resourceTypeUuid?: string;\n  state: State;\n}): Promise<ResourceTypeSkeleton> {\n  try {\n    if (resourceTypeUuid)\n      return _putResourceType({\n        resourceTypeUuid,\n        resourceTypeData,\n        failIfExists: true,\n        state,\n      });\n    const response = await _createResourceType({ resourceTypeData, state });\n    return response;\n  } catch (error) {\n    throw new FrodoError(\n      `Error creating resource type${\n        resourceTypeUuid ? ' ' + resourceTypeUuid : ''\n      }`,\n      error\n    );\n  }\n}\n","import {\n  deletePolicy as _deletePolicy,\n  getPolicies as _getPolicies,\n  getPoliciesByPolicySet as _getPoliciesByPolicySet,\n  getPolicy as _getPolicy,\n  type PolicyCondition,\n  type PolicySkeleton,\n  putPolicy as _putPolicy,\n} from '../api/PoliciesApi';\nimport { type PolicySetSkeleton } from '../api/PolicySetApi';\nimport {\n  getResourceType,\n  type ResourceTypeSkeleton,\n} from '../api/ResourceTypesApi';\nimport { type ScriptSkeleton } from '../api/ScriptApi';\nimport { State } from '../shared/State';\nimport {\n  createProgressIndicator,\n  debugMessage,\n  stopProgressIndicator,\n  updateProgressIndicator,\n} from '../utils/Console';\nimport {\n  convertBase64TextToArray,\n  getMetadata,\n} from '../utils/ExportImportUtils';\nimport { FrodoError } from './FrodoError';\nimport { type ExportMetaData } from './OpsTypes';\nimport { readPolicySet, updatePolicySet } from './PolicySetOps';\nimport { updateResourceType } from './ResourceTypeOps';\nimport { readScript, updateScript } from './ScriptOps';\n\nexport type Policy = {\n  /**\n   * Create policy export template\n   */\n  createPolicyExportTemplate(): PolicyExportInterface;\n  /**\n   * Read all policies\n   * @returns {Promise<PolicySkeleton>} a promise that resolves to an array of policy set objects\n   */\n  readPolicies(): Promise<PolicySkeleton[]>;\n  /**\n   * Get policies by policy set\n   * @param {string} policySetId policy set id/name\n   * @returns {Promise<PolicySkeleton[]>} a promise resolving to an array of policy objects\n   */\n  readPoliciesByPolicySet(policySetId: string): Promise<PolicySkeleton[]>;\n  /**\n   * Get policy\n   * @param {string} policyId policy id/name\n   * @returns {Promise<PolicySkeleton>} promise resolving to a policy object\n   */\n  readPolicy(policyId: string): Promise<PolicySkeleton>;\n  /**\n   * Update or create policy\n   * @param {string} policyId policy id/name\n   * @param {PolicySkeleton} policyData policy object\n   * @returns {Promise<PolicySkeleton>} promise resolving to a policy object\n   */\n  createPolicy(\n    policyId: string,\n    policyData: PolicySkeleton\n  ): Promise<PolicySkeleton>;\n  /**\n   * Update or create policy\n   * @param {string} policyId policy id/name\n   * @param {PolicySkeleton} policyData policy object\n   * @returns {Promise<PolicySkeleton>} promise resolving to a policy object\n   */\n  updatePolicy(\n    policyId: string,\n    policyData: PolicySkeleton\n  ): Promise<PolicySkeleton>;\n  /**\n   * Delete policy\n   * @param {string} policyId policy id/name\n   * @returns {Promise<PolicySkeleton>} promise resolving to a policy object\n   */\n  deletePolicy(policyId: string): Promise<any>;\n  /**\n   * Export policy\n   * @param {string} policyId policy id/name\n   * @returns {Promise<PolicyExportInterface>} a promise that resolves to a PolicyExportInterface object\n   */\n  exportPolicy(\n    policyId: string,\n    options?: PolicyExportOptions\n  ): Promise<PolicyExportInterface>;\n  /**\n   * Export policies\n   * @param {PolicyExportOptions} options export options\n   * @returns {Promise<PolicyExportInterface>} a promise that resolves to an PolicyExportInterface object\n   */\n  exportPolicies(options?: PolicyExportOptions): Promise<PolicyExportInterface>;\n  /**\n   * Export policies by policy set\n   * @param {string} policySetName policy set id/name\n   * @param {PolicyExportOptions} options export options\n   * @returns {Promise<PolicyExportInterface>} a promise that resolves to an PolicyExportInterface object\n   */\n  exportPoliciesByPolicySet(\n    policySetName: string,\n    options?: PolicyExportOptions\n  ): Promise<PolicyExportInterface>;\n  /**\n   * Import policy by id\n   * @param {string} policyId policy id\n   * @param {PolicyExportInterface} importData import data\n   * @param {PolicyImportOptions} options import options\n   * @returns {Promise<PolicySkeleton>} imported policy object\n   */\n  importPolicy(\n    policyId: string,\n    importData: PolicyExportInterface,\n    options?: PolicyImportOptions\n  ): Promise<PolicySkeleton>;\n  /**\n   * Import first policy\n   * @param {PolicyExportInterface} importData import data\n   * @param {PolicyImportOptions} options import options\n   * @returns {Promise<PolicySkeleton>} imported policy object\n   */\n  importFirstPolicy(\n    importData: PolicyExportInterface,\n    options?: PolicyImportOptions\n  ): Promise<PolicySkeleton>;\n  /**\n   * Import policies\n   * @param {PolicyExportInterface} importData import data\n   * @param {PolicyImportOptions} options import options\n   * @returns {Promise<PolicySkeleton[]>} array of imported policy objects\n   */\n  importPolicies(\n    importData: PolicyExportInterface,\n    options?: PolicyImportOptions\n  ): Promise<PolicySkeleton[]>;\n\n  // Deprecated\n\n  /**\n   * Get all policies\n   * @returns {Promise<PolicySkeleton>} a promise that resolves to an array of policy set objects\n   * @deprecated since v2.0.0 use {@link Agent.readPolicies | readPolicies} instead\n   * ```javascript\n   * readPolicies(): Promise<PolicySkeleton[]>\n   * ```\n   * @group Deprecated\n   */\n  getPolicies(): Promise<PolicySkeleton[]>;\n  /**\n   * Get policies by policy set\n   * @param {string} policySetId policy set id/name\n   * @returns {Promise<PolicySkeleton[]>} a promise resolving to an array of policy objects\n   * @deprecated since v2.0.0 use {@link Agent.readPoliciesByPolicySet | readPoliciesByPolicySet} instead\n   * ```javascript\n   * readPoliciesByPolicySet(policySetId: string): Promise<PolicySkeleton[]>\n   * ```\n   * @group Deprecated\n   */\n  getPoliciesByPolicySet(policySetId: string): Promise<PolicySkeleton[]>;\n  /**\n   * Get policy\n   * @param {string} policyId policy id/name\n   * @returns {Promise<PolicySkeleton>} promise resolving to a policy object\n   * @deprecated since v2.0.0 use {@link Agent.readPolicy | readPolicy} instead\n   * ```javascript\n   * readPolicy(policyId: string): Promise<PolicySkeleton>\n   * ```\n   * @group Deprecated\n   */\n  getPolicy(policyId: string): Promise<PolicySkeleton>;\n  /**\n   * Update or create policy\n   * @param {string} policyId policy id/name\n   * @param {PolicySkeleton} policyData policy object\n   * @returns {Promise<PolicySkeleton>} promise resolving to a policy object\n   * @deprecated since v2.0.0 use {@link Agent.updatePolicy | updatePolicy} or {@link Agent.createPolicy | createPolicy} instead\n   * ```javascript\n   * updatePolicy(policyId: string, policyData: PolicySkeleton): Promise<PolicySkeleton>\n   * createPolicy(policyId: string, policyData: PolicySkeleton): Promise<PolicySkeleton>\n   * ```\n   * @group Deprecated\n   */\n  putPolicy(\n    policyId: string,\n    policyData: PolicySkeleton\n  ): Promise<PolicySkeleton>;\n};\n\nexport default (state: State): Policy => {\n  return {\n    createPolicyExportTemplate(): PolicyExportInterface {\n      return createPolicyExportTemplate({ state });\n    },\n    async readPolicies(): Promise<PolicySkeleton[]> {\n      return readPolicies({ state });\n    },\n    async readPoliciesByPolicySet(\n      policySetId: string\n    ): Promise<PolicySkeleton[]> {\n      return readPoliciesByPolicySet({ policySetId, state });\n    },\n    async readPolicy(policyId: string) {\n      return readPolicy({ policyId, state });\n    },\n    async createPolicy(policyId: string, policyData: PolicySkeleton) {\n      return createPolicy({ policyId, policyData, state });\n    },\n    async updatePolicy(policyId: string, policyData: PolicySkeleton) {\n      return updatePolicy({ policyId, policyData, state });\n    },\n    async deletePolicy(policyId: string) {\n      return deletePolicy({ policyId, state });\n    },\n    async exportPolicy(\n      policyId: string,\n      options: PolicyExportOptions = {\n        deps: true,\n        prereqs: false,\n        useStringArrays: true,\n      }\n    ): Promise<PolicyExportInterface> {\n      return exportPolicy({ policyId, options, state });\n    },\n    async exportPolicies(\n      options: PolicyExportOptions = {\n        deps: true,\n        prereqs: false,\n        useStringArrays: true,\n      }\n    ): Promise<PolicyExportInterface> {\n      return exportPolicies({ options, state });\n    },\n    async exportPoliciesByPolicySet(\n      policySetName: string,\n      options: PolicyExportOptions = {\n        deps: true,\n        prereqs: false,\n        useStringArrays: true,\n      }\n    ): Promise<PolicyExportInterface> {\n      return exportPoliciesByPolicySet({\n        policySetName,\n        options,\n        state,\n      });\n    },\n    async importPolicy(\n      policyId: string,\n      importData: PolicyExportInterface,\n      options: PolicyImportOptions = { deps: true, prereqs: false }\n    ): Promise<PolicySkeleton> {\n      return importPolicy({ policyId, importData, options, state });\n    },\n    async importFirstPolicy(\n      importData: PolicyExportInterface,\n      options: PolicyImportOptions = { deps: true, prereqs: false }\n    ): Promise<PolicySkeleton> {\n      return importFirstPolicy({ importData, options, state });\n    },\n    async importPolicies(\n      importData: PolicyExportInterface,\n      options: PolicyImportOptions = { deps: true, prereqs: false }\n    ): Promise<PolicySkeleton[]> {\n      return importPolicies({ importData, options, state });\n    },\n\n    // Deprecated\n\n    async getPolicies(): Promise<PolicySkeleton[]> {\n      return readPolicies({ state });\n    },\n    async getPoliciesByPolicySet(\n      policySetId: string\n    ): Promise<PolicySkeleton[]> {\n      return readPoliciesByPolicySet({ policySetId, state });\n    },\n    async getPolicy(policyId: string) {\n      return readPolicy({ policyId, state });\n    },\n    async putPolicy(policyId: string, policyData: PolicySkeleton) {\n      return updatePolicy({ policyId, policyData, state });\n    },\n  };\n};\n\nexport interface PolicyExportInterface {\n  meta?: ExportMetaData;\n  script: Record<string, ScriptSkeleton>;\n  resourcetype: Record<string, ResourceTypeSkeleton>;\n  policy: Record<string, PolicySkeleton>;\n  policyset: Record<string, PolicySetSkeleton>;\n}\n\n/**\n * Policy export options\n */\nexport interface PolicyExportOptions {\n  /**\n   * Include any dependencies (scripts).\n   */\n  deps: boolean;\n  /**\n   * Include any prerequisites (policy sets, resource types).\n   */\n  prereqs: boolean;\n  /**\n   * Use string arrays to store multi-line text in scripts.\n   */\n  useStringArrays: boolean;\n}\n\n/**\n * Policy import options\n */\nexport interface PolicyImportOptions {\n  /**\n   * Include any dependencies (scripts).\n   */\n  deps: boolean;\n  /**\n   * Include any prerequisites (policy sets, resource types).\n   */\n  prereqs: boolean;\n  /**\n   * Import policies into different policy set\n   */\n  policySetName?: string;\n}\n\n/**\n * Create an empty export template\n * @returns {PolicyExportInterface} an empty export template\n */\nexport function createPolicyExportTemplate({\n  state,\n}: {\n  state: State;\n}): PolicyExportInterface {\n  return {\n    meta: getMetadata({ state }),\n    script: {},\n    policy: {},\n    resourcetype: {},\n    policyset: {},\n  } as PolicyExportInterface;\n}\n\n/**\n * Get all policies\n * @returns {Promise<PolicySkeleton>} a promise that resolves to an array of policy set objects\n */\nexport async function readPolicies({\n  state,\n}: {\n  state: State;\n}): Promise<PolicySkeleton[]> {\n  try {\n    const { result } = await _getPolicies({ state });\n    return result;\n  } catch (error) {\n    throw new FrodoError(`Error reading policies`, error);\n  }\n}\n\nexport async function readPolicy({\n  policyId,\n  state,\n}: {\n  policyId: string;\n  state: State;\n}) {\n  try {\n    const response = await _getPolicy({ policyId, state });\n    return response;\n  } catch (error) {\n    throw new FrodoError(`Error reading policy ${policyId}`, error);\n  }\n}\n\nexport async function deletePolicy({\n  policyId,\n  state,\n}: {\n  policyId: string;\n  state: State;\n}) {\n  try {\n    const response = await _deletePolicy({ policyId, state });\n    return response;\n  } catch (error) {\n    throw new FrodoError(`Error deleting policy ${policyId}`, error);\n  }\n}\n\n/**\n * Get policies by policy set\n * @param {string} policySetId policy set id/name\n * @returns {Promise<PolicySkeleton[]>} a promise resolving to an array of policy objects\n */\nexport async function readPoliciesByPolicySet({\n  policySetId,\n  state,\n}: {\n  policySetId: string;\n  state: State;\n}): Promise<PolicySkeleton[]> {\n  try {\n    const data = await _getPoliciesByPolicySet({ policySetId, state });\n    return data.result;\n  } catch (error) {\n    throw new FrodoError(`Error reading policies in set ${policySetId}`, error);\n  }\n}\n\nexport async function createPolicy({\n  policyId,\n  policyData,\n  state,\n}: {\n  policyId: string;\n  policyData: PolicySkeleton;\n  state: State;\n}) {\n  debugMessage({ message: `PolicyOps.createPolicy: start`, state });\n  try {\n    await _getPolicy({ policyId, state });\n  } catch (error) {\n    try {\n      const result = await _putPolicy({\n        policyId,\n        policyData,\n        state,\n      });\n      debugMessage({\n        message: `PolicyOps.createPolicy: end`,\n        state,\n      });\n      return result;\n    } catch (error) {\n      throw new FrodoError(`Error creating policy ${policyId}`, error);\n    }\n  }\n  throw new Error(`Policy ${policyId} already exists!`);\n}\n\nexport async function updatePolicy({\n  policyId,\n  policyData,\n  state,\n}: {\n  policyId: string;\n  policyData: PolicySkeleton;\n  state: State;\n}) {\n  try {\n    const response = await _putPolicy({ policyId, policyData, state });\n    return response;\n  } catch (error) {\n    throw new FrodoError(`Error updating policy ${policyId}`, error);\n  }\n}\n\n/**\n * Find all script references in a deeply-nested policy condition object\n * @param {PolicyCondition} condition condition object\n * @returns {string[]} array of script UUIDs\n * \n * Sample condition block:\n * \n      \"condition\": {\n        \"type\": \"AND\",\n        \"conditions\": [\n          {\n            \"type\": \"Script\",\n            \"scriptId\": \"62f18ede-e5e7-4a7b-8b73-1b02fcbd241a\"\n          },\n          {\n            \"type\": \"AuthenticateToService\",\n            \"authenticateToService\": \"TxAuthz\"\n          },\n          {\n            \"type\": \"OR\",\n            \"conditions\": [\n              {\n                \"type\": \"Session\",\n                \"maxSessionTime\": 5,\n                \"terminateSession\": false\n              },\n              {\n                \"type\": \"OAuth2Scope\",\n                \"requiredScopes\": [\n                  \"openid\"\n                ]\n              },\n              {\n                \"type\": \"NOT\",\n                \"condition\": {\n                  \"type\": \"Script\",\n                  \"scriptId\": \"729ee140-a4e9-43af-b358-d60eeda13cc3\"\n                }\n              }\n            ]\n          }\n        ]\n      },\n*/\nexport function findScriptUuids(condition: PolicyCondition): string[] {\n  let scriptUuids: string[] = [];\n  if (!condition) return scriptUuids;\n  if (\n    condition.type === 'AND' ||\n    condition.type === 'OR' ||\n    condition.type === 'NOT'\n  ) {\n    // single condition\n    if (condition.condition) {\n      scriptUuids.push(...findScriptUuids(condition.condition));\n    }\n    // array of conditions\n    if (condition.conditions) {\n      for (const cond of condition.conditions) {\n        scriptUuids.push(...findScriptUuids(cond));\n      }\n    }\n  } else if (condition.type === 'Script') {\n    scriptUuids.push(condition.scriptId as string);\n  }\n  // de-duplicate\n  scriptUuids = [...new Set(scriptUuids)];\n  return scriptUuids;\n}\n\n/**\n * Get scripts for a policy object\n * @param {PolicySkeleton} policyData policy object\n * @returns {Promise<ScriptSkeleton[]>} a promise that resolves to an array of script objects\n */\nexport async function getScripts({\n  policyData,\n  state,\n}: {\n  policyData: PolicySkeleton;\n  state: State;\n}): Promise<ScriptSkeleton[]> {\n  debugMessage({\n    message: `PolicyOps.getScripts: start [policy=${policyData['name']}]`,\n    state,\n  });\n  const errors = [];\n  const scripts = [];\n  try {\n    const scriptUuids = findScriptUuids(policyData.condition);\n    debugMessage({ message: `found scripts: ${scriptUuids}`, state });\n    for (const scriptUuid of scriptUuids) {\n      try {\n        const script = await readScript({ scriptId: scriptUuid, state });\n        scripts.push(script);\n      } catch (error) {\n        errors.push(\n          new FrodoError(\n            `Error retrieving script ${scriptUuid} referenced in policy ${policyData['name']}`,\n            error\n          )\n        );\n      }\n    }\n  } catch (error) {\n    errors.push(\n      new FrodoError(\n        `Error finding scripts in policy ${policyData['name']}`,\n        error\n      )\n    );\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(`Error getting policy scripts`, errors);\n  }\n  debugMessage({ message: `PolicySetOps.getScripts: end`, state });\n  return scripts;\n}\n\n/**\n * Helper function to export dependencies of a policy set\n * @param {PolicySkeleton} policyData policy set data\n * @param {PolicyExportInterface} exportData export data\n */\nasync function exportPolicyPrerequisites({\n  policyData,\n  exportData,\n  state,\n}: {\n  policyData: PolicySkeleton;\n  exportData: PolicyExportInterface;\n  state: State;\n}) {\n  const errors: Error[] = [];\n  debugMessage({\n    message: `PolicyOps.exportPolicyPrerequisites: start [policy=${policyData['name']}]`,\n    state,\n  });\n  // resource types\n  if (policyData.resourceTypeUuid) {\n    try {\n      const resourceType = await getResourceType({\n        resourceTypeUuid: policyData.resourceTypeUuid,\n        state,\n      });\n      exportData.resourcetype[policyData.resourceTypeUuid] = resourceType;\n    } catch (error) {\n      errors.push(error);\n    }\n  }\n  // policy set\n  if (policyData.applicationName) {\n    try {\n      const policySet = await readPolicySet({\n        policySetName: policyData.applicationName,\n        state,\n      });\n      exportData.policyset[policyData.applicationName] = policySet;\n    } catch (error) {\n      errors.push(error);\n    }\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(`Error exporting policy prerequisites`, errors);\n  }\n  debugMessage({\n    message: `PolicySetOps.exportPolicyPrerequisites: end`,\n    state,\n  });\n}\n\n/**\n * Helper function to export dependencies of a policy set\n * @param {PolicySkeleton} policyData policy set data\n * @param {PolicyExportOptions} options export options\n * @param {PolicyExportInterface} exportData export data\n */\nasync function exportPolicyDependencies({\n  policyData,\n  options,\n  exportData,\n  state,\n}: {\n  policyData: PolicySkeleton;\n  options: PolicyExportOptions;\n  exportData: PolicyExportInterface;\n  state: State;\n}) {\n  debugMessage({\n    message: `PolicyOps.exportPolicyDependencies: start [policy=${policyData['name']}]`,\n    state,\n  });\n  // scripts\n  try {\n    const scripts = await getScripts({ policyData, state });\n    for (const scriptData of scripts) {\n      if (options.useStringArrays) {\n        scriptData.script = convertBase64TextToArray(\n          scriptData.script as string\n        );\n      }\n      exportData.script[scriptData._id] = scriptData;\n    }\n  } catch (error) {\n    throw new FrodoError(`Error exporting policy dependencies`, error);\n  }\n  debugMessage({\n    message: `PolicySetOps.exportPolicySetDependencies: end`,\n    state,\n  });\n}\n\n/**\n * Export policy\n * @param {string} policyId policy id/name\n * @returns {Promise<PolicyExportInterface>} a promise that resolves to a PolicyExportInterface object\n */\nexport async function exportPolicy({\n  policyId,\n  options = {\n    deps: true,\n    prereqs: false,\n    useStringArrays: true,\n  },\n  state,\n}: {\n  policyId: string;\n  options?: PolicyExportOptions;\n  state: State;\n}): Promise<PolicyExportInterface> {\n  const errors: Error[] = [];\n  try {\n    debugMessage({ message: `PolicyOps.exportPolicy: start`, state });\n    const policyData = await _getPolicy({ policyId, state });\n    const exportData = createPolicyExportTemplate({ state });\n    exportData.policy[policyData._id] = policyData;\n    if (options.prereqs) {\n      try {\n        await exportPolicyPrerequisites({ policyData, exportData, state });\n      } catch (error) {\n        errors.push(error);\n      }\n    }\n    if (options.deps) {\n      try {\n        await exportPolicyDependencies({\n          policyData,\n          options,\n          exportData,\n          state,\n        });\n      } catch (error) {\n        errors.push(error);\n      }\n    }\n    if (errors.length > 0) {\n      throw new FrodoError(`Error exporting policy ${policyId}`, errors);\n    }\n    debugMessage({ message: `PolicyOps.exportPolicy: end`, state });\n    return exportData;\n  } catch (error) {\n    throw new FrodoError(`Error exporting policy ${policyId}`, error);\n  }\n}\n\n/**\n * Export policies\n * @param {PolicyExportOptions} options export options\n * @returns {Promise<PolicyExportInterface>} a promise that resolves to an PolicyExportInterface object\n */\nexport async function exportPolicies({\n  options = {\n    deps: true,\n    prereqs: false,\n    useStringArrays: true,\n  },\n  state,\n}: {\n  options?: PolicyExportOptions;\n  state: State;\n}): Promise<PolicyExportInterface> {\n  debugMessage({ message: `PolicyOps.exportPolicies: start`, state });\n  const exportData = createPolicyExportTemplate({ state });\n  const errors = [];\n  let indicatorId: string;\n  try {\n    const policies = await readPolicies({ state });\n    indicatorId = createProgressIndicator({\n      total: policies.length,\n      message: 'Exporting policies...',\n      state,\n    });\n    for (const policyData of policies) {\n      updateProgressIndicator({\n        id: indicatorId,\n        message: `Exporting policy ${policyData._id}`,\n        state,\n      });\n      exportData.policy[policyData._id] = policyData;\n      if (options.prereqs) {\n        try {\n          await exportPolicyPrerequisites({ policyData, exportData, state });\n        } catch (error) {\n          errors.push(error);\n        }\n      }\n      if (options.deps) {\n        try {\n          await exportPolicyDependencies({\n            policyData,\n            options,\n            exportData,\n            state,\n          });\n        } catch (error) {\n          errors.push(error);\n        }\n      }\n    }\n    if (errors.length > 0) {\n      throw new FrodoError(`Error exporting policies`, errors);\n    }\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Exported ${policies.length} policies.`,\n      state,\n    });\n    debugMessage({ message: `PolicyOps.exportPolicies: end`, state });\n    return exportData;\n  } catch (error) {\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Error exporting policies.`,\n      status: 'fail',\n      state,\n    });\n    // re-throw previously caught error\n    if (errors.length > 0) {\n      throw error;\n    }\n    throw new FrodoError(`Error exporting policies`, error);\n  }\n}\n\n/**\n * Export policies by policy set\n * @param {string} policySetName policy set id/name\n * @param {PolicyExportOptions} options export options\n * @returns {Promise<PolicyExportInterface>} a promise that resolves to an PolicyExportInterface object\n */\nexport async function exportPoliciesByPolicySet({\n  policySetName,\n  options = {\n    deps: true,\n    prereqs: false,\n    useStringArrays: true,\n  },\n  state,\n}: {\n  policySetName: string;\n  options?: PolicyExportOptions;\n  state: State;\n}): Promise<PolicyExportInterface> {\n  debugMessage({ message: `PolicyOps.exportPolicies: start`, state });\n  const exportData = createPolicyExportTemplate({ state });\n  const errors = [];\n  try {\n    const policies = await readPoliciesByPolicySet({\n      policySetId: policySetName,\n      state,\n    });\n    for (const policyData of policies) {\n      exportData.policy[policyData._id] = policyData;\n      if (options.prereqs) {\n        try {\n          await exportPolicyPrerequisites({ policyData, exportData, state });\n        } catch (error) {\n          errors.push(error);\n        }\n      }\n      if (options.deps) {\n        try {\n          await exportPolicyDependencies({\n            policyData,\n            options,\n            exportData,\n            state,\n          });\n        } catch (error) {\n          errors.push(error);\n        }\n      }\n    }\n    if (errors.length > 0) {\n      throw new FrodoError(\n        `Error exporting policies in set ${policySetName}`,\n        errors\n      );\n    }\n    debugMessage({ message: `PolicyOps.exportPolicies: end`, state });\n    return exportData;\n  } catch (error) {\n    // re-throw previously caught error\n    if (errors.length > 0) {\n      throw error;\n    }\n    throw new FrodoError(\n      `Error exporting policies in set ${policySetName}`,\n      error\n    );\n  }\n}\n\n/**\n * Helper function to import hard dependencies of a policy\n * @param {PolicySkeleton} policyData policy object\n * @param {PolicyExportInterface} exportData export data\n */\nasync function importPolicyPrerequisites({\n  policyData,\n  exportData,\n  state,\n}: {\n  policyData: PolicySkeleton;\n  exportData: PolicyExportInterface;\n  state: State;\n}) {\n  debugMessage({\n    message: `PolicyOps.importPolicyHardDependencies: start [policy=${policyData._id}]`,\n    state,\n  });\n  const errors = [];\n  try {\n    // resource type\n    if (exportData.resourcetype[policyData.resourceTypeUuid]) {\n      try {\n        debugMessage({\n          message: `Importing resource type ${policyData.resourceTypeUuid}`,\n          state,\n        });\n        await updateResourceType({\n          resourceTypeUuid: policyData.resourceTypeUuid,\n          resourceTypeData:\n            exportData.resourcetype[policyData.resourceTypeUuid],\n          state,\n        });\n      } catch (error) {\n        errors.push(\n          new FrodoError(\n            `Error importing prerequisite resource type ${policyData.resourceTypeUuid}`,\n            error\n          )\n        );\n      }\n    }\n    // policy set\n    if (exportData.policyset[policyData.applicationName]) {\n      try {\n        debugMessage({\n          message: `Importing policy set ${policyData.applicationName}`,\n          state,\n        });\n        await updatePolicySet({\n          policySetData: exportData.policyset[policyData.applicationName],\n          state,\n        });\n      } catch (error) {\n        errors.push(\n          new FrodoError(\n            `Error importing prerequisite policy set ${policyData.applicationName}`,\n            error\n          )\n        );\n      }\n    }\n    if (errors.length > 0) {\n      throw new FrodoError(\n        `Error importing prerequisites for policy ${policyData._id}`,\n        errors\n      );\n    }\n    debugMessage({\n      message: `PolicyOps.importPolicyHardDependencies: end`,\n      state,\n    });\n  } catch (error) {\n    // re-throw previously caught errors\n    if (errors.length > 0) {\n      throw error;\n    }\n    throw new FrodoError(\n      `Error importing prerequisites for policy ${policyData._id}`,\n      error\n    );\n  }\n}\n\n/**\n * Helper function to import soft dependencies of a policy\n * @param {PolicySkeleton} policyData policy object\n * @param {PolicyExportInterface} exportData export data\n */\nasync function importPolicyDependencies({\n  policyData,\n  exportData,\n  state,\n}: {\n  policyData: PolicySkeleton;\n  exportData: PolicyExportInterface;\n  state: State;\n}) {\n  debugMessage({\n    message: `PolicyOps.importPolicySoftDependencies: start [policy=${policyData._id}]`,\n    state,\n  });\n  const errors = [];\n  try {\n    // scripts\n    const scriptUuids = findScriptUuids(policyData.condition);\n    for (const scriptUuid of scriptUuids) {\n      try {\n        const scriptData = exportData.script[scriptUuid];\n        debugMessage({ message: `Importing script ${scriptUuid}`, state });\n        await updateScript({ scriptId: scriptUuid, scriptData, state });\n      } catch (error) {\n        errors.push(\n          new FrodoError(\n            `Error importing script ${scriptUuid} for policy ${policyData._id}`,\n            error\n          )\n        );\n      }\n    }\n    if (errors.length > 0) {\n      throw new FrodoError(\n        `Error importing soft dependencies for policy ${policyData._id}`,\n        errors\n      );\n    }\n    debugMessage({\n      message: `PolicyOps.importPolicySoftDependencies: end`,\n      state,\n    });\n  } catch (error) {\n    // re-throw previously caught errors\n    if (errors.length > 0) {\n      throw error;\n    }\n    throw new FrodoError(\n      `Error importing soft dependencies for policy ${policyData._id}`,\n      error\n    );\n  }\n}\n\n/**\n * Import policy by id\n * @param {string} policyId policy id\n * @param {PolicyExportInterface} importData import data\n * @param {PolicyImportOptions} options import options\n * @returns {Promise<PolicySkeleton>} imported policy object\n */\nexport async function importPolicy({\n  policyId,\n  importData,\n  options = { deps: true, prereqs: false },\n  state,\n}: {\n  policyId: string;\n  importData: PolicyExportInterface;\n  options?: PolicyImportOptions;\n  state: State;\n}): Promise<PolicySkeleton> {\n  let response = null;\n  const errors = [];\n  const imported = [];\n  for (const id of Object.keys(importData.policy)) {\n    if (id === policyId) {\n      try {\n        const policyData = importData.policy[id];\n        delete policyData._rev;\n        if (options.policySetName) {\n          policyData.applicationName = options.policySetName;\n        }\n        if (options.prereqs) {\n          try {\n            await importPolicyPrerequisites({\n              policyData,\n              exportData: importData,\n              state,\n            });\n          } catch (error) {\n            errors.push(error);\n          }\n        }\n        try {\n          response = await updatePolicy({\n            policyId: policyData._id,\n            policyData,\n            state,\n          });\n          imported.push(id);\n        } catch (error) {\n          errors.push(error);\n        }\n        if (options.deps) {\n          try {\n            await importPolicyDependencies({\n              policyData,\n              exportData: importData,\n              state,\n            });\n          } catch (error) {\n            errors.push(error);\n          }\n        }\n      } catch (error) {\n        errors.push(error);\n      }\n    }\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(`Error importing policy ${policyId}`, errors);\n  }\n  if (0 === imported.length) {\n    throw new FrodoError(`Policy ${policyId} not found in import data`);\n  }\n  return response;\n}\n\n/**\n * Import first policy\n * @param {PolicyExportInterface} importData import data\n * @param {PolicyImportOptions} options import options\n * @returns {Promise<PolicySkeleton>} imported policy object\n */\nexport async function importFirstPolicy({\n  importData,\n  options = { deps: true, prereqs: false },\n  state,\n}: {\n  importData: PolicyExportInterface;\n  options?: PolicyImportOptions;\n  state: State;\n}): Promise<PolicySkeleton> {\n  let response = null;\n  const errors = [];\n  const imported = [];\n  for (const id of Object.keys(importData.policy)) {\n    try {\n      const policyData = importData.policy[id];\n      delete policyData._rev;\n      if (options.policySetName) {\n        policyData.applicationName = options.policySetName;\n      }\n      if (options.prereqs) {\n        try {\n          await importPolicyPrerequisites({\n            policyData,\n            exportData: importData,\n            state,\n          });\n        } catch (error) {\n          errors.push(error);\n        }\n      }\n      try {\n        response = await updatePolicy({\n          policyId: policyData._id,\n          policyData,\n          state,\n        });\n        imported.push(id);\n      } catch (error) {\n        errors.push(error);\n      }\n      if (options.deps) {\n        try {\n          await importPolicyDependencies({\n            policyData,\n            exportData: importData,\n            state,\n          });\n        } catch (error) {\n          errors.push(error);\n        }\n      }\n    } catch (error) {\n      errors.push(error);\n    }\n    break;\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(`Error importing first policy`, errors);\n  }\n  if (0 === imported.length) {\n    throw new FrodoError(`No policy found in import data`);\n  }\n  return response;\n}\n\n/**\n * Import policies\n * @param {PolicyExportInterface} importData import data\n * @param {PolicyImportOptions} options import options\n * @returns {Promise<PolicySkeleton[]>} array of imported policy objects\n */\nexport async function importPolicies({\n  importData,\n  options = { deps: true, prereqs: false },\n  state,\n}: {\n  importData: PolicyExportInterface;\n  options?: PolicyImportOptions;\n  state: State;\n}): Promise<PolicySkeleton[]> {\n  const response = [];\n  const errors = [];\n  for (const id of Object.keys(importData.policy)) {\n    try {\n      const policyData = importData.policy[id];\n      delete policyData._rev;\n      if (options.policySetName) {\n        policyData.applicationName = options.policySetName;\n      }\n      if (options.prereqs) {\n        try {\n          await importPolicyPrerequisites({\n            policyData,\n            exportData: importData,\n            state,\n          });\n        } catch (error) {\n          errors.push(error);\n        }\n      }\n      try {\n        response.push(\n          await updatePolicy({ policyId: policyData._id, policyData, state })\n        );\n      } catch (error) {\n        errors.push(error);\n      }\n      if (options.deps) {\n        try {\n          await importPolicyDependencies({\n            policyData,\n            exportData: importData,\n            state,\n          });\n        } catch (error) {\n          errors.push(error);\n        }\n      }\n    } catch (error) {\n      errors.push(error);\n    }\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(`Error importing policies`, errors);\n  }\n  return response;\n}\n","import util from 'util';\n\nimport { State } from '../shared/State';\nimport { getCurrentRealmPath } from '../utils/ForgeRockUtils';\nimport { IdObjectSkeletonInterface, PagedResult } from './ApiTypes';\nimport { generateAmApi } from './BaseApi';\n\nconst serviceURLTemplate = '%s/json%s/%s/services/%s';\nconst serviceURLNextDescendentsTemplate =\n  '%s/json%s/%s/services/%s?_action=nextdescendents';\nconst serviceURLNextDescendentTemplate = '%s/json%s/%s/services/%s/%s/%s';\nconst serviceListURLTemplate = '%s/json%s/%s/services?_queryFilter=true';\nconst apiVersion = 'protocol=2.0,resource=1.0';\n\nfunction getApiConfig() {\n  return {\n    apiVersion,\n  };\n}\n\nexport interface ServiceListItem {\n  /**\n   * The identifier for the service - used to construct the subpath for the service\n   */\n  _id: string;\n  /**\n   * The user-facing name of the service\n   */\n  name: string;\n  /**\n   * The revision number of the service\n   */\n  _rev: string;\n}\n\nexport type AmServiceType = IdObjectSkeletonInterface & {\n  name: string;\n};\n\nexport type AmServiceSkeleton = IdObjectSkeletonInterface & {\n  _type: AmServiceType;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any;\n};\n\nexport interface ServiceNextDescendentResponse {\n  result: ServiceNextDescendent;\n}\n\nexport interface ServiceNextDescendent {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any;\n}\n\nexport interface FullService extends AmServiceSkeleton {\n  nextDescendents?: ServiceNextDescendent[];\n}\n\n/**\n * Helper function to get the realm path required for the API call considering if the request\n * should obtain the realm config or the global config of the service in question\n * @param {boolean} globalConfig true if the global service is the target of the operation, false otherwise.\n * @returns {string} The realm path to be used for the request\n */\nfunction getRealmPath(globalConfig: boolean, state: State): string {\n  if (globalConfig) return '';\n  return getCurrentRealmPath(state);\n}\n\n/**\n * Helper function to get the config path required for the API call considering if the request\n * should obtain the realm config or the global config of the service in question\n * @param {boolean} globalConfig true if the global service is the target of the operation, false otherwise.\n * @returns {string} The config path to be used for the request\n */\nfunction getConfigPath(globalConfig: boolean): string {\n  if (globalConfig) return 'global-config';\n  return 'realm-config';\n}\n\n/**\n * Get a list of services\n * @param {boolean} globalConfig true if the global list of services is requested, false otherwise. Default: false.\n * @returns {Promise<ServiceListItem[]>} a promise resolving to an array of service list items.\n */\nexport async function getListOfServices({\n  globalConfig = false,\n  state,\n}: {\n  globalConfig: boolean;\n  state: State;\n}): Promise<PagedResult<ServiceListItem>> {\n  const urlString = util.format(\n    serviceListURLTemplate,\n    state.getHost(),\n    getRealmPath(globalConfig, state),\n    getConfigPath(globalConfig)\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get<\n    PagedResult<ServiceListItem>\n  >(urlString, {\n    withCredentials: true,\n  });\n  return data;\n}\n\n/**\n * Get service\n * @param {string} serviceId servide id\n * @param {boolean} globalConfig true if the global service is the target of the operation, false otherwise. Default: false.\n * @returns {Promise<AmService>} a promise resolving to a service object\n */\nexport async function getService({\n  serviceId,\n  globalConfig = false,\n  state,\n}: {\n  serviceId: string;\n  globalConfig?: boolean;\n  state: State;\n}): Promise<AmServiceSkeleton> {\n  const urlString = util.format(\n    serviceURLTemplate,\n    state.getHost(),\n    getRealmPath(globalConfig, state),\n    getConfigPath(globalConfig),\n    serviceId\n  );\n  const { data } = await generateAmApi({\n    resource: getApiConfig(),\n    state,\n  }).get<AmServiceSkeleton>(urlString, {\n    withCredentials: true,\n  });\n  return data;\n}\n\n/**\n * Get a service's decendents (applicable for structured services only, e.g. SocialIdentityProviders)\n * @param {string} serviceId service id\n * @param {boolean} globalConfig true if the global service is the target of the operation, false otherwise. Default: false.\n * @returns {Promise<ServiceNextDescendent[]>} a promise resolving to an array of the service's next decendents\n */\nexport async function getServiceDescendents({\n  serviceId,\n  globalConfig = false,\n  state,\n}: {\n  serviceId: string;\n  globalConfig?: boolean;\n  state: State;\n}): Promise<ServiceNextDescendent[]> {\n  const urlString = util.format(\n    serviceURLNextDescendentsTemplate,\n    state.getHost(),\n    getRealmPath(globalConfig, state),\n    getConfigPath(globalConfig),\n    serviceId\n  );\n  const { data } = await generateAmApi({\n    resource: getApiConfig(),\n    state,\n  }).post<ServiceNextDescendentResponse>(urlString, {\n    withCredentials: true,\n  });\n  return data.result as ServiceNextDescendent[];\n}\n\n/**\n * Create or update a service\n * @param {string} serviceId service id\n * @param {AmService} serviceData service configuration\n * @param {boolean} globalConfig true if the global service is the target of the operation, false otherwise. Default: false.\n * @returns {Promise<AmService>} a promise resolving to a service object\n */\nexport async function putService({\n  serviceId,\n  serviceData,\n  globalConfig = false,\n  state,\n}: {\n  serviceId: string;\n  serviceData: AmServiceSkeleton;\n  globalConfig?: boolean;\n  state: State;\n}): Promise<AmServiceSkeleton> {\n  const urlString = util.format(\n    serviceURLTemplate,\n    state.getHost(),\n    getRealmPath(globalConfig, state),\n    getConfigPath(globalConfig),\n    serviceId\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).put(\n    urlString,\n    serviceData,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Create or update a service next descendent instance\n * @param {string} serviceId service id\n * @param {string} serviceType service type\n * @param {string} serviceNextDescendentId service instance id\n * @param {ServiceNextDescendent} serviceNextDescendentData service next descendent configuration\n * @param {boolean} globalConfig true if the global service is the target of the operation, false otherwise. Default: false.\n * @returns {Promise<ServiceNextDescendent>} a promise resolving to a service next descendent\n */\nexport async function putServiceNextDescendent({\n  serviceId,\n  serviceType,\n  serviceNextDescendentId,\n  serviceNextDescendentData,\n  globalConfig = false,\n  state,\n}: {\n  serviceId: string;\n  serviceType: string;\n  serviceNextDescendentId: string;\n  serviceNextDescendentData: ServiceNextDescendent;\n  globalConfig?: boolean;\n  state: State;\n}): Promise<ServiceNextDescendent> {\n  const urlString = util.format(\n    serviceURLNextDescendentTemplate,\n    state.getHost(),\n    getRealmPath(globalConfig, state),\n    getConfigPath(globalConfig),\n    serviceId,\n    serviceType,\n    serviceNextDescendentId\n  );\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).put(\n    urlString,\n    serviceNextDescendentData,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Delete service\n * @param {string} serviceId service id\n * @param {boolean} globalConfig true if the global service is the target of the operation, false otherwise. Default: false.\n * @returns {Promise<AmService>} a promise resolving to a service object\n */\nexport async function deleteService({\n  serviceId,\n  globalConfig = false,\n  state,\n}: {\n  serviceId: string;\n  globalConfig?: boolean;\n  state: State;\n}): Promise<AmServiceSkeleton> {\n  const urlString = util.format(\n    serviceURLTemplate,\n    state.getHost(),\n    getRealmPath(globalConfig, state),\n    getConfigPath(globalConfig),\n    serviceId\n  );\n  const { data } = await generateAmApi({\n    resource: getApiConfig(),\n    state,\n  }).delete(urlString, {\n    withCredentials: true,\n  });\n  return data;\n}\n\n/**\n * Delete service next descendent\n * @param {string} serviceId service id\n * @param {string} serviceType service type\n * @param {string} serviceNextDescendentId service instance id\n * @param {boolean} globalConfig true if the global service is the target of the operation, false otherwise. Default: false.\n * @returns {Promise<ServiceNextDescendent>} a promise resolving to a service next descendent\n */\nexport async function deleteServiceNextDescendent({\n  serviceId,\n  serviceType,\n  serviceNextDescendentId,\n  globalConfig = false,\n  state,\n}: {\n  serviceId: string;\n  serviceType: string;\n  serviceNextDescendentId: string;\n  globalConfig?: boolean;\n  state: State;\n}): Promise<ServiceNextDescendent> {\n  const urlString = util.format(\n    serviceURLNextDescendentTemplate,\n    state.getHost(),\n    getRealmPath(globalConfig, state),\n    getConfigPath(globalConfig),\n    serviceId,\n    serviceType,\n    serviceNextDescendentId\n  );\n  const { data } = await generateAmApi({\n    resource: getApiConfig(),\n    state,\n  }).delete(urlString, {\n    withCredentials: true,\n  });\n  return data;\n}\n","import {\n  type AmServiceSkeleton,\n  deleteService,\n  deleteServiceNextDescendent,\n  type FullService,\n  getListOfServices as _getListOfServices,\n  getService,\n  getServiceDescendents,\n  putService,\n  putServiceNextDescendent,\n} from '../api/ServiceApi';\nimport { State } from '../shared/State';\nimport {\n  createProgressIndicator,\n  debugMessage,\n  printMessage,\n  stopProgressIndicator,\n  updateProgressIndicator,\n} from '../utils/Console';\nimport { getMetadata } from '../utils/ExportImportUtils';\nimport { FrodoError } from './FrodoError';\nimport { type ExportMetaData } from './OpsTypes';\n\nexport type Service = {\n  createServiceExportTemplate(): ServiceExportInterface;\n  /**\n   * Get list of services\n   * @param {boolean} globalConfig true if the list of global services is requested, false otherwise. Default: false.\n   */\n  getListOfServices(\n    globalConfig?: boolean\n  ): Promise<import('../api/ServiceApi').ServiceListItem[]>;\n  /**\n   * Get all services including their descendents.\n   * @param {boolean} globalConfig true if the global service is the target of the operation, false otherwise. Default: false.\n   * @returns Promise resolving to an array of services with their descendants\n   */\n  getFullServices(globalConfig?: boolean): Promise<FullService[]>;\n  /**\n   * Deletes the specified service\n   * @param {string} serviceId The service to delete\n   * @param {boolean} globalConfig true if the global service is the target of the operation, false otherwise. Default: false.\n   */\n  deleteFullService(\n    serviceId: string,\n    globalConfig?: boolean\n  ): Promise<AmServiceSkeleton>;\n  /**\n   * Deletes all services\n   * @param {boolean} globalConfig true if the global service is the target of the operation, false otherwise. Default: false.\n   */\n  deleteFullServices(globalConfig?: boolean): Promise<AmServiceSkeleton[]>;\n  /**\n   * Export service. The response can be saved to file as is.\n   * @param serviceId service id/name\n   * @param {boolean} globalConfig true if the global service is the target of the operation, false otherwise. Default: false.\n   * @returns {Promise<ServiceExportInterface>} Promise resolving to a ServiceExportInterface object.\n   */\n  exportService(\n    serviceId: string,\n    globalConfig?: boolean\n  ): Promise<ServiceExportInterface>;\n  /**\n   * Export all services\n   * @param {boolean} globalConfig true if the global service is the target of the operation, false otherwise. Default: false.\n   */\n  exportServices(globalConfig?: boolean): Promise<ServiceExportInterface>;\n  /**\n   * Imports a single service using a reference to the service and a file to read the data from. Optionally clean (remove) an existing service first\n   * @param {string} serviceId The service id/name to add\n   * @param {ServiceExportInterface} importData The service configuration export data to import\n   * @param {ServiceImportOptions} options Import options\n   * @returns {Promise<AmServiceSkeleton>} A promise resolving to a service object\n   */\n  importService(\n    serviceId: string,\n    importData: ServiceExportInterface,\n    options: ServiceImportOptions\n  ): Promise<AmServiceSkeleton>;\n  /**\n   * Imports multiple services from the same file. Optionally clean (remove) existing services first\n   * @param {ServiceExportInterface} importData The service configuration export data to import\n   * @param {ServiceImportOptions} options Import options\n   * @returns {Promise<AmServiceSkeleton[]>} A promise resolving to an array of service objects\n   */\n  importServices(\n    importData: ServiceExportInterface,\n    options: ServiceImportOptions\n  ): Promise<AmServiceSkeleton[]>;\n};\n\nexport default (state: State): Service => {\n  return {\n    createServiceExportTemplate(): ServiceExportInterface {\n      return createServiceExportTemplate({ state });\n    },\n\n    /**\n     * Get list of services\n     * @param {boolean} globalConfig true if the list of global services is requested, false otherwise. Default: false.\n     */\n    async getListOfServices(globalConfig = false) {\n      return getListOfServices({ globalConfig, state });\n    },\n\n    /**\n     * Get all services including their descendents.\n     * @param {boolean} globalConfig true if the global service is the target of the operation, false otherwise. Default: false.\n     * @returns Promise resolving to an array of services with their descendants\n     */\n    async getFullServices(globalConfig = false): Promise<FullService[]> {\n      return getFullServices({ globalConfig, state });\n    },\n\n    /**\n     * Deletes the specified service\n     * @param {string} serviceId The service to delete\n     * @param {boolean} globalConfig true if the global service is the target of the operation, false otherwise. Default: false.\n     */\n    async deleteFullService(\n      serviceId: string,\n      globalConfig = false\n    ): Promise<AmServiceSkeleton> {\n      return deleteFullService({ serviceId, globalConfig, state });\n    },\n\n    /**\n     * Deletes all services\n     * @param {boolean} globalConfig true if the global service is the target of the operation, false otherwise. Default: false.\n     */\n    async deleteFullServices(\n      globalConfig: boolean = false\n    ): Promise<AmServiceSkeleton[]> {\n      return deleteFullServices({ globalConfig, state });\n    },\n\n    /**\n     * Export service. The response can be saved to file as is.\n     * @param serviceId service id/name\n     * @param {boolean} globalConfig true if the global service is the target of the operation, false otherwise. Default: false.\n     * @returns {Promise<ServiceExportInterface>} Promise resolving to a ServiceExportInterface object.\n     */\n    async exportService(\n      serviceId: string,\n      globalConfig = false\n    ): Promise<ServiceExportInterface> {\n      return exportService({ serviceId, globalConfig, state });\n    },\n\n    /**\n     * Export all services\n     * @param {boolean} globalConfig true if the global service is the target of the operation, false otherwise. Default: false.\n     */\n    async exportServices(\n      globalConfig = false\n    ): Promise<ServiceExportInterface> {\n      return exportServices({ globalConfig, state });\n    },\n\n    /**\n     * Imports a single service using a reference to the service and a file to read the data from. Optionally clean (remove) an existing service first\n     * @param {string} serviceId The service id/name to add\n     * @param {ServiceExportInterface} importData The service configuration export data to import\n     * @param {ServiceImportOptions} options Import options\n     * @returns {Promise<AmServiceSkeleton>} A promise resolving to a service object\n     */\n    async importService(\n      serviceId: string,\n      importData: ServiceExportInterface,\n      options: ServiceImportOptions = {\n        clean: false,\n        global: false,\n        realm: false,\n      }\n    ): Promise<AmServiceSkeleton> {\n      return importService({\n        serviceId,\n        importData,\n        options,\n        state,\n      });\n    },\n\n    /**\n     * Imports multiple services from the same file. Optionally clean (remove) existing services first\n     * @param {ServiceExportInterface} importData The service configuration export data to import\n     * @param {ServiceImportOptions} options Import options\n     * @returns {Promise<AmServiceSkeleton[]>} A promise resolving to an array of service objects\n     */\n    async importServices(\n      importData: ServiceExportInterface,\n      options: ServiceImportOptions = {\n        clean: false,\n        global: false,\n        realm: false,\n      }\n    ): Promise<AmServiceSkeleton[]> {\n      return importServices({\n        importData,\n        options,\n        state,\n      });\n    },\n  };\n};\n\nexport interface ServiceExportInterface {\n  meta?: ExportMetaData;\n  service: Record<string, AmServiceSkeleton>;\n}\n\n/**\n * Service import options\n */\nexport interface ServiceImportOptions {\n  /**\n   * Indicates whether to remove previously existing services of the same id before importing\n   */\n  clean: boolean;\n\n  /**\n   * Indicates whether to import service(s) as global services\n   */\n  global: boolean;\n\n  /**\n   * Indicates whether to import service(s) to the current realm\n   */\n  realm: boolean;\n}\n\n/**\n * Create an empty service export template\n * @returns {SingleTreeExportInterface} an empty service export template\n */\nexport function createServiceExportTemplate({\n  state,\n}: {\n  state: State;\n}): ServiceExportInterface {\n  return {\n    meta: getMetadata({ state }),\n    service: {},\n  } as ServiceExportInterface;\n}\n\n/**\n * Get list of services\n * @param {boolean} globalConfig true if the list of global services is requested, false otherwise. Default: false.\n */\nexport async function getListOfServices({\n  globalConfig = false,\n  state,\n}: {\n  globalConfig: boolean;\n  state: State;\n}) {\n  try {\n    debugMessage({ message: `ServiceOps.getListOfServices: start`, state });\n    const services = (await _getListOfServices({ globalConfig, state })).result;\n    debugMessage({ message: `ServiceOps.getListOfServices: end`, state });\n    return services;\n  } catch (error) {\n    throw new FrodoError(\n      `Error getting list of ${globalConfig ? 'global' : 'realm'} services`,\n      error\n    );\n  }\n}\n\n/**\n * Get all services including their descendents.\n * @param {boolean} globalConfig true if the global service is the target of the operation, false otherwise. Default: false.\n * @returns Promise resolving to an array of services with their descendants\n */\nexport async function getFullServices({\n  globalConfig = false,\n  state,\n}: {\n  globalConfig: boolean;\n  state: State;\n}): Promise<FullService[]> {\n  try {\n    debugMessage({\n      message: `ServiceOps.getFullServices: start, globalConfig=${globalConfig}`,\n      state,\n    });\n    const serviceList = (await _getListOfServices({ globalConfig, state }))\n      .result;\n\n    const fullServiceData = await Promise.all(\n      serviceList.map(async (listItem) => {\n        try {\n          const [service, nextDescendents] = await Promise.all([\n            getService({ serviceId: listItem._id, globalConfig, state }),\n            getServiceDescendents({\n              serviceId: listItem._id,\n              globalConfig,\n              state,\n            }),\n          ]);\n\n          return {\n            ...service,\n            nextDescendents,\n          };\n        } catch (error) {\n          if (\n            !(\n              error.response?.status === 403 &&\n              error.response?.data?.message ===\n                'This operation is not available in ForgeRock Identity Cloud.'\n            )\n          ) {\n            const message = error.response?.data?.message;\n            printMessage({\n              message: `Unable to retrieve data for ${listItem._id} with error: ${message}`,\n              type: 'error',\n              state,\n            });\n          }\n        }\n      })\n    );\n\n    debugMessage({ message: `ServiceOps.getFullServices: end`, state });\n    return fullServiceData.filter((data) => !!data); // make sure to filter out any undefined objects\n  } catch (error) {\n    throw new FrodoError(\n      `Error getting ${globalConfig ? 'global' : 'realm'} full service configs`,\n      error\n    );\n  }\n}\n\n/**\n * Saves a service including descendents\n * @param {string} serviceId the service id / name\n * @param {FullService} fullServiceData service object including descendants\n * @param {boolean} globalConfig true if the global service is the target of the operation, false otherwise. Default: false.\n * @returns promise resolving to a service object\n */\nasync function putFullService({\n  serviceId,\n  fullServiceData,\n  clean,\n  globalConfig = false,\n  state,\n}: {\n  serviceId: string;\n  fullServiceData: FullService;\n  clean: boolean;\n  globalConfig: boolean;\n  state: State;\n}): Promise<AmServiceSkeleton> {\n  try {\n    debugMessage({\n      message: `ServiceOps.putFullService: start, serviceId=${serviceId}, globalConfig=${globalConfig}`,\n      state,\n    });\n    const nextDescendents = fullServiceData.nextDescendents;\n\n    delete fullServiceData.nextDescendents;\n    delete fullServiceData._rev;\n    delete fullServiceData.enabled;\n\n    if (clean) {\n      try {\n        debugMessage({ message: `ServiceOps.putFullService: clean`, state });\n        await deleteFullService({ serviceId, globalConfig, state });\n      } catch (error) {\n        if (\n          !(\n            error.response?.status === 404 &&\n            error.response?.data?.message === 'Not Found'\n          )\n        ) {\n          throw new FrodoError(\n            `Error deleting service '${serviceId}' before import`,\n            error\n          );\n        }\n      }\n    }\n\n    // delete location field before adding or updating the service\n    delete fullServiceData.location;\n\n    // create service first\n    const result = await putService({\n      serviceId,\n      serviceData: fullServiceData,\n      globalConfig,\n      state,\n    });\n\n    // return fast if no next descendents supplied\n    if (nextDescendents.length === 0) {\n      debugMessage({\n        message: `ServiceOps.putFullService: end (w/o descendents)`,\n        state,\n      });\n      return result;\n    }\n\n    // now create next descendents\n    const nextDescendentResult = await Promise.all(\n      nextDescendents.map(async (descendent) => {\n        const type = descendent._type._id;\n        const descendentId = descendent._id;\n        debugMessage({\n          message: `ServiceOps.putFullService: descendentId=${descendentId}`,\n          state,\n        });\n        let result = undefined;\n        try {\n          result = await putServiceNextDescendent({\n            serviceId,\n            serviceType: type,\n            serviceNextDescendentId: descendentId,\n            serviceNextDescendentData: descendent,\n            globalConfig,\n            state,\n          });\n        } catch (error) {\n          throw new FrodoError(\n            `Error putting descendent '${descendentId}' of service '${serviceId}'`,\n            error\n          );\n        }\n        return result;\n      })\n    );\n    result.nextDescendents = nextDescendentResult;\n    debugMessage({\n      message: `ServiceOps.putFullService: end (w/ descendents)`,\n      state,\n    });\n    return result;\n  } catch (error) {\n    throw new FrodoError(\n      `Error putting ${\n        globalConfig ? 'global' : 'realm'\n      } full service config ${serviceId}`,\n      error\n    );\n  }\n}\n\n/**\n * Saves multiple services using the serviceEntries which contain both id and data with descendants\n * @param {[string, FullService][]} serviceEntries The services to add\n * @param {boolean} clean Indicates whether to remove possible existing services first\n * @param {boolean} globalConfig true if the global service is the target of the operation, false otherwise. Default: false.\n * @param {boolean} realmConfig true if the current realm service is the target of the operation, false otherwise. Default: false.\n * @returns {Promise<AmService[]>} promise resolving to an array of service objects\n */\nasync function putFullServices({\n  serviceEntries,\n  clean,\n  globalConfig = false,\n  realmConfig = false,\n  state,\n}: {\n  serviceEntries: [string, FullService][];\n  clean: boolean;\n  globalConfig: boolean;\n  realmConfig: boolean;\n  state: State;\n}): Promise<AmServiceSkeleton[]> {\n  debugMessage({\n    message: `ServiceOps.putFullServices: start, globalConfig=${globalConfig}`,\n    state,\n  });\n  const errors: Error[] = [];\n  const results: AmServiceSkeleton[] = [];\n  for (const [id, data] of serviceEntries) {\n    try {\n      let result: AmServiceSkeleton;\n      if (globalConfig || (!realmConfig && data.location === 'global')) {\n        result = await putFullService({\n          serviceId: id,\n          fullServiceData: data,\n          clean,\n          globalConfig: true,\n          state,\n        });\n      }\n      if (\n        realmConfig ||\n        (!globalConfig && data.location === state.getRealm())\n      ) {\n        result = await putFullService({\n          serviceId: id,\n          fullServiceData: data,\n          clean,\n          globalConfig: false,\n          state,\n        });\n      }\n      if (result) results.push(result);\n      debugMessage({ message: `Imported: ${id}`, state });\n    } catch (error) {\n      errors.push(error);\n    }\n  }\n  if (errors.length > 0) {\n    throw new FrodoError(\n      `Error putting ${globalConfig ? 'global' : 'realm'} full service configs`,\n      errors\n    );\n  }\n  debugMessage({ message: `ServiceOps.putFullServices: end`, state });\n  return results;\n}\n\n/**\n * Deletes the specified service\n * @param {string} serviceId The service to delete\n * @param {boolean} globalConfig true if the global service is the target of the operation, false otherwise. Default: false.\n */\nexport async function deleteFullService({\n  serviceId,\n  globalConfig = false,\n  state,\n}: {\n  serviceId: string;\n  globalConfig: boolean;\n  state: State;\n}) {\n  try {\n    debugMessage({\n      message: `ServiceOps.deleteFullService: start, globalConfig=${globalConfig}`,\n      state,\n    });\n    const serviceNextDescendentData = await getServiceDescendents({\n      serviceId,\n      globalConfig,\n      state,\n    });\n\n    await Promise.all(\n      serviceNextDescendentData.map((nextDescendent) =>\n        deleteServiceNextDescendent({\n          serviceId,\n          serviceType: nextDescendent._type._id,\n          serviceNextDescendentId: nextDescendent._id,\n          globalConfig,\n          state,\n        })\n      )\n    );\n\n    debugMessage({ message: `ServiceOps.deleteFullService: end`, state });\n    return deleteService({ serviceId, globalConfig, state });\n  } catch (error) {\n    throw new FrodoError(\n      `Error deleting ${\n        globalConfig ? 'global' : 'realm'\n      } full service config ${serviceId}`,\n      error\n    );\n  }\n}\n\n/**\n * Deletes all services\n * @param {boolean} globalConfig true if the global service is the target of the operation, false otherwise. Default: false.\n * @return {Promise<AmServiceSkeleton[]>} a promise resolving to an array of deleted service objects\n */\nexport async function deleteFullServices({\n  globalConfig = false,\n  state,\n}: {\n  globalConfig: boolean;\n  state: State;\n}): Promise<AmServiceSkeleton[]> {\n  debugMessage({\n    message: `ServiceOps.deleteFullServices: start, globalConfig=${globalConfig}`,\n    state,\n  });\n  try {\n    const serviceList = (await _getListOfServices({ globalConfig, state }))\n      .result;\n\n    const deleted: AmServiceSkeleton[] = await Promise.all(\n      serviceList.map(async (serviceListItem) => {\n        try {\n          return deleteFullService({\n            serviceId: serviceListItem._id,\n            globalConfig,\n            state,\n          });\n        } catch (error) {\n          if (\n            !(\n              error.response?.status === 403 &&\n              error.response?.data?.message ===\n                'This operation is not available in ForgeRock Identity Cloud.'\n            )\n          ) {\n            const message = error.response?.data?.message;\n            printMessage({\n              message: `Delete service '${serviceListItem._id}': ${message}`,\n              state,\n              type: 'error',\n            });\n          }\n        }\n      })\n    );\n    debugMessage({ message: `ServiceOps.deleteFullServices: end`, state });\n    return deleted;\n  } catch (error) {\n    throw new FrodoError(\n      `Error deleting ${\n        globalConfig ? 'global' : 'realm'\n      } full service configs`,\n      error\n    );\n  }\n}\n\n/**\n * Export service. The response can be saved to file as is.\n * @param serviceId service id/name\n * @param {boolean} globalConfig true if the global service is the target of the operation, false otherwise. Default: false.\n * @returns {Promise<ServiceExportInterface>} Promise resolving to a ServiceExportInterface object.\n */\nexport async function exportService({\n  serviceId,\n  globalConfig = false,\n  state,\n}: {\n  serviceId: string;\n  globalConfig: boolean;\n  state: State;\n}): Promise<ServiceExportInterface> {\n  try {\n    debugMessage({\n      message: `ServiceOps.exportService: start, globalConfig=${globalConfig}`,\n      state,\n    });\n    const exportData = createServiceExportTemplate({ state });\n    const service = await getService({ serviceId, globalConfig, state });\n    service.nextDescendents = await getServiceDescendents({\n      serviceId,\n      globalConfig,\n      state,\n    });\n    service.location = globalConfig ? 'global' : state.getRealm();\n    exportData.service[serviceId] = service;\n    debugMessage({ message: `ServiceOps.exportService: end`, state });\n    return exportData;\n  } catch (error) {\n    throw new FrodoError(\n      `Error exporting ${\n        globalConfig ? 'global' : 'realm'\n      } service ${serviceId}`,\n      error\n    );\n  }\n}\n\n/**\n * Export all services\n * @param {boolean} globalConfig true if the global service is the target of the operation, false otherwise. Default: false.\n */\nexport async function exportServices({\n  globalConfig = false,\n  state,\n}: {\n  globalConfig: boolean;\n  state: State;\n}): Promise<ServiceExportInterface> {\n  debugMessage({\n    message: `ServiceOps.exportServices: start, globalConfig=${globalConfig}`,\n    state,\n  });\n  let indicatorId: string;\n  try {\n    const exportData = createServiceExportTemplate({ state });\n    const services = await getFullServices({ globalConfig, state });\n    indicatorId = createProgressIndicator({\n      total: services.length,\n      message: `Exporting ${globalConfig ? 'global' : 'realm'} services...`,\n      state,\n    });\n    for (const service of services) {\n      updateProgressIndicator({\n        id: indicatorId,\n        message: `Exporting ${globalConfig ? 'global' : 'realm'} service ${\n          service._id\n        }`,\n        state,\n      });\n      service.location = globalConfig ? 'global' : state.getRealm();\n      exportData.service[service._type._id] = service;\n    }\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Exported ${services.length} ${\n        globalConfig ? 'global' : 'realm'\n      } services.`,\n      state,\n    });\n    debugMessage({ message: `ServiceOps.exportServices: end`, state });\n    return exportData;\n  } catch (error) {\n    stopProgressIndicator({\n      id: indicatorId,\n      message: `Error exporting ${globalConfig ? 'global' : 'realm'} services.`,\n      status: 'fail',\n      state,\n    });\n    throw new FrodoError(\n      `Error exporting ${globalConfig ? 'global' : 'realm'} services`,\n      error\n    );\n  }\n}\n\n/**\n * Imports a single service using a reference to the service and a file to read the data from. Optionally clean (remove) an existing service first\n * @param {string} serviceId The service id/name to add\n * @param {ServiceExportInterface} importData The service configuration export data to import\n * @param {ServiceImportOptions} options Import options\n * @returns {Promise<AmServiceSkeleton>} A promise resolving to a service object\n */\nexport async function importService({\n  serviceId,\n  importData,\n  options = {\n    clean: false,\n    global: false,\n    realm: false,\n  },\n  state,\n}: {\n  serviceId: string;\n  importData: ServiceExportInterface;\n  options: ServiceImportOptions;\n  state: State;\n}): Promise<AmServiceSkeleton> {\n  try {\n    debugMessage({\n      message: `ServiceOps.importService: start, global=${options.global}, realm=${options.realm}`,\n      state,\n    });\n    const serviceData = importData.service[serviceId];\n    let result: AmServiceSkeleton;\n    if (\n      options.global ||\n      (!options.realm && serviceData.location === 'global')\n    ) {\n      result = await putFullService({\n        serviceId,\n        fullServiceData: serviceData,\n        clean: options.clean,\n        globalConfig: true,\n        state,\n      });\n    }\n    if (\n      options.realm ||\n      (!options.global && serviceData.location === state.getRealm())\n    ) {\n      result = await putFullService({\n        serviceId,\n        fullServiceData: serviceData,\n        clean: options.clean,\n        globalConfig: false,\n        state,\n      });\n    }\n    debugMessage({ message: `ServiceOps.importService: end`, state });\n    return result;\n  } catch (error) {\n    throw new FrodoError(`Error importing service ${serviceId}`, error);\n  }\n}\n\n/**\n * Imports multiple services from the same file. Optionally clean (remove) existing services first\n * @param {ServiceExportInterface} importData The service configuration export data to import\n * @param {ServiceImportOptions} options Import options\n * @returns {Promise<AmServiceSkeleton[]>} A promise resolving to an array of service objects\n */\nexport async function importServices({\n  importData,\n  options = {\n    clean: false,\n    global: false,\n    realm: false,\n  },\n  state,\n}: {\n  importData: ServiceExportInterface;\n  options: ServiceImportOptions;\n  state: State;\n}): Promise<AmServiceSkeleton[]> {\n  debugMessage({\n    message: `ServiceOps.importServices: start, global=${options.global}, realm=${options.realm}`,\n    state,\n  });\n  try {\n    const result = await putFullServices({\n      serviceEntries: Object.entries(importData.service),\n      clean: options.clean,\n      globalConfig: options.global,\n      realmConfig: options.realm,\n      state,\n    });\n    debugMessage({ message: `ServiceOps.importServices: end`, state });\n    return result;\n  } catch (error) {\n    throw new FrodoError(`Error importing services`, error);\n  }\n}\n","import { AgentSkeleton } from '../api/AgentApi';\nimport { IdObjectSkeletonInterface } from '../api/ApiTypes';\nimport { AuthenticationSettingsSkeleton } from '../api/AuthenticationSettingsApi';\nimport { CircleOfTrustSkeleton } from '../api/CirclesOfTrustApi';\nimport { SecretSkeleton } from '../api/cloud/SecretsApi';\nimport { VariableSkeleton } from '../api/cloud/VariablesApi';\nimport { OAuth2ClientSkeleton } from '../api/OAuth2ClientApi';\nimport { PolicySkeleton } from '../api/PoliciesApi';\nimport { PolicySetSkeleton } from '../api/PolicySetApi';\nimport { ResourceTypeSkeleton } from '../api/ResourceTypesApi';\nimport { Saml2ProviderSkeleton } from '../api/Saml2Api';\nimport { ScriptSkeleton } from '../api/ScriptApi';\nimport { AmServiceSkeleton } from '../api/ServiceApi';\nimport { SocialIdpSkeleton } from '../api/SocialIdentityProvidersApi';\nimport { State } from '../shared/State';\nimport {\n  createProgressIndicator,\n  stopProgressIndicator,\n  updateProgressIndicator,\n} from '../utils/Console';\nimport {\n  exportOrImportWithErrorHandling,\n  getMetadata,\n} from '../utils/ExportImportUtils';\nimport { exportAgents, importAgents } from './AgentOps';\nimport {\n  ApplicationSkeleton,\n  exportApplications,\n  importApplications,\n} from './ApplicationOps';\nimport {\n  exportAuthenticationSettings,\n  importAuthenticationSettings,\n} from './AuthenticationSettingsOps';\nimport {\n  CirclesOfTrustExportInterface,\n  exportCirclesOfTrust,\n  importCirclesOfTrust,\n} from './CirclesOfTrustOps';\nimport { exportSecrets } from './cloud/SecretsOps';\nimport { exportVariables } from './cloud/VariablesOps';\nimport {\n  EmailTemplateSkeleton,\n  exportEmailTemplates,\n  importEmailTemplates,\n} from './EmailTemplateOps';\nimport { FrodoError } from './FrodoError';\nimport { exportConfigEntities, importConfigEntities } from './IdmConfigOps';\nimport {\n  exportSocialIdentityProviders,\n  importSocialIdentityProviders,\n} from './IdpOps';\nimport {\n  exportJourneys,\n  importJourneys,\n  SingleTreeExportInterface,\n} from './JourneyOps';\nimport { exportOAuth2Clients, importOAuth2Clients } from './OAuth2ClientOps';\nimport { ExportMetaData } from './OpsTypes';\nimport { exportPolicies, importPolicies } from './PolicyOps';\nimport { exportPolicySets, importPolicySets } from './PolicySetOps';\nimport { exportResourceTypes, importResourceTypes } from './ResourceTypeOps';\nimport { exportSaml2Providers, importSaml2Providers } from './Saml2Ops';\nimport { exportScripts, importScripts } from './ScriptOps';\nimport { exportServices, importServices } from './ServiceOps';\nimport { exportThemes, importThemes, ThemeSkeleton } from './ThemeOps';\n\nexport type Config = {\n  /**\n   * Export full configuration\n   * @param {FullExportOptions} options export options\n   * @param {Error[]} collectErrors optional parameters to collect erros instead of having the function throw. Pass an empty array to collect errors and report on them but have the function perform all it can and return the export data even if it encounters errors.\n   * @returns {Promise<IdObjectSkeletonInterface>} a promise resolving to a full export object\n   */\n  exportFullConfiguration(\n    options: FullExportOptions,\n    collectErrors?: Error[]\n  ): Promise<FullExportInterface>;\n  /**\n   * Import full configuration\n   * @param {FullExportInterface} importData import data\n   * @param {FullImportOptions} options import options\n   * @param {Error[]} collectErrors optional parameters to collect erros instead of having the function throw. Pass an empty array to collect errors and report on them but have the function perform all it can and return the export data even if it encounters errors.\n   */\n  importFullConfiguration(\n    importData: FullExportInterface,\n    options: FullImportOptions,\n    collectErrors?: Error[]\n  ): Promise<void>;\n};\n\nexport default (state: State): Config => {\n  return {\n    async exportFullConfiguration(\n      options: FullExportOptions = {\n        useStringArrays: true,\n        noDecode: false,\n        coords: true,\n        includeDefault: false,\n      },\n      collectErrors: Error[]\n    ) {\n      return exportFullConfiguration({ options, collectErrors, state });\n    },\n    async importFullConfiguration(\n      importData: FullExportInterface,\n      options: FullImportOptions = {\n        reUuidJourneys: false,\n        reUuidScripts: false,\n        cleanServices: false,\n        global: false,\n        realm: false,\n        includeDefault: false,\n      },\n      collectErrors: Error[]\n    ) {\n      return importFullConfiguration({\n        importData,\n        options,\n        collectErrors,\n        state,\n      });\n    },\n  };\n};\n\n/**\n * Full export options\n */\nexport interface FullExportOptions {\n  /**\n   * Use string arrays to store multi-line text in scripts.\n   */\n  useStringArrays: boolean;\n  /**\n   * Do not include decoded variable value in export\n   */\n  noDecode: boolean;\n  /**\n   * Include x and y coordinate positions of the journey/tree nodes.\n   */\n  coords: boolean;\n  /**\n   * Include default scripts in export if true\n   */\n  includeDefault: boolean;\n}\n\n/**\n * Full import options\n */\nexport interface FullImportOptions {\n  /**\n   * Generate new UUIDs for all journey nodes during import.\n   */\n  reUuidJourneys: boolean;\n  /**\n   * Generate new UUIDs for all scripts during import.\n   */\n  reUuidScripts: boolean;\n  /**\n   * Indicates whether to remove previously existing services of the same id before importing\n   */\n  cleanServices: boolean;\n  /**\n   * Indicates whether to import service(s) as global services\n   */\n  global: boolean;\n  /**\n   * Indicates whether to import service(s) to the current realm\n   */\n  realm: boolean;\n  /**\n   * Include default scripts in import if true\n   */\n  includeDefault: boolean;\n}\n\nexport interface FullExportInterface {\n  meta?: ExportMetaData;\n  agents: Record<string, AgentSkeleton> | undefined;\n  application: Record<string, OAuth2ClientSkeleton> | undefined;\n  authentication: AuthenticationSettingsSkeleton | undefined;\n  config: Record<string, IdObjectSkeletonInterface> | undefined;\n  emailTemplate: Record<string, EmailTemplateSkeleton> | undefined;\n  idp: Record<string, SocialIdpSkeleton> | undefined;\n  managedApplication: Record<string, ApplicationSkeleton> | undefined;\n  policy: Record<string, PolicySkeleton> | undefined;\n  policyset: Record<string, PolicySetSkeleton> | undefined;\n  resourcetype: Record<string, ResourceTypeSkeleton> | undefined;\n  saml:\n    | {\n        hosted: Record<string, Saml2ProviderSkeleton>;\n        remote: Record<string, Saml2ProviderSkeleton>;\n        metadata: Record<string, string[]>;\n        cot: Record<string, CircleOfTrustSkeleton> | undefined;\n      }\n    | undefined;\n  script: Record<string, ScriptSkeleton> | undefined;\n  secrets: Record<string, SecretSkeleton> | undefined;\n  service: Record<string, AmServiceSkeleton> | undefined;\n  theme: Record<string, ThemeSkeleton> | undefined;\n  trees: Record<string, SingleTreeExportInterface> | undefined;\n  variables: Record<string, VariableSkeleton> | undefined;\n}\n\n/**\n * Export full configuration\n * @param {FullExportOptions} options export options\n */\nexport async function exportFullConfiguration({\n  options = {\n    useStringArrays: true,\n    noDecode: false,\n    coords: true,\n    includeDefault: false,\n  },\n  collectErrors,\n  state,\n}: {\n  options: FullExportOptions;\n  collectErrors?: Error[];\n  state: State;\n}): Promise<FullExportInterface> {\n  let errors: Error[] = [];\n  let throwErrors: boolean = true;\n  if (collectErrors && Array.isArray(collectErrors)) {\n    throwErrors = false;\n    errors = collectErrors;\n  }\n  const { useStringArrays, noDecode, coords, includeDefault } = options;\n  const stateObj = { state };\n  //Export saml2 providers and circle of trusts\n  let saml = (\n    (await exportOrImportWithErrorHandling(\n      exportSaml2Providers,\n      stateObj,\n      errors\n    )) as CirclesOfTrustExportInterface\n  )?.saml;\n  const cotExport = await exportOrImportWithErrorHandling(\n    exportCirclesOfTrust,\n    stateObj,\n    errors\n  );\n  if (saml) {\n    saml.cot = cotExport?.saml.cot;\n  } else {\n    saml = cotExport?.saml;\n  }\n  //Create full export\n  const fullExport = {\n    meta: getMetadata(stateObj),\n    agents: (\n      await exportOrImportWithErrorHandling(exportAgents, stateObj, errors)\n    )?.agents,\n    application: (\n      await exportOrImportWithErrorHandling(\n        exportOAuth2Clients,\n        {\n          options: { deps: false, useStringArrays },\n          state,\n        },\n        errors\n      )\n    )?.application,\n    authentication: (\n      await exportOrImportWithErrorHandling(\n        exportAuthenticationSettings,\n        stateObj,\n        errors\n      )\n    )?.authentication,\n    config: (\n      await exportOrImportWithErrorHandling(\n        exportConfigEntities,\n        stateObj,\n        errors\n      )\n    )?.config,\n    emailTemplate: (\n      await exportOrImportWithErrorHandling(\n        exportEmailTemplates,\n        stateObj,\n        errors\n      )\n    )?.emailTemplate,\n    idp: (\n      await exportOrImportWithErrorHandling(\n        exportSocialIdentityProviders,\n        stateObj,\n        errors\n      )\n    )?.idp,\n    managedApplication: (\n      await exportOrImportWithErrorHandling(\n        exportApplications,\n        {\n          options: { deps: false, useStringArrays },\n          state,\n        },\n        errors\n      )\n    )?.managedApplication,\n    policy: (\n      await exportOrImportWithErrorHandling(\n        exportPolicies,\n        {\n          options: { deps: false, prereqs: false, useStringArrays },\n          state,\n        },\n        errors\n      )\n    )?.policy,\n    policyset: (\n      await exportOrImportWithErrorHandling(\n        exportPolicySets,\n        {\n          options: { deps: false, prereqs: false, useStringArrays },\n          state,\n        },\n        errors\n      )\n    )?.policyset,\n    resourcetype: (\n      await exportOrImportWithErrorHandling(\n        exportResourceTypes,\n        stateObj,\n        errors\n      )\n    )?.resourcetype,\n    saml,\n    script: (\n      await exportOrImportWithErrorHandling(\n        exportScripts,\n        {\n          includeDefault,\n          state,\n        },\n        errors\n      )\n    )?.script,\n    secrets: (\n      await exportOrImportWithErrorHandling(exportSecrets, stateObj, errors)\n    )?.secrets,\n    service: {\n      ...(\n        await exportOrImportWithErrorHandling(\n          exportServices,\n          {\n            globalConfig: true,\n            state,\n          },\n          errors\n        )\n      )?.service,\n      ...(\n        await exportOrImportWithErrorHandling(\n          exportServices,\n          {\n            globalConfig: false,\n            state,\n          },\n          errors\n        )\n      )?.service,\n    },\n    theme: (\n      await exportOrImportWithErrorHandling(exportThemes, stateObj, errors)\n    )?.theme,\n    trees: (\n      await exportOrImportWithErrorHandling(\n        exportJourneys,\n        {\n          options: { deps: false, useStringArrays, coords },\n          state,\n        },\n        errors\n      )\n    )?.trees,\n    variables: (\n      await exportOrImportWithErrorHandling(\n        exportVariables,\n        {\n          noDecode,\n          state,\n        },\n        errors\n      )\n    )?.variables,\n  };\n  if (throwErrors && errors.length > 0) {\n    throw new FrodoError(`Error exporting full config`, errors);\n  }\n  return fullExport;\n}\n\n/**\n * Import full configuration\n * @param {FullExportInterface} importData import data\n * @param {FullImportOptions} options import options\n */\nexport async function importFullConfiguration({\n  importData,\n  options = {\n    reUuidJourneys: false,\n    reUuidScripts: false,\n    cleanServices: false,\n    global: false,\n    realm: false,\n    includeDefault: false,\n  },\n  collectErrors,\n  state,\n}: {\n  importData: FullExportInterface;\n  options: FullImportOptions;\n  collectErrors?: Error[];\n  state: State;\n}): Promise<void> {\n  let errors: Error[] = [];\n  let throwErrors: boolean = true;\n  if (collectErrors && Array.isArray(collectErrors)) {\n    throwErrors = false;\n    errors = collectErrors;\n  }\n  const {\n    reUuidJourneys,\n    reUuidScripts,\n    cleanServices,\n    global,\n    realm,\n    includeDefault,\n  } = options;\n  const indicatorId = createProgressIndicator({\n    total: 16,\n    message: 'Importing everything...',\n    state,\n  });\n  // Order of imports matter here since we want dependencies to be imported first. For example, journeys depend on a lot of things, so they are last, and many things depend on scripts, so they are first.\n  updateProgressIndicator({\n    id: indicatorId,\n    message: `Importing Scripts...`,\n    state,\n  });\n  await exportOrImportWithErrorHandling(\n    importScripts,\n    {\n      scriptName: '',\n      importData,\n      options: {\n        reUuid: reUuidScripts,\n        includeDefault,\n      },\n      validate: false,\n      state,\n    },\n    errors\n  );\n  updateProgressIndicator({\n    id: indicatorId,\n    message: `Importing Authentication Settings...`,\n    state,\n  });\n  await exportOrImportWithErrorHandling(\n    importAuthenticationSettings,\n    {\n      importData,\n      state,\n    },\n    errors\n  );\n  updateProgressIndicator({\n    id: indicatorId,\n    message: `Importing Agents...`,\n    state,\n  });\n  await exportOrImportWithErrorHandling(\n    importAgents,\n    { importData, state },\n    errors\n  );\n  updateProgressIndicator({\n    id: indicatorId,\n    message: `Importing IDM Config Entities...`,\n    state,\n  });\n  await exportOrImportWithErrorHandling(\n    importConfigEntities,\n    {\n      importData,\n      options: { validate: false },\n      state,\n    },\n    errors\n  );\n  updateProgressIndicator({\n    id: indicatorId,\n    message: `Importing Email Templates...`,\n    state,\n  });\n  await exportOrImportWithErrorHandling(\n    importEmailTemplates,\n    {\n      importData,\n      state,\n    },\n    errors\n  );\n  updateProgressIndicator({\n    id: indicatorId,\n    message: `Importing Resource Types...`,\n    state,\n  });\n  await exportOrImportWithErrorHandling(\n    importResourceTypes,\n    {\n      importData,\n      state,\n    },\n    errors\n  );\n  updateProgressIndicator({\n    id: indicatorId,\n    message: `Importing Circles of Trust...`,\n    state,\n  });\n  await exportOrImportWithErrorHandling(\n    importCirclesOfTrust,\n    {\n      importData,\n      state,\n    },\n    errors\n  );\n  updateProgressIndicator({\n    id: indicatorId,\n    message: `Importing Services...`,\n    state,\n  });\n  await exportOrImportWithErrorHandling(\n    importServices,\n    {\n      importData,\n      options: { clean: cleanServices, global, realm },\n      state,\n    },\n    errors\n  );\n  updateProgressIndicator({\n    id: indicatorId,\n    message: `Importing Themes...`,\n    state,\n  });\n  await exportOrImportWithErrorHandling(\n    importThemes,\n    {\n      importData,\n      state,\n    },\n    errors\n  );\n  updateProgressIndicator({\n    id: indicatorId,\n    message: `Importing Saml2 Providers...`,\n    state,\n  });\n  await exportOrImportWithErrorHandling(\n    importSaml2Providers,\n    {\n      importData,\n      options: { deps: false },\n      state,\n    },\n    errors\n  );\n  updateProgressIndicator({\n    id: indicatorId,\n    message: `Importing Social Identity Providers...`,\n    state,\n  });\n  await exportOrImportWithErrorHandling(\n    importSocialIdentityProviders,\n    {\n      importData,\n      options: { deps: false },\n      state,\n    },\n    errors\n  );\n  updateProgressIndicator({\n    id: indicatorId,\n    message: `Importing OAuth2 Clients...`,\n    state,\n  });\n  await exportOrImportWithErrorHandling(\n    importOAuth2Clients,\n    {\n      importData,\n      options: { deps: false },\n      state,\n    },\n    errors\n  );\n  updateProgressIndicator({\n    id: indicatorId,\n    message: `Importing Applications...`,\n    state,\n  });\n  await exportOrImportWithErrorHandling(\n    importApplications,\n    {\n      importData,\n      options: { deps: false },\n      state,\n    },\n    errors\n  );\n  updateProgressIndicator({\n    id: indicatorId,\n    message: `Importing Policy Sets...`,\n    state,\n  });\n  await exportOrImportWithErrorHandling(\n    importPolicySets,\n    {\n      importData,\n      options: { deps: false, prereqs: false },\n      state,\n    },\n    errors\n  );\n  updateProgressIndicator({\n    id: indicatorId,\n    message: `Importing Policies...`,\n    state,\n  });\n  await exportOrImportWithErrorHandling(\n    importPolicies,\n    {\n      importData,\n      options: { deps: false, prereqs: false },\n      state,\n    },\n    errors\n  );\n  updateProgressIndicator({\n    id: indicatorId,\n    message: `Importing Journeys...`,\n    state,\n  });\n  await exportOrImportWithErrorHandling(\n    importJourneys,\n    {\n      importData,\n      options: { deps: false, reUuid: reUuidJourneys },\n      state,\n    },\n    errors\n  );\n  stopProgressIndicator({\n    id: indicatorId,\n    message: 'Finished Importing Everything!',\n    status: 'success',\n    state,\n  });\n  if (throwErrors && errors.length > 0) {\n    throw new FrodoError(`Error importing full config`, errors);\n  }\n}\n","import util from 'util';\n\nimport { State } from '../../shared/State';\nimport { getHostBaseUrl } from '../../utils/ForgeRockUtils';\nimport { generateAmApi } from '../BaseApi';\n\nconst envInfoURLTemplate = '%s/environment/info';\n\nconst apiVersion = 'protocol=1.0,resource=1.0';\nconst getApiConfig = () => ({\n  path: `/environment/info`,\n  apiVersion,\n});\n\nexport interface EnvInfoInterface {\n  immutable: boolean;\n  locked: boolean;\n  region: string;\n  tier: string;\n  warning_message_html: string;\n  message_box_title: string;\n  message_box_html: string;\n  message_variant: string;\n  config_promotion_done: boolean;\n  placeholder_management: 'CUSTOMER' | 'SRE';\n  placeholder_management_migration_date: string;\n}\n\n/**\n * Get info about the environment\n * @returns {Promise<EnvInfoInterface>} a promise that resolves to an environment info object\n */\nexport async function getEnvInfo({\n  state,\n}: {\n  state: State;\n}): Promise<EnvInfoInterface> {\n  const urlString = util.format(\n    envInfoURLTemplate,\n    getHostBaseUrl(state.getHost())\n  );\n  const { data } = await generateAmApi({\n    resource: getApiConfig(),\n    requestOverride: {},\n    state,\n  }).get(urlString, {\n    withCredentials: true,\n  });\n  return data as EnvInfoInterface;\n}\n","import { EnvInfoInterface, getEnvInfo } from '../api/cloud/EnvInfoApi';\nimport { getServerVersionInfo } from '../api/ServerInfoApi';\nimport Constants from '../shared/Constants';\nimport { State } from '../shared/State';\nimport { getServiceAccount } from './cloud/ServiceAccountOps';\nimport { FrodoError } from './FrodoError';\n\nexport type Info = {\n  /**\n   * Get info about the platform instance\n   * @returns {Promise<PlatformInfo>} a promise that resolves to a json blob with information about the instance and tokens\n   */\n  getInfo(): Promise<PlatformInfo>;\n};\n\nexport default (state: State): Info => {\n  return {\n    /**\n     * Get info about the platform instance\n     * @returns {Promise<PlatformInfo>} a promise that resolves to a json blob with information about the instance and tokens\n     */\n    getInfo(): Promise<PlatformInfo> {\n      return getInfo(state);\n    },\n  };\n};\n\nexport interface PlatformInfoInterface {\n  host: string;\n  authenticatedSubject: string;\n  amVersion: string;\n  cookieName: string;\n  sessionToken: string;\n  bearerToken?: string;\n  deploymentType: string;\n}\n\nexport type PlatformInfo = PlatformInfoInterface & Partial<EnvInfoInterface>;\n\nasync function getCloudInfo(state: State): Promise<Partial<EnvInfoInterface>> {\n  let info: Partial<EnvInfoInterface> = {};\n  info = await getEnvInfo({ state });\n  delete info.message_box_html;\n  delete info.message_box_title;\n  delete info.message_variant;\n  delete info.warning_message_html;\n  if (!info.placeholder_management_migration_date)\n    delete info.placeholder_management_migration_date;\n  return info;\n}\n\nasync function getAmVersion(state: State): Promise<string> {\n  const versionObj = await getServerVersionInfo({ state });\n  const amVersion = `${versionObj['version']} Build ${versionObj['revision']} (${versionObj['date']})`;\n  return amVersion;\n}\n\nasync function getAuthenticatedSubject(state: State): Promise<string> {\n  let subjectString = `${state.getUsername()} (User)`;\n  if (state.getUseBearerTokenForAmApis()) {\n    const name = (\n      await getServiceAccount({\n        serviceAccountId: state.getServiceAccountId(),\n        state,\n      })\n    ).name;\n    subjectString = `${name} [${state.getServiceAccountId()}] (Service Account)`;\n  }\n  return subjectString;\n}\n\n/**\n * Get info about the platform instance\n * @param {State} state library state\n * @returns {Promise<PlatformInfo>} a promise that resolves to a json blob with information about the instance and tokens\n */\nexport async function getInfo(state: State): Promise<PlatformInfo> {\n  try {\n    const info: PlatformInfo = {\n      host: state.getHost(),\n      amVersion: await getAmVersion(state),\n      authenticatedSubject: await getAuthenticatedSubject(state),\n      deploymentType: state.getDeploymentType(),\n      cookieName: state.getCookieName(),\n      sessionToken: state.getCookieValue(),\n      // only add bearerToken if we have it\n      ...(state.getBearerToken() && { bearerToken: state.getBearerToken() }),\n      // only add cloud env info if deployment type is cloud\n      ...(state.getDeploymentType() === Constants.CLOUD_DEPLOYMENT_TYPE_KEY &&\n        (await getCloudInfo(state))),\n    };\n    return info;\n  } catch (error) {\n    throw new FrodoError(`Error getting info`, error);\n  }\n}\n","import util from 'util';\n\nimport { State } from '../shared/State';\nimport { getHostBaseUrl } from '../utils/ForgeRockUtils';\nimport { IdObjectSkeletonInterface, PagedResult } from './ApiTypes';\nimport { generateAmApi } from './BaseApi';\n\nconst realmsListURLTemplate = '%s/json/global-config/realms/?_queryFilter=true';\nconst realmURLTemplate = '%s/json/global-config/realms/%s';\nconst createRealmURLTemplate = '%s/json/global-config/realms?_action=create';\n\nconst apiVersion = 'protocol=2.0,resource=1.0';\nconst getApiConfig = () => {\n  return {\n    apiVersion,\n  };\n};\n\nexport type RealmSkeleton = IdObjectSkeletonInterface & {\n  parentPath: string;\n  active: boolean;\n  name: string;\n  aliases: string[];\n};\n\n/**\n * Get all realms\n * @returns {Promise<PagedResult<RealmSkeleton>>} a promise that resolves to an object containing an array of realm objects\n */\nexport async function getRealms({\n  state,\n}: {\n  state: State;\n}): Promise<PagedResult<RealmSkeleton>> {\n  const urlString = util.format(realmsListURLTemplate, state.getHost());\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get(\n    urlString,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Get realm by id\n * @param {string} realmId realm id\n * @returns {Promise} a promise that resolves to an object containing a realm object\n */\nexport async function getRealm({\n  realmId,\n  state,\n}: {\n  realmId: string;\n  state: State;\n}): Promise<RealmSkeleton> {\n  const urlString = util.format(realmURLTemplate, state.getHost(), realmId);\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).get(\n    urlString,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\nconst realmTemplate: RealmSkeleton = {\n  name: '',\n  active: true,\n  parentPath: '/',\n  aliases: [],\n};\n\n/**\n * Create realm\n * @param {RealmSkeleton} realmData (optional) realm data\n * @returns {Promise<RealmSkeleton>} a promise that resolves to a realm object\n */\nexport async function createRealm({\n  realmData = realmTemplate,\n  state,\n}: {\n  realmData?: RealmSkeleton;\n  state: State;\n}): Promise<RealmSkeleton> {\n  const urlString = util.format(createRealmURLTemplate, state.getHost());\n  const { data } = await generateAmApi({\n    resource: getApiConfig(),\n    state,\n  }).post(urlString, realmData, {\n    withCredentials: true,\n  });\n  return data;\n}\n\n/**\n * Put realm\n * @param {string} realmId realm id\n * @param {RealmSkeleton} realmData realm config object\n * @returns {Promise<RealmSkeleton>} a promise that resolves to a realm object\n */\nexport async function putRealm({\n  realmId,\n  realmData,\n  state,\n}: {\n  realmId: string;\n  realmData: RealmSkeleton;\n  state: State;\n}): Promise<RealmSkeleton> {\n  const urlString = util.format(realmURLTemplate, state.getHost(), realmId);\n  const { data } = await generateAmApi({ resource: getApiConfig(), state }).put(\n    urlString,\n    realmData,\n    {\n      withCredentials: true,\n    }\n  );\n  return data;\n}\n\n/**\n * Delete realm\n * @param {string} realmId realm id\n * @returns {Promise<RealmSkeleton>} a promise that resolves to an object containing a realm object\n */\nexport async function deleteRealm({\n  realmId,\n  state,\n}: {\n  realmId: string;\n  state: State;\n}): Promise<RealmSkeleton> {\n  const urlString = util.format(\n    realmURLTemplate,\n    getHostBaseUrl(state.getHost()),\n    realmId\n  );\n  const { data } = await generateAmApi({\n    resource: getApiConfig(),\n    state,\n  }).delete(urlString, {\n    withCredentials: true,\n  });\n  return data;\n}\n","import {\n  createRealm as _createRealm,\n  deleteRealm as _deleteRealm,\n  getRealm as _getRealm,\n  getRealms as _getRealms,\n  putRealm as _putRealm,\n  RealmSkeleton,\n} from '../api/RealmApi';\nimport { State } from '../shared/State';\nimport { getRealmName } from '../utils/ForgeRockUtils';\n\nexport type Realm = {\n  /**\n   * Read all realms\n   * @returns {Promise<RealmSkeleton[]>} a promise resolving to an array of realm objects\n   */\n  readRealms(): Promise<RealmSkeleton[]>;\n  /**\n   * Read realm\n   * @param {string} realmId realm id\n   * @returns {Promise<RealmSkeleton>} a promise resolving to a realm object\n   */\n  readRealm(realmId: string): Promise<RealmSkeleton>;\n  /**\n   * Read realm by name\n   * @param {string} realmName realm name\n   * @returns {Promise<RealmSkeleton>} a promise resolving to a realm object\n   */\n  readRealmByName(realmName: string): Promise<RealmSkeleton>;\n  /**\n   * Create realm\n   * @param {string} realmName realm name\n   * @param {RealmSkeleton} realmData realm data\n   * @returns {Promise<RealmSkeleton>} a promise resolving to a realm object\n   */\n  createRealm(\n    realmName: string,\n    realmData?: RealmSkeleton\n  ): Promise<RealmSkeleton>;\n  /**\n   * Update realm\n   * @param {string} realmId realm id\n   * @param {RealmSkeleton} realmData realm data\n   * @returns {Promise<RealmSkeleton>} a promise resolving to a realm object\n   */\n  updateRealm(\n    realmId: string,\n    realmData: RealmSkeleton\n  ): Promise<RealmSkeleton>;\n  /**\n   * Delete realm\n   * @param {string} realmId realm id\n   * @returns {Promise<RealmSkeleton>} a promise resolving to a realm object\n   */\n  deleteRealm(realmId: string): Promise<RealmSkeleton>;\n  /**\n   * Delete realm by name\n   * @param {string} realmName realm name\n   * @returns {Promise<RealmSkeleton>} a promise resolving to a realm object\n   */\n  deleteRealmByName(realmName: string): Promise<RealmSkeleton>;\n  /**\n   * Add custom DNS domain name (realm DNS alias)\n   * @param {string} realmName realm name\n   * @param {string} domain domain name\n   * @returns {Promise<RealmSkeleton>} a promise resolving to a realm object\n   */\n  addCustomDomain(realmName: string, domain: string): Promise<RealmSkeleton>;\n  /**\n   * Remove custom DNS domain name (realm DNS alias)\n   * @param {string} realmName realm name\n   * @param {string} domain domain name\n   * @returns {Promise<RealmSkeleton>} a promise resolving to a realm object\n   */\n  removeCustomDomain(realmName: string, domain: string): Promise<RealmSkeleton>;\n\n  // Deprecated\n\n  /**\n   * Get all realms\n   * @returns {Promise<RealmSkeleton[]>} a promise resolving to an array of realm objects\n   * @deprecated since v2.0.0 use {@link Realm.readRealms | readRealms} instead\n   * ```javascript\n   * readRealms(): Promise<RealmSkeleton[]>\n   * ```\n   * @group Deprecated\n   */\n  getRealms(): Promise<RealmSkeleton[]>;\n  /**\n   * Get realm by name\n   * @param {string} realmName realm name\n   * @returns {Promise<RealmSkeleton>} a promise resolving to a realm object\n   * @deprecated since v2.0.0 use {@link Realm.readRealmByName | readRealmByName} instead\n   * ```javascript\n   * readRealmByName(realmName: string): Promise<RealmSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  getRealmByName(realmName: string): Promise<RealmSkeleton>;\n  /**\n   * Update realm\n   * @param {string} realmId realm id\n   * @param {RealmSkeleton} realmData realm data\n   * @returns {Promise<RealmSkeleton>} a promise resolving to a realm object\n   * @deprecated since v2.0.0 use {@link Realm.updateRealm | updateRealm} or {@link Realm.createRealm | createRealm} instead\n   * ```javascript\n   * updateRealm(realmId: string, realmData: RealmSkeleton): Promise<RealmSkeleton>\n   * createRealm(realmName: string, realmData: RealmSkeleton): Promise<RealmSkeleton>\n   * ```\n   * @group Deprecated\n   */\n  putRealm(realmId: string, realmData: RealmSkeleton): Promise<RealmSkeleton>;\n};\n\nexport default (state: State): Realm => {\n  return {\n    readRealms(): Promise<RealmSkeleton[]> {\n      return getRealms({ state });\n    },\n    readRealm(realmId: string): Promise<RealmSkeleton> {\n      return getRealm({ realmId, state });\n    },\n    readRealmByName(realmName: string): Promise<RealmSkeleton> {\n      return getRealmByName({ realmName, state });\n    },\n    createRealm(\n      realmName: string,\n      realmData?: RealmSkeleton\n    ): Promise<RealmSkeleton> {\n      return createRealm({ realmName, realmData, state });\n    },\n    updateRealm(\n      realmId: string,\n      realmData: RealmSkeleton\n    ): Promise<RealmSkeleton> {\n      return updateRealm({ realmId, realmData, state });\n    },\n    deleteRealm(realmId: string): Promise<RealmSkeleton> {\n      return deleteRealm({ realmId, state });\n    },\n    deleteRealmByName(realmName: string): Promise<RealmSkeleton> {\n      return deleteRealmByName({ realmName, state });\n    },\n    async addCustomDomain(\n      realmName: string,\n      domain: string\n    ): Promise<RealmSkeleton> {\n      return addCustomDomain({ realmName, domain, state });\n    },\n    async removeCustomDomain(\n      realmName: string,\n      domain: string\n    ): Promise<RealmSkeleton> {\n      return removeCustomDomain({ realmName, domain, state });\n    },\n\n    // Deprecated\n\n    getRealms(): Promise<RealmSkeleton[]> {\n      return getRealms({ state });\n    },\n    getRealmByName(realmName: string): Promise<RealmSkeleton> {\n      return getRealmByName({ realmName, state });\n    },\n    putRealm(\n      realmId: string,\n      realmData: RealmSkeleton\n    ): Promise<RealmSkeleton> {\n      return updateRealm({ realmId, realmData, state });\n    },\n  };\n};\n\n/**\n * Get all realms\n * @returns {Promise} a promise that resolves to an object containing an array of realm objects\n */\nexport async function getRealms({ state }: { state: State }) {\n  const { result } = await _getRealms({ state });\n  return result;\n}\n\n/**\n * Create realm\n * @param {string} realmName realm name\n * @param {RealmSkeleton} realmData realm data\n * @returns {Promise<RealmSkeleton>} a promise resolving to a realm object\n */\nexport async function createRealm({\n  realmName,\n  realmData = undefined,\n  state,\n}: {\n  realmName: string;\n  realmData?: RealmSkeleton;\n  state: State;\n}): Promise<RealmSkeleton> {\n  realmData.name = realmName;\n  return _createRealm({ realmData, state });\n}\n\n/**\n * Update realm\n * @param {string} realmId realm id\n * @param {RealmSkeleton} realmData realm config object\n * @returns {Promise<RealmSkeleton>} a promise that resolves to a realm object\n */\nexport async function updateRealm({\n  realmId,\n  realmData,\n  state,\n}: {\n  realmId: string;\n  realmData: RealmSkeleton;\n  state: State;\n}): Promise<RealmSkeleton> {\n  return _putRealm({ realmId, realmData, state });\n}\n\n/**\n * Get realm\n * @param {String} realmId realm id\n * @returns {Promise<RealmSkeleton>} a promise that resolves to a realm object\n */\nexport async function getRealm({\n  realmId,\n  state,\n}: {\n  realmId: string;\n  state: State;\n}): Promise<RealmSkeleton> {\n  return _getRealm({ realmId, state });\n}\n\n/**\n * Get realm by name\n * @param {string} realmName realm name\n * @returns {Promise<RealmSkeleton>} a promise that resolves to a realm object\n */\nexport async function getRealmByName({\n  realmName,\n  state,\n}: {\n  realmName: string;\n  state: State;\n}): Promise<RealmSkeleton> {\n  const realms = await getRealms({ state });\n  for (const realm of realms) {\n    if (getRealmName(realmName) === realm.name) {\n      return realm;\n    }\n  }\n  throw new Error(`Realm ${realmName} not found!`);\n}\n\n/**\n * Delete realm\n * @param {string} realmId realm id\n * @returns {Promise<RealmSkeleton>} a promise that resolves to an object containing a realm object\n */\nexport async function deleteRealm({\n  realmId,\n  state,\n}: {\n  realmId: string;\n  state: State;\n}): Promise<RealmSkeleton> {\n  return _deleteRealm({ realmId, state });\n}\n\n/**\n * Delete realm by name\n * @param {string} realmName realm name\n * @returns {Promise<RealmSkeleton>} a promise that resolves to a realm object\n */\nexport async function deleteRealmByName({\n  realmName,\n  state,\n}: {\n  realmName: string;\n  state: State;\n}): Promise<RealmSkeleton> {\n  const realms = await getRealms({ state });\n  for (const realm of realms) {\n    if (getRealmName(realmName) === realm.name) {\n      return deleteRealm({ realmId: realm._id, state });\n    }\n  }\n  throw new Error(`Realm ${realmName} not found!`);\n}\n\n/**\n * Add custom DNS domain name (realm DNS alias)\n * @param {string} realm realm name\n * @param {string} domain domain name\n * @returns {Promise<RealmSkeleton>} a promise that resolves to a realm object\n */\nexport async function addCustomDomain({\n  realmName,\n  domain,\n  state,\n}: {\n  realmName: string;\n  domain: string;\n  state: State;\n}): Promise<RealmSkeleton> {\n  try {\n    let realmData = await getRealmByName({ realmName, state });\n    let exists = false;\n    realmData.aliases.forEach((alias: string) => {\n      if (domain.toLowerCase() === alias.toLowerCase()) {\n        exists = true;\n      }\n    });\n    if (!exists) {\n      try {\n        realmData.aliases.push(domain.toLowerCase());\n        realmData = await _putRealm({\n          realmId: realmData._id,\n          realmData: realmData,\n          state,\n        });\n        return realmData;\n      } catch (error) {\n        error.message = `Error adding custom domain ${domain} to realm ${realmName}: ${error.message}`;\n        throw error;\n      }\n    }\n  } catch (error) {\n    error.message = `Error reading realm ${realmName}: ${error.message}`;\n    throw error;\n  }\n}\n\n/**\n * Remove custom DNS domain name (realm DNS alias)\n * @param {String} realm realm name\n * @param {String} domain domain name\n * @returns {Promise<RealmSkeleton>} a promise that resolves to a realm object\n */\nexport async function removeCustomDomain({\n  realmName,\n  domain,\n  state,\n}: {\n  realmName: string;\n  domain: string;\n  state: State;\n}): Promise<RealmSkeleton> {\n  try {\n    let realmData = await getRealmByName({ realmName, state });\n    const aliases = realmData.aliases.filter(\n      (alias: string) => domain.toLowerCase() !== alias.toLowerCase()\n    );\n    if (aliases.length < realmData.aliases.length) {\n      try {\n        realmData.aliases = aliases;\n        realmData = await _putRealm({\n          realmId: realmData._id,\n          realmData: realmData,\n          state,\n        });\n        return realmData;\n      } catch (error) {\n        error.message = `Error removing custom domain ${domain} from realm ${realmName}: ${error.message}`;\n        throw error;\n      }\n    }\n  } catch (error) {\n    error.message = `Error reading realm ${realmName}: ${error.message}`;\n    throw error;\n  }\n}\n","import util from 'util';\n\nimport { State } from '../shared/State';\nimport { getHostBaseUrl } from '../utils/ForgeRockUtils';\nimport { IdObjectSkeletonInterface } from './ApiTypes';\nimport { generateIdmApi } from './BaseApi';\n\nconst apiVersion = 'resource=1.0';\nconst apiConfig = { headers: { 'Accept-API-Version': apiVersion } };\n\nconst reconUrlTemplate = '%s/openidm/recon';\nconst reconByIdUrlTemplate = '%s/openidm/recon/%s';\nconst startReconUrlTemplate = '%s/openidm/recon?_action=recon&mapping=%s';\nconst startReconByIdUrlTemplate =\n  '%s/openidm/recon?_action=reconById&mapping=%s&id=%s';\nconst cancelReconUrlTemplate = '%s/openidm/recon/%s?_action=cancel';\n\nexport type ReconType = IdObjectSkeletonInterface & {\n  mapping: string;\n  state: 'SUCCESS' | string;\n  stage: 'COMPLETED_SUCCESS' | string;\n  stageDescription: string;\n  progress: {\n    source: { existing: { processed: number; total: string } };\n    target: {\n      existing: { processed: number; total: string };\n      created: number;\n      unchanged: number;\n      updated: number;\n      deleted: number;\n    };\n    links: { existing: { processed: number; total: string }; created: number };\n  };\n  situationSummary: {\n    SOURCE_IGNORED: number;\n    TARGET_CHANGED: number;\n    SOURCE_TARGET_CONFLICT: number;\n    FOUND_ALREADY_LINKED: number;\n    UNQUALIFIED: number;\n    ABSENT: number;\n    TARGET_IGNORED: number;\n    MISSING: number;\n    ALL_GONE: number;\n    UNASSIGNED: number;\n    AMBIGUOUS: number;\n    CONFIRMED: number;\n    LINK_ONLY: number;\n    SOURCE_MISSING: number;\n    FOUND: number;\n  };\n  statusSummary: { SUCCESS: number; FAILURE: number };\n  durationSummary: {\n    sourceQuery: {\n      min: number;\n      max: number;\n      mean: number;\n      count: number;\n      sum: number;\n      stdDev: number;\n    };\n    auditLog: {\n      min: number;\n      max: number;\n      mean: number;\n      count: number;\n      sum: number;\n      stdDev: number;\n    };\n    defaultPropertyMapping: {\n      min: number;\n      max: number;\n      mean: number;\n      count: number;\n      sum: number;\n      stdDev: number;\n    };\n    sourceLinkQuery: {\n      min: number;\n      max: number;\n      mean: number;\n      count: number;\n      sum: number;\n      stdDev: number;\n    };\n    updateTargetObject: {\n      min: number;\n      max: number;\n      mean: number;\n      count: number;\n      sum: number;\n      stdDev: number;\n    };\n    propertyMappingScript: {\n      min: number;\n      max: number;\n      mean: number;\n      count: number;\n      sum: number;\n      stdDev: number;\n    };\n    updateLastSync: {\n      min: number;\n      max: number;\n      mean: number;\n      count: number;\n      sum: number;\n      stdDev: number;\n    };\n    targetObjectQuery: {\n      min: number;\n      max: number;\n      mean: number;\n      count: number;\n      sum: number;\n      stdDev: number;\n    };\n    sourcePhase: {\n      min: number;\n      max: number;\n      mean: number;\n      count: number;\n      sum: number;\n      stdDev: number;\n    };\n  };\n  parameters: {\n    sourceIds: [string];\n    sourceQuery: {\n      resourceName: string;\n      _queryFilter: string;\n      _fields: string;\n    };\n    targetQuery: {\n      resourceName: string;\n      queryFilter: string;\n      _fields: string;\n    };\n  };\n  started: string;\n  ended: string;\n  duration: number;\n  sourceProcessedByNode: object;\n};\n\nexport type ReconStatusType = IdObjectSkeletonInterface & {\n  state: 'ACTIVE' | string;\n  action: 'cancel' | string;\n  status: 'INITIATED' | string;\n};\n\nexport async function getRecons({\n  state,\n}: {\n  state: State;\n}): Promise<ReconType[]> {\n  const urlString = util.format(\n    reconUrlTemplate,\n    getHostBaseUrl(state.getHost())\n  );\n  const { data } = await generateIdmApi({\n    requestOverride: apiConfig,\n    state,\n  }).get(urlString);\n  return data;\n}\n\nexport async function getRecon({\n  reconId,\n  state,\n}: {\n  reconId: string;\n  state: State;\n}): Promise<ReconType> {\n  const urlString = util.format(\n    reconByIdUrlTemplate,\n    getHostBaseUrl(state.getHost()),\n    reconId\n  );\n  const { data } = await generateIdmApi({\n    requestOverride: apiConfig,\n    state,\n  }).get(urlString);\n  return data;\n}\n\nexport async function startRecon({\n  mappingName,\n  state,\n}: {\n  mappingName: string;\n  state: State;\n}): Promise<ReconStatusType> {\n  const urlString = util.format(\n    startReconUrlTemplate,\n    getHostBaseUrl(state.getHost()),\n    mappingName\n  );\n  const { data } = await generateIdmApi({\n    requestOverride: apiConfig,\n    state,\n  }).post(urlString);\n  return data;\n}\n\nexport async function startReconById({\n  mappingName,\n  objectId,\n  state,\n}: {\n  mappingName: string;\n  objectId: string;\n  state: State;\n}): Promise<ReconStatusType> {\n  const urlString = util.format(\n    startReconByIdUrlTemplate,\n    getHostBaseUrl(state.getHost()),\n    mappingName,\n    objectId\n  );\n  const { data } = await generateIdmApi({\n    requestOverride: apiConfig,\n    state,\n  }).post(urlString);\n  return data;\n}\n\nexport async function cancelRecon({\n  reconId,\n  state,\n}: {\n  reconId: string;\n  state: State;\n}): Promise<ReconStatusType> {\n  const urlString = util.format(\n    cancelReconUrlTemplate,\n    getHostBaseUrl(state.getHost()),\n    reconId\n  );\n  const { data } = await generateIdmApi({\n    requestOverride: apiConfig,\n    state,\n  }).post(urlString);\n  return data;\n}\n","import {\n  cancelRecon as _cancelRecon,\n  getRecon as _getRecon,\n  getRecons as _getRecons,\n  ReconStatusType,\n  ReconType,\n  startRecon as _startRecon,\n  startReconById as _startReconById,\n} from '../api/ReconApi';\nimport { State } from '../shared/State';\n\nexport type Recon = {\n  /**\n   * Read all reconciliation runs\n   * @returns {Promise<ReconType[]>} a promise resolving to an array of recon objects\n   */\n  readRecons(): Promise<ReconType[]>;\n  /**\n   * Read recon\n   * @param {string} reconId id of the recon\n   * @returns {Promise<ReconType>} a promise resolving to a recon object\n   */\n  readRecon(reconId: string): Promise<ReconType>;\n  /**\n   * Start a reconciliation\n   * @param {string} mappingName mapping to reconcile\n   * @returns {Promise<ReconStatusType>} a promise resolving to a recon status object\n   */\n  startRecon(mappingName: string): Promise<ReconStatusType>;\n  /**\n   * Start a reconciliation by Id\n   * @param {string} mappingName mapping to reconcile\n   * @param {string} objectId id of object to reconcile\n   * @returns {Promise<ReconStatusType>} a promise resolving to a recon status object\n   */\n  startReconById(\n    mappingName: string,\n    objectId: string\n  ): Promise<ReconStatusType>;\n  /**\n   * Cancel a reconciliation\n   * @param {string} reconId id of the recon to cancel\n   * @returns {Promise<ReconStatusType>} a promise resolving to a recon status object\n   */\n  cancelRecon(reconId: string): Promise<ReconStatusType>;\n};\n\nexport default (state: State): Recon => {\n  return {\n    async readRecons(): Promise<ReconType[]> {\n      return readRecons({ state });\n    },\n    async readRecon(reconId: string): Promise<ReconType> {\n      return readRecon({ reconId, state });\n    },\n    async startRecon(mappingName: string): Promise<ReconStatusType> {\n      return startRecon({ mappingName, state });\n    },\n    async startReconById(\n      mappingName: string,\n      objectId: string\n    ): Promise<ReconStatusType> {\n      return startReconById({ mappingName, objectId, state });\n    },\n    async cancelRecon(reconId: string): Promise<ReconStatusType> {\n      return cancelRecon({ reconId, state });\n    },\n  };\n};\n\nexport async function readRecons({\n  state,\n}: {\n  state: State;\n}): Promise<ReconType[]> {\n  return _getRecons({ state });\n}\n\nexport async function readRecon({\n  reconId,\n  state,\n}: {\n  reconId: string;\n  state: State;\n}): Promise<ReconType> {\n  return _getRecon({ reconId, state });\n}\n\nexport async function startRecon({\n  mappingName,\n  state,\n}: {\n  mappingName: string;\n  state: State;\n}): Promise<ReconStatusType> {\n  return _startRecon({ mappingName, state });\n}\n\nexport async function startReconById({\n  mappingName,\n  objectId,\n  state,\n}: {\n  mappingName: string;\n  objectId: string;\n  state: State;\n}): Promise<ReconStatusType> {\n  return _startReconById({ mappingName, objectId, state });\n}\n\nexport async function cancelRecon({\n  reconId,\n  state,\n}: {\n  reconId: string;\n  state: State;\n}): Promise<ReconStatusType> {\n  return _cancelRecon({ reconId, state });\n}\n","import { generateReleaseApi } from '../api/BaseApi';\nimport { State } from '../shared/State';\nimport { getVersionFromPackage } from '../shared/Version';\n\nexport type Version = {\n  getVersion(): string;\n  getAllVersions(\n    endpoints: {\n      base: string;\n      path: string;\n    }[]\n  ): Promise<PromiseSettledResult<any>[]>;\n};\n\nexport default (state: State): Version => {\n  return {\n    getVersion() {\n      return getVersion({ state });\n    },\n\n    async getAllVersions(endpoints: { base: string; path: string }[]) {\n      return getAllVersions({ endpoints, state });\n    },\n  };\n};\n\nexport function getVersion({ state }: { state: State }) {\n  // must initialize state to avoid library initialization issues\n  if (state) return getVersionFromPackage();\n}\n\nexport async function getAllVersions({\n  endpoints,\n  state,\n}: {\n  endpoints: { base: string; path: string }[];\n  state: State;\n}) {\n  const reqPromises = [];\n  endpoints.forEach((item) => {\n    reqPromises.push(\n      generateReleaseApi({ baseUrl: item.base, state }).get(item.path)\n    );\n  });\n  const result = await Promise.allSettled(reqPromises);\n  return result;\n}\n","// instantiable modules\nimport AdminOps, { Admin } from '../ops/AdminOps';\nimport AgentOps, { Agent } from '../ops/AgentOps';\nimport ApplicationOps, { Application } from '../ops/ApplicationOps';\nimport AuthenticateOps, { Authenticate } from '../ops/AuthenticateOps';\nimport AuthenticationSettingsOps, {\n  AuthenticationSettings,\n} from '../ops/AuthenticationSettingsOps';\nimport CirclesOfTrustOps, { CirclesOfTrust } from '../ops/CirclesOfTrustOps';\nimport AdminFederationOps, {\n  AdminFederation,\n} from '../ops/cloud/AdminFederationOps';\nimport FeatureOps, { Feature } from '../ops/cloud/FeatureOps';\nimport LogOps, { Log } from '../ops/cloud/LogOps';\nimport SecretsOps, { Secret } from '../ops/cloud/SecretsOps';\nimport ServiceAccountOps, {\n  ServiceAccount,\n} from '../ops/cloud/ServiceAccountOps';\nimport StartupOps, { Startup } from '../ops/cloud/StartupOps';\nimport VariablesOps, { Variable } from '../ops/cloud/VariablesOps';\nimport ConfigOps, { Config } from '../ops/ConfigOps';\nimport ConnectionProfileOps, {\n  ConnectionProfile,\n} from '../ops/ConnectionProfileOps';\nimport ConnectorOps, { Connector } from '../ops/ConnectorOps';\nimport EmailTemplateOps, { EmailTemplate } from '../ops/EmailTemplateOps';\nimport IdmConfigOps, { IdmConfig } from '../ops/IdmConfigOps';\nimport IdmSystemOps, { IdmSystem } from '../ops/IdmSystemOps';\nimport IdpOps, { Idp } from '../ops/IdpOps';\nimport InfoOps, { Info } from '../ops/InfoOps';\nimport JoseOps, { Jose } from '../ops/JoseOps';\nimport JourneyOps, { Journey } from '../ops/JourneyOps';\nimport ManagedObjectOps, { ManagedObject } from '../ops/ManagedObjectOps';\nimport MappingOps, { Mapping } from '../ops/MappingOps';\nimport NodeOps, { Node } from '../ops/NodeOps';\nimport OAuth2ClientOps, { OAuth2Client } from '../ops/OAuth2ClientOps';\nimport OAuth2OidcOps, { OAuth2Oidc } from '../ops/OAuth2OidcOps';\nimport OAuth2ProviderOps, { OAuth2Provider } from '../ops/OAuth2ProviderOps';\nimport OAuth2TrustedJwtIssuerOps, {\n  OAuth2TrustedJwtIssuer,\n} from '../ops/OAuth2TrustedJwtIssuerOps';\nimport OrganizationOps, { Organization } from '../ops/OrganizationOps';\nimport PolicyOps, { Policy } from '../ops/PolicyOps';\nimport PolicySetOps, { PolicySet } from '../ops/PolicySetOps';\nimport RealmOps, { Realm } from '../ops/RealmOps';\nimport ReconOps, { Recon } from '../ops/ReconOps';\nimport ResourceTypeOps, { ResourceType } from '../ops/ResourceTypeOps';\nimport Saml2Ops, { Saml2 } from '../ops/Saml2Ops';\nimport ScriptOps, { Script } from '../ops/ScriptOps';\nimport ServiceOps, { Service } from '../ops/ServiceOps';\nimport SessionOps, { Session } from '../ops/SessionOps';\nimport ThemeOps, { Theme } from '../ops/ThemeOps';\nimport TokenCacheOps, { TokenCache } from '../ops/TokenCacheOps';\nimport VersionUtils, { Version } from '../ops/VersionUtils';\n// non-instantiable modules\nimport ConstantsImpl, { Constants } from '../shared/Constants';\nimport StateImpl, { State, StateInterface } from '../shared/State';\nimport Base64Utils, { Base64 } from '../utils/Base64Utils';\nimport ExportImportUtils, { ExportImport } from '../utils/ExportImportUtils';\nimport ForgeRockUtils, { FRUtils } from '../utils/ForgeRockUtils';\nimport JsonUtils, { Json } from '../utils/JsonUtils';\nimport ScriptValidationUtils, {\n  ScriptValidation,\n} from '../utils/ScriptValidationUtils';\n\n/**\n * Frodo Library\n */\nexport type Frodo = {\n  state: State;\n  admin: Admin;\n  agent: Agent;\n  app: Application;\n\n  authn: {\n    journey: Journey;\n    node: Node;\n    settings: AuthenticationSettings;\n  };\n\n  authz: {\n    policy: Policy;\n    policySet: PolicySet;\n    resourceType: ResourceType;\n  };\n\n  cloud: {\n    adminFed: AdminFederation;\n    feature: Feature;\n    log: Log;\n    secret: Secret;\n    serviceAccount: ServiceAccount;\n    startup: Startup;\n    variable: Variable;\n  };\n\n  config: Config;\n  conn: ConnectionProfile;\n  cache: TokenCache;\n\n  email: {\n    template: EmailTemplate;\n  };\n\n  idm: {\n    config: IdmConfig;\n    connector: Connector;\n    managed: ManagedObject;\n    mapping: Mapping;\n    organization: Organization;\n    recon: Recon;\n    system: IdmSystem;\n  };\n\n  info: Info;\n  login: Authenticate;\n\n  oauth2oidc: {\n    client: OAuth2Client;\n    endpoint: OAuth2Oidc;\n    external: Idp;\n    provider: OAuth2Provider;\n    issuer: OAuth2TrustedJwtIssuer;\n  };\n\n  realm: Realm;\n\n  saml2: {\n    circlesOfTrust: CirclesOfTrust;\n    entityProvider: Saml2;\n  };\n\n  script: Script;\n  service: Service;\n  session: Session;\n\n  theme: Theme;\n\n  utils: FRUtils &\n    ScriptValidation &\n    ExportImport &\n    Base64 & {\n      constants: Constants;\n      jose: Jose;\n      json: Json;\n      version: Version;\n    };\n\n  /**\n   * Create a new frodo instance\n   * @param {StateInterface} config Initial state configuration to use with the new instance\n   * @returns {Frodo} frodo instance\n   */\n  createInstance(config: StateInterface): Frodo;\n\n  /**\n   * Factory helper to create a frodo instance ready for logging in with an admin user account\n   * @param {string} host host base URL, e.g. 'https://openam-my-tenant.forgeblocks.com/am'\n   * @param {string} username admin account username\n   * @param {string} password admin account password\n   * @param {string} realm (optional) override default realm\n   * @param {string} deploymentType (optional) override deployment type ('cloud', 'forgeops', or 'classic')\n   * @param {boolean} allowInsecureConnection (optional) allow insecure connection\n   * @param {boolean} debug (optional) enable debug output\n   * @param {boolean} curlirize (optional) enable output of all library REST calls as curl commands\n   * @returns {Frodo} frodo instance\n   */\n  createInstanceWithAdminAccount(\n    host: string,\n    username: string,\n    password: string,\n    realm?: string,\n    deploymentType?: string,\n    allowInsecureConnection?: boolean,\n    debug?: boolean,\n    curlirize?: boolean\n  ): Frodo;\n\n  /**\n   * Factory helper to create a frodo instance ready for logging in with a service account\n   * @param {string} host host base URL, e.g. 'https://openam-my-tenant.forgeblocks.com/am'\n   * @param {string} serviceAccountId service account uuid\n   * @param {string} serviceAccountJwkStr service account JWK as stringified JSON\n   * @param {string} realm (optional) override default realm\n   * @param {string} deploymentType (optional) override deployment type ('cloud', 'forgeops', or 'classic')\n   * @param {boolean} allowInsecureConnection (optional) allow insecure connection\n   * @param {boolean} debug (optional) enable debug output\n   * @param {boolean} curlirize (optional) enable output of all library REST calls as curl commands\n   * @returns {Frodo} frodo instance\n   */\n  createInstanceWithServiceAccount(\n    host: string,\n    serviceAccountId: string,\n    serviceAccountJwkStr: string,\n    realm?: string,\n    deploymentType?: string,\n    allowInsecureConnection?: boolean,\n    debug?: boolean,\n    curlirize?: boolean\n  ): Frodo;\n};\n\n/**\n * Create a new frodo instance\n * @param {StateInterface} config Initial state configuration to use with the new instance\n * @returns {Frodo} frodo instance\n */\nconst FrodoLib = (config: StateInterface = {}): Frodo => {\n  const state = StateImpl(config);\n  return {\n    state: state,\n    admin: AdminOps(state),\n    agent: AgentOps(state),\n    app: ApplicationOps(state),\n\n    authn: {\n      journey: JourneyOps(state),\n      node: NodeOps(state),\n      settings: AuthenticationSettingsOps(state),\n    },\n\n    authz: {\n      policy: PolicyOps(state),\n      policySet: PolicySetOps(state),\n      resourceType: ResourceTypeOps(state),\n    },\n\n    cloud: {\n      adminFed: AdminFederationOps(state),\n      feature: FeatureOps(state),\n      log: LogOps(state),\n      secret: SecretsOps(state),\n      serviceAccount: ServiceAccountOps(state),\n      startup: StartupOps(state),\n      variable: VariablesOps(state),\n    },\n\n    config: ConfigOps(state),\n    conn: ConnectionProfileOps(state),\n    cache: TokenCacheOps(state),\n\n    email: {\n      template: EmailTemplateOps(state),\n    },\n\n    idm: {\n      config: IdmConfigOps(state),\n      connector: ConnectorOps(state),\n      managed: ManagedObjectOps(state),\n      mapping: MappingOps(state),\n      organization: OrganizationOps(state),\n      recon: ReconOps(state),\n      system: IdmSystemOps(state),\n    },\n\n    info: InfoOps(state),\n    login: AuthenticateOps(state),\n\n    oauth2oidc: {\n      client: OAuth2ClientOps(state),\n      endpoint: OAuth2OidcOps(state),\n      external: IdpOps(state),\n      provider: OAuth2ProviderOps(state),\n      issuer: OAuth2TrustedJwtIssuerOps(state),\n    },\n\n    realm: RealmOps(state),\n\n    saml2: {\n      circlesOfTrust: CirclesOfTrustOps(state),\n      entityProvider: Saml2Ops(state),\n    },\n\n    script: ScriptOps(state),\n    service: ServiceOps(state),\n    session: SessionOps(state),\n\n    theme: ThemeOps(state),\n\n    utils: {\n      ...ForgeRockUtils(state),\n      ...ScriptValidationUtils(state),\n      ...ExportImportUtils(state),\n      ...Base64Utils(),\n      constants: ConstantsImpl,\n      jose: JoseOps(state),\n      json: JsonUtils(),\n      version: VersionUtils(state),\n    },\n\n    createInstance,\n    createInstanceWithAdminAccount,\n    createInstanceWithServiceAccount,\n  };\n};\n\nfunction createInstance(config: StateInterface): Frodo {\n  const frodo = FrodoLib(config);\n  return frodo;\n}\n\nfunction createInstanceWithServiceAccount(\n  host: string,\n  serviceAccountId: string,\n  serviceAccountJwkStr: string,\n  realm: string = undefined,\n  deploymentType: string = undefined,\n  allowInsecureConnection = false,\n  debug = false,\n  curlirize = false\n): Frodo {\n  const config: StateInterface = {\n    host,\n    serviceAccountId,\n    serviceAccountJwk: JSON.parse(serviceAccountJwkStr),\n    realm,\n    deploymentType,\n    allowInsecureConnection,\n    debug,\n    curlirize,\n  };\n  const frodo = FrodoLib(config);\n  return frodo;\n}\n\nfunction createInstanceWithAdminAccount(\n  host: string,\n  username: string,\n  password: string,\n  realm: string = undefined,\n  deploymentType: string = undefined,\n  allowInsecureConnection = false,\n  debug = false,\n  curlirize = false\n): Frodo {\n  const config: StateInterface = {\n    host,\n    username,\n    password,\n    realm,\n    deploymentType,\n    allowInsecureConnection,\n    debug,\n    curlirize,\n  };\n  const frodo = FrodoLib(config);\n  return frodo;\n}\n\n/**\n * Default frodo instance\n *\n * @remarks\n *\n * If your application requires a single connection to a ForgeRock Identity Platform\n * instance at a time, then this default instance is all you need:\n *\n * In order to use the default {@link Frodo | frodo} instance, you must populate its {@link State | state} with the\n * minimum required information to login to your ForgeRock Identity Platform instance:\n *\n * ```javascript\n * // configure the state before invoking any library functions that require credentials\n * state.setHost('https://instance0/am');\n * state.setUsername('admin');\n * state.setPassword('p@ssw0rd!');\n *\n * // now the library can login\n * frodo.login.getTokens();\n *\n * // and perform operations\n * frodo.authn.journey.exportJourney('Login');\n * ```\n *\n * If your application needs to connect to multiple ForgeRock Identity Platform instances\n * simultaneously, then you will want to create additional frodo instances using any of\n * the available factory methods accessible from the default instance:\n *\n * {@link frodo.createInstance}\n * ```javascript\n * // use factory method to create a new Frodo instance\n * const instance1 = frodo.createInstance({\n *    host: 'https://instance1/am',\n *    username: 'admin',\n *    password: 'p@ssw0rd!',\n * });\n *\n * // now the instance can login\n * instance1.login.getTokens();\n *\n * // and perform operations\n * instance1.authn.journey.exportJourney('Login');\n * ```\n *\n * {@link frodo.createInstanceWithAdminAccount}\n * ```javascript\n * // use factory method to create a new Frodo instance ready to login with an admin user account\n * const instance2 = frodo.createInstanceWithAdminAccount(\n *   'https://instance2/am',\n *   'admin',\n *   'p@ssw0rd!'\n * );\n *\n * // now the instance can login\n * instance2.login.getTokens();\n *\n * // and perform operations\n * instance2.authn.journey.exportJourney('Login');\n * ```\n *\n * {@link frodo.createInstanceWithServiceAccount}\n * ```javascript\n * // use factory method to create a new Frodo instance ready to login with a service account\n * const instance3 = frodo.createInstanceWithServiceAccount(\n *   'https://instance3/am',\n *   'serviceAccount',\n *   '{\"k\":\"jwk\"}'\n * );\n *\n * // now the instance can login\n * instance3.login.getTokens();\n *\n * // and perform operations\n * instance3.authn.journey.exportJourney('Login');\n * ```\n */\nconst frodo = FrodoLib();\n\n/**\n * Default state instance\n *\n * @remarks\n *\n * {@link Frodo} maintains a {@link State | state} for each instance. The state is where Frodo gets configuration\n * information from like host to connecto to, username and password to use, whether to\n * allow insecure connections or not, etc. As the library operates, it updates its state.\n *\n * The default frodo instance contains an empty state instance by default. In order to\n * use the default frodo instance, you must populate its state with the minimum required\n * information to login to your ForgeRock Identity Platform instance:\n *\n * ```javascript\n * // configure the state before invoking any library functions that require credentials\n * state.setHost('https://instance0/am');\n * state.setUsername('admin');\n * state.setPassword('p@ssw0rd!');\n *\n * // now the library can login\n * frodo.login.getTokens();\n *\n * // and perform operations\n * frodo.authn.journey.exportJourney('Login');\n * ```\n */\nconst state = frodo.state;\n\nexport { frodo, FrodoLib, state };\n\nexport default FrodoLib;\n"],"mappings":"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","names":["port","decode","encode","qs","port","url","resolve","path","toString","stringify","fs","path","URL","util","uuidv4","state","name","url","url","path","keys","_key","state","name","version","path","curlirize","message","state","id","RECORD","REPLAY","PASSTHROUGH","STOPPED","global","aFunction","isObject","require$$0","document","require$$1","require$$2","anObject","toPrimitive","IE8_DOM_DEFINE","dP","createDesc","name","core","has","ctx","hide","spaces","fails","$export","defined","ws","parseInt","$parseInt","defined","toInteger","require$$0","cof","IObject","min","toIObject","toLength","toAbsoluteIndex","global","core","uid","require$$1","has","$keys","enumBugKeys","anObject","keys","getKeys","dP","document","IE_PROTO","PROTOTYPE","require$$2","dPs","Symbol","name","create","descriptor","setToStringTag","toObject","$iterCreate","TAG","IteratorPrototype","getPrototypeOf","hide","Iterators","redefine","$export","step","ITERATOR","classof","getIterFn","f","ctx","isArrayIter","call","aFunction","process","id","invoke","cel","html","Promise","notify","flush","promise","task","resolve","reject","isObject","newPromiseCapability","SPECIES","DESCRIPTORS","TypeError","isNode","newPromiseCapabilityModule","userAgent","run","console","perform","anInstance","require$$3","speciesConstructor","require$$4","require$$5","require$$6","LIBRARY","promiseResolve","require$$7","forOf","core","$export","fails","require$$0","keys","$keys","toObject","require$$1","META","require$$0","require$$1","id","require$$2","create","isObject","has","defineProperty","name","$Symbol","core","wksExt","getKeys","gOPS","isEnum","pIE","cof","$keys","toString","getOwnPropertyNames","toIObject","toPrimitive","IE8_DOM_DEFINE","createDesc","gOPD","$GOPD","dP","$DP","gOPN","gOPNExt","global","PROTOTYPE","wks","shared","ObjectProto","USE_NATIVE","$GOPS","DESCRIPTORS","$fails","_create","anObject","defineProperties","keys","enumKeys","getOwnPropertyDescriptor","Symbol","uid","redefine","require$$3","$export","wksDefine","getOwnPropertySymbols","toObject","stringify","replacer","isArray","require$$4","setToStringTag","$getOwnPropertyDescriptor","require$$0","require$$1","getOwnPropertyDescriptor","toIObject","Reflect","require$$0","keys","gOPN","anObject","gOPS","$defineProperty","createDesc","$export","toIObject","gOPD","ownKeys","createProperty","getOwnPropertyDescriptors","require$$1","$export","require$$0","require$$1","$Object","$export","require$$0","require$$1","$Object","defineProperty","_defineProperty","_Object$defineProperty","require$$4","ARRAY_FORMAT","_Symbol","supportsBlob","Blob","e","$export","require$$0","isArray","require$$1","resolve","state","name","timeout","state","state","util","apiVersion","getApiConfig","state","util","version","util","state","util","qs","util","apiVersion","getApiConfig","state","util","qs","util","apiVersion","getApiConfig","state","util","id","state","name","path","util","apiVersion","getApiConfig","state","util","state","createOAuth2Provider","deleteOAuth2Provider","uuidv4","util","apiVersion","getApiConfig","state","util","state","state","deleteScript","deleteScriptByName","deleteScripts","error","uuidv4","state","deleteOAuth2Client","error","id","keys","state","authorize","accessToken","getTokenInfo","clientCredentialsGrant","util","apiVersion","getApiConfig","state","util","id","state","deleteOAuth2TrustedJwtIssuer","error","id","util","id","state","util","moType","state","state","name","fs","path","max","state","userAgent","accessTokenUrlTemplate","util","url","URL","uuidv4","util","apiVersion","getApiConfig","state","util","getApiConfig","state","util","getApiConfig","state","error","util","apiVersion","getApiConfig","state","util","util","apiVersion","getApiConfig","state","util","state","id","state","createCircleOfTrust","updateCircleOfTrust","deleteCircleOfTrust","id","error","util","DEFAULT_PAGE_SIZE","state","util","state","testConnectorServers","readAvailableSystems","readSystemStatus","authenticateSystemObject","runSystemScript","DEFAULT_PAGE_SIZE","queryAllSystemObjectIds","querySystemObjects","createSystemObject","deleteSystemObject","state","deleteConfigEntity","testConnectorServers","error","state","moType","error","deleteConfigEntity","state","error","state","id","createManagedObject","deleteManagedObject","queryManagedObjects","state","createManagedObject","exportDependencies","importDependencies","deleteOAuth2Client","updateCircleOfTrust","deleteManagedObject","queryManagedObjects","id","state","importDependencies","util","state","util","util","getApiConfig","state","util","state","getFeatures","state","name","scopes","fs","path","fs","state","fs","state","fs","path","name","util","apiVersion","getApiConfig","state","util","state","getSessionInfo","fs","os","path","state","fileOptions","os","path","fs","expKey","error","state","authorize","version","getSessionInfo","accessToken","bodyFormData","name","timeout","util","apiVersion","getApiConfig","state","util","state","util","apiVersion","getApiConfig","state","util","getApiConfig","state","util","getApiConfig","state","util","state","util","state","getLogApiKey","isLogApiKeyValid","getLogApiKeys","createLogApiKey","deleteLogApiKey","tail","fetch","state","getLogApiKey","isLogApiKeyValid","getLogApiKeys","createLogApiKey","deleteLogApiKey","keys","tail","fetch","state","version","util","apiVersion","getApiConfig","state","util","getApiConfig","util","apiVersion","getApiConfig","state","util","state","deleteVariable","error","state","timeout","resolve","state","error","util","providerByTypeAndIdURLTemplate","getAllProvidersURLTemplate","apiVersion","getApiConfig","state","util","getAllProvidersURLTemplate","getApiConfig","putProviderByTypeAndId","id","state","util","providerByTypeAndIdURLTemplate","getApiConfig","deleteProviderByTypeAndId","state","error","putProviderByTypeAndId","deleteProviderByTypeAndId","axios","fs","uuidv4","util","apiVersion","state","util","util","apiVersion","state","util","id","state","createNode","deleteNode","state","createNode","deleteNode","uuidv4","state","uuidv4","error","id","state","containerNodes","state","axios","error","putProviderByTypeAndId","uuidv4","state","containerNodes","fs","util","apiVersion","getApiConfig","state","util","util","apiVersion","getApiConfig","state","util","util","apiVersion","getApiConfig","state","util","state","createPolicySet","updatePolicySet","deletePolicySet","response","getScripts","id","state","createResourceType","deleteResourceType","id","state","deletePolicy","error","getScripts","updatePolicySet","id","util","apiVersion","getApiConfig","getRealmPath","state","util","state","getListOfServices","result","id","state","global","util","envInfoURLTemplate","apiVersion","getApiConfig","state","util","state","name","util","apiVersion","getApiConfig","state","util","state","getRealms","getRealm","createRealm","deleteRealm","util","apiVersion","state","util","state","startRecon","startReconById","cancelRecon","state","state","frodo","curlirize"]}